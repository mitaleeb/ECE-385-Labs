
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00011df8 memsz 0x00011df8 flags r-x
    LOAD off    0x00012e18 vaddr 0x08011e18 paddr 0x08013904 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000153f0 vaddr 0x080153f0 paddr 0x080153f0 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000111e4  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a78  080113a0  080113a0  000123a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  08011e18  08013904  00012e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  080153f0  080153f0  000153f0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00014904  2**0
                  CONTENTS
  7 .sdram        00000000  08015550  08015550  00014904  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014904  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d28  00000000  00000000  00014928  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023647  00000000  00000000  00015650  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008f2e  00000000  00000000  00038c97  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b163  00000000  00000000  00041bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000022cc  00000000  00000000  0004cd28  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003333  00000000  00000000  0004eff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016d4c  00000000  00000000  00052327  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00069074  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001370  00000000  00000000  000690b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006d7be  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006d7c1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006d7cd  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006d7ce  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006d7cf  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006d7d3  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006d7d7  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006d7db  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006d7e6  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006d7f1  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0006d7fc  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000030  00000000  00000000  0006d804  2**0
                  CONTENTS, READONLY
 30 .jdi          000040bc  00000000  00000000  0006d834  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0006e33b  00000000  00000000  000718f0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
080113a0 l    d  .rodata	00000000 .rodata
08011e18 l    d  .rwdata	00000000 .rwdata
080153f0 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08015550 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
080153f0 l     O .bss	00000002 ctl_reg.3318
080153f2 l     O .bss	00000002 no_device.3319
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08011b5e l     O .rodata	00000010 zeroes.4181
08011b6e l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08004614 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080061bc l     F .text	00000008 __fp_lock
080061c4 l     F .text	00000008 __fp_unlock
080061d8 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08011e18 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0801225c l     O .rwdata	00000020 lc_ctype_charset
0801223c l     O .rwdata	00000020 lc_message_charset
0801227c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08011ba0 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08009708 l     F .text	000000fc __sprint_r.part.0
08011cd4 l     O .rodata	00000010 blanks.4125
08011cc4 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800c20c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800eb5c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800ec84 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800ecb0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800edb8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800eeb4 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800ef98 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800f17c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
080138f4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0800f430 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800f580 l     F .text	00000038 alt_dev_reg
08012864 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800f85c l     F .text	00000204 altera_avalon_jtag_uart_irq
0800fa60 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08010334 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080107cc l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08010924 l     F .text	00000050 alt_get_errno
08010974 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08008d48 g     F .text	00000074 _mprec_log10
08008e34 g     F .text	0000008c __any_on
0800b134 g     F .text	00000054 _isatty_r
08011bac g     O .rodata	00000028 __mprec_tinytens
0800f0c4 g     F .text	00000078 alt_main
08002260 g     F .text	000000b8 _puts_r
08015450 g     O .bss	00000100 alt_irq
0800b188 g     F .text	0000005c _lseek_r
08013904 g       *ABS*	00000000 __flash_rwdata_start
0800d57c g     F .text	00000084 .hidden __eqdf2
08015550 g       *ABS*	00000000 __alt_heap_start
08002224 g     F .text	0000003c printf
0800b3b0 g     F .text	0000009c _wcrtomb_r
08009600 g     F .text	0000005c __sseek
08006520 g     F .text	00000010 __sinit
0800b240 g     F .text	00000154 __swbuf_r
08006f98 g     F .text	0000007c _setlocale_r
08006378 g     F .text	00000078 __sfmoreglue
0800f15c g     F .text	00000020 __malloc_unlock
080020fc g     F .text	00000080 UsbGetRetryCnt
08007bf8 g     F .text	0000015c memmove
080001f8 g     F .text	00000084 IO_init
08006508 g     F .text	00000018 _cleanup
08007e78 g     F .text	000000a8 _Balloc
0800d600 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800b0dc g     F .text	00000058 _fstat_r
0801540c g     O .bss	00000004 errno
0800957c g     F .text	00000008 __seofread
08015414 g     O .bss	00000004 alt_argv
0801b8c4 g       *ABS*	00000000 _gp
0800f400 g     F .text	00000030 usleep
080126e4 g     O .rwdata	00000180 alt_fd_list
08010d84 g     F .text	00000090 alt_find_dev
08007ac0 g     F .text	00000138 memcpy
080061cc g     F .text	0000000c _cleanup_r
0800e984 g     F .text	000000d0 .hidden __floatsidf
080108ac g     F .text	00000078 alt_io_redirect
0800d6e0 g     F .text	000000e0 .hidden __ltdf2
080113a0 g       *ABS*	00000000 __DTOR_END__
08002318 g     F .text	00000014 puts
08009460 g     F .text	00000074 __fpclassifyd
08008ca4 g     F .text	000000a4 __ratio
0800ac40 g     F .text	00000024 __vfiprintf_internal
0800fc5c g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
080021f8 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800c328 g     F .text	00000008 .hidden __udivsi3
0800ee08 g     F .text	000000ac isatty
08011bfc g     O .rodata	000000c8 __mprec_tens
08007014 g     F .text	0000000c __locale_charset
08015408 g     O .bss	00000004 __malloc_top_pad
0800179c g     F .text	00000264 UsbGetConfigDesc2
080138cc g     O .rwdata	00000004 __mb_cur_max
08007044 g     F .text	0000000c _localeconv_r
080082a0 g     F .text	0000003c __i2b
08006984 g     F .text	000004a4 __sfvwrite_r
080094d4 g     F .text	00000054 _sbrk_r
0800b1e4 g     F .text	0000005c _read_r
080138ec g     O .rwdata	00000004 alt_max_fd
0800adec g     F .text	00000100 _fclose_r
0800618c g     F .text	00000030 fflush
08015404 g     O .bss	00000004 __malloc_max_sbrked_mem
0800c360 g     F .text	0000089c .hidden __adddf3
08008a4c g     F .text	0000011c __b2d
0800bbf0 g     F .text	0000061c .hidden __umoddi3
0800efe8 g     F .text	000000dc lseek
080138c4 g     O .rwdata	00000004 _global_impure_ptr
08008ec0 g     F .text	000005a0 _realloc_r
08015550 g       *ABS*	00000000 __bss_end
080106dc g     F .text	000000f0 alt_iic_isr_register
08010c60 g     F .text	00000104 alt_tick
0800b5b0 g     F .text	00000640 .hidden __udivdi3
0800af00 g     F .text	00000184 _fputwc_r
08011bd4 g     O .rodata	00000028 __mprec_bigtens
08008084 g     F .text	00000104 __s2b
0800ea54 g     F .text	000000a4 .hidden __floatunsidf
080087f4 g     F .text	00000060 __mcmp
080011fc g     F .text	000000fc UsbSetAddress
08006540 g     F .text	00000018 __fp_lock_all
08010690 g     F .text	0000004c alt_ic_irq_enabled
08010bc8 g     F .text	00000098 alt_alarm_stop
0801541c g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
080126bc g     O .rwdata	00000028 alt_dev_null
08010318 g     F .text	0000001c alt_dcache_flush_all
08008188 g     F .text	00000068 __hi0bits
080002f4 g     F .text	00000074 IO_read
0800e8fc g     F .text	00000088 .hidden __fixdfsi
08013904 g       *ABS*	00000000 __ram_rwdata_end
080138e4 g     O .rwdata	00000008 alt_dev_list
0800f480 g     F .text	00000100 write
08011e18 g       *ABS*	00000000 __ram_rodata_end
0800ed00 g     F .text	000000b8 fstat
0800d6e0 g     F .text	000000e0 .hidden __ledf2
0800217c g     F .text	0000007c UsbPrintMem
0800856c g     F .text	00000140 __pow5mult
0800981c g     F .text	00001424 ___vfiprintf_internal_r
080153fc g     O .bss	00000004 __nlocale_changed
0800c330 g     F .text	00000008 .hidden __umodsi3
08015550 g       *ABS*	00000000 end
0800f798 g     F .text	000000c4 altera_avalon_jtag_uart_init
080113a0 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800eaf8 g     F .text	00000064 .hidden __clzsi2
0800fe68 g     F .text	00000218 altera_avalon_jtag_uart_write
08006530 g     F .text	00000004 __sfp_lock_acquire
080079d8 g     F .text	000000e8 memchr
080023c4 g     F .text	000020fc ___vfprintf_internal_r
08001afc g     F .text	000000fc UsbClassRequest
08006694 g     F .text	000002f0 _free_r
08007020 g     F .text	00000010 __locale_mb_cur_max
080111d8 g     F .text	00000194 __call_exitprocs
080153f8 g     O .bss	00000004 __mlocale_changed
080138d0 g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
08015420 g     O .bss	00000004 _alt_tick_rate
080086ac g     F .text	00000148 __lshift
08015424 g     O .bss	00000004 _alt_nticks
0800f1cc g     F .text	00000104 read
0800f5ec g     F .text	00000048 alt_sys_init
080110c4 g     F .text	00000114 __register_exitproc
080082dc g     F .text	00000290 __multiply
0800fb08 g     F .text	00000068 altera_avalon_jtag_uart_close
0800c338 g     F .text	00000028 .hidden __mulsi3
08011e18 g       *ABS*	00000000 __ram_rwdata_start
080113a0 g       *ABS*	00000000 __ram_rodata_start
08015428 g     O .bss	00000028 __malloc_current_mallinfo
08008b68 g     F .text	0000013c __d2b
080012f8 g     F .text	00000144 UsbGetDeviceDesc1
0800f634 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08010f28 g     F .text	000000d4 alt_get_fd
080101c0 g     F .text	00000158 alt_busy_sleep
0800acc0 g     F .text	00000054 _close_r
08011048 g     F .text	0000007c memcmp
0800f6f4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08015550 g       *ABS*	00000000 __alt_stack_base
0800f744 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
080044e4 g     F .text	00000130 __swsetup_r
0800cbfc g     F .text	00000980 .hidden __divdf3
080063f0 g     F .text	00000118 __sfp
08008dbc g     F .text	00000078 __copybits
080122b4 g     O .rwdata	00000408 __malloc_av_
0800653c g     F .text	00000004 __sinit_lock_release
0800d7c0 g     F .text	0000086c .hidden __muldf3
08009528 g     F .text	00000054 __sread
08002078 g     F .text	00000084 UsbWaitTDListDone
08010e14 g     F .text	00000114 alt_find_file
08010384 g     F .text	000000a4 alt_dev_llist_insert
0800f13c g     F .text	00000020 __malloc_lock
0800f350 g     F .text	000000b0 sbrk
08005f64 g     F .text	00000228 _fflush_r
0800ad14 g     F .text	000000d8 _calloc_r
080153f0 g       *ABS*	00000000 __bss_start
08007d54 g     F .text	00000124 memset
08000368 g     F .text	00000d3c main
08015418 g     O .bss	00000004 alt_envp
08015400 g     O .bss	00000004 __malloc_max_total_mem
0800f694 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08001a00 g     F .text	000000fc UsbSetConfig
0800b394 g     F .text	0000001c __swbuf
0800965c g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0800aeec g     F .text	00000014 fclose
0800483c g     F .text	00001728 _dtoa_r
08007230 g     F .text	000007a8 _malloc_r
0800b524 g     F .text	00000030 __ascii_wctomb
080138f0 g     O .rwdata	00000004 alt_errno
08006e28 g     F .text	000000b8 _fwalk
0800c278 g     F .text	00000054 .hidden __divsi3
08006570 g     F .text	00000124 _malloc_trim_r
08001bf8 g     F .text	00000144 UsbGetHidDesc
080113a0 g       *ABS*	00000000 __CTOR_END__
08009664 g     F .text	000000a4 strcmp
080113a0 g       *ABS*	00000000 __flash_rodata_start
080113a0 g       *ABS*	00000000 __DTOR_LIST__
0800d57c g     F .text	00000084 .hidden __nedf2
080010f8 g     F .text	00000054 UsbRead
0800f5b8 g     F .text	00000034 alt_irq_init
0800f2d0 g     F .text	00000080 alt_release_fd
08011ce4 g     O .rodata	00000100 .hidden __clz_tab
080153f4 g     O .bss	00000004 _PathLocale
08010ffc g     F .text	00000014 atexit
0800ac64 g     F .text	0000005c _write_r
08007050 g     F .text	0000001c setlocale
080138c8 g     O .rwdata	00000004 _impure_ptr
08015410 g     O .bss	00000004 alt_argc
08010484 g     F .text	0000005c _do_dtors
0800703c g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
080089ec g     F .text	00000060 __ulp
08006558 g     F .text	00000018 __fp_unlock_all
080138dc g     O .rwdata	00000008 alt_fs_list
08001d3c g     F .text	0000033c UsbGetReportDesc
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800706c g     F .text	0000000c localeconv
080104fc g     F .text	00000050 alt_ic_isr_register
08013904 g       *ABS*	00000000 _edata
08015550 g       *ABS*	00000000 _end
080010a4 g     F .text	00000054 UsbWrite
080001bc g       *ABS*	00000000 __ram_exceptions_end
0800fb70 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
080105ec g     F .text	000000a4 alt_ic_irq_disable
08009584 g     F .text	0000007c __swrite
080138d4 g     O .rwdata	00000004 __malloc_trim_threshold
08010d64 g     F .text	00000020 altera_nios2_qsys_irq_init
08007030 g     F .text	0000000c __locale_msgcharset
08011010 g     F .text	00000038 exit
08006ee0 g     F .text	000000b8 _fwalk_reent
08008854 g     F .text	00000198 __mdiff
0800c2cc g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08006534 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800027c g     F .text	00000078 IO_write
0801136c g     F .text	00000034 _exit
08010080 g     F .text	00000140 alt_alarm_start
08007078 g     F .text	000001b8 __smakebuf_r
0800232c g     F .text	00000098 strlen
08010a68 g     F .text	00000160 open
0800d600 g     F .text	000000e0 .hidden __gedf2
080138d8 g     O .rwdata	00000004 __wctomb
08009804 g     F .text	00000018 __sprint_r
080104e0 g     F .text	0000001c alt_icache_flush_all
080138f8 g     O .rwdata	00000004 alt_priority_mask
0801054c g     F .text	000000a0 alt_ic_irq_enable
080044c0 g     F .text	00000024 __vfprintf_internal
0800b554 g     F .text	0000005c _wctomb_r
0800e02c g     F .text	000008d0 .hidden __subdf3
080081f0 g     F .text	000000b0 __lo0bits
08001610 g     F .text	0000018c UsbGetConfigDesc1
080138fc g     O .rwdata	00000008 alt_alarm_list
08010428 g     F .text	0000005c _do_ctors
0800114c g     F .text	000000b0 UsbSoftReset
0800b44c g     F .text	000000d8 wcrtomb
0800ebac g     F .text	000000d8 close
0800143c g     F .text	000001d4 UsbGetDeviceDesc2
0800ef18 g     F .text	00000080 alt_load
0800b084 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
08006538 g     F .text	00000004 __sinit_lock_acquire
08007f48 g     F .text	0000013c __multadd
08007f20 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08406f14 	ori	at,at,444
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00820074 	movhi	r2,2049
 8000130:	10951404 	addi	r2,r2,21584
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	00820074 	movhi	r2,2049
 8000148:	10951404 	addi	r2,r2,21584
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001c8:	d6ae3114 	ori	gp,gp,47300
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001d0:	1094fc14 	ori	r2,r2,21488

    movhi r3, %hi(__bss_end)
 80001d4:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001d8:	18d55414 	ori	r3,r3,21840

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	800ef180 	call	800ef18 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	800f0c40 	call	800f0c4 <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
 80001f8:	deffff04 	addi	sp,sp,-4
 80001fc:	df000015 	stw	fp,0(sp)
 8000200:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
 8000204:	00802004 	movi	r2,128
 8000208:	00c00044 	movi	r3,1
 800020c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 8000210:	00801804 	movi	r2,96
 8000214:	00c00044 	movi	r3,1
 8000218:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
 800021c:	00801404 	movi	r2,80
 8000220:	00c00044 	movi	r3,1
 8000224:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
 8000228:	00801c04 	movi	r2,112
 800022c:	00c00044 	movi	r3,1
 8000230:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
 8000234:	00800c04 	movi	r2,48
 8000238:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
 800023c:	00801004 	movi	r2,64
 8000240:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
 8000244:	00801804 	movi	r2,96
 8000248:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
 800024c:	00802004 	movi	r2,128
 8000250:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
 8000254:	00802004 	movi	r2,128
 8000258:	00c00044 	movi	r3,1
 800025c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 8000260:	00801804 	movi	r2,96
 8000264:	00c00044 	movi	r3,1
 8000268:	10c00005 	stb	r3,0(r2)
}
 800026c:	e037883a 	mov	sp,fp
 8000270:	df000017 	ldw	fp,0(sp)
 8000274:	dec00104 	addi	sp,sp,4
 8000278:	f800283a 	ret

0800027c <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
 800027c:	defffd04 	addi	sp,sp,-12
 8000280:	df000215 	stw	fp,8(sp)
 8000284:	df000204 	addi	fp,sp,8
 8000288:	2007883a 	mov	r3,r4
 800028c:	2805883a 	mov	r2,r5
 8000290:	e0fffe05 	stb	r3,-8(fp)
 8000294:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	(*otg_hpi_w) = 1;
 8000298:	00801c04 	movi	r2,112
 800029c:	00c00044 	movi	r3,1
 80002a0:	10c00005 	stb	r3,0(r2)
	(*otg_hpi_r) = 1;
 80002a4:	00801404 	movi	r2,80
 80002a8:	00c00044 	movi	r3,1
 80002ac:	10c00005 	stb	r3,0(r2)
	(*otg_hpi_address) = Address;
 80002b0:	00800c04 	movi	r2,48
 80002b4:	e0fffe03 	ldbu	r3,-8(fp)
 80002b8:	10c00015 	stw	r3,0(r2)
	(*otg_hpi_cs) = 0;
 80002bc:	00801804 	movi	r2,96
 80002c0:	10000005 	stb	zero,0(r2)
	(*otg_hpi_w) = 0;
 80002c4:	00801c04 	movi	r2,112
 80002c8:	10000005 	stb	zero,0(r2)
	(*otg_hpi_data) = Data;
 80002cc:	00801004 	movi	r2,64
 80002d0:	e0ffff0b 	ldhu	r3,-4(fp)
 80002d4:	10c00015 	stw	r3,0(r2)
	(*otg_hpi_w) = 1;
 80002d8:	00801c04 	movi	r2,112
 80002dc:	00c00044 	movi	r3,1
 80002e0:	10c00005 	stb	r3,0(r2)
}
 80002e4:	e037883a 	mov	sp,fp
 80002e8:	df000017 	ldw	fp,0(sp)
 80002ec:	dec00104 	addi	sp,sp,4
 80002f0:	f800283a 	ret

080002f4 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
 80002f4:	defffd04 	addi	sp,sp,-12
 80002f8:	df000215 	stw	fp,8(sp)
 80002fc:	df000204 	addi	fp,sp,8
 8000300:	2005883a 	mov	r2,r4
 8000304:	e0bfff05 	stb	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);
	(*otg_hpi_w) = 1;
 8000308:	00801c04 	movi	r2,112
 800030c:	00c00044 	movi	r3,1
 8000310:	10c00005 	stb	r3,0(r2)
	(*otg_hpi_r) = 1;
 8000314:	00801404 	movi	r2,80
 8000318:	00c00044 	movi	r3,1
 800031c:	10c00005 	stb	r3,0(r2)
	(*otg_hpi_address) = Address;
 8000320:	00800c04 	movi	r2,48
 8000324:	e0ffff03 	ldbu	r3,-4(fp)
 8000328:	10c00015 	stw	r3,0(r2)
	(*otg_hpi_cs) = 0;
 800032c:	00801804 	movi	r2,96
 8000330:	10000005 	stb	zero,0(r2)
	(*otg_hpi_r) = 0;
 8000334:	00801404 	movi	r2,80
 8000338:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
 800033c:	00801004 	movi	r2,64
 8000340:	10800017 	ldw	r2,0(r2)
 8000344:	e0bffe0d 	sth	r2,-8(fp)
	(*otg_hpi_r) = 1;
 8000348:	00801404 	movi	r2,80
 800034c:	00c00044 	movi	r3,1
 8000350:	10c00005 	stb	r3,0(r2)
	return temp;
 8000354:	e0bffe0b 	ldhu	r2,-8(fp)
}
 8000358:	e037883a 	mov	sp,fp
 800035c:	df000017 	ldw	fp,0(sp)
 8000360:	dec00104 	addi	sp,sp,4
 8000364:	f800283a 	ret

08000368 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
 8000368:	defff904 	addi	sp,sp,-28
 800036c:	dfc00615 	stw	ra,24(sp)
 8000370:	df000515 	stw	fp,20(sp)
 8000374:	df000504 	addi	fp,sp,20
	IO_init();
 8000378:	80001f80 	call	80001f8 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
 800037c:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
 8000380:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
 8000384:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
 8000388:	01020074 	movhi	r4,2049
 800038c:	2104e804 	addi	r4,r4,5024
 8000390:	80023180 	call	8002318 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
 8000394:	800114c0 	call	800114c <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 8000398:	01005104 	movi	r4,324
 800039c:	000b883a 	mov	r5,zero
 80003a0:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 80003a4:	01302414 	movui	r4,49296
 80003a8:	017fffd4 	movui	r5,65535
 80003ac:	80010a40 	call	80010a4 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
 80003b0:	01006d04 	movi	r4,436
 80003b4:	01409604 	movi	r5,600
 80003b8:	80010a40 	call	80010a4 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
 80003bc:	00811004 	movi	r2,1088
 80003c0:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
 80003c4:	e0bffb0b 	ldhu	r2,-20(fp)
 80003c8:	01005084 	movi	r4,322
 80003cc:	100b883a 	mov	r5,r2
 80003d0:	80010a40 	call	80010a4 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
 80003d4:	00808404 	movi	r2,528
 80003d8:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
 80003dc:	e0bffe0b 	ldhu	r2,-8(fp)
 80003e0:	01302314 	movui	r4,49292
 80003e4:	100b883a 	mov	r5,r2
 80003e8:	80010a40 	call	80010a4 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
 80003ec:	01007104 	movi	r4,452
 80003f0:	000b883a 	mov	r5,zero
 80003f4:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 80003f8:	01007184 	movi	r4,454
 80003fc:	000b883a 	mov	r5,zero
 8000400:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 8000404:	01007204 	movi	r4,456
 8000408:	000b883a 	mov	r5,zero
 800040c:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 8000410:	01007284 	movi	r4,458
 8000414:	000b883a 	mov	r5,zero
 8000418:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 800041c:	01007304 	movi	r4,460
 8000420:	000b883a 	mov	r5,zero
 8000424:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 8000428:	01007384 	movi	r4,462
 800042c:	000b883a 	mov	r5,zero
 8000430:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 8000434:	01007404 	movi	r4,464
 8000438:	000b883a 	mov	r5,zero
 800043c:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 8000440:	01007484 	movi	r4,466
 8000444:	000b883a 	mov	r5,zero
 8000448:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 800044c:	01007504 	movi	r4,468
 8000450:	000b883a 	mov	r5,zero
 8000454:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 8000458:	01007584 	movi	r4,470
 800045c:	000b883a 	mov	r5,zero
 8000460:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 8000464:	01007604 	movi	r4,472
 8000468:	000b883a 	mov	r5,zero
 800046c:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 8000470:	01007684 	movi	r4,474
 8000474:	000b883a 	mov	r5,zero
 8000478:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 800047c:	01007704 	movi	r4,476
 8000480:	000b883a 	mov	r5,zero
 8000484:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 8000488:	01007784 	movi	r4,478
 800048c:	000b883a 	mov	r5,zero
 8000490:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
 8000494:	01007084 	movi	r4,450
 8000498:	01401c84 	movi	r5,114
 800049c:	80010a40 	call	80010a4 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
 80004a0:	01000044 	movi	r4,1
 80004a4:	01738054 	movui	r5,52737
 80004a8:	800027c0 	call	800027c <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
 80004ac:	0001883a 	nop
 80004b0:	010000c4 	movi	r4,3
 80004b4:	80002f40 	call	80002f4 <IO_read>
 80004b8:	10bfffcc 	andi	r2,r2,65535
 80004bc:	103ffc26 	beq	r2,zero,80004b0 <__alt_data_end+0xfc0004b0>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 80004c0:	0001883a 	nop
 80004c4:	01000044 	movi	r4,1
 80004c8:	80002f40 	call	80002f4 <IO_read>
 80004cc:	10bfffcc 	andi	r2,r2,65535
 80004d0:	1083fb58 	cmpnei	r2,r2,4077
 80004d4:	10000826 	beq	r2,zero,80004f8 <main+0x190>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
 80004d8:	01000044 	movi	r4,1
 80004dc:	80002f40 	call	80002f4 <IO_read>
 80004e0:	10bfffcc 	andi	r2,r2,65535
 80004e4:	01020074 	movhi	r4,2049
 80004e8:	2104ee04 	addi	r4,r4,5048
 80004ec:	100b883a 	mov	r5,r2
 80004f0:	80022240 	call	8002224 <printf>
		goto USB_HOT_PLUG;
 80004f4:	003fa706 	br	8000394 <__alt_data_end+0xfc000394>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
 80004f8:	01020074 	movhi	r4,2049
 80004fc:	2104f704 	addi	r4,r4,5084
 8000500:	80022240 	call	8002224 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
 8000504:	01007084 	movi	r4,450
 8000508:	01401d04 	movi	r5,116
 800050c:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
 8000510:	01007104 	movi	r4,452
 8000514:	01400f04 	movi	r5,60
 8000518:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 800051c:	01007184 	movi	r4,454
 8000520:	000b883a 	mov	r5,zero
 8000524:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 8000528:	01007204 	movi	r4,456
 800052c:	000b883a 	mov	r5,zero
 8000530:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 8000534:	01007284 	movi	r4,458
 8000538:	000b883a 	mov	r5,zero
 800053c:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 8000540:	01007304 	movi	r4,460
 8000544:	000b883a 	mov	r5,zero
 8000548:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 800054c:	01007384 	movi	r4,462
 8000550:	000b883a 	mov	r5,zero
 8000554:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 8000558:	01007404 	movi	r4,464
 800055c:	000b883a 	mov	r5,zero
 8000560:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 8000564:	01007484 	movi	r4,466
 8000568:	000b883a 	mov	r5,zero
 800056c:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 8000570:	01007504 	movi	r4,468
 8000574:	000b883a 	mov	r5,zero
 8000578:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 800057c:	01007584 	movi	r4,470
 8000580:	000b883a 	mov	r5,zero
 8000584:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 8000588:	01007604 	movi	r4,472
 800058c:	000b883a 	mov	r5,zero
 8000590:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 8000594:	01007684 	movi	r4,474
 8000598:	000b883a 	mov	r5,zero
 800059c:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 80005a0:	01007704 	movi	r4,476
 80005a4:	000b883a 	mov	r5,zero
 80005a8:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 80005ac:	01007784 	movi	r4,478
 80005b0:	000b883a 	mov	r5,zero
 80005b4:	80010a40 	call	80010a4 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
 80005b8:	01000044 	movi	r4,1
 80005bc:	01738054 	movui	r5,52737
 80005c0:	800027c0 	call	800027c <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 80005c4:	0001883a 	nop
 80005c8:	01000044 	movi	r4,1
 80005cc:	80002f40 	call	80002f4 <IO_read>
 80005d0:	10bfffcc 	andi	r2,r2,65535
 80005d4:	1083fb58 	cmpnei	r2,r2,4077
 80005d8:	10000826 	beq	r2,zero,80005fc <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
 80005dc:	01000044 	movi	r4,1
 80005e0:	80002f40 	call	80002f4 <IO_read>
 80005e4:	10bfffcc 	andi	r2,r2,65535
 80005e8:	01020074 	movhi	r4,2049
 80005ec:	2104ee04 	addi	r4,r4,5048
 80005f0:	100b883a 	mov	r5,r2
 80005f4:	80022240 	call	8002224 <printf>
		goto USB_HOT_PLUG;
 80005f8:	003f6606 	br	8000394 <__alt_data_end+0xfc000394>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
 80005fc:	00b02284 	movi	r2,-16246
 8000600:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
 8000604:	008c0004 	movi	r2,12288
 8000608:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
 800060c:	00880004 	movi	r2,8192
 8000610:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
 8000614:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000618:	10bfffcc 	andi	r2,r2,65535
 800061c:	1009883a 	mov	r4,r2
 8000620:	80010f80 	call	80010f8 <UsbRead>
 8000624:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
 8000628:	d0a6cb8b 	ldhu	r2,-25810(gp)
 800062c:	e0fffb0b 	ldhu	r3,-20(fp)
 8000630:	1884703a 	and	r2,r3,r2
 8000634:	10bfffcc 	andi	r2,r2,65535
 8000638:	1000341e 	bne	r2,zero,800070c <main+0x3a4>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 800063c:	e03ffbc5 	stb	zero,-17(fp)
 8000640:	00001006 	br	8000684 <main+0x31c>
		{
			usleep(5*1000);
 8000644:	0104e204 	movi	r4,5000
 8000648:	800f4000 	call	800f400 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 800064c:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000650:	10bfffcc 	andi	r2,r2,65535
 8000654:	1009883a 	mov	r4,r2
 8000658:	80010f80 	call	80010f8 <UsbRead>
 800065c:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
 8000660:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000664:	e0fffb0b 	ldhu	r3,-20(fp)
 8000668:	1884703a 	and	r2,r3,r2
 800066c:	10bfffcc 	andi	r2,r2,65535
 8000670:	10000126 	beq	r2,zero,8000678 <main+0x310>
 8000674:	00000606 	br	8000690 <main+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 8000678:	e0bffbc3 	ldbu	r2,-17(fp)
 800067c:	10800044 	addi	r2,r2,1
 8000680:	e0bffbc5 	stb	r2,-17(fp)
 8000684:	e0bffbc3 	ldbu	r2,-17(fp)
 8000688:	10800170 	cmpltui	r2,r2,5
 800068c:	103fed1e 	bne	r2,zero,8000644 <__alt_data_end+0xfc000644>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
 8000690:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000694:	e0fffb0b 	ldhu	r3,-20(fp)
 8000698:	1884703a 	and	r2,r3,r2
 800069c:	10bfffcc 	andi	r2,r2,65535
 80006a0:	1000261e 	bne	r2,zero,800073c <main+0x3d4>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
 80006a4:	01020074 	movhi	r4,2049
 80006a8:	2104fb04 	addi	r4,r4,5100
 80006ac:	80023180 	call	8002318 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
 80006b0:	01020074 	movhi	r4,2049
 80006b4:	21050504 	addi	r4,r4,5140
 80006b8:	80023180 	call	8002318 <puts>
			while (!(usb_ctl_val & no_device))
 80006bc:	00000d06 	br	80006f4 <main+0x38c>
			{
				usb_ctl_val = UsbRead(ctl_reg);
 80006c0:	d0a6cb0b 	ldhu	r2,-25812(gp)
 80006c4:	10bfffcc 	andi	r2,r2,65535
 80006c8:	1009883a 	mov	r4,r2
 80006cc:	80010f80 	call	80010f8 <UsbRead>
 80006d0:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
 80006d4:	d0a6cb8b 	ldhu	r2,-25810(gp)
 80006d8:	e0fffb0b 	ldhu	r3,-20(fp)
 80006dc:	1884703a 	and	r2,r3,r2
 80006e0:	10bfffcc 	andi	r2,r2,65535
 80006e4:	10000126 	beq	r2,zero,80006ec <main+0x384>
					goto USB_HOT_PLUG;
 80006e8:	003f2a06 	br	8000394 <__alt_data_end+0xfc000394>

				usleep(2000);
 80006ec:	0101f404 	movi	r4,2000
 80006f0:	800f4000 	call	800f400 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
 80006f4:	d0a6cb8b 	ldhu	r2,-25810(gp)
 80006f8:	e0fffb0b 	ldhu	r3,-20(fp)
 80006fc:	1884703a 	and	r2,r3,r2
 8000700:	10bfffcc 	andi	r2,r2,65535
 8000704:	103fee26 	beq	r2,zero,80006c0 <__alt_data_end+0xfc0006c0>
 8000708:	00000c06 	br	800073c <main+0x3d4>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
 800070c:	e0fffb0b 	ldhu	r3,-20(fp)
 8000710:	e0bffc0b 	ldhu	r2,-16(fp)
 8000714:	1884703a 	and	r2,r3,r2
 8000718:	10bfffcc 	andi	r2,r2,65535
 800071c:	10000426 	beq	r2,zero,8000730 <main+0x3c8>
		{
			printf("[INFO]: full speed device\n");
 8000720:	01020074 	movhi	r4,2049
 8000724:	21051104 	addi	r4,r4,5188
 8000728:	80023180 	call	8002318 <puts>
 800072c:	00000306 	br	800073c <main+0x3d4>
		}
		else
		{
			printf("[INFO]: low speed device\n");
 8000730:	01020074 	movhi	r4,2049
 8000734:	21051804 	addi	r4,r4,5216
 8000738:	80023180 	call	8002318 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
 800073c:	80011fc0 	call	80011fc <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000740:	00000306 	br	8000750 <main+0x3e8>
	{
		UsbSetAddress();
 8000744:	80011fc0 	call	80011fc <UsbSetAddress>
		usleep(10*1000);
 8000748:	0109c404 	movi	r4,10000
 800074c:	800f4000 	call	800f400 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000750:	010000c4 	movi	r4,3
 8000754:	80002f40 	call	80002f4 <IO_read>
 8000758:	10bfffcc 	andi	r2,r2,65535
 800075c:	1080040c 	andi	r2,r2,16
 8000760:	103ff826 	beq	r2,zero,8000744 <__alt_data_end+0xfc000744>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000764:	80020780 	call	8002078 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
 8000768:	01000084 	movi	r4,2
 800076c:	01414184 	movi	r5,1286
 8000770:	800027c0 	call	800027c <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000774:	0009883a 	mov	r4,zero
 8000778:	80002f40 	call	80002f4 <IO_read>
 800077c:	10bfffcc 	andi	r2,r2,65535
 8000780:	01020074 	movhi	r4,2049
 8000784:	21051f04 	addi	r4,r4,5244
 8000788:	100b883a 	mov	r5,r2
 800078c:	80022240 	call	8002224 <printf>

	IO_write(HPI_ADDR,0x0508); // n
 8000790:	01000084 	movi	r4,2
 8000794:	01414204 	movi	r5,1288
 8000798:	800027c0 	call	800027c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 800079c:	0009883a 	mov	r4,zero
 80007a0:	80002f40 	call	80002f4 <IO_read>
 80007a4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
 80007a8:	e0bffb0b 	ldhu	r2,-20(fp)
 80007ac:	01020074 	movhi	r4,2049
 80007b0:	21052a04 	addi	r4,r4,5288
 80007b4:	100b883a 	mov	r5,r2
 80007b8:	80022240 	call	8002224 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
 80007bc:	e0bffb0b 	ldhu	r2,-20(fp)
 80007c0:	108000e0 	cmpeqi	r2,r2,3
 80007c4:	1000031e 	bne	r2,zero,80007d4 <main+0x46c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 80007c8:	80020fc0 	call	80020fc <UsbGetRetryCnt>
 80007cc:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
 80007d0:	003ef006 	br	8000394 <__alt_data_end+0xfc000394>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
 80007d4:	01020074 	movhi	r4,2049
 80007d8:	21053604 	addi	r4,r4,5336
 80007dc:	80023180 	call	8002318 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
 80007e0:	80012f80 	call	80012f8 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80007e4:	00000306 	br	80007f4 <main+0x48c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
 80007e8:	80012f80 	call	80012f8 <UsbGetDeviceDesc1>
		usleep(10*1000);
 80007ec:	0109c404 	movi	r4,10000
 80007f0:	800f4000 	call	800f400 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80007f4:	010000c4 	movi	r4,3
 80007f8:	80002f40 	call	80002f4 <IO_read>
 80007fc:	10bfffcc 	andi	r2,r2,65535
 8000800:	1080040c 	andi	r2,r2,16
 8000804:	103ff826 	beq	r2,zero,80007e8 <__alt_data_end+0xfc0007e8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000808:	80020780 	call	8002078 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 800080c:	01000084 	movi	r4,2
 8000810:	01414184 	movi	r5,1286
 8000814:	800027c0 	call	800027c <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000818:	0009883a 	mov	r4,zero
 800081c:	80002f40 	call	80002f4 <IO_read>
 8000820:	10bfffcc 	andi	r2,r2,65535
 8000824:	01020074 	movhi	r4,2049
 8000828:	21054504 	addi	r4,r4,5396
 800082c:	100b883a 	mov	r5,r2
 8000830:	80022240 	call	8002224 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000834:	01000084 	movi	r4,2
 8000838:	01414204 	movi	r5,1288
 800083c:	800027c0 	call	800027c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000840:	0009883a 	mov	r4,zero
 8000844:	80002f40 	call	80002f4 <IO_read>
 8000848:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 800084c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000850:	01020074 	movhi	r4,2049
 8000854:	21055004 	addi	r4,r4,5440
 8000858:	100b883a 	mov	r5,r2
 800085c:	80022240 	call	8002224 <printf>
	while (usb_ctl_val != 0x03)
 8000860:	00000206 	br	800086c <main+0x504>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000864:	80020fc0 	call	80020fc <UsbGetRetryCnt>
 8000868:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 800086c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000870:	108000d8 	cmpnei	r2,r2,3
 8000874:	103ffb1e 	bne	r2,zero,8000864 <__alt_data_end+0xfc000864>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
 8000878:	01020074 	movhi	r4,2049
 800087c:	21055c04 	addi	r4,r4,5488
 8000880:	80023180 	call	8002318 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
 8000884:	800143c0 	call	800143c <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000888:	00000306 	br	8000898 <main+0x530>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
 800088c:	800143c0 	call	800143c <UsbGetDeviceDesc2>
		usleep(10*1000);
 8000890:	0109c404 	movi	r4,10000
 8000894:	800f4000 	call	800f400 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000898:	010000c4 	movi	r4,3
 800089c:	80002f40 	call	80002f4 <IO_read>
 80008a0:	10bfffcc 	andi	r2,r2,65535
 80008a4:	1080040c 	andi	r2,r2,16
 80008a8:	103ff826 	beq	r2,zero,800088c <__alt_data_end+0xfc00088c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 80008ac:	80020780 	call	8002078 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 80008b0:	01000084 	movi	r4,2
 80008b4:	01414184 	movi	r5,1286
 80008b8:	800027c0 	call	800027c <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
 80008bc:	0009883a 	mov	r4,zero
 80008c0:	80002f40 	call	80002f4 <IO_read>
 80008c4:	10bfffcc 	andi	r2,r2,65535
 80008c8:	01020074 	movhi	r4,2049
 80008cc:	21054504 	addi	r4,r4,5396
 80008d0:	100b883a 	mov	r5,r2
 80008d4:	80022240 	call	8002224 <printf>

	IO_write(HPI_ADDR,0x0508);
 80008d8:	01000084 	movi	r4,2
 80008dc:	01414204 	movi	r5,1288
 80008e0:	800027c0 	call	800027c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 80008e4:	0009883a 	mov	r4,zero
 80008e8:	80002f40 	call	80002f4 <IO_read>
 80008ec:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 80008f0:	e0bffb0b 	ldhu	r2,-20(fp)
 80008f4:	01020074 	movhi	r4,2049
 80008f8:	21055004 	addi	r4,r4,5440
 80008fc:	100b883a 	mov	r5,r2
 8000900:	80022240 	call	8002224 <printf>
	while (usb_ctl_val != 0x03)
 8000904:	00000206 	br	8000910 <main+0x5a8>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000908:	80020fc0 	call	80020fc <UsbGetRetryCnt>
 800090c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000910:	e0bffb0b 	ldhu	r2,-20(fp)
 8000914:	108000d8 	cmpnei	r2,r2,3
 8000918:	103ffb1e 	bne	r2,zero,8000908 <__alt_data_end+0xfc000908>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
 800091c:	01020074 	movhi	r4,2049
 8000920:	21057004 	addi	r4,r4,5568
 8000924:	80023180 	call	8002318 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
 8000928:	80016100 	call	8001610 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 800092c:	00000306 	br	800093c <main+0x5d4>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
 8000930:	80016100 	call	8001610 <UsbGetConfigDesc1>
		usleep(10*1000);
 8000934:	0109c404 	movi	r4,10000
 8000938:	800f4000 	call	800f400 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 800093c:	010000c4 	movi	r4,3
 8000940:	80002f40 	call	80002f4 <IO_read>
 8000944:	10bfffcc 	andi	r2,r2,65535
 8000948:	1080040c 	andi	r2,r2,16
 800094c:	103ff826 	beq	r2,zero,8000930 <__alt_data_end+0xfc000930>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000950:	80020780 	call	8002078 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000954:	01000084 	movi	r4,2
 8000958:	01414184 	movi	r5,1286
 800095c:	800027c0 	call	800027c <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000960:	0009883a 	mov	r4,zero
 8000964:	80002f40 	call	80002f4 <IO_read>
 8000968:	10bfffcc 	andi	r2,r2,65535
 800096c:	01020074 	movhi	r4,2049
 8000970:	21058204 	addi	r4,r4,5640
 8000974:	100b883a 	mov	r5,r2
 8000978:	80022240 	call	8002224 <printf>

	IO_write(HPI_ADDR,0x0508);
 800097c:	01000084 	movi	r4,2
 8000980:	01414204 	movi	r5,1288
 8000984:	800027c0 	call	800027c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000988:	0009883a 	mov	r4,zero
 800098c:	80002f40 	call	80002f4 <IO_read>
 8000990:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
 8000994:	e0bffb0b 	ldhu	r2,-20(fp)
 8000998:	01020074 	movhi	r4,2049
 800099c:	21058d04 	addi	r4,r4,5684
 80009a0:	100b883a 	mov	r5,r2
 80009a4:	80022240 	call	8002224 <printf>
	while (usb_ctl_val != 0x03)
 80009a8:	00000206 	br	80009b4 <main+0x64c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 80009ac:	80020fc0 	call	80020fc <UsbGetRetryCnt>
 80009b0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 80009b4:	e0bffb0b 	ldhu	r2,-20(fp)
 80009b8:	108000d8 	cmpnei	r2,r2,3
 80009bc:	103ffb1e 	bne	r2,zero,80009ac <__alt_data_end+0xfc0009ac>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
 80009c0:	01020074 	movhi	r4,2049
 80009c4:	21059904 	addi	r4,r4,5732
 80009c8:	80023180 	call	8002318 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
 80009cc:	800179c0 	call	800179c <UsbGetConfigDesc2>

	usleep(100*1000);
 80009d0:	010000b4 	movhi	r4,2
 80009d4:	2121a804 	addi	r4,r4,-31072
 80009d8:	800f4000 	call	800f400 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80009dc:	00000306 	br	80009ec <main+0x684>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
 80009e0:	800179c0 	call	800179c <UsbGetConfigDesc2>
		usleep(10*1000);
 80009e4:	0109c404 	movi	r4,10000
 80009e8:	800f4000 	call	800f400 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80009ec:	010000c4 	movi	r4,3
 80009f0:	80002f40 	call	80002f4 <IO_read>
 80009f4:	10bfffcc 	andi	r2,r2,65535
 80009f8:	1080040c 	andi	r2,r2,16
 80009fc:	103ff826 	beq	r2,zero,80009e0 <__alt_data_end+0xfc0009e0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000a00:	80020780 	call	8002078 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000a04:	01000084 	movi	r4,2
 8000a08:	01414184 	movi	r5,1286
 8000a0c:	800027c0 	call	800027c <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000a10:	0009883a 	mov	r4,zero
 8000a14:	80002f40 	call	80002f4 <IO_read>
 8000a18:	10bfffcc 	andi	r2,r2,65535
 8000a1c:	01020074 	movhi	r4,2049
 8000a20:	2105ac04 	addi	r4,r4,5808
 8000a24:	100b883a 	mov	r5,r2
 8000a28:	80022240 	call	8002224 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000a2c:	01000084 	movi	r4,2
 8000a30:	01414204 	movi	r5,1288
 8000a34:	800027c0 	call	800027c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000a38:	0009883a 	mov	r4,zero
 8000a3c:	80002f40 	call	80002f4 <IO_read>
 8000a40:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
 8000a44:	e0bffb0b 	ldhu	r2,-20(fp)
 8000a48:	01020074 	movhi	r4,2049
 8000a4c:	2105b704 	addi	r4,r4,5852
 8000a50:	100b883a 	mov	r5,r2
 8000a54:	80022240 	call	8002224 <printf>
	while (usb_ctl_val != 0x03)
 8000a58:	00000206 	br	8000a64 <main+0x6fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000a5c:	80020fc0 	call	80020fc <UsbGetRetryCnt>
 8000a60:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000a64:	e0bffb0b 	ldhu	r2,-20(fp)
 8000a68:	108000d8 	cmpnei	r2,r2,3
 8000a6c:	103ffb1e 	bne	r2,zero,8000a5c <__alt_data_end+0xfc000a5c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
 8000a70:	01020074 	movhi	r4,2049
 8000a74:	2105c304 	addi	r4,r4,5900
 8000a78:	80023180 	call	8002318 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
 8000a7c:	01000084 	movi	r4,2
 8000a80:	01415b04 	movi	r5,1388
 8000a84:	800027c0 	call	800027c <IO_write>
	code = IO_read(HPI_DATA);
 8000a88:	0009883a 	mov	r4,zero
 8000a8c:	80002f40 	call	80002f4 <IO_read>
 8000a90:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
 8000a94:	e0bffe8b 	ldhu	r2,-6(fp)
 8000a98:	108000cc 	andi	r2,r2,3
 8000a9c:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
 8000aa0:	e0bffe8b 	ldhu	r2,-6(fp)
 8000aa4:	01020074 	movhi	r4,2049
 8000aa8:	2105d604 	addi	r4,r4,5976
 8000aac:	100b883a 	mov	r5,r2
 8000ab0:	80022240 	call	8002224 <printf>

	if (code == 0x01)
 8000ab4:	e0bffe8b 	ldhu	r2,-6(fp)
 8000ab8:	10800058 	cmpnei	r2,r2,1
 8000abc:	1000041e 	bne	r2,zero,8000ad0 <main+0x768>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
 8000ac0:	01020074 	movhi	r4,2049
 8000ac4:	2105d904 	addi	r4,r4,5988
 8000ac8:	80023180 	call	8002318 <puts>
 8000acc:	00000306 	br	8000adc <main+0x774>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
 8000ad0:	01020074 	movhi	r4,2049
 8000ad4:	2105e804 	addi	r4,r4,6048
 8000ad8:	80023180 	call	8002318 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
 8000adc:	01000084 	movi	r4,2
 8000ae0:	01415d84 	movi	r5,1398
 8000ae4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x073F);
 8000ae8:	0009883a 	mov	r4,zero
 8000aec:	0141cfc4 	movi	r5,1855
 8000af0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x8105);
 8000af4:	0009883a 	mov	r4,zero
 8000af8:	01604154 	movui	r5,33029
 8000afc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0003);
 8000b00:	0009883a 	mov	r4,zero
 8000b04:	014000c4 	movi	r5,3
 8000b08:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);
 8000b0c:	0009883a 	mov	r4,zero
 8000b10:	01400204 	movi	r5,8
 8000b14:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0xAC0A);
 8000b18:	0009883a 	mov	r4,zero
 8000b1c:	016b0294 	movui	r5,44042
 8000b20:	800027c0 	call	800027c <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
 8000b24:	01006c04 	movi	r4,432
 8000b28:	01415d84 	movi	r5,1398
 8000b2c:	80010a40 	call	80010a4 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
 8000b30:	01000084 	movi	r4,2
 8000b34:	01415f04 	movi	r5,1404
 8000b38:	800027c0 	call	800027c <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
 8000b3c:	0009883a 	mov	r4,zero
 8000b40:	80002f40 	call	80002f4 <IO_read>
 8000b44:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
 8000b48:	e0bfff03 	ldbu	r2,-4(fp)
 8000b4c:	01020074 	movhi	r4,2049
 8000b50:	2105f104 	addi	r4,r4,6084
 8000b54:	100b883a 	mov	r5,r2
 8000b58:	80022240 	call	8002224 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
 8000b5c:	8001a000 	call	8001a00 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000b60:	00000306 	br	8000b70 <main+0x808>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
 8000b64:	8001a000 	call	8001a00 <UsbSetConfig>
		usleep(10*1000);
 8000b68:	0109c404 	movi	r4,10000
 8000b6c:	800f4000 	call	800f400 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000b70:	010000c4 	movi	r4,3
 8000b74:	80002f40 	call	80002f4 <IO_read>
 8000b78:	10bfffcc 	andi	r2,r2,65535
 8000b7c:	1080040c 	andi	r2,r2,16
 8000b80:	103ff826 	beq	r2,zero,8000b64 <__alt_data_end+0xfc000b64>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000b84:	80020780 	call	8002078 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000b88:	01000084 	movi	r4,2
 8000b8c:	01414184 	movi	r5,1286
 8000b90:	800027c0 	call	800027c <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000b94:	0009883a 	mov	r4,zero
 8000b98:	80002f40 	call	80002f4 <IO_read>
 8000b9c:	10bfffcc 	andi	r2,r2,65535
 8000ba0:	01020074 	movhi	r4,2049
 8000ba4:	2105fb04 	addi	r4,r4,6124
 8000ba8:	100b883a 	mov	r5,r2
 8000bac:	80022240 	call	8002224 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000bb0:	01000084 	movi	r4,2
 8000bb4:	01414204 	movi	r5,1288
 8000bb8:	800027c0 	call	800027c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000bbc:	0009883a 	mov	r4,zero
 8000bc0:	80002f40 	call	80002f4 <IO_read>
 8000bc4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
 8000bc8:	e0bffb0b 	ldhu	r2,-20(fp)
 8000bcc:	01020074 	movhi	r4,2049
 8000bd0:	21060604 	addi	r4,r4,6168
 8000bd4:	100b883a 	mov	r5,r2
 8000bd8:	80022240 	call	8002224 <printf>
	while (usb_ctl_val != 0x03)
 8000bdc:	00000206 	br	8000be8 <main+0x880>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000be0:	80020fc0 	call	80020fc <UsbGetRetryCnt>
 8000be4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000be8:	e0bffb0b 	ldhu	r2,-20(fp)
 8000bec:	108000d8 	cmpnei	r2,r2,3
 8000bf0:	103ffb1e 	bne	r2,zero,8000be0 <__alt_data_end+0xfc000be0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
 8000bf4:	01020074 	movhi	r4,2049
 8000bf8:	21061204 	addi	r4,r4,6216
 8000bfc:	80023180 	call	8002318 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
 8000c00:	8001afc0 	call	8001afc <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000c04:	00000306 	br	8000c14 <main+0x8ac>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
 8000c08:	8001afc0 	call	8001afc <UsbClassRequest>
		usleep(10*1000);
 8000c0c:	0109c404 	movi	r4,10000
 8000c10:	800f4000 	call	800f400 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000c14:	010000c4 	movi	r4,3
 8000c18:	80002f40 	call	80002f4 <IO_read>
 8000c1c:	10bfffcc 	andi	r2,r2,65535
 8000c20:	1080040c 	andi	r2,r2,16
 8000c24:	103ff826 	beq	r2,zero,8000c08 <__alt_data_end+0xfc000c08>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000c28:	80020780 	call	8002078 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000c2c:	01000084 	movi	r4,2
 8000c30:	01414184 	movi	r5,1286
 8000c34:	800027c0 	call	800027c <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000c38:	0009883a 	mov	r4,zero
 8000c3c:	80002f40 	call	80002f4 <IO_read>
 8000c40:	10bfffcc 	andi	r2,r2,65535
 8000c44:	01020074 	movhi	r4,2049
 8000c48:	21062404 	addi	r4,r4,6288
 8000c4c:	100b883a 	mov	r5,r2
 8000c50:	80022240 	call	8002224 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000c54:	01000084 	movi	r4,2
 8000c58:	01414204 	movi	r5,1288
 8000c5c:	800027c0 	call	800027c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000c60:	0009883a 	mov	r4,zero
 8000c64:	80002f40 	call	80002f4 <IO_read>
 8000c68:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 8000c6c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000c70:	01020074 	movhi	r4,2049
 8000c74:	21062f04 	addi	r4,r4,6332
 8000c78:	100b883a 	mov	r5,r2
 8000c7c:	80022240 	call	8002224 <printf>
	while (usb_ctl_val != 0x03)
 8000c80:	00000206 	br	8000c8c <main+0x924>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000c84:	80020fc0 	call	80020fc <UsbGetRetryCnt>
 8000c88:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000c8c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000c90:	108000d8 	cmpnei	r2,r2,3
 8000c94:	103ffb1e 	bne	r2,zero,8000c84 <__alt_data_end+0xfc000c84>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
 8000c98:	01020074 	movhi	r4,2049
 8000c9c:	21063b04 	addi	r4,r4,6380
 8000ca0:	80023180 	call	8002318 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
 8000ca4:	8001bf80 	call	8001bf8 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000ca8:	00000306 	br	8000cb8 <main+0x950>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
 8000cac:	8001bf80 	call	8001bf8 <UsbGetHidDesc>
		usleep(10*1000);
 8000cb0:	0109c404 	movi	r4,10000
 8000cb4:	800f4000 	call	800f400 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000cb8:	010000c4 	movi	r4,3
 8000cbc:	80002f40 	call	80002f4 <IO_read>
 8000cc0:	10bfffcc 	andi	r2,r2,65535
 8000cc4:	1080040c 	andi	r2,r2,16
 8000cc8:	103ff826 	beq	r2,zero,8000cac <__alt_data_end+0xfc000cac>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000ccc:	80020780 	call	8002078 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000cd0:	01000084 	movi	r4,2
 8000cd4:	01414184 	movi	r5,1286
 8000cd8:	800027c0 	call	800027c <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000cdc:	0009883a 	mov	r4,zero
 8000ce0:	80002f40 	call	80002f4 <IO_read>
 8000ce4:	10bfffcc 	andi	r2,r2,65535
 8000ce8:	01020074 	movhi	r4,2049
 8000cec:	21062404 	addi	r4,r4,6288
 8000cf0:	100b883a 	mov	r5,r2
 8000cf4:	80022240 	call	8002224 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000cf8:	01000084 	movi	r4,2
 8000cfc:	01414204 	movi	r5,1288
 8000d00:	800027c0 	call	800027c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000d04:	0009883a 	mov	r4,zero
 8000d08:	80002f40 	call	80002f4 <IO_read>
 8000d0c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 8000d10:	e0bffb0b 	ldhu	r2,-20(fp)
 8000d14:	01020074 	movhi	r4,2049
 8000d18:	21062f04 	addi	r4,r4,6332
 8000d1c:	100b883a 	mov	r5,r2
 8000d20:	80022240 	call	8002224 <printf>
	while (usb_ctl_val != 0x03)
 8000d24:	00000206 	br	8000d30 <main+0x9c8>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000d28:	80020fc0 	call	80020fc <UsbGetRetryCnt>
 8000d2c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000d30:	e0bffb0b 	ldhu	r2,-20(fp)
 8000d34:	108000d8 	cmpnei	r2,r2,3
 8000d38:	103ffb1e 	bne	r2,zero,8000d28 <__alt_data_end+0xfc000d28>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
 8000d3c:	01020074 	movhi	r4,2049
 8000d40:	21064d04 	addi	r4,r4,6452
 8000d44:	80023180 	call	8002318 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
 8000d48:	8001d3c0 	call	8001d3c <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000d4c:	00000306 	br	8000d5c <main+0x9f4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
 8000d50:	8001d3c0 	call	8001d3c <UsbGetReportDesc>
		usleep(10*1000);
 8000d54:	0109c404 	movi	r4,10000
 8000d58:	800f4000 	call	800f400 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000d5c:	010000c4 	movi	r4,3
 8000d60:	80002f40 	call	80002f4 <IO_read>
 8000d64:	10bfffcc 	andi	r2,r2,65535
 8000d68:	1080040c 	andi	r2,r2,16
 8000d6c:	103ff826 	beq	r2,zero,8000d50 <__alt_data_end+0xfc000d50>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000d70:	80020780 	call	8002078 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000d74:	01000084 	movi	r4,2
 8000d78:	01414184 	movi	r5,1286
 8000d7c:	800027c0 	call	800027c <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000d80:	0009883a 	mov	r4,zero
 8000d84:	80002f40 	call	80002f4 <IO_read>
 8000d88:	10bfffcc 	andi	r2,r2,65535
 8000d8c:	01020074 	movhi	r4,2049
 8000d90:	21066104 	addi	r4,r4,6532
 8000d94:	100b883a 	mov	r5,r2
 8000d98:	80022240 	call	8002224 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000d9c:	01000084 	movi	r4,2
 8000da0:	01414204 	movi	r5,1288
 8000da4:	800027c0 	call	800027c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000da8:	0009883a 	mov	r4,zero
 8000dac:	80002f40 	call	80002f4 <IO_read>
 8000db0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
 8000db4:	e0bffb0b 	ldhu	r2,-20(fp)
 8000db8:	01020074 	movhi	r4,2049
 8000dbc:	21066d04 	addi	r4,r4,6580
 8000dc0:	100b883a 	mov	r5,r2
 8000dc4:	80022240 	call	8002224 <printf>
	while (usb_ctl_val != 0x03)
 8000dc8:	00000206 	br	8000dd4 <main+0xa6c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000dcc:	80020fc0 	call	80020fc <UsbGetRetryCnt>
 8000dd0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000dd4:	e0bffb0b 	ldhu	r2,-20(fp)
 8000dd8:	108000d8 	cmpnei	r2,r2,3
 8000ddc:	103ffb1e 	bne	r2,zero,8000dcc <__alt_data_end+0xfc000dcc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
 8000de0:	01020074 	movhi	r4,2049
 8000de4:	21067904 	addi	r4,r4,6628
 8000de8:	80023180 	call	8002318 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
 8000dec:	0109c404 	movi	r4,10000
 8000df0:	800f4000 	call	800f400 <usleep>
	while(1)
	{
		toggle++;
 8000df4:	e0bffb83 	ldbu	r2,-18(fp)
 8000df8:	10800044 	addi	r2,r2,1
 8000dfc:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
 8000e00:	01000084 	movi	r4,2
 8000e04:	01414004 	movi	r5,1280
 8000e08:	800027c0 	call	800027c <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
 8000e0c:	0009883a 	mov	r4,zero
 8000e10:	01414704 	movi	r5,1308
 8000e14:	800027c0 	call	800027c <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
 8000e18:	e0bfff03 	ldbu	r2,-4(fp)
 8000e1c:	108003cc 	andi	r2,r2,15
 8000e20:	0009883a 	mov	r4,zero
 8000e24:	100b883a 	mov	r5,r2
 8000e28:	800027c0 	call	800027c <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
 8000e2c:	0009883a 	mov	r4,zero
 8000e30:	0140a444 	movi	r5,657
 8000e34:	800027c0 	call	800027c <IO_write>
		if(toggle%2)
 8000e38:	e0bffb83 	ldbu	r2,-18(fp)
 8000e3c:	1080004c 	andi	r2,r2,1
 8000e40:	10803fcc 	andi	r2,r2,255
 8000e44:	10000426 	beq	r2,zero,8000e58 <main+0xaf0>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
 8000e48:	0009883a 	mov	r4,zero
 8000e4c:	01400044 	movi	r5,1
 8000e50:	800027c0 	call	800027c <IO_write>
 8000e54:	00000306 	br	8000e64 <main+0xafc>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
 8000e58:	0009883a 	mov	r4,zero
 8000e5c:	01401044 	movi	r5,65
 8000e60:	800027c0 	call	800027c <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
 8000e64:	0009883a 	mov	r4,zero
 8000e68:	014004c4 	movi	r5,19
 8000e6c:	800027c0 	call	800027c <IO_write>
		IO_write(HPI_DATA,0x0000);//a
 8000e70:	0009883a 	mov	r4,zero
 8000e74:	000b883a 	mov	r5,zero
 8000e78:	800027c0 	call	800027c <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000e7c:	01006c04 	movi	r4,432
 8000e80:	01414004 	movi	r5,1280
 8000e84:	80010a40 	call	80010a4 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000e88:	00002406 	br	8000f1c <main+0xbb4>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
 8000e8c:	01000084 	movi	r4,2
 8000e90:	01414004 	movi	r5,1280
 8000e94:	800027c0 	call	800027c <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
 8000e98:	0009883a 	mov	r4,zero
 8000e9c:	01414704 	movi	r5,1308
 8000ea0:	800027c0 	call	800027c <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
 8000ea4:	e0bfff03 	ldbu	r2,-4(fp)
 8000ea8:	108003cc 	andi	r2,r2,15
 8000eac:	0009883a 	mov	r4,zero
 8000eb0:	100b883a 	mov	r5,r2
 8000eb4:	800027c0 	call	800027c <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
 8000eb8:	0009883a 	mov	r4,zero
 8000ebc:	0140a444 	movi	r5,657
 8000ec0:	800027c0 	call	800027c <IO_write>
			if(toggle%2)
 8000ec4:	e0bffb83 	ldbu	r2,-18(fp)
 8000ec8:	1080004c 	andi	r2,r2,1
 8000ecc:	10803fcc 	andi	r2,r2,255
 8000ed0:	10000426 	beq	r2,zero,8000ee4 <main+0xb7c>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
 8000ed4:	0009883a 	mov	r4,zero
 8000ed8:	01400044 	movi	r5,1
 8000edc:	800027c0 	call	800027c <IO_write>
 8000ee0:	00000306 	br	8000ef0 <main+0xb88>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
 8000ee4:	0009883a 	mov	r4,zero
 8000ee8:	01401044 	movi	r5,65
 8000eec:	800027c0 	call	800027c <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
 8000ef0:	0009883a 	mov	r4,zero
 8000ef4:	014004c4 	movi	r5,19
 8000ef8:	800027c0 	call	800027c <IO_write>
			IO_write(HPI_DATA,0x0000);//
 8000efc:	0009883a 	mov	r4,zero
 8000f00:	000b883a 	mov	r5,zero
 8000f04:	800027c0 	call	800027c <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000f08:	01006c04 	movi	r4,432
 8000f0c:	01414004 	movi	r5,1280
 8000f10:	80010a40 	call	80010a4 <UsbWrite>
			usleep(10*1000);
 8000f14:	0109c404 	movi	r4,10000
 8000f18:	800f4000 	call	800f400 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000f1c:	010000c4 	movi	r4,3
 8000f20:	80002f40 	call	80002f4 <IO_read>
 8000f24:	10bfffcc 	andi	r2,r2,65535
 8000f28:	1080040c 	andi	r2,r2,16
 8000f2c:	103fd726 	beq	r2,zero,8000e8c <__alt_data_end+0xfc000e8c>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
 8000f30:	80020780 	call	8002078 <UsbWaitTDListDone>
 8000f34:	e0bffb0d 	sth	r2,-20(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
		keycode = UsbRead(0x051e);
 8000f38:	01014784 	movi	r4,1310
 8000f3c:	80010f80 	call	80010f8 <UsbRead>
 8000f40:	10bfffcc 	andi	r2,r2,65535
 8000f44:	e0bffd15 	stw	r2,-12(fp)
		printf("\nfirst two keycode values are %04x\n",keycode);
 8000f48:	01020074 	movhi	r4,2049
 8000f4c:	21068d04 	addi	r4,r4,6708
 8000f50:	e17ffd17 	ldw	r5,-12(fp)
 8000f54:	80022240 	call	8002224 <printf>
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		*keycode_base = keycode & 0xff; 
 8000f58:	00800804 	movi	r2,32
 8000f5c:	e0fffd17 	ldw	r3,-12(fp)
 8000f60:	10c00005 	stb	r3,0(r2)

		usleep(200);//usleep(5000);
 8000f64:	01003204 	movi	r4,200
 8000f68:	800f4000 	call	800f400 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
 8000f6c:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000f70:	10bfffcc 	andi	r2,r2,65535
 8000f74:	1009883a 	mov	r4,r2
 8000f78:	80010f80 	call	80010f8 <UsbRead>
 8000f7c:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
 8000f80:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000f84:	e0fffb0b 	ldhu	r3,-20(fp)
 8000f88:	1884703a 	and	r2,r3,r2
 8000f8c:	10bfffcc 	andi	r2,r2,65535
 8000f90:	1000201e 	bne	r2,zero,8001014 <main+0xcac>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 8000f94:	e03ffbc5 	stb	zero,-17(fp)
 8000f98:	00001006 	br	8000fdc <main+0xc74>
			{
				usleep(5*1000);
 8000f9c:	0104e204 	movi	r4,5000
 8000fa0:	800f4000 	call	800f400 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
 8000fa4:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000fa8:	10bfffcc 	andi	r2,r2,65535
 8000fac:	1009883a 	mov	r4,r2
 8000fb0:	80010f80 	call	80010f8 <UsbRead>
 8000fb4:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
 8000fb8:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000fbc:	e0fffb0b 	ldhu	r3,-20(fp)
 8000fc0:	1884703a 	and	r2,r3,r2
 8000fc4:	10bfffcc 	andi	r2,r2,65535
 8000fc8:	10000126 	beq	r2,zero,8000fd0 <main+0xc68>
 8000fcc:	00000606 	br	8000fe8 <main+0xc80>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 8000fd0:	e0bffbc3 	ldbu	r2,-17(fp)
 8000fd4:	10800044 	addi	r2,r2,1
 8000fd8:	e0bffbc5 	stb	r2,-17(fp)
 8000fdc:	e0bffbc3 	ldbu	r2,-17(fp)
 8000fe0:	108001f0 	cmpltui	r2,r2,7
 8000fe4:	103fed1e 	bne	r2,zero,8000f9c <__alt_data_end+0xfc000f9c>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
 8000fe8:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000fec:	e0fffb0b 	ldhu	r3,-20(fp)
 8000ff0:	1884703a 	and	r2,r3,r2
 8000ff4:	10bfffcc 	andi	r2,r2,65535
 8000ff8:	1000061e 	bne	r2,zero,8001014 <main+0xcac>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
 8000ffc:	01020074 	movhi	r4,2049
 8001000:	21069604 	addi	r4,r4,6744
 8001004:	80023180 	call	8002318 <puts>
				printf("[INFO]: please insert again!!! \n");
 8001008:	01020074 	movhi	r4,2049
 800100c:	2106a104 	addi	r4,r4,6788
 8001010:	80023180 	call	8002318 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
 8001014:	00001d06 	br	800108c <main+0xd24>
		{

			usb_ctl_val = UsbRead(ctl_reg);
 8001018:	d0a6cb0b 	ldhu	r2,-25812(gp)
 800101c:	10bfffcc 	andi	r2,r2,65535
 8001020:	1009883a 	mov	r4,r2
 8001024:	80010f80 	call	80010f8 <UsbRead>
 8001028:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 800102c:	0104e204 	movi	r4,5000
 8001030:	800f4000 	call	800f400 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 8001034:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8001038:	10bfffcc 	andi	r2,r2,65535
 800103c:	1009883a 	mov	r4,r2
 8001040:	80010f80 	call	80010f8 <UsbRead>
 8001044:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 8001048:	0104e204 	movi	r4,5000
 800104c:	800f4000 	call	800f400 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 8001050:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8001054:	10bfffcc 	andi	r2,r2,65535
 8001058:	1009883a 	mov	r4,r2
 800105c:	80010f80 	call	80010f8 <UsbRead>
 8001060:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 8001064:	0104e204 	movi	r4,5000
 8001068:	800f4000 	call	800f400 <usleep>

			if(usb_ctl_val & no_device)
 800106c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8001070:	e0fffb0b 	ldhu	r3,-20(fp)
 8001074:	1884703a 	and	r2,r3,r2
 8001078:	10bfffcc 	andi	r2,r2,65535
 800107c:	10000126 	beq	r2,zero,8001084 <main+0xd1c>
				goto USB_HOT_PLUG;
 8001080:	003cc406 	br	8000394 <__alt_data_end+0xfc000394>

			usleep(200);
 8001084:	01003204 	movi	r4,200
 8001088:	800f4000 	call	800f400 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
 800108c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8001090:	e0fffb0b 	ldhu	r3,-20(fp)
 8001094:	1884703a 	and	r2,r3,r2
 8001098:	10bfffcc 	andi	r2,r2,65535
 800109c:	103fde26 	beq	r2,zero,8001018 <__alt_data_end+0xfc001018>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
 80010a0:	003f5406 	br	8000df4 <__alt_data_end+0xfc000df4>

080010a4 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
 80010a4:	defffc04 	addi	sp,sp,-16
 80010a8:	dfc00315 	stw	ra,12(sp)
 80010ac:	df000215 	stw	fp,8(sp)
 80010b0:	df000204 	addi	fp,sp,8
 80010b4:	2007883a 	mov	r3,r4
 80010b8:	2805883a 	mov	r2,r5
 80010bc:	e0fffe0d 	sth	r3,-8(fp)
 80010c0:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
 80010c4:	e0bffe0b 	ldhu	r2,-8(fp)
 80010c8:	01000084 	movi	r4,2
 80010cc:	100b883a 	mov	r5,r2
 80010d0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA, Data);
 80010d4:	e0bfff0b 	ldhu	r2,-4(fp)
 80010d8:	0009883a 	mov	r4,zero
 80010dc:	100b883a 	mov	r5,r2
 80010e0:	800027c0 	call	800027c <IO_write>
}
 80010e4:	e037883a 	mov	sp,fp
 80010e8:	dfc00117 	ldw	ra,4(sp)
 80010ec:	df000017 	ldw	fp,0(sp)
 80010f0:	dec00204 	addi	sp,sp,8
 80010f4:	f800283a 	ret

080010f8 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
 80010f8:	defffc04 	addi	sp,sp,-16
 80010fc:	dfc00315 	stw	ra,12(sp)
 8001100:	df000215 	stw	fp,8(sp)
 8001104:	df000204 	addi	fp,sp,8
 8001108:	2005883a 	mov	r2,r4
 800110c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
 8001110:	e0bfff0b 	ldhu	r2,-4(fp)
 8001114:	01000084 	movi	r4,2
 8001118:	100b883a 	mov	r5,r2
 800111c:	800027c0 	call	800027c <IO_write>
	alt_u16 read_val = IO_read(Address);
 8001120:	e0bfff0b 	ldhu	r2,-4(fp)
 8001124:	10803fcc 	andi	r2,r2,255
 8001128:	1009883a 	mov	r4,r2
 800112c:	80002f40 	call	80002f4 <IO_read>
 8001130:	e0bffe0d 	sth	r2,-8(fp)
	return read_val;
 8001134:	e0bffe0b 	ldhu	r2,-8(fp)
}
 8001138:	e037883a 	mov	sp,fp
 800113c:	dfc00117 	ldw	ra,4(sp)
 8001140:	df000017 	ldw	fp,0(sp)
 8001144:	dec00204 	addi	sp,sp,8
 8001148:	f800283a 	ret

0800114c <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
 800114c:	defffe04 	addi	sp,sp,-8
 8001150:	dfc00115 	stw	ra,4(sp)
 8001154:	df000015 	stw	fp,0(sp)
 8001158:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
 800115c:	01000044 	movi	r4,1
 8001160:	017e9414 	movui	r5,64080
 8001164:	800027c0 	call	800027c <IO_write>
	usleep(100000);
 8001168:	010000b4 	movhi	r4,2
 800116c:	2121a804 	addi	r4,r4,-31072
 8001170:	800f4000 	call	800f400 <usleep>
	printf("[USB INIT]:reset finished!\n");
 8001174:	01020074 	movhi	r4,2049
 8001178:	2106a904 	addi	r4,r4,6820
 800117c:	80023180 	call	8002318 <puts>

	usleep(500000);
 8001180:	01000234 	movhi	r4,8
 8001184:	21284804 	addi	r4,r4,-24288
 8001188:	800f4000 	call	800f400 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
 800118c:	01020074 	movhi	r4,2049
 8001190:	2106b004 	addi	r4,r4,6848
 8001194:	80023180 	call	8002318 <puts>
	IO_read(HPI_MAILBOX);
 8001198:	01000044 	movi	r4,1
 800119c:	80002f40 	call	80002f4 <IO_read>
	IO_read(HPI_STATUS);
 80011a0:	010000c4 	movi	r4,3
 80011a4:	80002f40 	call	80002f4 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
 80011a8:	01005104 	movi	r4,324
 80011ac:	80010f80 	call	80010f8 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 80011b0:	01005104 	movi	r4,324
 80011b4:	000b883a 	mov	r5,zero
 80011b8:	80010a40 	call	80010a4 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
 80011bc:	01005204 	movi	r4,328
 80011c0:	80010f80 	call	80010f8 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
 80011c4:	01005204 	movi	r4,328
 80011c8:	000b883a 	mov	r5,zero
 80011cc:	80010a40 	call	80010a4 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 80011d0:	01302414 	movui	r4,49296
 80011d4:	017fffd4 	movui	r5,65535
 80011d8:	80010a40 	call	80010a4 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
 80011dc:	01302c14 	movui	r4,49328
 80011e0:	017fffd4 	movui	r5,65535
 80011e4:	80010a40 	call	80010a4 <UsbWrite>
}
 80011e8:	e037883a 	mov	sp,fp
 80011ec:	dfc00117 	ldw	ra,4(sp)
 80011f0:	df000017 	ldw	fp,0(sp)
 80011f4:	dec00204 	addi	sp,sp,8
 80011f8:	f800283a 	ret

080011fc <UsbSetAddress>:


void UsbSetAddress()
{
 80011fc:	defffe04 	addi	sp,sp,-8
 8001200:	dfc00115 	stw	ra,4(sp)
 8001204:	df000015 	stw	fp,0(sp)
 8001208:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 800120c:	01000084 	movi	r4,2
 8001210:	01414004 	movi	r5,1280
 8001214:	800027c0 	call	800027c <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
 8001218:	0009883a 	mov	r4,zero
 800121c:	01414304 	movi	r5,1292
 8001220:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001224:	0009883a 	mov	r4,zero
 8001228:	01400204 	movi	r5,8
 800122c:	800027c0 	call	800027c <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
 8001230:	0009883a 	mov	r4,zero
 8001234:	01403404 	movi	r5,208
 8001238:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);
 800123c:	0009883a 	mov	r4,zero
 8001240:	01400044 	movi	r5,1
 8001244:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001248:	0009883a 	mov	r4,zero
 800124c:	014004c4 	movi	r5,19
 8001250:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001254:	0009883a 	mov	r4,zero
 8001258:	01414504 	movi	r5,1300
 800125c:	800027c0 	call	800027c <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
 8001260:	0009883a 	mov	r4,zero
 8001264:	01414004 	movi	r5,1280
 8001268:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0002);
 800126c:	0009883a 	mov	r4,zero
 8001270:	01400084 	movi	r5,2
 8001274:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001278:	0009883a 	mov	r4,zero
 800127c:	000b883a 	mov	r5,zero
 8001280:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001284:	0009883a 	mov	r4,zero
 8001288:	000b883a 	mov	r5,zero
 800128c:	800027c0 	call	800027c <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
 8001290:	0009883a 	mov	r4,zero
 8001294:	000b883a 	mov	r5,zero
 8001298:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//
 800129c:	0009883a 	mov	r4,zero
 80012a0:	000b883a 	mov	r5,zero
 80012a4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0090);//
 80012a8:	0009883a 	mov	r4,zero
 80012ac:	01402404 	movi	r5,144
 80012b0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);
 80012b4:	0009883a 	mov	r4,zero
 80012b8:	01401044 	movi	r5,65
 80012bc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 80012c0:	0009883a 	mov	r4,zero
 80012c4:	014004c4 	movi	r5,19
 80012c8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);
 80012cc:	0009883a 	mov	r4,zero
 80012d0:	000b883a 	mov	r5,zero
 80012d4:	800027c0 	call	800027c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80012d8:	01006c04 	movi	r4,432
 80012dc:	01414004 	movi	r5,1280
 80012e0:	80010a40 	call	80010a4 <UsbWrite>
}
 80012e4:	e037883a 	mov	sp,fp
 80012e8:	dfc00117 	ldw	ra,4(sp)
 80012ec:	df000017 	ldw	fp,0(sp)
 80012f0:	dec00204 	addi	sp,sp,8
 80012f4:	f800283a 	ret

080012f8 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
 80012f8:	defffe04 	addi	sp,sp,-8
 80012fc:	dfc00115 	stw	ra,4(sp)
 8001300:	df000015 	stw	fp,0(sp)
 8001304:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001308:	01000084 	movi	r4,2
 800130c:	01414004 	movi	r5,1280
 8001310:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001314:	0009883a 	mov	r4,zero
 8001318:	01414304 	movi	r5,1292
 800131c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001320:	0009883a 	mov	r4,zero
 8001324:	01400204 	movi	r5,8
 8001328:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 800132c:	0009883a 	mov	r4,zero
 8001330:	0140b404 	movi	r5,720
 8001334:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001338:	0009883a 	mov	r4,zero
 800133c:	01400044 	movi	r5,1
 8001340:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001344:	0009883a 	mov	r4,zero
 8001348:	014004c4 	movi	r5,19
 800134c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001350:	0009883a 	mov	r4,zero
 8001354:	01414504 	movi	r5,1300
 8001358:	800027c0 	call	800027c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 800135c:	0009883a 	mov	r4,zero
 8001360:	0141a004 	movi	r5,1664
 8001364:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
 8001368:	0009883a 	mov	r4,zero
 800136c:	01404004 	movi	r5,256
 8001370:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001374:	0009883a 	mov	r4,zero
 8001378:	000b883a 	mov	r5,zero
 800137c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);
 8001380:	0009883a 	mov	r4,zero
 8001384:	01400204 	movi	r5,8
 8001388:	800027c0 	call	800027c <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
 800138c:	0009883a 	mov	r4,zero
 8001390:	01414b04 	movi	r5,1324
 8001394:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//
 8001398:	0009883a 	mov	r4,zero
 800139c:	01400204 	movi	r5,8
 80013a0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//
 80013a4:	0009883a 	mov	r4,zero
 80013a8:	0140a404 	movi	r5,656
 80013ac:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);
 80013b0:	0009883a 	mov	r4,zero
 80013b4:	01401044 	movi	r5,65
 80013b8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 80013bc:	0009883a 	mov	r4,zero
 80013c0:	014004c4 	movi	r5,19
 80013c4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0520);
 80013c8:	0009883a 	mov	r4,zero
 80013cc:	01414804 	movi	r5,1312
 80013d0:	800027c0 	call	800027c <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
 80013d4:	0009883a 	mov	r4,zero
 80013d8:	000b883a 	mov	r5,zero
 80013dc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 80013e0:	0009883a 	mov	r4,zero
 80013e4:	000b883a 	mov	r5,zero
 80013e8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
 80013ec:	0009883a 	mov	r4,zero
 80013f0:	01408404 	movi	r5,528
 80013f4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);
 80013f8:	0009883a 	mov	r4,zero
 80013fc:	01401044 	movi	r5,65
 8001400:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001404:	0009883a 	mov	r4,zero
 8001408:	014004c4 	movi	r5,19
 800140c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001410:	0009883a 	mov	r4,zero
 8001414:	000b883a 	mov	r5,zero
 8001418:	800027c0 	call	800027c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 800141c:	01006c04 	movi	r4,432
 8001420:	01414004 	movi	r5,1280
 8001424:	80010a40 	call	80010a4 <UsbWrite>
}
 8001428:	e037883a 	mov	sp,fp
 800142c:	dfc00117 	ldw	ra,4(sp)
 8001430:	df000017 	ldw	fp,0(sp)
 8001434:	dec00204 	addi	sp,sp,8
 8001438:	f800283a 	ret

0800143c <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
 800143c:	defffe04 	addi	sp,sp,-8
 8001440:	dfc00115 	stw	ra,4(sp)
 8001444:	df000015 	stw	fp,0(sp)
 8001448:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 800144c:	01000084 	movi	r4,2
 8001450:	01414004 	movi	r5,1280
 8001454:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001458:	0009883a 	mov	r4,zero
 800145c:	01414304 	movi	r5,1292
 8001460:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001464:	0009883a 	mov	r4,zero
 8001468:	01400204 	movi	r5,8
 800146c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 8001470:	0009883a 	mov	r4,zero
 8001474:	0140b404 	movi	r5,720
 8001478:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);
 800147c:	0009883a 	mov	r4,zero
 8001480:	01400044 	movi	r5,1
 8001484:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001488:	0009883a 	mov	r4,zero
 800148c:	014004c4 	movi	r5,19
 8001490:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001494:	0009883a 	mov	r4,zero
 8001498:	01414504 	movi	r5,1300
 800149c:	800027c0 	call	800027c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 80014a0:	0009883a 	mov	r4,zero
 80014a4:	0141a004 	movi	r5,1664
 80014a8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
 80014ac:	0009883a 	mov	r4,zero
 80014b0:	01404004 	movi	r5,256
 80014b4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 80014b8:	0009883a 	mov	r4,zero
 80014bc:	000b883a 	mov	r5,zero
 80014c0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0012);//2
 80014c4:	0009883a 	mov	r4,zero
 80014c8:	01400484 	movi	r5,18
 80014cc:	800027c0 	call	800027c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 80014d0:	0009883a 	mov	r4,zero
 80014d4:	01415104 	movi	r5,1348
 80014d8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 80014dc:	0009883a 	mov	r4,zero
 80014e0:	01400204 	movi	r5,8
 80014e4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 80014e8:	0009883a 	mov	r4,zero
 80014ec:	0140a404 	movi	r5,656
 80014f0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 80014f4:	0009883a 	mov	r4,zero
 80014f8:	01401044 	movi	r5,65
 80014fc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001500:	0009883a 	mov	r4,zero
 8001504:	014004c4 	movi	r5,19
 8001508:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 800150c:	0009883a 	mov	r4,zero
 8001510:	01414804 	movi	r5,1312
 8001514:	800027c0 	call	800027c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 8001518:	0009883a 	mov	r4,zero
 800151c:	01415304 	movi	r5,1356
 8001520:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 8001524:	0009883a 	mov	r4,zero
 8001528:	01400204 	movi	r5,8
 800152c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8001530:	0009883a 	mov	r4,zero
 8001534:	0140a404 	movi	r5,656
 8001538:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);//6
 800153c:	0009883a 	mov	r4,zero
 8001540:	01400044 	movi	r5,1
 8001544:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001548:	0009883a 	mov	r4,zero
 800154c:	014004c4 	movi	r5,19
 8001550:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 8001554:	0009883a 	mov	r4,zero
 8001558:	01414b04 	movi	r5,1324
 800155c:	800027c0 	call	800027c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
 8001560:	0009883a 	mov	r4,zero
 8001564:	01415504 	movi	r5,1364
 8001568:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0002);//e
 800156c:	0009883a 	mov	r4,zero
 8001570:	01400084 	movi	r5,2
 8001574:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 8001578:	0009883a 	mov	r4,zero
 800157c:	0140a404 	movi	r5,656
 8001580:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001584:	0009883a 	mov	r4,zero
 8001588:	01401044 	movi	r5,65
 800158c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001590:	0009883a 	mov	r4,zero
 8001594:	014004c4 	movi	r5,19
 8001598:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 800159c:	0009883a 	mov	r4,zero
 80015a0:	01414e04 	movi	r5,1336
 80015a4:	800027c0 	call	800027c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
 80015a8:	0009883a 	mov	r4,zero
 80015ac:	000b883a 	mov	r5,zero
 80015b0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 80015b4:	0009883a 	mov	r4,zero
 80015b8:	000b883a 	mov	r5,zero
 80015bc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0210);//c
 80015c0:	0009883a 	mov	r4,zero
 80015c4:	01408404 	movi	r5,528
 80015c8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//e
 80015cc:	0009883a 	mov	r4,zero
 80015d0:	01401044 	movi	r5,65
 80015d4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 80015d8:	0009883a 	mov	r4,zero
 80015dc:	014004c4 	movi	r5,19
 80015e0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 80015e4:	0009883a 	mov	r4,zero
 80015e8:	000b883a 	mov	r5,zero
 80015ec:	800027c0 	call	800027c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80015f0:	01006c04 	movi	r4,432
 80015f4:	01414004 	movi	r5,1280
 80015f8:	80010a40 	call	80010a4 <UsbWrite>
}
 80015fc:	e037883a 	mov	sp,fp
 8001600:	dfc00117 	ldw	ra,4(sp)
 8001604:	df000017 	ldw	fp,0(sp)
 8001608:	dec00204 	addi	sp,sp,8
 800160c:	f800283a 	ret

08001610 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
 8001610:	defffe04 	addi	sp,sp,-8
 8001614:	dfc00115 	stw	ra,4(sp)
 8001618:	df000015 	stw	fp,0(sp)
 800161c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001620:	01000084 	movi	r4,2
 8001624:	01414004 	movi	r5,1280
 8001628:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x050C);
 800162c:	0009883a 	mov	r4,zero
 8001630:	01414304 	movi	r5,1292
 8001634:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001638:	0009883a 	mov	r4,zero
 800163c:	01400204 	movi	r5,8
 8001640:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 8001644:	0009883a 	mov	r4,zero
 8001648:	0140b404 	movi	r5,720
 800164c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001650:	0009883a 	mov	r4,zero
 8001654:	01400044 	movi	r5,1
 8001658:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 800165c:	0009883a 	mov	r4,zero
 8001660:	014004c4 	movi	r5,19
 8001664:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001668:	0009883a 	mov	r4,zero
 800166c:	01414504 	movi	r5,1300
 8001670:	800027c0 	call	800027c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 8001674:	0009883a 	mov	r4,zero
 8001678:	0141a004 	movi	r5,1664
 800167c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 8001680:	0009883a 	mov	r4,zero
 8001684:	01408004 	movi	r5,512
 8001688:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 800168c:	0009883a 	mov	r4,zero
 8001690:	000b883a 	mov	r5,zero
 8001694:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0009);//2
 8001698:	0009883a 	mov	r4,zero
 800169c:	01400244 	movi	r5,9
 80016a0:	800027c0 	call	800027c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 80016a4:	0009883a 	mov	r4,zero
 80016a8:	01415104 	movi	r5,1348
 80016ac:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 80016b0:	0009883a 	mov	r4,zero
 80016b4:	01400204 	movi	r5,8
 80016b8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 80016bc:	0009883a 	mov	r4,zero
 80016c0:	0140a404 	movi	r5,656
 80016c4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 80016c8:	0009883a 	mov	r4,zero
 80016cc:	01401044 	movi	r5,65
 80016d0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 80016d4:	0009883a 	mov	r4,zero
 80016d8:	014004c4 	movi	r5,19
 80016dc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 80016e0:	0009883a 	mov	r4,zero
 80016e4:	01414804 	movi	r5,1312
 80016e8:	800027c0 	call	800027c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 80016ec:	0009883a 	mov	r4,zero
 80016f0:	01415304 	movi	r5,1356
 80016f4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);//2
 80016f8:	0009883a 	mov	r4,zero
 80016fc:	01400044 	movi	r5,1
 8001700:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8001704:	0009883a 	mov	r4,zero
 8001708:	0140a404 	movi	r5,656
 800170c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 8001710:	0009883a 	mov	r4,zero
 8001714:	01400044 	movi	r5,1
 8001718:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 800171c:	0009883a 	mov	r4,zero
 8001720:	014004c4 	movi	r5,19
 8001724:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 8001728:	0009883a 	mov	r4,zero
 800172c:	01414b04 	movi	r5,1324
 8001730:	800027c0 	call	800027c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 8001734:	0009883a 	mov	r4,zero
 8001738:	000b883a 	mov	r5,zero
 800173c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 8001740:	0009883a 	mov	r4,zero
 8001744:	000b883a 	mov	r5,zero
 8001748:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 800174c:	0009883a 	mov	r4,zero
 8001750:	01408404 	movi	r5,528
 8001754:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001758:	0009883a 	mov	r4,zero
 800175c:	01401044 	movi	r5,65
 8001760:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001764:	0009883a 	mov	r4,zero
 8001768:	014004c4 	movi	r5,19
 800176c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 8001770:	0009883a 	mov	r4,zero
 8001774:	000b883a 	mov	r5,zero
 8001778:	800027c0 	call	800027c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 800177c:	01006c04 	movi	r4,432
 8001780:	01414004 	movi	r5,1280
 8001784:	80010a40 	call	80010a4 <UsbWrite>
}
 8001788:	e037883a 	mov	sp,fp
 800178c:	dfc00117 	ldw	ra,4(sp)
 8001790:	df000017 	ldw	fp,0(sp)
 8001794:	dec00204 	addi	sp,sp,8
 8001798:	f800283a 	ret

0800179c <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
 800179c:	defffe04 	addi	sp,sp,-8
 80017a0:	dfc00115 	stw	ra,4(sp)
 80017a4:	df000015 	stw	fp,0(sp)
 80017a8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 80017ac:	01000084 	movi	r4,2
 80017b0:	01414004 	movi	r5,1280
 80017b4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x050C);
 80017b8:	0009883a 	mov	r4,zero
 80017bc:	01414304 	movi	r5,1292
 80017c0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 80017c4:	0009883a 	mov	r4,zero
 80017c8:	01400204 	movi	r5,8
 80017cc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 80017d0:	0009883a 	mov	r4,zero
 80017d4:	0140b404 	movi	r5,720
 80017d8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);
 80017dc:	0009883a 	mov	r4,zero
 80017e0:	01400044 	movi	r5,1
 80017e4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 80017e8:	0009883a 	mov	r4,zero
 80017ec:	014004c4 	movi	r5,19
 80017f0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0514);
 80017f4:	0009883a 	mov	r4,zero
 80017f8:	01414504 	movi	r5,1300
 80017fc:	800027c0 	call	800027c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 8001800:	0009883a 	mov	r4,zero
 8001804:	0141a004 	movi	r5,1664
 8001808:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 800180c:	0009883a 	mov	r4,zero
 8001810:	01408004 	movi	r5,512
 8001814:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001818:	0009883a 	mov	r4,zero
 800181c:	000b883a 	mov	r5,zero
 8001820:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
 8001824:	0009883a 	mov	r4,zero
 8001828:	01403fc4 	movi	r5,255
 800182c:	800027c0 	call	800027c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
 8001830:	0009883a 	mov	r4,zero
 8001834:	01415704 	movi	r5,1372
 8001838:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 800183c:	0009883a 	mov	r4,zero
 8001840:	01400204 	movi	r5,8
 8001844:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001848:	0009883a 	mov	r4,zero
 800184c:	0140a404 	movi	r5,656
 8001850:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8001854:	0009883a 	mov	r4,zero
 8001858:	01401044 	movi	r5,65
 800185c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001860:	0009883a 	mov	r4,zero
 8001864:	014004c4 	movi	r5,19
 8001868:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 800186c:	0009883a 	mov	r4,zero
 8001870:	01414804 	movi	r5,1312
 8001874:	800027c0 	call	800027c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
 8001878:	0009883a 	mov	r4,zero
 800187c:	01415904 	movi	r5,1380
 8001880:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 8001884:	0009883a 	mov	r4,zero
 8001888:	01400204 	movi	r5,8
 800188c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8001890:	0009883a 	mov	r4,zero
 8001894:	0140a404 	movi	r5,656
 8001898:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 800189c:	0009883a 	mov	r4,zero
 80018a0:	01400044 	movi	r5,1
 80018a4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 80018a8:	0009883a 	mov	r4,zero
 80018ac:	014004c4 	movi	r5,19
 80018b0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 80018b4:	0009883a 	mov	r4,zero
 80018b8:	01414b04 	movi	r5,1324
 80018bc:	800027c0 	call	800027c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
 80018c0:	0009883a 	mov	r4,zero
 80018c4:	01415b04 	movi	r5,1388
 80018c8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 80018cc:	0009883a 	mov	r4,zero
 80018d0:	01400204 	movi	r5,8
 80018d4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 80018d8:	0009883a 	mov	r4,zero
 80018dc:	0140a404 	movi	r5,656
 80018e0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 80018e4:	0009883a 	mov	r4,zero
 80018e8:	01401044 	movi	r5,65
 80018ec:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 80018f0:	0009883a 	mov	r4,zero
 80018f4:	014004c4 	movi	r5,19
 80018f8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 80018fc:	0009883a 	mov	r4,zero
 8001900:	01414e04 	movi	r5,1336
 8001904:	800027c0 	call	800027c <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
 8001908:	0009883a 	mov	r4,zero
 800190c:	01415d04 	movi	r5,1396
 8001910:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 8001914:	0009883a 	mov	r4,zero
 8001918:	01400204 	movi	r5,8
 800191c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 8001920:	0009883a 	mov	r4,zero
 8001924:	0140a404 	movi	r5,656
 8001928:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 800192c:	0009883a 	mov	r4,zero
 8001930:	01400044 	movi	r5,1
 8001934:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 8001938:	0009883a 	mov	r4,zero
 800193c:	014004c4 	movi	r5,19
 8001940:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 8001944:	0009883a 	mov	r4,zero
 8001948:	01415104 	movi	r5,1348
 800194c:	800027c0 	call	800027c <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
 8001950:	0009883a 	mov	r4,zero
 8001954:	01415f04 	movi	r5,1404
 8001958:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0002);//6
 800195c:	0009883a 	mov	r4,zero
 8001960:	01400084 	movi	r5,2
 8001964:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001968:	0009883a 	mov	r4,zero
 800196c:	0140a404 	movi	r5,656
 8001970:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 8001974:	0009883a 	mov	r4,zero
 8001978:	01401044 	movi	r5,65
 800197c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001980:	0009883a 	mov	r4,zero
 8001984:	014004c4 	movi	r5,19
 8001988:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 800198c:	0009883a 	mov	r4,zero
 8001990:	01415404 	movi	r5,1360
 8001994:	800027c0 	call	800027c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
 8001998:	0009883a 	mov	r4,zero
 800199c:	000b883a 	mov	r5,zero
 80019a0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 80019a4:	0009883a 	mov	r4,zero
 80019a8:	000b883a 	mov	r5,zero
 80019ac:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0210);//4
 80019b0:	0009883a 	mov	r4,zero
 80019b4:	01408404 	movi	r5,528
 80019b8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//6
 80019bc:	0009883a 	mov	r4,zero
 80019c0:	01401044 	movi	r5,65
 80019c4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 80019c8:	0009883a 	mov	r4,zero
 80019cc:	014004c4 	movi	r5,19
 80019d0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 80019d4:	0009883a 	mov	r4,zero
 80019d8:	000b883a 	mov	r5,zero
 80019dc:	800027c0 	call	800027c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80019e0:	01006c04 	movi	r4,432
 80019e4:	01414004 	movi	r5,1280
 80019e8:	80010a40 	call	80010a4 <UsbWrite>
}
 80019ec:	e037883a 	mov	sp,fp
 80019f0:	dfc00117 	ldw	ra,4(sp)
 80019f4:	df000017 	ldw	fp,0(sp)
 80019f8:	dec00204 	addi	sp,sp,8
 80019fc:	f800283a 	ret

08001a00 <UsbSetConfig>:

void UsbSetConfig()
{
 8001a00:	defffe04 	addi	sp,sp,-8
 8001a04:	dfc00115 	stw	ra,4(sp)
 8001a08:	df000015 	stw	fp,0(sp)
 8001a0c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001a10:	01000084 	movi	r4,2
 8001a14:	01414004 	movi	r5,1280
 8001a18:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001a1c:	0009883a 	mov	r4,zero
 8001a20:	01414304 	movi	r5,1292
 8001a24:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001a28:	0009883a 	mov	r4,zero
 8001a2c:	01400204 	movi	r5,8
 8001a30:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 8001a34:	0009883a 	mov	r4,zero
 8001a38:	0140b404 	movi	r5,720
 8001a3c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001a40:	0009883a 	mov	r4,zero
 8001a44:	01400044 	movi	r5,1
 8001a48:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001a4c:	0009883a 	mov	r4,zero
 8001a50:	014004c4 	movi	r5,19
 8001a54:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001a58:	0009883a 	mov	r4,zero
 8001a5c:	01414504 	movi	r5,1300
 8001a60:	800027c0 	call	800027c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
 8001a64:	0009883a 	mov	r4,zero
 8001a68:	01424004 	movi	r5,2304
 8001a6c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
 8001a70:	0009883a 	mov	r4,zero
 8001a74:	01400044 	movi	r5,1
 8001a78:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001a7c:	0009883a 	mov	r4,zero
 8001a80:	000b883a 	mov	r5,zero
 8001a84:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001a88:	0009883a 	mov	r4,zero
 8001a8c:	000b883a 	mov	r5,zero
 8001a90:	800027c0 	call	800027c <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 8001a94:	0009883a 	mov	r4,zero
 8001a98:	000b883a 	mov	r5,zero
 8001a9c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 8001aa0:	0009883a 	mov	r4,zero
 8001aa4:	000b883a 	mov	r5,zero
 8001aa8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 8001aac:	0009883a 	mov	r4,zero
 8001ab0:	0140a404 	movi	r5,656
 8001ab4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 8001ab8:	0009883a 	mov	r4,zero
 8001abc:	01401044 	movi	r5,65
 8001ac0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001ac4:	0009883a 	mov	r4,zero
 8001ac8:	014004c4 	movi	r5,19
 8001acc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001ad0:	0009883a 	mov	r4,zero
 8001ad4:	000b883a 	mov	r5,zero
 8001ad8:	800027c0 	call	800027c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001adc:	01006c04 	movi	r4,432
 8001ae0:	01414004 	movi	r5,1280
 8001ae4:	80010a40 	call	80010a4 <UsbWrite>

}
 8001ae8:	e037883a 	mov	sp,fp
 8001aec:	dfc00117 	ldw	ra,4(sp)
 8001af0:	df000017 	ldw	fp,0(sp)
 8001af4:	dec00204 	addi	sp,sp,8
 8001af8:	f800283a 	ret

08001afc <UsbClassRequest>:

void UsbClassRequest()
{
 8001afc:	defffe04 	addi	sp,sp,-8
 8001b00:	dfc00115 	stw	ra,4(sp)
 8001b04:	df000015 	stw	fp,0(sp)
 8001b08:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001b0c:	01000084 	movi	r4,2
 8001b10:	01414004 	movi	r5,1280
 8001b14:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001b18:	0009883a 	mov	r4,zero
 8001b1c:	01414304 	movi	r5,1292
 8001b20:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001b24:	0009883a 	mov	r4,zero
 8001b28:	01400204 	movi	r5,8
 8001b2c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 8001b30:	0009883a 	mov	r4,zero
 8001b34:	0140b404 	movi	r5,720
 8001b38:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001b3c:	0009883a 	mov	r4,zero
 8001b40:	01400044 	movi	r5,1
 8001b44:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001b48:	0009883a 	mov	r4,zero
 8001b4c:	014004c4 	movi	r5,19
 8001b50:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001b54:	0009883a 	mov	r4,zero
 8001b58:	01414504 	movi	r5,1300
 8001b5c:	800027c0 	call	800027c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
 8001b60:	0009883a 	mov	r4,zero
 8001b64:	01428844 	movi	r5,2593
 8001b68:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
 8001b6c:	0009883a 	mov	r4,zero
 8001b70:	000b883a 	mov	r5,zero
 8001b74:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001b78:	0009883a 	mov	r4,zero
 8001b7c:	000b883a 	mov	r5,zero
 8001b80:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001b84:	0009883a 	mov	r4,zero
 8001b88:	000b883a 	mov	r5,zero
 8001b8c:	800027c0 	call	800027c <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 8001b90:	0009883a 	mov	r4,zero
 8001b94:	000b883a 	mov	r5,zero
 8001b98:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
 8001b9c:	0009883a 	mov	r4,zero
 8001ba0:	000b883a 	mov	r5,zero
 8001ba4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 8001ba8:	0009883a 	mov	r4,zero
 8001bac:	0140a404 	movi	r5,656
 8001bb0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 8001bb4:	0009883a 	mov	r4,zero
 8001bb8:	01401044 	movi	r5,65
 8001bbc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001bc0:	0009883a 	mov	r4,zero
 8001bc4:	014004c4 	movi	r5,19
 8001bc8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001bcc:	0009883a 	mov	r4,zero
 8001bd0:	000b883a 	mov	r5,zero
 8001bd4:	800027c0 	call	800027c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001bd8:	01006c04 	movi	r4,432
 8001bdc:	01414004 	movi	r5,1280
 8001be0:	80010a40 	call	80010a4 <UsbWrite>
}
 8001be4:	e037883a 	mov	sp,fp
 8001be8:	dfc00117 	ldw	ra,4(sp)
 8001bec:	df000017 	ldw	fp,0(sp)
 8001bf0:	dec00204 	addi	sp,sp,8
 8001bf4:	f800283a 	ret

08001bf8 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
 8001bf8:	defffe04 	addi	sp,sp,-8
 8001bfc:	dfc00115 	stw	ra,4(sp)
 8001c00:	df000015 	stw	fp,0(sp)
 8001c04:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001c08:	01000084 	movi	r4,2
 8001c0c:	01414004 	movi	r5,1280
 8001c10:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001c14:	0009883a 	mov	r4,zero
 8001c18:	01414304 	movi	r5,1292
 8001c1c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001c20:	0009883a 	mov	r4,zero
 8001c24:	01400204 	movi	r5,8
 8001c28:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 8001c2c:	0009883a 	mov	r4,zero
 8001c30:	0140b404 	movi	r5,720
 8001c34:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001c38:	0009883a 	mov	r4,zero
 8001c3c:	01400044 	movi	r5,1
 8001c40:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001c44:	0009883a 	mov	r4,zero
 8001c48:	014004c4 	movi	r5,19
 8001c4c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001c50:	0009883a 	mov	r4,zero
 8001c54:	01414504 	movi	r5,1300
 8001c58:	800027c0 	call	800027c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 8001c5c:	0009883a 	mov	r4,zero
 8001c60:	0141a044 	movi	r5,1665
 8001c64:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
 8001c68:	0009883a 	mov	r4,zero
 8001c6c:	01484004 	movi	r5,8448
 8001c70:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001c74:	0009883a 	mov	r4,zero
 8001c78:	000b883a 	mov	r5,zero
 8001c7c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 8001c80:	0009883a 	mov	r4,zero
 8001c84:	01401ec4 	movi	r5,123
 8001c88:	800027c0 	call	800027c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 8001c8c:	0009883a 	mov	r4,zero
 8001c90:	01415104 	movi	r5,1348
 8001c94:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001c98:	0009883a 	mov	r4,zero
 8001c9c:	01400204 	movi	r5,8
 8001ca0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001ca4:	0009883a 	mov	r4,zero
 8001ca8:	0140a404 	movi	r5,656
 8001cac:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8001cb0:	0009883a 	mov	r4,zero
 8001cb4:	01401044 	movi	r5,65
 8001cb8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001cbc:	0009883a 	mov	r4,zero
 8001cc0:	014004c4 	movi	r5,19
 8001cc4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 8001cc8:	0009883a 	mov	r4,zero
 8001ccc:	01414804 	movi	r5,1312
 8001cd0:	800027c0 	call	800027c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 8001cd4:	0009883a 	mov	r4,zero
 8001cd8:	000b883a 	mov	r5,zero
 8001cdc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 8001ce0:	0009883a 	mov	r4,zero
 8001ce4:	000b883a 	mov	r5,zero
 8001ce8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 8001cec:	0009883a 	mov	r4,zero
 8001cf0:	01408404 	movi	r5,528
 8001cf4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001cf8:	0009883a 	mov	r4,zero
 8001cfc:	01401044 	movi	r5,65
 8001d00:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001d04:	0009883a 	mov	r4,zero
 8001d08:	014004c4 	movi	r5,19
 8001d0c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 8001d10:	0009883a 	mov	r4,zero
 8001d14:	000b883a 	mov	r5,zero
 8001d18:	800027c0 	call	800027c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001d1c:	01006c04 	movi	r4,432
 8001d20:	01414004 	movi	r5,1280
 8001d24:	80010a40 	call	80010a4 <UsbWrite>

}
 8001d28:	e037883a 	mov	sp,fp
 8001d2c:	dfc00117 	ldw	ra,4(sp)
 8001d30:	df000017 	ldw	fp,0(sp)
 8001d34:	dec00204 	addi	sp,sp,8
 8001d38:	f800283a 	ret

08001d3c <UsbGetReportDesc>:


void UsbGetReportDesc()
{
 8001d3c:	defffe04 	addi	sp,sp,-8
 8001d40:	dfc00115 	stw	ra,4(sp)
 8001d44:	df000015 	stw	fp,0(sp)
 8001d48:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001d4c:	01000084 	movi	r4,2
 8001d50:	01414004 	movi	r5,1280
 8001d54:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001d58:	0009883a 	mov	r4,zero
 8001d5c:	01414304 	movi	r5,1292
 8001d60:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001d64:	0009883a 	mov	r4,zero
 8001d68:	01400204 	movi	r5,8
 8001d6c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 8001d70:	0009883a 	mov	r4,zero
 8001d74:	0140b404 	movi	r5,720
 8001d78:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001d7c:	0009883a 	mov	r4,zero
 8001d80:	01400044 	movi	r5,1
 8001d84:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001d88:	0009883a 	mov	r4,zero
 8001d8c:	014004c4 	movi	r5,19
 8001d90:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001d94:	0009883a 	mov	r4,zero
 8001d98:	01414504 	movi	r5,1300
 8001d9c:	800027c0 	call	800027c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 8001da0:	0009883a 	mov	r4,zero
 8001da4:	0141a044 	movi	r5,1665
 8001da8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
 8001dac:	0009883a 	mov	r4,zero
 8001db0:	01488004 	movi	r5,8704
 8001db4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001db8:	0009883a 	mov	r4,zero
 8001dbc:	000b883a 	mov	r5,zero
 8001dc0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 8001dc4:	0009883a 	mov	r4,zero
 8001dc8:	01401ec4 	movi	r5,123
 8001dcc:	800027c0 	call	800027c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
 8001dd0:	0009883a 	mov	r4,zero
 8001dd4:	01416004 	movi	r5,1408
 8001dd8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001ddc:	0009883a 	mov	r4,zero
 8001de0:	01400204 	movi	r5,8
 8001de4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001de8:	0009883a 	mov	r4,zero
 8001dec:	0140a404 	movi	r5,656
 8001df0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8001df4:	0009883a 	mov	r4,zero
 8001df8:	01401044 	movi	r5,65
 8001dfc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001e00:	0009883a 	mov	r4,zero
 8001e04:	014004c4 	movi	r5,19
 8001e08:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 8001e0c:	0009883a 	mov	r4,zero
 8001e10:	01414804 	movi	r5,1312
 8001e14:	800027c0 	call	800027c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
 8001e18:	0009883a 	mov	r4,zero
 8001e1c:	01416204 	movi	r5,1416
 8001e20:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 8001e24:	0009883a 	mov	r4,zero
 8001e28:	01400204 	movi	r5,8
 8001e2c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8001e30:	0009883a 	mov	r4,zero
 8001e34:	0140a404 	movi	r5,656
 8001e38:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 8001e3c:	0009883a 	mov	r4,zero
 8001e40:	01400044 	movi	r5,1
 8001e44:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001e48:	0009883a 	mov	r4,zero
 8001e4c:	014004c4 	movi	r5,19
 8001e50:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 8001e54:	0009883a 	mov	r4,zero
 8001e58:	01414b04 	movi	r5,1324
 8001e5c:	800027c0 	call	800027c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
 8001e60:	0009883a 	mov	r4,zero
 8001e64:	01416404 	movi	r5,1424
 8001e68:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 8001e6c:	0009883a 	mov	r4,zero
 8001e70:	01400204 	movi	r5,8
 8001e74:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 8001e78:	0009883a 	mov	r4,zero
 8001e7c:	0140a404 	movi	r5,656
 8001e80:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001e84:	0009883a 	mov	r4,zero
 8001e88:	01401044 	movi	r5,65
 8001e8c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001e90:	0009883a 	mov	r4,zero
 8001e94:	014004c4 	movi	r5,19
 8001e98:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 8001e9c:	0009883a 	mov	r4,zero
 8001ea0:	01414e04 	movi	r5,1336
 8001ea4:	800027c0 	call	800027c <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
 8001ea8:	0009883a 	mov	r4,zero
 8001eac:	01416604 	movi	r5,1432
 8001eb0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 8001eb4:	0009883a 	mov	r4,zero
 8001eb8:	01400204 	movi	r5,8
 8001ebc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 8001ec0:	0009883a 	mov	r4,zero
 8001ec4:	0140a404 	movi	r5,656
 8001ec8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 8001ecc:	0009883a 	mov	r4,zero
 8001ed0:	01400044 	movi	r5,1
 8001ed4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 8001ed8:	0009883a 	mov	r4,zero
 8001edc:	014004c4 	movi	r5,19
 8001ee0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 8001ee4:	0009883a 	mov	r4,zero
 8001ee8:	01415104 	movi	r5,1348
 8001eec:	800027c0 	call	800027c <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
 8001ef0:	0009883a 	mov	r4,zero
 8001ef4:	01416804 	movi	r5,1440
 8001ef8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001efc:	0009883a 	mov	r4,zero
 8001f00:	01400204 	movi	r5,8
 8001f04:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001f08:	0009883a 	mov	r4,zero
 8001f0c:	0140a404 	movi	r5,656
 8001f10:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 8001f14:	0009883a 	mov	r4,zero
 8001f18:	01401044 	movi	r5,65
 8001f1c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001f20:	0009883a 	mov	r4,zero
 8001f24:	014004c4 	movi	r5,19
 8001f28:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 8001f2c:	0009883a 	mov	r4,zero
 8001f30:	01415404 	movi	r5,1360
 8001f34:	800027c0 	call	800027c <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
 8001f38:	0009883a 	mov	r4,zero
 8001f3c:	01416a04 	movi	r5,1448
 8001f40:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 8001f44:	0009883a 	mov	r4,zero
 8001f48:	01400204 	movi	r5,8
 8001f4c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8001f50:	0009883a 	mov	r4,zero
 8001f54:	0140a404 	movi	r5,656
 8001f58:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 8001f5c:	0009883a 	mov	r4,zero
 8001f60:	01400044 	movi	r5,1
 8001f64:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001f68:	0009883a 	mov	r4,zero
 8001f6c:	014004c4 	movi	r5,19
 8001f70:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x055c);//a
 8001f74:	0009883a 	mov	r4,zero
 8001f78:	01415704 	movi	r5,1372
 8001f7c:	800027c0 	call	800027c <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
 8001f80:	0009883a 	mov	r4,zero
 8001f84:	01416c04 	movi	r5,1456
 8001f88:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 8001f8c:	0009883a 	mov	r4,zero
 8001f90:	01400204 	movi	r5,8
 8001f94:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//560
 8001f98:	0009883a 	mov	r4,zero
 8001f9c:	0140a404 	movi	r5,656
 8001fa0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
 8001fa4:	0009883a 	mov	r4,zero
 8001fa8:	01401044 	movi	r5,65
 8001fac:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001fb0:	0009883a 	mov	r4,zero
 8001fb4:	014004c4 	movi	r5,19
 8001fb8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0568);//6
 8001fbc:	0009883a 	mov	r4,zero
 8001fc0:	01415a04 	movi	r5,1384
 8001fc4:	800027c0 	call	800027c <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
 8001fc8:	0009883a 	mov	r4,zero
 8001fcc:	01416e04 	movi	r5,1464
 8001fd0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0003);//a
 8001fd4:	0009883a 	mov	r4,zero
 8001fd8:	014000c4 	movi	r5,3
 8001fdc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 8001fe0:	0009883a 	mov	r4,zero
 8001fe4:	0140a404 	movi	r5,656
 8001fe8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 8001fec:	0009883a 	mov	r4,zero
 8001ff0:	01400044 	movi	r5,1
 8001ff4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//570
 8001ff8:	0009883a 	mov	r4,zero
 8001ffc:	014004c4 	movi	r5,19
 8002000:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0574);//2
 8002004:	0009883a 	mov	r4,zero
 8002008:	01415d04 	movi	r5,1396
 800200c:	800027c0 	call	800027c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
 8002010:	0009883a 	mov	r4,zero
 8002014:	000b883a 	mov	r5,zero
 8002018:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 800201c:	0009883a 	mov	r4,zero
 8002020:	000b883a 	mov	r5,zero
 8002024:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0210);//8
 8002028:	0009883a 	mov	r4,zero
 800202c:	01408404 	movi	r5,528
 8002030:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8002034:	0009883a 	mov	r4,zero
 8002038:	01401044 	movi	r5,65
 800203c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8002040:	0009883a 	mov	r4,zero
 8002044:	014004c4 	movi	r5,19
 8002048:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 800204c:	0009883a 	mov	r4,zero
 8002050:	000b883a 	mov	r5,zero
 8002054:	800027c0 	call	800027c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8002058:	01006c04 	movi	r4,432
 800205c:	01414004 	movi	r5,1280
 8002060:	80010a40 	call	80010a4 <UsbWrite>

}
 8002064:	e037883a 	mov	sp,fp
 8002068:	dfc00117 	ldw	ra,4(sp)
 800206c:	df000017 	ldw	fp,0(sp)
 8002070:	dec00204 	addi	sp,sp,8
 8002074:	f800283a 	ret

08002078 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
 8002078:	defffd04 	addi	sp,sp,-12
 800207c:	dfc00215 	stw	ra,8(sp)
 8002080:	df000115 	stw	fp,4(sp)
 8002084:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
 8002088:	01005104 	movi	r4,324
 800208c:	80010f80 	call	80010f8 <UsbRead>
 8002090:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
 8002094:	01005104 	movi	r4,324
 8002098:	000b883a 	mov	r5,zero
 800209c:	80010a40 	call	80010a4 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 80020a0:	00000d06 	br	80020d8 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
 80020a4:	e0bfff0b 	ldhu	r2,-4(fp)
 80020a8:	10000526 	beq	r2,zero,80020c0 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
 80020ac:	e0bfff0b 	ldhu	r2,-4(fp)
 80020b0:	01020074 	movhi	r4,2049
 80020b4:	2106b904 	addi	r4,r4,6884
 80020b8:	100b883a 	mov	r5,r2
 80020bc:	80022240 	call	8002224 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
 80020c0:	01005104 	movi	r4,324
 80020c4:	80010f80 	call	80010f8 <UsbRead>
 80020c8:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 80020cc:	01005104 	movi	r4,324
 80020d0:	000b883a 	mov	r5,zero
 80020d4:	80010a40 	call	80010a4 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 80020d8:	e0bfff0b 	ldhu	r2,-4(fp)
 80020dc:	10840018 	cmpnei	r2,r2,4096
 80020e0:	103ff01e 	bne	r2,zero,80020a4 <__alt_data_end+0xfc0020a4>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
 80020e4:	e0bfff0b 	ldhu	r2,-4(fp)
}
 80020e8:	e037883a 	mov	sp,fp
 80020ec:	dfc00117 	ldw	ra,4(sp)
 80020f0:	df000017 	ldw	fp,0(sp)
 80020f4:	dec00204 	addi	sp,sp,8
 80020f8:	f800283a 	ret

080020fc <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
 80020fc:	defffd04 	addi	sp,sp,-12
 8002100:	dfc00215 	stw	ra,8(sp)
 8002104:	df000115 	stw	fp,4(sp)
 8002108:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
 800210c:	010000c4 	movi	r4,3
 8002110:	80002f40 	call	80002f4 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
 8002114:	01005104 	movi	r4,324
 8002118:	80010f80 	call	80010f8 <UsbRead>
 800211c:	10bfffcc 	andi	r2,r2,65535
 8002120:	10840018 	cmpnei	r2,r2,4096
 8002124:	1000091e 	bne	r2,zero,800214c <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 8002128:	01005104 	movi	r4,324
 800212c:	000b883a 	mov	r5,zero
 8002130:	80010a40 	call	80010a4 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8002134:	0001883a 	nop
 8002138:	010000c4 	movi	r4,3
 800213c:	80002f40 	call	80002f4 <IO_read>
 8002140:	10bfffcc 	andi	r2,r2,65535
 8002144:	1080040c 	andi	r2,r2,16
 8002148:	103ffb26 	beq	r2,zero,8002138 <__alt_data_end+0xfc002138>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
 800214c:	01000084 	movi	r4,2
 8002150:	01414204 	movi	r5,1288
 8002154:	800027c0 	call	800027c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8002158:	0009883a 	mov	r4,zero
 800215c:	80002f40 	call	80002f4 <IO_read>
 8002160:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
 8002164:	e0bfff0b 	ldhu	r2,-4(fp)
}
 8002168:	e037883a 	mov	sp,fp
 800216c:	dfc00117 	ldw	ra,4(sp)
 8002170:	df000017 	ldw	fp,0(sp)
 8002174:	dec00204 	addi	sp,sp,8
 8002178:	f800283a 	ret

0800217c <UsbPrintMem>:


void UsbPrintMem()
{
 800217c:	defffc04 	addi	sp,sp,-16
 8002180:	dfc00315 	stw	ra,12(sp)
 8002184:	df000215 	stw	fp,8(sp)
 8002188:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
 800218c:	01000084 	movi	r4,2
 8002190:	01414004 	movi	r5,1280
 8002194:	800027c0 	call	800027c <IO_write>
	for (i = 0; i <= 200; i += 2)
 8002198:	e03ffe15 	stw	zero,-8(fp)
 800219c:	00000e06 	br	80021d8 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
 80021a0:	0009883a 	mov	r4,zero
 80021a4:	80002f40 	call	80002f4 <IO_read>
 80021a8:	10bfffcc 	andi	r2,r2,65535
 80021ac:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
 80021b0:	e0bffe17 	ldw	r2,-8(fp)
 80021b4:	10814004 	addi	r2,r2,1280
 80021b8:	01020074 	movhi	r4,2049
 80021bc:	2106c104 	addi	r4,r4,6916
 80021c0:	100b883a 	mov	r5,r2
 80021c4:	e1bfff17 	ldw	r6,-4(fp)
 80021c8:	80022240 	call	8002224 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
 80021cc:	e0bffe17 	ldw	r2,-8(fp)
 80021d0:	10800084 	addi	r2,r2,2
 80021d4:	e0bffe15 	stw	r2,-8(fp)
 80021d8:	e0bffe17 	ldw	r2,-8(fp)
 80021dc:	10803250 	cmplti	r2,r2,201
 80021e0:	103fef1e 	bne	r2,zero,80021a0 <__alt_data_end+0xfc0021a0>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
 80021e4:	e037883a 	mov	sp,fp
 80021e8:	dfc00117 	ldw	ra,4(sp)
 80021ec:	df000017 	ldw	fp,0(sp)
 80021f0:	dec00204 	addi	sp,sp,8
 80021f4:	f800283a 	ret

080021f8 <_printf_r>:
 80021f8:	defffd04 	addi	sp,sp,-12
 80021fc:	dfc00015 	stw	ra,0(sp)
 8002200:	d9800115 	stw	r6,4(sp)
 8002204:	d9c00215 	stw	r7,8(sp)
 8002208:	280d883a 	mov	r6,r5
 800220c:	21400217 	ldw	r5,8(r4)
 8002210:	d9c00104 	addi	r7,sp,4
 8002214:	80023c40 	call	80023c4 <___vfprintf_internal_r>
 8002218:	dfc00017 	ldw	ra,0(sp)
 800221c:	dec00304 	addi	sp,sp,12
 8002220:	f800283a 	ret

08002224 <printf>:
 8002224:	defffc04 	addi	sp,sp,-16
 8002228:	dfc00015 	stw	ra,0(sp)
 800222c:	d9400115 	stw	r5,4(sp)
 8002230:	d9800215 	stw	r6,8(sp)
 8002234:	d9c00315 	stw	r7,12(sp)
 8002238:	00820074 	movhi	r2,2049
 800223c:	108e3204 	addi	r2,r2,14536
 8002240:	10800017 	ldw	r2,0(r2)
 8002244:	200b883a 	mov	r5,r4
 8002248:	d9800104 	addi	r6,sp,4
 800224c:	11000217 	ldw	r4,8(r2)
 8002250:	80044c00 	call	80044c0 <__vfprintf_internal>
 8002254:	dfc00017 	ldw	ra,0(sp)
 8002258:	dec00404 	addi	sp,sp,16
 800225c:	f800283a 	ret

08002260 <_puts_r>:
 8002260:	defff604 	addi	sp,sp,-40
 8002264:	dc000715 	stw	r16,28(sp)
 8002268:	2021883a 	mov	r16,r4
 800226c:	2809883a 	mov	r4,r5
 8002270:	dc400815 	stw	r17,32(sp)
 8002274:	dfc00915 	stw	ra,36(sp)
 8002278:	2823883a 	mov	r17,r5
 800227c:	800232c0 	call	800232c <strlen>
 8002280:	00c20074 	movhi	r3,2049
 8002284:	18ce3204 	addi	r3,r3,14536
 8002288:	18c00017 	ldw	r3,0(r3)
 800228c:	11000044 	addi	r4,r2,1
 8002290:	d8800115 	stw	r2,4(sp)
 8002294:	18c00217 	ldw	r3,8(r3)
 8002298:	01420074 	movhi	r5,2049
 800229c:	2946c604 	addi	r5,r5,6936
 80022a0:	1880030b 	ldhu	r2,12(r3)
 80022a4:	d9400215 	stw	r5,8(sp)
 80022a8:	d9000615 	stw	r4,24(sp)
 80022ac:	01400044 	movi	r5,1
 80022b0:	01000084 	movi	r4,2
 80022b4:	d9000515 	stw	r4,20(sp)
 80022b8:	dc400015 	stw	r17,0(sp)
 80022bc:	d9400315 	stw	r5,12(sp)
 80022c0:	dec00415 	stw	sp,16(sp)
 80022c4:	1108000c 	andi	r4,r2,8192
 80022c8:	2000061e 	bne	r4,zero,80022e4 <_puts_r+0x84>
 80022cc:	19401917 	ldw	r5,100(r3)
 80022d0:	0137ffc4 	movi	r4,-8193
 80022d4:	10880014 	ori	r2,r2,8192
 80022d8:	2908703a 	and	r4,r5,r4
 80022dc:	1880030d 	sth	r2,12(r3)
 80022e0:	19001915 	stw	r4,100(r3)
 80022e4:	81400217 	ldw	r5,8(r16)
 80022e8:	8009883a 	mov	r4,r16
 80022ec:	d9800404 	addi	r6,sp,16
 80022f0:	80069840 	call	8006984 <__sfvwrite_r>
 80022f4:	1000061e 	bne	r2,zero,8002310 <_puts_r+0xb0>
 80022f8:	00800284 	movi	r2,10
 80022fc:	dfc00917 	ldw	ra,36(sp)
 8002300:	dc400817 	ldw	r17,32(sp)
 8002304:	dc000717 	ldw	r16,28(sp)
 8002308:	dec00a04 	addi	sp,sp,40
 800230c:	f800283a 	ret
 8002310:	00bfffc4 	movi	r2,-1
 8002314:	003ff906 	br	80022fc <__alt_data_end+0xfc0022fc>

08002318 <puts>:
 8002318:	00820074 	movhi	r2,2049
 800231c:	108e3204 	addi	r2,r2,14536
 8002320:	200b883a 	mov	r5,r4
 8002324:	11000017 	ldw	r4,0(r2)
 8002328:	80022601 	jmpi	8002260 <_puts_r>

0800232c <strlen>:
 800232c:	208000cc 	andi	r2,r4,3
 8002330:	10002026 	beq	r2,zero,80023b4 <strlen+0x88>
 8002334:	20800007 	ldb	r2,0(r4)
 8002338:	10002026 	beq	r2,zero,80023bc <strlen+0x90>
 800233c:	2005883a 	mov	r2,r4
 8002340:	00000206 	br	800234c <strlen+0x20>
 8002344:	10c00007 	ldb	r3,0(r2)
 8002348:	18001826 	beq	r3,zero,80023ac <strlen+0x80>
 800234c:	10800044 	addi	r2,r2,1
 8002350:	10c000cc 	andi	r3,r2,3
 8002354:	183ffb1e 	bne	r3,zero,8002344 <__alt_data_end+0xfc002344>
 8002358:	10c00017 	ldw	r3,0(r2)
 800235c:	01ffbff4 	movhi	r7,65279
 8002360:	39ffbfc4 	addi	r7,r7,-257
 8002364:	00ca303a 	nor	r5,zero,r3
 8002368:	01a02074 	movhi	r6,32897
 800236c:	19c7883a 	add	r3,r3,r7
 8002370:	31a02004 	addi	r6,r6,-32640
 8002374:	1946703a 	and	r3,r3,r5
 8002378:	1986703a 	and	r3,r3,r6
 800237c:	1800091e 	bne	r3,zero,80023a4 <strlen+0x78>
 8002380:	10800104 	addi	r2,r2,4
 8002384:	10c00017 	ldw	r3,0(r2)
 8002388:	19cb883a 	add	r5,r3,r7
 800238c:	00c6303a 	nor	r3,zero,r3
 8002390:	28c6703a 	and	r3,r5,r3
 8002394:	1986703a 	and	r3,r3,r6
 8002398:	183ff926 	beq	r3,zero,8002380 <__alt_data_end+0xfc002380>
 800239c:	00000106 	br	80023a4 <strlen+0x78>
 80023a0:	10800044 	addi	r2,r2,1
 80023a4:	10c00007 	ldb	r3,0(r2)
 80023a8:	183ffd1e 	bne	r3,zero,80023a0 <__alt_data_end+0xfc0023a0>
 80023ac:	1105c83a 	sub	r2,r2,r4
 80023b0:	f800283a 	ret
 80023b4:	2005883a 	mov	r2,r4
 80023b8:	003fe706 	br	8002358 <__alt_data_end+0xfc002358>
 80023bc:	0005883a 	mov	r2,zero
 80023c0:	f800283a 	ret

080023c4 <___vfprintf_internal_r>:
 80023c4:	defeb604 	addi	sp,sp,-1320
 80023c8:	dfc14915 	stw	ra,1316(sp)
 80023cc:	ddc14715 	stw	r23,1308(sp)
 80023d0:	dd814615 	stw	r22,1304(sp)
 80023d4:	202f883a 	mov	r23,r4
 80023d8:	282d883a 	mov	r22,r5
 80023dc:	d9812a15 	stw	r6,1192(sp)
 80023e0:	d9c12d15 	stw	r7,1204(sp)
 80023e4:	df014815 	stw	fp,1312(sp)
 80023e8:	dd414515 	stw	r21,1300(sp)
 80023ec:	dd014415 	stw	r20,1296(sp)
 80023f0:	dcc14315 	stw	r19,1292(sp)
 80023f4:	dc814215 	stw	r18,1288(sp)
 80023f8:	dc414115 	stw	r17,1284(sp)
 80023fc:	dc014015 	stw	r16,1280(sp)
 8002400:	80070440 	call	8007044 <_localeconv_r>
 8002404:	10800017 	ldw	r2,0(r2)
 8002408:	1009883a 	mov	r4,r2
 800240c:	d8813515 	stw	r2,1236(sp)
 8002410:	800232c0 	call	800232c <strlen>
 8002414:	d8813815 	stw	r2,1248(sp)
 8002418:	b8000226 	beq	r23,zero,8002424 <___vfprintf_internal_r+0x60>
 800241c:	b8800e17 	ldw	r2,56(r23)
 8002420:	10010526 	beq	r2,zero,8002838 <___vfprintf_internal_r+0x474>
 8002424:	b0c0030b 	ldhu	r3,12(r22)
 8002428:	1908000c 	andi	r4,r3,8192
 800242c:	1805883a 	mov	r2,r3
 8002430:	2000071e 	bne	r4,zero,8002450 <___vfprintf_internal_r+0x8c>
 8002434:	b1001917 	ldw	r4,100(r22)
 8002438:	18880014 	ori	r2,r3,8192
 800243c:	00f7ffc4 	movi	r3,-8193
 8002440:	20c8703a 	and	r4,r4,r3
 8002444:	b080030d 	sth	r2,12(r22)
 8002448:	1007883a 	mov	r3,r2
 800244c:	b1001915 	stw	r4,100(r22)
 8002450:	1100020c 	andi	r4,r2,8
 8002454:	2000a826 	beq	r4,zero,80026f8 <___vfprintf_internal_r+0x334>
 8002458:	b1000417 	ldw	r4,16(r22)
 800245c:	2000a626 	beq	r4,zero,80026f8 <___vfprintf_internal_r+0x334>
 8002460:	1080068c 	andi	r2,r2,26
 8002464:	01000284 	movi	r4,10
 8002468:	1100ac26 	beq	r2,r4,800271c <___vfprintf_internal_r+0x358>
 800246c:	d8c10e04 	addi	r3,sp,1080
 8002470:	d9010dc4 	addi	r4,sp,1079
 8002474:	d9400404 	addi	r5,sp,16
 8002478:	05020074 	movhi	r20,2049
 800247c:	1905c83a 	sub	r2,r3,r4
 8002480:	a506d784 	addi	r20,r20,7006
 8002484:	d8c12815 	stw	r3,1184(sp)
 8002488:	d9012915 	stw	r4,1188(sp)
 800248c:	d9411e15 	stw	r5,1144(sp)
 8002490:	d8012015 	stw	zero,1152(sp)
 8002494:	d8011f15 	stw	zero,1148(sp)
 8002498:	d8013315 	stw	zero,1228(sp)
 800249c:	d8013715 	stw	zero,1244(sp)
 80024a0:	d8013915 	stw	zero,1252(sp)
 80024a4:	d8013b15 	stw	zero,1260(sp)
 80024a8:	d8013a15 	stw	zero,1256(sp)
 80024ac:	d8012f15 	stw	zero,1212(sp)
 80024b0:	2811883a 	mov	r8,r5
 80024b4:	d8813c15 	stw	r2,1264(sp)
 80024b8:	d8c12a17 	ldw	r3,1192(sp)
 80024bc:	18800007 	ldb	r2,0(r3)
 80024c0:	10021326 	beq	r2,zero,8002d10 <___vfprintf_internal_r+0x94c>
 80024c4:	00c00944 	movi	r3,37
 80024c8:	dc012a17 	ldw	r16,1192(sp)
 80024cc:	10c0021e 	bne	r2,r3,80024d8 <___vfprintf_internal_r+0x114>
 80024d0:	00001606 	br	800252c <___vfprintf_internal_r+0x168>
 80024d4:	10c08526 	beq	r2,r3,80026ec <___vfprintf_internal_r+0x328>
 80024d8:	84000044 	addi	r16,r16,1
 80024dc:	80800007 	ldb	r2,0(r16)
 80024e0:	103ffc1e 	bne	r2,zero,80024d4 <__alt_data_end+0xfc0024d4>
 80024e4:	d9012a17 	ldw	r4,1192(sp)
 80024e8:	8123c83a 	sub	r17,r16,r4
 80024ec:	88000f26 	beq	r17,zero,800252c <___vfprintf_internal_r+0x168>
 80024f0:	d8812a17 	ldw	r2,1192(sp)
 80024f4:	d8c12017 	ldw	r3,1152(sp)
 80024f8:	44400115 	stw	r17,4(r8)
 80024fc:	40800015 	stw	r2,0(r8)
 8002500:	d8811f17 	ldw	r2,1148(sp)
 8002504:	1c47883a 	add	r3,r3,r17
 8002508:	d8c12015 	stw	r3,1152(sp)
 800250c:	10800044 	addi	r2,r2,1
 8002510:	d8811f15 	stw	r2,1148(sp)
 8002514:	00c001c4 	movi	r3,7
 8002518:	1880b516 	blt	r3,r2,80027f0 <___vfprintf_internal_r+0x42c>
 800251c:	42000204 	addi	r8,r8,8
 8002520:	d8c12f17 	ldw	r3,1212(sp)
 8002524:	1c47883a 	add	r3,r3,r17
 8002528:	d8c12f15 	stw	r3,1212(sp)
 800252c:	80800007 	ldb	r2,0(r16)
 8002530:	1000b626 	beq	r2,zero,800280c <___vfprintf_internal_r+0x448>
 8002534:	80800044 	addi	r2,r16,1
 8002538:	84000047 	ldb	r16,1(r16)
 800253c:	0027883a 	mov	r19,zero
 8002540:	0039883a 	mov	fp,zero
 8002544:	dcc12b05 	stb	r19,1196(sp)
 8002548:	d8012785 	stb	zero,1182(sp)
 800254c:	027fffc4 	movi	r9,-1
 8002550:	d8012e15 	stw	zero,1208(sp)
 8002554:	04401604 	movi	r17,88
 8002558:	04800244 	movi	r18,9
 800255c:	da012a15 	stw	r8,1192(sp)
 8002560:	e027883a 	mov	r19,fp
 8002564:	17000044 	addi	fp,r2,1
 8002568:	80bff804 	addi	r2,r16,-32
 800256c:	88831236 	bltu	r17,r2,80031b8 <___vfprintf_internal_r+0xdf4>
 8002570:	100490ba 	slli	r2,r2,2
 8002574:	01020034 	movhi	r4,2048
 8002578:	21096204 	addi	r4,r4,9608
 800257c:	1105883a 	add	r2,r2,r4
 8002580:	10800017 	ldw	r2,0(r2)
 8002584:	1000683a 	jmp	r2
 8002588:	080030d4 	ori	zero,at,195
 800258c:	080031b8 	rdprs	zero,at,198
 8002590:	080031b8 	rdprs	zero,at,198
 8002594:	080030f0 	cmpltui	zero,at,195
 8002598:	080031b8 	rdprs	zero,at,198
 800259c:	080031b8 	rdprs	zero,at,198
 80025a0:	080031b8 	rdprs	zero,at,198
 80025a4:	080031b8 	rdprs	zero,at,198
 80025a8:	080031b8 	rdprs	zero,at,198
 80025ac:	080031b8 	rdprs	zero,at,198
 80025b0:	08003100 	call	800310 <__alt_mem_onchip_memory2_0+0x800310>
 80025b4:	08003128 	cmpgeui	zero,at,196
 80025b8:	080031b8 	rdprs	zero,at,198
 80025bc:	08002844 	addi	zero,at,161
 80025c0:	08002854 	ori	zero,at,161
 80025c4:	080031b8 	rdprs	zero,at,198
 80025c8:	080028a4 	muli	zero,at,162
 80025cc:	080028b4 	orhi	zero,at,162
 80025d0:	080028b4 	orhi	zero,at,162
 80025d4:	080028b4 	orhi	zero,at,162
 80025d8:	080028b4 	orhi	zero,at,162
 80025dc:	080028b4 	orhi	zero,at,162
 80025e0:	080028b4 	orhi	zero,at,162
 80025e4:	080028b4 	orhi	zero,at,162
 80025e8:	080028b4 	orhi	zero,at,162
 80025ec:	080028b4 	orhi	zero,at,162
 80025f0:	080031b8 	rdprs	zero,at,198
 80025f4:	080031b8 	rdprs	zero,at,198
 80025f8:	080031b8 	rdprs	zero,at,198
 80025fc:	080031b8 	rdprs	zero,at,198
 8002600:	080031b8 	rdprs	zero,at,198
 8002604:	080031b8 	rdprs	zero,at,198
 8002608:	080031b8 	rdprs	zero,at,198
 800260c:	080031b8 	rdprs	zero,at,198
 8002610:	080031b8 	rdprs	zero,at,198
 8002614:	080031b8 	rdprs	zero,at,198
 8002618:	080028f8 	rdprs	zero,at,163
 800261c:	08002d18 	cmpnei	zero,at,180
 8002620:	080031b8 	rdprs	zero,at,198
 8002624:	08002d18 	cmpnei	zero,at,180
 8002628:	080031b8 	rdprs	zero,at,198
 800262c:	080031b8 	rdprs	zero,at,198
 8002630:	080031b8 	rdprs	zero,at,198
 8002634:	080031b8 	rdprs	zero,at,198
 8002638:	08002dc0 	call	8002dc <__alt_mem_onchip_memory2_0+0x8002dc>
 800263c:	080031b8 	rdprs	zero,at,198
 8002640:	080031b8 	rdprs	zero,at,198
 8002644:	08002dd0 	cmplti	zero,at,183
 8002648:	080031b8 	rdprs	zero,at,198
 800264c:	080031b8 	rdprs	zero,at,198
 8002650:	080031b8 	rdprs	zero,at,198
 8002654:	080031b8 	rdprs	zero,at,198
 8002658:	080031b8 	rdprs	zero,at,198
 800265c:	08002e14 	ori	zero,at,184
 8002660:	080031b8 	rdprs	zero,at,198
 8002664:	080031b8 	rdprs	zero,at,198
 8002668:	08002e4c 	andi	zero,at,185
 800266c:	080031b8 	rdprs	zero,at,198
 8002670:	080031b8 	rdprs	zero,at,198
 8002674:	080031b8 	rdprs	zero,at,198
 8002678:	080031b8 	rdprs	zero,at,198
 800267c:	080031b8 	rdprs	zero,at,198
 8002680:	080031b8 	rdprs	zero,at,198
 8002684:	080031b8 	rdprs	zero,at,198
 8002688:	080031b8 	rdprs	zero,at,198
 800268c:	080031b8 	rdprs	zero,at,198
 8002690:	080031b8 	rdprs	zero,at,198
 8002694:	08003088 	cmpgei	zero,at,194
 8002698:	08003034 	orhi	zero,at,192
 800269c:	08002d18 	cmpnei	zero,at,180
 80026a0:	08002d18 	cmpnei	zero,at,180
 80026a4:	08002d18 	cmpnei	zero,at,180
 80026a8:	08003078 	rdprs	zero,at,193
 80026ac:	08003034 	orhi	zero,at,192
 80026b0:	080031b8 	rdprs	zero,at,198
 80026b4:	080031b8 	rdprs	zero,at,198
 80026b8:	08002f50 	cmplti	zero,at,189
 80026bc:	080031b8 	rdprs	zero,at,198
 80026c0:	08002f68 	cmpgeui	zero,at,189
 80026c4:	08002fa8 	cmpgeui	zero,at,190
 80026c8:	08002fe8 	cmpgeui	zero,at,191
 80026cc:	08002eb4 	orhi	zero,at,186
 80026d0:	080031b8 	rdprs	zero,at,198
 80026d4:	0800313c 	xorhi	zero,at,196
 80026d8:	080031b8 	rdprs	zero,at,198
 80026dc:	08002ec4 	addi	zero,at,187
 80026e0:	080031b8 	rdprs	zero,at,198
 80026e4:	080031b8 	rdprs	zero,at,198
 80026e8:	08002f04 	addi	zero,at,188
 80026ec:	d9412a17 	ldw	r5,1192(sp)
 80026f0:	8163c83a 	sub	r17,r16,r5
 80026f4:	003f7d06 	br	80024ec <__alt_data_end+0xfc0024ec>
 80026f8:	b809883a 	mov	r4,r23
 80026fc:	b00b883a 	mov	r5,r22
 8002700:	80044e40 	call	80044e4 <__swsetup_r>
 8002704:	10002d1e 	bne	r2,zero,80027bc <___vfprintf_internal_r+0x3f8>
 8002708:	b0c0030b 	ldhu	r3,12(r22)
 800270c:	01000284 	movi	r4,10
 8002710:	1805883a 	mov	r2,r3
 8002714:	1080068c 	andi	r2,r2,26
 8002718:	113f541e 	bne	r2,r4,800246c <__alt_data_end+0xfc00246c>
 800271c:	b080038b 	ldhu	r2,14(r22)
 8002720:	113fffcc 	andi	r4,r2,65535
 8002724:	2120001c 	xori	r4,r4,32768
 8002728:	21200004 	addi	r4,r4,-32768
 800272c:	203f4f16 	blt	r4,zero,800246c <__alt_data_end+0xfc00246c>
 8002730:	b2c01917 	ldw	r11,100(r22)
 8002734:	b2800717 	ldw	r10,28(r22)
 8002738:	b2400917 	ldw	r9,36(r22)
 800273c:	d9812a17 	ldw	r6,1192(sp)
 8002740:	d9c12d17 	ldw	r7,1204(sp)
 8002744:	02010004 	movi	r8,1024
 8002748:	18ffff4c 	andi	r3,r3,65533
 800274c:	d881078d 	sth	r2,1054(sp)
 8002750:	b809883a 	mov	r4,r23
 8002754:	d8800404 	addi	r2,sp,16
 8002758:	d9410404 	addi	r5,sp,1040
 800275c:	d8c1070d 	sth	r3,1052(sp)
 8002760:	dac11d15 	stw	r11,1140(sp)
 8002764:	da810b15 	stw	r10,1068(sp)
 8002768:	da410d15 	stw	r9,1076(sp)
 800276c:	d8810415 	stw	r2,1040(sp)
 8002770:	d8810815 	stw	r2,1056(sp)
 8002774:	da010615 	stw	r8,1048(sp)
 8002778:	da010915 	stw	r8,1060(sp)
 800277c:	d8010a15 	stw	zero,1064(sp)
 8002780:	80023c40 	call	80023c4 <___vfprintf_internal_r>
 8002784:	1021883a 	mov	r16,r2
 8002788:	10000416 	blt	r2,zero,800279c <___vfprintf_internal_r+0x3d8>
 800278c:	b809883a 	mov	r4,r23
 8002790:	d9410404 	addi	r5,sp,1040
 8002794:	8005f640 	call	8005f64 <_fflush_r>
 8002798:	1007301e 	bne	r2,zero,800445c <___vfprintf_internal_r+0x2098>
 800279c:	d881070b 	ldhu	r2,1052(sp)
 80027a0:	1080100c 	andi	r2,r2,64
 80027a4:	10000326 	beq	r2,zero,80027b4 <___vfprintf_internal_r+0x3f0>
 80027a8:	b080030b 	ldhu	r2,12(r22)
 80027ac:	10801014 	ori	r2,r2,64
 80027b0:	b080030d 	sth	r2,12(r22)
 80027b4:	8005883a 	mov	r2,r16
 80027b8:	00000106 	br	80027c0 <___vfprintf_internal_r+0x3fc>
 80027bc:	00bfffc4 	movi	r2,-1
 80027c0:	dfc14917 	ldw	ra,1316(sp)
 80027c4:	df014817 	ldw	fp,1312(sp)
 80027c8:	ddc14717 	ldw	r23,1308(sp)
 80027cc:	dd814617 	ldw	r22,1304(sp)
 80027d0:	dd414517 	ldw	r21,1300(sp)
 80027d4:	dd014417 	ldw	r20,1296(sp)
 80027d8:	dcc14317 	ldw	r19,1292(sp)
 80027dc:	dc814217 	ldw	r18,1288(sp)
 80027e0:	dc414117 	ldw	r17,1284(sp)
 80027e4:	dc014017 	ldw	r16,1280(sp)
 80027e8:	dec14a04 	addi	sp,sp,1320
 80027ec:	f800283a 	ret
 80027f0:	b809883a 	mov	r4,r23
 80027f4:	b00b883a 	mov	r5,r22
 80027f8:	d9811e04 	addi	r6,sp,1144
 80027fc:	80098040 	call	8009804 <__sprint_r>
 8002800:	1000081e 	bne	r2,zero,8002824 <___vfprintf_internal_r+0x460>
 8002804:	da000404 	addi	r8,sp,16
 8002808:	003f4506 	br	8002520 <__alt_data_end+0xfc002520>
 800280c:	d8812017 	ldw	r2,1152(sp)
 8002810:	10000426 	beq	r2,zero,8002824 <___vfprintf_internal_r+0x460>
 8002814:	b809883a 	mov	r4,r23
 8002818:	b00b883a 	mov	r5,r22
 800281c:	d9811e04 	addi	r6,sp,1144
 8002820:	80098040 	call	8009804 <__sprint_r>
 8002824:	b080030b 	ldhu	r2,12(r22)
 8002828:	1080100c 	andi	r2,r2,64
 800282c:	103fe31e 	bne	r2,zero,80027bc <__alt_data_end+0xfc0027bc>
 8002830:	d8812f17 	ldw	r2,1212(sp)
 8002834:	003fe206 	br	80027c0 <__alt_data_end+0xfc0027c0>
 8002838:	b809883a 	mov	r4,r23
 800283c:	80065200 	call	8006520 <__sinit>
 8002840:	003ef806 	br	8002424 <__alt_data_end+0xfc002424>
 8002844:	e005883a 	mov	r2,fp
 8002848:	9cc00114 	ori	r19,r19,4
 800284c:	e4000007 	ldb	r16,0(fp)
 8002850:	003f4406 	br	8002564 <__alt_data_end+0xfc002564>
 8002854:	e4000007 	ldb	r16,0(fp)
 8002858:	01000a84 	movi	r4,42
 800285c:	e0800044 	addi	r2,fp,1
 8002860:	8106f626 	beq	r16,r4,800443c <___vfprintf_internal_r+0x2078>
 8002864:	857ff404 	addi	r21,r16,-48
 8002868:	1039883a 	mov	fp,r2
 800286c:	0013883a 	mov	r9,zero
 8002870:	957f3d36 	bltu	r18,r21,8002568 <__alt_data_end+0xfc002568>
 8002874:	0009883a 	mov	r4,zero
 8002878:	01400284 	movi	r5,10
 800287c:	800c3380 	call	800c338 <__mulsi3>
 8002880:	e4000007 	ldb	r16,0(fp)
 8002884:	a889883a 	add	r4,r21,r2
 8002888:	e7000044 	addi	fp,fp,1
 800288c:	857ff404 	addi	r21,r16,-48
 8002890:	957ff92e 	bgeu	r18,r21,8002878 <__alt_data_end+0xfc002878>
 8002894:	2013883a 	mov	r9,r4
 8002898:	203f330e 	bge	r4,zero,8002568 <__alt_data_end+0xfc002568>
 800289c:	027fffc4 	movi	r9,-1
 80028a0:	003f3106 	br	8002568 <__alt_data_end+0xfc002568>
 80028a4:	9cc02014 	ori	r19,r19,128
 80028a8:	e005883a 	mov	r2,fp
 80028ac:	e4000007 	ldb	r16,0(fp)
 80028b0:	003f2c06 	br	8002564 <__alt_data_end+0xfc002564>
 80028b4:	857ff404 	addi	r21,r16,-48
 80028b8:	d8012e15 	stw	zero,1208(sp)
 80028bc:	e021883a 	mov	r16,fp
 80028c0:	0009883a 	mov	r4,zero
 80028c4:	da412c15 	stw	r9,1200(sp)
 80028c8:	01400284 	movi	r5,10
 80028cc:	800c3380 	call	800c338 <__mulsi3>
 80028d0:	81400007 	ldb	r5,0(r16)
 80028d4:	1549883a 	add	r4,r2,r21
 80028d8:	e7000044 	addi	fp,fp,1
 80028dc:	2d7ff404 	addi	r21,r5,-48
 80028e0:	e021883a 	mov	r16,fp
 80028e4:	957ff82e 	bgeu	r18,r21,80028c8 <__alt_data_end+0xfc0028c8>
 80028e8:	2821883a 	mov	r16,r5
 80028ec:	d9012e15 	stw	r4,1208(sp)
 80028f0:	da412c17 	ldw	r9,1200(sp)
 80028f4:	003f1c06 	br	8002568 <__alt_data_end+0xfc002568>
 80028f8:	da012a17 	ldw	r8,1192(sp)
 80028fc:	df012a15 	stw	fp,1192(sp)
 8002900:	9839883a 	mov	fp,r19
 8002904:	dcc12b03 	ldbu	r19,1196(sp)
 8002908:	e7000414 	ori	fp,fp,16
 800290c:	e080080c 	andi	r2,fp,32
 8002910:	dcc12785 	stb	r19,1182(sp)
 8002914:	d8c12d17 	ldw	r3,1204(sp)
 8002918:	1001ce26 	beq	r2,zero,8003054 <___vfprintf_internal_r+0xc90>
 800291c:	d9012d17 	ldw	r4,1204(sp)
 8002920:	18800117 	ldw	r2,4(r3)
 8002924:	1c800017 	ldw	r18,0(r3)
 8002928:	21000204 	addi	r4,r4,8
 800292c:	d9012d15 	stw	r4,1204(sp)
 8002930:	102b883a 	mov	r21,r2
 8002934:	10044916 	blt	r2,zero,8003a5c <___vfprintf_internal_r+0x1698>
 8002938:	dcc12783 	ldbu	r19,1182(sp)
 800293c:	da413215 	stw	r9,1224(sp)
 8002940:	00800044 	movi	r2,1
 8002944:	9546b03a 	or	r3,r18,r21
 8002948:	48000216 	blt	r9,zero,8002954 <___vfprintf_internal_r+0x590>
 800294c:	013fdfc4 	movi	r4,-129
 8002950:	e138703a 	and	fp,fp,r4
 8002954:	1802251e 	bne	r3,zero,80031ec <___vfprintf_internal_r+0xe28>
 8002958:	48031726 	beq	r9,zero,80035b8 <___vfprintf_internal_r+0x11f4>
 800295c:	10803fcc 	andi	r2,r2,255
 8002960:	00c00044 	movi	r3,1
 8002964:	10c24526 	beq	r2,r3,800327c <___vfprintf_internal_r+0xeb8>
 8002968:	00c00084 	movi	r3,2
 800296c:	10c33426 	beq	r2,r3,8003640 <___vfprintf_internal_r+0x127c>
 8002970:	d8c10e04 	addi	r3,sp,1080
 8002974:	9008d0fa 	srli	r4,r18,3
 8002978:	a80a977a 	slli	r5,r21,29
 800297c:	a82ad0fa 	srli	r21,r21,3
 8002980:	948001cc 	andi	r18,r18,7
 8002984:	90800c04 	addi	r2,r18,48
 8002988:	18ffffc4 	addi	r3,r3,-1
 800298c:	2924b03a 	or	r18,r5,r4
 8002990:	18800005 	stb	r2,0(r3)
 8002994:	9548b03a 	or	r4,r18,r21
 8002998:	203ff61e 	bne	r4,zero,8002974 <__alt_data_end+0xfc002974>
 800299c:	e100004c 	andi	r4,fp,1
 80029a0:	d8c13115 	stw	r3,1220(sp)
 80029a4:	20039a1e 	bne	r4,zero,8003810 <___vfprintf_internal_r+0x144c>
 80029a8:	d8812817 	ldw	r2,1184(sp)
 80029ac:	10e3c83a 	sub	r17,r2,r3
 80029b0:	8805883a 	mov	r2,r17
 80029b4:	8a40010e 	bge	r17,r9,80029bc <___vfprintf_internal_r+0x5f8>
 80029b8:	4805883a 	mov	r2,r9
 80029bc:	d8812b15 	stw	r2,1196(sp)
 80029c0:	d8013415 	stw	zero,1232(sp)
 80029c4:	98803fcc 	andi	r2,r19,255
 80029c8:	1080201c 	xori	r2,r2,128
 80029cc:	10bfe004 	addi	r2,r2,-128
 80029d0:	10000326 	beq	r2,zero,80029e0 <___vfprintf_internal_r+0x61c>
 80029d4:	d8c12b17 	ldw	r3,1196(sp)
 80029d8:	18c00044 	addi	r3,r3,1
 80029dc:	d8c12b15 	stw	r3,1196(sp)
 80029e0:	e0c0008c 	andi	r3,fp,2
 80029e4:	d8c12c15 	stw	r3,1200(sp)
 80029e8:	18000326 	beq	r3,zero,80029f8 <___vfprintf_internal_r+0x634>
 80029ec:	d8c12b17 	ldw	r3,1196(sp)
 80029f0:	18c00084 	addi	r3,r3,2
 80029f4:	d8c12b15 	stw	r3,1196(sp)
 80029f8:	e0c0210c 	andi	r3,fp,132
 80029fc:	d8c13015 	stw	r3,1216(sp)
 8002a00:	1801f81e 	bne	r3,zero,80031e4 <___vfprintf_internal_r+0xe20>
 8002a04:	d9012e17 	ldw	r4,1208(sp)
 8002a08:	d8c12b17 	ldw	r3,1196(sp)
 8002a0c:	20ebc83a 	sub	r21,r4,r3
 8002a10:	0541f40e 	bge	zero,r21,80031e4 <___vfprintf_internal_r+0xe20>
 8002a14:	02400404 	movi	r9,16
 8002a18:	d8c12017 	ldw	r3,1152(sp)
 8002a1c:	d8811f17 	ldw	r2,1148(sp)
 8002a20:	4d45750e 	bge	r9,r21,8003ff8 <___vfprintf_internal_r+0x1c34>
 8002a24:	01420074 	movhi	r5,2049
 8002a28:	2946db84 	addi	r5,r5,7022
 8002a2c:	d9413615 	stw	r5,1240(sp)
 8002a30:	4827883a 	mov	r19,r9
 8002a34:	048001c4 	movi	r18,7
 8002a38:	00000306 	br	8002a48 <___vfprintf_internal_r+0x684>
 8002a3c:	ad7ffc04 	addi	r21,r21,-16
 8002a40:	42000204 	addi	r8,r8,8
 8002a44:	9d40130e 	bge	r19,r21,8002a94 <___vfprintf_internal_r+0x6d0>
 8002a48:	01020074 	movhi	r4,2049
 8002a4c:	18c00404 	addi	r3,r3,16
 8002a50:	10800044 	addi	r2,r2,1
 8002a54:	2106db84 	addi	r4,r4,7022
 8002a58:	41000015 	stw	r4,0(r8)
 8002a5c:	44c00115 	stw	r19,4(r8)
 8002a60:	d8c12015 	stw	r3,1152(sp)
 8002a64:	d8811f15 	stw	r2,1148(sp)
 8002a68:	90bff40e 	bge	r18,r2,8002a3c <__alt_data_end+0xfc002a3c>
 8002a6c:	b809883a 	mov	r4,r23
 8002a70:	b00b883a 	mov	r5,r22
 8002a74:	d9811e04 	addi	r6,sp,1144
 8002a78:	80098040 	call	8009804 <__sprint_r>
 8002a7c:	103f691e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 8002a80:	ad7ffc04 	addi	r21,r21,-16
 8002a84:	d8c12017 	ldw	r3,1152(sp)
 8002a88:	d8811f17 	ldw	r2,1148(sp)
 8002a8c:	da000404 	addi	r8,sp,16
 8002a90:	9d7fed16 	blt	r19,r21,8002a48 <__alt_data_end+0xfc002a48>
 8002a94:	d9413617 	ldw	r5,1240(sp)
 8002a98:	a8c7883a 	add	r3,r21,r3
 8002a9c:	10800044 	addi	r2,r2,1
 8002aa0:	41400015 	stw	r5,0(r8)
 8002aa4:	45400115 	stw	r21,4(r8)
 8002aa8:	d8c12015 	stw	r3,1152(sp)
 8002aac:	d8811f15 	stw	r2,1148(sp)
 8002ab0:	010001c4 	movi	r4,7
 8002ab4:	20832b16 	blt	r4,r2,8003764 <___vfprintf_internal_r+0x13a0>
 8002ab8:	d8812787 	ldb	r2,1182(sp)
 8002abc:	42000204 	addi	r8,r8,8
 8002ac0:	10000c26 	beq	r2,zero,8002af4 <___vfprintf_internal_r+0x730>
 8002ac4:	d8811f17 	ldw	r2,1148(sp)
 8002ac8:	d9012784 	addi	r4,sp,1182
 8002acc:	18c00044 	addi	r3,r3,1
 8002ad0:	10800044 	addi	r2,r2,1
 8002ad4:	41000015 	stw	r4,0(r8)
 8002ad8:	01000044 	movi	r4,1
 8002adc:	41000115 	stw	r4,4(r8)
 8002ae0:	d8c12015 	stw	r3,1152(sp)
 8002ae4:	d8811f15 	stw	r2,1148(sp)
 8002ae8:	010001c4 	movi	r4,7
 8002aec:	2082c416 	blt	r4,r2,8003600 <___vfprintf_internal_r+0x123c>
 8002af0:	42000204 	addi	r8,r8,8
 8002af4:	d8812c17 	ldw	r2,1200(sp)
 8002af8:	10000c26 	beq	r2,zero,8002b2c <___vfprintf_internal_r+0x768>
 8002afc:	d8811f17 	ldw	r2,1148(sp)
 8002b00:	d9012704 	addi	r4,sp,1180
 8002b04:	18c00084 	addi	r3,r3,2
 8002b08:	10800044 	addi	r2,r2,1
 8002b0c:	41000015 	stw	r4,0(r8)
 8002b10:	01000084 	movi	r4,2
 8002b14:	41000115 	stw	r4,4(r8)
 8002b18:	d8c12015 	stw	r3,1152(sp)
 8002b1c:	d8811f15 	stw	r2,1148(sp)
 8002b20:	010001c4 	movi	r4,7
 8002b24:	2082be16 	blt	r4,r2,8003620 <___vfprintf_internal_r+0x125c>
 8002b28:	42000204 	addi	r8,r8,8
 8002b2c:	d9013017 	ldw	r4,1216(sp)
 8002b30:	00802004 	movi	r2,128
 8002b34:	20822026 	beq	r4,r2,80033b8 <___vfprintf_internal_r+0xff4>
 8002b38:	d9413217 	ldw	r5,1224(sp)
 8002b3c:	2c67c83a 	sub	r19,r5,r17
 8002b40:	04c0260e 	bge	zero,r19,8002bdc <___vfprintf_internal_r+0x818>
 8002b44:	05400404 	movi	r21,16
 8002b48:	d8811f17 	ldw	r2,1148(sp)
 8002b4c:	acc4720e 	bge	r21,r19,8003d18 <___vfprintf_internal_r+0x1954>
 8002b50:	01420074 	movhi	r5,2049
 8002b54:	2946d784 	addi	r5,r5,7006
 8002b58:	d9412c15 	stw	r5,1200(sp)
 8002b5c:	048001c4 	movi	r18,7
 8002b60:	00000306 	br	8002b70 <___vfprintf_internal_r+0x7ac>
 8002b64:	9cfffc04 	addi	r19,r19,-16
 8002b68:	42000204 	addi	r8,r8,8
 8002b6c:	acc0110e 	bge	r21,r19,8002bb4 <___vfprintf_internal_r+0x7f0>
 8002b70:	18c00404 	addi	r3,r3,16
 8002b74:	10800044 	addi	r2,r2,1
 8002b78:	45000015 	stw	r20,0(r8)
 8002b7c:	45400115 	stw	r21,4(r8)
 8002b80:	d8c12015 	stw	r3,1152(sp)
 8002b84:	d8811f15 	stw	r2,1148(sp)
 8002b88:	90bff60e 	bge	r18,r2,8002b64 <__alt_data_end+0xfc002b64>
 8002b8c:	b809883a 	mov	r4,r23
 8002b90:	b00b883a 	mov	r5,r22
 8002b94:	d9811e04 	addi	r6,sp,1144
 8002b98:	80098040 	call	8009804 <__sprint_r>
 8002b9c:	103f211e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 8002ba0:	9cfffc04 	addi	r19,r19,-16
 8002ba4:	d8c12017 	ldw	r3,1152(sp)
 8002ba8:	d8811f17 	ldw	r2,1148(sp)
 8002bac:	da000404 	addi	r8,sp,16
 8002bb0:	acffef16 	blt	r21,r19,8002b70 <__alt_data_end+0xfc002b70>
 8002bb4:	d9012c17 	ldw	r4,1200(sp)
 8002bb8:	1cc7883a 	add	r3,r3,r19
 8002bbc:	10800044 	addi	r2,r2,1
 8002bc0:	41000015 	stw	r4,0(r8)
 8002bc4:	44c00115 	stw	r19,4(r8)
 8002bc8:	d8c12015 	stw	r3,1152(sp)
 8002bcc:	d8811f15 	stw	r2,1148(sp)
 8002bd0:	010001c4 	movi	r4,7
 8002bd4:	20828216 	blt	r4,r2,80035e0 <___vfprintf_internal_r+0x121c>
 8002bd8:	42000204 	addi	r8,r8,8
 8002bdc:	e080400c 	andi	r2,fp,256
 8002be0:	1001ac1e 	bne	r2,zero,8003294 <___vfprintf_internal_r+0xed0>
 8002be4:	d8811f17 	ldw	r2,1148(sp)
 8002be8:	d9413117 	ldw	r5,1220(sp)
 8002bec:	1c47883a 	add	r3,r3,r17
 8002bf0:	10800044 	addi	r2,r2,1
 8002bf4:	41400015 	stw	r5,0(r8)
 8002bf8:	44400115 	stw	r17,4(r8)
 8002bfc:	d8c12015 	stw	r3,1152(sp)
 8002c00:	d8811f15 	stw	r2,1148(sp)
 8002c04:	010001c4 	movi	r4,7
 8002c08:	20825d16 	blt	r4,r2,8003580 <___vfprintf_internal_r+0x11bc>
 8002c0c:	42000204 	addi	r8,r8,8
 8002c10:	e080010c 	andi	r2,fp,4
 8002c14:	10003126 	beq	r2,zero,8002cdc <___vfprintf_internal_r+0x918>
 8002c18:	d8812e17 	ldw	r2,1208(sp)
 8002c1c:	d9012b17 	ldw	r4,1196(sp)
 8002c20:	1121c83a 	sub	r16,r2,r4
 8002c24:	04002d0e 	bge	zero,r16,8002cdc <___vfprintf_internal_r+0x918>
 8002c28:	04400404 	movi	r17,16
 8002c2c:	d8811f17 	ldw	r2,1148(sp)
 8002c30:	8c05340e 	bge	r17,r16,8004104 <___vfprintf_internal_r+0x1d40>
 8002c34:	01020074 	movhi	r4,2049
 8002c38:	2106db84 	addi	r4,r4,7022
 8002c3c:	d9013615 	stw	r4,1240(sp)
 8002c40:	048001c4 	movi	r18,7
 8002c44:	00000306 	br	8002c54 <___vfprintf_internal_r+0x890>
 8002c48:	843ffc04 	addi	r16,r16,-16
 8002c4c:	42000204 	addi	r8,r8,8
 8002c50:	8c00130e 	bge	r17,r16,8002ca0 <___vfprintf_internal_r+0x8dc>
 8002c54:	01420074 	movhi	r5,2049
 8002c58:	18c00404 	addi	r3,r3,16
 8002c5c:	10800044 	addi	r2,r2,1
 8002c60:	2946db84 	addi	r5,r5,7022
 8002c64:	41400015 	stw	r5,0(r8)
 8002c68:	44400115 	stw	r17,4(r8)
 8002c6c:	d8c12015 	stw	r3,1152(sp)
 8002c70:	d8811f15 	stw	r2,1148(sp)
 8002c74:	90bff40e 	bge	r18,r2,8002c48 <__alt_data_end+0xfc002c48>
 8002c78:	b809883a 	mov	r4,r23
 8002c7c:	b00b883a 	mov	r5,r22
 8002c80:	d9811e04 	addi	r6,sp,1144
 8002c84:	80098040 	call	8009804 <__sprint_r>
 8002c88:	103ee61e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 8002c8c:	843ffc04 	addi	r16,r16,-16
 8002c90:	d8c12017 	ldw	r3,1152(sp)
 8002c94:	d8811f17 	ldw	r2,1148(sp)
 8002c98:	da000404 	addi	r8,sp,16
 8002c9c:	8c3fed16 	blt	r17,r16,8002c54 <__alt_data_end+0xfc002c54>
 8002ca0:	d9013617 	ldw	r4,1240(sp)
 8002ca4:	1c07883a 	add	r3,r3,r16
 8002ca8:	10800044 	addi	r2,r2,1
 8002cac:	41000015 	stw	r4,0(r8)
 8002cb0:	44000115 	stw	r16,4(r8)
 8002cb4:	d8c12015 	stw	r3,1152(sp)
 8002cb8:	d8811f15 	stw	r2,1148(sp)
 8002cbc:	010001c4 	movi	r4,7
 8002cc0:	2080060e 	bge	r4,r2,8002cdc <___vfprintf_internal_r+0x918>
 8002cc4:	b809883a 	mov	r4,r23
 8002cc8:	b00b883a 	mov	r5,r22
 8002ccc:	d9811e04 	addi	r6,sp,1144
 8002cd0:	80098040 	call	8009804 <__sprint_r>
 8002cd4:	103ed31e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 8002cd8:	d8c12017 	ldw	r3,1152(sp)
 8002cdc:	df012b17 	ldw	fp,1196(sp)
 8002ce0:	d9412e17 	ldw	r5,1208(sp)
 8002ce4:	e140010e 	bge	fp,r5,8002cec <___vfprintf_internal_r+0x928>
 8002ce8:	2839883a 	mov	fp,r5
 8002cec:	d8812f17 	ldw	r2,1212(sp)
 8002cf0:	1705883a 	add	r2,r2,fp
 8002cf4:	d8812f15 	stw	r2,1212(sp)
 8002cf8:	1802291e 	bne	r3,zero,80035a0 <___vfprintf_internal_r+0x11dc>
 8002cfc:	d8c12a17 	ldw	r3,1192(sp)
 8002d00:	d8011f15 	stw	zero,1148(sp)
 8002d04:	da000404 	addi	r8,sp,16
 8002d08:	18800007 	ldb	r2,0(r3)
 8002d0c:	103ded1e 	bne	r2,zero,80024c4 <__alt_data_end+0xfc0024c4>
 8002d10:	dc012a17 	ldw	r16,1192(sp)
 8002d14:	003e0506 	br	800252c <__alt_data_end+0xfc00252c>
 8002d18:	d9012d17 	ldw	r4,1204(sp)
 8002d1c:	d9412d17 	ldw	r5,1204(sp)
 8002d20:	da012a17 	ldw	r8,1192(sp)
 8002d24:	21000017 	ldw	r4,0(r4)
 8002d28:	29400117 	ldw	r5,4(r5)
 8002d2c:	df012a15 	stw	fp,1192(sp)
 8002d30:	9839883a 	mov	fp,r19
 8002d34:	dcc12b03 	ldbu	r19,1196(sp)
 8002d38:	d9013715 	stw	r4,1244(sp)
 8002d3c:	d9413915 	stw	r5,1252(sp)
 8002d40:	da013f15 	stw	r8,1276(sp)
 8002d44:	da413e15 	stw	r9,1272(sp)
 8002d48:	dcc12785 	stb	r19,1182(sp)
 8002d4c:	80094600 	call	8009460 <__fpclassifyd>
 8002d50:	d8c12d17 	ldw	r3,1204(sp)
 8002d54:	04400044 	movi	r17,1
 8002d58:	da013f17 	ldw	r8,1276(sp)
 8002d5c:	1c800204 	addi	r18,r3,8
 8002d60:	da413e17 	ldw	r9,1272(sp)
 8002d64:	d9013717 	ldw	r4,1244(sp)
 8002d68:	d9413917 	ldw	r5,1252(sp)
 8002d6c:	1443451e 	bne	r2,r17,8003a84 <___vfprintf_internal_r+0x16c0>
 8002d70:	000d883a 	mov	r6,zero
 8002d74:	000f883a 	mov	r7,zero
 8002d78:	800d6e00 	call	800d6e0 <__ledf2>
 8002d7c:	da013f17 	ldw	r8,1276(sp)
 8002d80:	1004fe16 	blt	r2,zero,800417c <___vfprintf_internal_r+0x1db8>
 8002d84:	dcc12783 	ldbu	r19,1182(sp)
 8002d88:	008011c4 	movi	r2,71
 8002d8c:	14045d0e 	bge	r2,r16,8003f04 <___vfprintf_internal_r+0x1b40>
 8002d90:	01420074 	movhi	r5,2049
 8002d94:	2946c804 	addi	r5,r5,6944
 8002d98:	d9413115 	stw	r5,1220(sp)
 8002d9c:	00c000c4 	movi	r3,3
 8002da0:	00bfdfc4 	movi	r2,-129
 8002da4:	d8c12b15 	stw	r3,1196(sp)
 8002da8:	e0b8703a 	and	fp,fp,r2
 8002dac:	dc812d15 	stw	r18,1204(sp)
 8002db0:	1823883a 	mov	r17,r3
 8002db4:	d8013215 	stw	zero,1224(sp)
 8002db8:	d8013415 	stw	zero,1232(sp)
 8002dbc:	003f0106 	br	80029c4 <__alt_data_end+0xfc0029c4>
 8002dc0:	9cc00214 	ori	r19,r19,8
 8002dc4:	e005883a 	mov	r2,fp
 8002dc8:	e4000007 	ldb	r16,0(fp)
 8002dcc:	003de506 	br	8002564 <__alt_data_end+0xfc002564>
 8002dd0:	da012a17 	ldw	r8,1192(sp)
 8002dd4:	df012a15 	stw	fp,1192(sp)
 8002dd8:	9f000414 	ori	fp,r19,16
 8002ddc:	e0c0080c 	andi	r3,fp,32
 8002de0:	d8812d17 	ldw	r2,1204(sp)
 8002de4:	18007626 	beq	r3,zero,8002fc0 <___vfprintf_internal_r+0xbfc>
 8002de8:	d9412d17 	ldw	r5,1204(sp)
 8002dec:	14800017 	ldw	r18,0(r2)
 8002df0:	15400117 	ldw	r21,4(r2)
 8002df4:	29400204 	addi	r5,r5,8
 8002df8:	d9412d15 	stw	r5,1204(sp)
 8002dfc:	0005883a 	mov	r2,zero
 8002e00:	9546b03a 	or	r3,r18,r21
 8002e04:	d8012785 	stb	zero,1182(sp)
 8002e08:	da413215 	stw	r9,1224(sp)
 8002e0c:	0027883a 	mov	r19,zero
 8002e10:	003ecd06 	br	8002948 <__alt_data_end+0xfc002948>
 8002e14:	da012a17 	ldw	r8,1192(sp)
 8002e18:	df012a15 	stw	fp,1192(sp)
 8002e1c:	9f000414 	ori	fp,r19,16
 8002e20:	e0c0080c 	andi	r3,fp,32
 8002e24:	d8812d17 	ldw	r2,1204(sp)
 8002e28:	18002c26 	beq	r3,zero,8002edc <___vfprintf_internal_r+0xb18>
 8002e2c:	d9012d17 	ldw	r4,1204(sp)
 8002e30:	14800017 	ldw	r18,0(r2)
 8002e34:	15400117 	ldw	r21,4(r2)
 8002e38:	21000204 	addi	r4,r4,8
 8002e3c:	d9012d15 	stw	r4,1204(sp)
 8002e40:	00800044 	movi	r2,1
 8002e44:	9546b03a 	or	r3,r18,r21
 8002e48:	003fee06 	br	8002e04 <__alt_data_end+0xfc002e04>
 8002e4c:	da012a17 	ldw	r8,1192(sp)
 8002e50:	df012a15 	stw	fp,1192(sp)
 8002e54:	9839883a 	mov	fp,r19
 8002e58:	dcc12b03 	ldbu	r19,1196(sp)
 8002e5c:	01420074 	movhi	r5,2049
 8002e60:	2946cb04 	addi	r5,r5,6956
 8002e64:	dcc12785 	stb	r19,1182(sp)
 8002e68:	d9413b15 	stw	r5,1260(sp)
 8002e6c:	e0c0080c 	andi	r3,fp,32
 8002e70:	d8812d17 	ldw	r2,1204(sp)
 8002e74:	18002e26 	beq	r3,zero,8002f30 <___vfprintf_internal_r+0xb6c>
 8002e78:	d9412d17 	ldw	r5,1204(sp)
 8002e7c:	14800017 	ldw	r18,0(r2)
 8002e80:	15400117 	ldw	r21,4(r2)
 8002e84:	29400204 	addi	r5,r5,8
 8002e88:	d9412d15 	stw	r5,1204(sp)
 8002e8c:	e080004c 	andi	r2,fp,1
 8002e90:	10025c26 	beq	r2,zero,8003804 <___vfprintf_internal_r+0x1440>
 8002e94:	9546b03a 	or	r3,r18,r21
 8002e98:	18038f26 	beq	r3,zero,8003cd8 <___vfprintf_internal_r+0x1914>
 8002e9c:	00800c04 	movi	r2,48
 8002ea0:	d8812705 	stb	r2,1180(sp)
 8002ea4:	dc012745 	stb	r16,1181(sp)
 8002ea8:	e7000094 	ori	fp,fp,2
 8002eac:	00800084 	movi	r2,2
 8002eb0:	003fd406 	br	8002e04 <__alt_data_end+0xfc002e04>
 8002eb4:	9cc00814 	ori	r19,r19,32
 8002eb8:	e005883a 	mov	r2,fp
 8002ebc:	e4000007 	ldb	r16,0(fp)
 8002ec0:	003da806 	br	8002564 <__alt_data_end+0xfc002564>
 8002ec4:	da012a17 	ldw	r8,1192(sp)
 8002ec8:	df012a15 	stw	fp,1192(sp)
 8002ecc:	9839883a 	mov	fp,r19
 8002ed0:	e0c0080c 	andi	r3,fp,32
 8002ed4:	d8812d17 	ldw	r2,1204(sp)
 8002ed8:	183fd41e 	bne	r3,zero,8002e2c <__alt_data_end+0xfc002e2c>
 8002edc:	e0c0040c 	andi	r3,fp,16
 8002ee0:	18035f26 	beq	r3,zero,8003c60 <___vfprintf_internal_r+0x189c>
 8002ee4:	d9412d17 	ldw	r5,1204(sp)
 8002ee8:	14800017 	ldw	r18,0(r2)
 8002eec:	002b883a 	mov	r21,zero
 8002ef0:	29400104 	addi	r5,r5,4
 8002ef4:	d9412d15 	stw	r5,1204(sp)
 8002ef8:	00800044 	movi	r2,1
 8002efc:	9007883a 	mov	r3,r18
 8002f00:	003fc006 	br	8002e04 <__alt_data_end+0xfc002e04>
 8002f04:	da012a17 	ldw	r8,1192(sp)
 8002f08:	df012a15 	stw	fp,1192(sp)
 8002f0c:	9839883a 	mov	fp,r19
 8002f10:	dcc12b03 	ldbu	r19,1196(sp)
 8002f14:	01020074 	movhi	r4,2049
 8002f18:	2106d004 	addi	r4,r4,6976
 8002f1c:	d9013b15 	stw	r4,1260(sp)
 8002f20:	dcc12785 	stb	r19,1182(sp)
 8002f24:	e0c0080c 	andi	r3,fp,32
 8002f28:	d8812d17 	ldw	r2,1204(sp)
 8002f2c:	183fd21e 	bne	r3,zero,8002e78 <__alt_data_end+0xfc002e78>
 8002f30:	e0c0040c 	andi	r3,fp,16
 8002f34:	18035426 	beq	r3,zero,8003c88 <___vfprintf_internal_r+0x18c4>
 8002f38:	d8c12d17 	ldw	r3,1204(sp)
 8002f3c:	14800017 	ldw	r18,0(r2)
 8002f40:	002b883a 	mov	r21,zero
 8002f44:	18c00104 	addi	r3,r3,4
 8002f48:	d8c12d15 	stw	r3,1204(sp)
 8002f4c:	003fcf06 	br	8002e8c <__alt_data_end+0xfc002e8c>
 8002f50:	e4000007 	ldb	r16,0(fp)
 8002f54:	00801b04 	movi	r2,108
 8002f58:	8083f726 	beq	r16,r2,8003f38 <___vfprintf_internal_r+0x1b74>
 8002f5c:	9cc00414 	ori	r19,r19,16
 8002f60:	e005883a 	mov	r2,fp
 8002f64:	003d7f06 	br	8002564 <__alt_data_end+0xfc002564>
 8002f68:	da012a17 	ldw	r8,1192(sp)
 8002f6c:	df012a15 	stw	fp,1192(sp)
 8002f70:	9839883a 	mov	fp,r19
 8002f74:	dcc12b03 	ldbu	r19,1196(sp)
 8002f78:	e080080c 	andi	r2,fp,32
 8002f7c:	dcc12785 	stb	r19,1182(sp)
 8002f80:	10032226 	beq	r2,zero,8003c0c <___vfprintf_internal_r+0x1848>
 8002f84:	d9412d17 	ldw	r5,1204(sp)
 8002f88:	d9012f17 	ldw	r4,1212(sp)
 8002f8c:	28800017 	ldw	r2,0(r5)
 8002f90:	2007d7fa 	srai	r3,r4,31
 8002f94:	29400104 	addi	r5,r5,4
 8002f98:	d9412d15 	stw	r5,1204(sp)
 8002f9c:	11000015 	stw	r4,0(r2)
 8002fa0:	10c00115 	stw	r3,4(r2)
 8002fa4:	003d4406 	br	80024b8 <__alt_data_end+0xfc0024b8>
 8002fa8:	da012a17 	ldw	r8,1192(sp)
 8002fac:	df012a15 	stw	fp,1192(sp)
 8002fb0:	9839883a 	mov	fp,r19
 8002fb4:	e0c0080c 	andi	r3,fp,32
 8002fb8:	d8812d17 	ldw	r2,1204(sp)
 8002fbc:	183f8a1e 	bne	r3,zero,8002de8 <__alt_data_end+0xfc002de8>
 8002fc0:	e0c0040c 	andi	r3,fp,16
 8002fc4:	18031c26 	beq	r3,zero,8003c38 <___vfprintf_internal_r+0x1874>
 8002fc8:	14800017 	ldw	r18,0(r2)
 8002fcc:	d8812d17 	ldw	r2,1204(sp)
 8002fd0:	002b883a 	mov	r21,zero
 8002fd4:	9007883a 	mov	r3,r18
 8002fd8:	10800104 	addi	r2,r2,4
 8002fdc:	d8812d15 	stw	r2,1204(sp)
 8002fe0:	0005883a 	mov	r2,zero
 8002fe4:	003f8706 	br	8002e04 <__alt_data_end+0xfc002e04>
 8002fe8:	d9412d17 	ldw	r5,1204(sp)
 8002fec:	00800c04 	movi	r2,48
 8002ff0:	d8812705 	stb	r2,1180(sp)
 8002ff4:	2c800017 	ldw	r18,0(r5)
 8002ff8:	00801e04 	movi	r2,120
 8002ffc:	d8812745 	stb	r2,1181(sp)
 8003000:	00820074 	movhi	r2,2049
 8003004:	1086d004 	addi	r2,r2,6976
 8003008:	29400104 	addi	r5,r5,4
 800300c:	da012a17 	ldw	r8,1192(sp)
 8003010:	d8813b15 	stw	r2,1260(sp)
 8003014:	df012a15 	stw	fp,1192(sp)
 8003018:	002b883a 	mov	r21,zero
 800301c:	9f000094 	ori	fp,r19,2
 8003020:	d9412d15 	stw	r5,1204(sp)
 8003024:	00800084 	movi	r2,2
 8003028:	04001e04 	movi	r16,120
 800302c:	9007883a 	mov	r3,r18
 8003030:	003f7406 	br	8002e04 <__alt_data_end+0xfc002e04>
 8003034:	da012a17 	ldw	r8,1192(sp)
 8003038:	df012a15 	stw	fp,1192(sp)
 800303c:	9839883a 	mov	fp,r19
 8003040:	dcc12b03 	ldbu	r19,1196(sp)
 8003044:	e080080c 	andi	r2,fp,32
 8003048:	d8c12d17 	ldw	r3,1204(sp)
 800304c:	dcc12785 	stb	r19,1182(sp)
 8003050:	103e321e 	bne	r2,zero,800291c <__alt_data_end+0xfc00291c>
 8003054:	e080040c 	andi	r2,fp,16
 8003058:	10031326 	beq	r2,zero,8003ca8 <___vfprintf_internal_r+0x18e4>
 800305c:	1c800017 	ldw	r18,0(r3)
 8003060:	d9412d17 	ldw	r5,1204(sp)
 8003064:	902bd7fa 	srai	r21,r18,31
 8003068:	29400104 	addi	r5,r5,4
 800306c:	d9412d15 	stw	r5,1204(sp)
 8003070:	a805883a 	mov	r2,r21
 8003074:	003e2f06 	br	8002934 <__alt_data_end+0xfc002934>
 8003078:	9cc01014 	ori	r19,r19,64
 800307c:	e005883a 	mov	r2,fp
 8003080:	e4000007 	ldb	r16,0(fp)
 8003084:	003d3706 	br	8002564 <__alt_data_end+0xfc002564>
 8003088:	d8c12d17 	ldw	r3,1204(sp)
 800308c:	d9012d17 	ldw	r4,1204(sp)
 8003090:	da012a17 	ldw	r8,1192(sp)
 8003094:	18800017 	ldw	r2,0(r3)
 8003098:	21000104 	addi	r4,r4,4
 800309c:	00c00044 	movi	r3,1
 80030a0:	df012a15 	stw	fp,1192(sp)
 80030a4:	d8c12b15 	stw	r3,1196(sp)
 80030a8:	9839883a 	mov	fp,r19
 80030ac:	d8012785 	stb	zero,1182(sp)
 80030b0:	d8810405 	stb	r2,1040(sp)
 80030b4:	d9012d15 	stw	r4,1204(sp)
 80030b8:	1823883a 	mov	r17,r3
 80030bc:	d8c10404 	addi	r3,sp,1040
 80030c0:	d8013215 	stw	zero,1224(sp)
 80030c4:	d8013415 	stw	zero,1232(sp)
 80030c8:	d8c13115 	stw	r3,1220(sp)
 80030cc:	0005883a 	mov	r2,zero
 80030d0:	003e4306 	br	80029e0 <__alt_data_end+0xfc0029e0>
 80030d4:	d8812b07 	ldb	r2,1196(sp)
 80030d8:	1002fc1e 	bne	r2,zero,8003ccc <___vfprintf_internal_r+0x1908>
 80030dc:	00c00804 	movi	r3,32
 80030e0:	d8c12b05 	stb	r3,1196(sp)
 80030e4:	e005883a 	mov	r2,fp
 80030e8:	e4000007 	ldb	r16,0(fp)
 80030ec:	003d1d06 	br	8002564 <__alt_data_end+0xfc002564>
 80030f0:	9cc00054 	ori	r19,r19,1
 80030f4:	e005883a 	mov	r2,fp
 80030f8:	e4000007 	ldb	r16,0(fp)
 80030fc:	003d1906 	br	8002564 <__alt_data_end+0xfc002564>
 8003100:	d9012d17 	ldw	r4,1204(sp)
 8003104:	d9412d17 	ldw	r5,1204(sp)
 8003108:	21000017 	ldw	r4,0(r4)
 800310c:	28c00104 	addi	r3,r5,4
 8003110:	d9012e15 	stw	r4,1208(sp)
 8003114:	20038c16 	blt	r4,zero,8003f48 <___vfprintf_internal_r+0x1b84>
 8003118:	d8c12d15 	stw	r3,1204(sp)
 800311c:	e005883a 	mov	r2,fp
 8003120:	e4000007 	ldb	r16,0(fp)
 8003124:	003d0f06 	br	8002564 <__alt_data_end+0xfc002564>
 8003128:	00c00ac4 	movi	r3,43
 800312c:	d8c12b05 	stb	r3,1196(sp)
 8003130:	e005883a 	mov	r2,fp
 8003134:	e4000007 	ldb	r16,0(fp)
 8003138:	003d0a06 	br	8002564 <__alt_data_end+0xfc002564>
 800313c:	d8c12d17 	ldw	r3,1204(sp)
 8003140:	d9012d17 	ldw	r4,1204(sp)
 8003144:	da012a17 	ldw	r8,1192(sp)
 8003148:	18c00017 	ldw	r3,0(r3)
 800314c:	df012a15 	stw	fp,1192(sp)
 8003150:	d8012785 	stb	zero,1182(sp)
 8003154:	d8c13115 	stw	r3,1220(sp)
 8003158:	9839883a 	mov	fp,r19
 800315c:	24800104 	addi	r18,r4,4
 8003160:	1803f726 	beq	r3,zero,8004140 <___vfprintf_internal_r+0x1d7c>
 8003164:	d9013117 	ldw	r4,1220(sp)
 8003168:	48038916 	blt	r9,zero,8003f90 <___vfprintf_internal_r+0x1bcc>
 800316c:	480d883a 	mov	r6,r9
 8003170:	000b883a 	mov	r5,zero
 8003174:	da013f15 	stw	r8,1276(sp)
 8003178:	da413e15 	stw	r9,1272(sp)
 800317c:	80079d80 	call	80079d8 <memchr>
 8003180:	da013f17 	ldw	r8,1276(sp)
 8003184:	da413e17 	ldw	r9,1272(sp)
 8003188:	10045926 	beq	r2,zero,80042f0 <___vfprintf_internal_r+0x1f2c>
 800318c:	d8c13117 	ldw	r3,1220(sp)
 8003190:	10e3c83a 	sub	r17,r2,r3
 8003194:	4c433516 	blt	r9,r17,8003e6c <___vfprintf_internal_r+0x1aa8>
 8003198:	8805883a 	mov	r2,r17
 800319c:	88038116 	blt	r17,zero,8003fa4 <___vfprintf_internal_r+0x1be0>
 80031a0:	dcc12783 	ldbu	r19,1182(sp)
 80031a4:	d8812b15 	stw	r2,1196(sp)
 80031a8:	dc812d15 	stw	r18,1204(sp)
 80031ac:	d8013215 	stw	zero,1224(sp)
 80031b0:	d8013415 	stw	zero,1232(sp)
 80031b4:	003e0306 	br	80029c4 <__alt_data_end+0xfc0029c4>
 80031b8:	da012a17 	ldw	r8,1192(sp)
 80031bc:	df012a15 	stw	fp,1192(sp)
 80031c0:	9839883a 	mov	fp,r19
 80031c4:	dcc12b03 	ldbu	r19,1196(sp)
 80031c8:	dcc12785 	stb	r19,1182(sp)
 80031cc:	803d8f26 	beq	r16,zero,800280c <__alt_data_end+0xfc00280c>
 80031d0:	00c00044 	movi	r3,1
 80031d4:	d8c12b15 	stw	r3,1196(sp)
 80031d8:	dc010405 	stb	r16,1040(sp)
 80031dc:	d8012785 	stb	zero,1182(sp)
 80031e0:	003fb506 	br	80030b8 <__alt_data_end+0xfc0030b8>
 80031e4:	d8c12017 	ldw	r3,1152(sp)
 80031e8:	003e3506 	br	8002ac0 <__alt_data_end+0xfc002ac0>
 80031ec:	10803fcc 	andi	r2,r2,255
 80031f0:	00c00044 	movi	r3,1
 80031f4:	10fddc1e 	bne	r2,r3,8002968 <__alt_data_end+0xfc002968>
 80031f8:	a800021e 	bne	r21,zero,8003204 <___vfprintf_internal_r+0xe40>
 80031fc:	00800244 	movi	r2,9
 8003200:	14801e2e 	bgeu	r2,r18,800327c <___vfprintf_internal_r+0xeb8>
 8003204:	dc012b15 	stw	r16,1196(sp)
 8003208:	dc410e04 	addi	r17,sp,1080
 800320c:	9021883a 	mov	r16,r18
 8003210:	da012c15 	stw	r8,1200(sp)
 8003214:	a825883a 	mov	r18,r21
 8003218:	482b883a 	mov	r21,r9
 800321c:	8009883a 	mov	r4,r16
 8003220:	900b883a 	mov	r5,r18
 8003224:	01800284 	movi	r6,10
 8003228:	000f883a 	mov	r7,zero
 800322c:	800bbf00 	call	800bbf0 <__umoddi3>
 8003230:	10800c04 	addi	r2,r2,48
 8003234:	8c7fffc4 	addi	r17,r17,-1
 8003238:	8009883a 	mov	r4,r16
 800323c:	900b883a 	mov	r5,r18
 8003240:	01800284 	movi	r6,10
 8003244:	000f883a 	mov	r7,zero
 8003248:	88800005 	stb	r2,0(r17)
 800324c:	800b5b00 	call	800b5b0 <__udivdi3>
 8003250:	1021883a 	mov	r16,r2
 8003254:	10c4b03a 	or	r2,r2,r3
 8003258:	1825883a 	mov	r18,r3
 800325c:	103fef1e 	bne	r2,zero,800321c <__alt_data_end+0xfc00321c>
 8003260:	d9012817 	ldw	r4,1184(sp)
 8003264:	dc413115 	stw	r17,1220(sp)
 8003268:	dc012b17 	ldw	r16,1196(sp)
 800326c:	da012c17 	ldw	r8,1200(sp)
 8003270:	a813883a 	mov	r9,r21
 8003274:	2463c83a 	sub	r17,r4,r17
 8003278:	003dcd06 	br	80029b0 <__alt_data_end+0xfc0029b0>
 800327c:	94800c04 	addi	r18,r18,48
 8003280:	d8c10dc4 	addi	r3,sp,1079
 8003284:	dc810dc5 	stb	r18,1079(sp)
 8003288:	dc413c17 	ldw	r17,1264(sp)
 800328c:	d8c13115 	stw	r3,1220(sp)
 8003290:	003dc706 	br	80029b0 <__alt_data_end+0xfc0029b0>
 8003294:	00801944 	movi	r2,101
 8003298:	1400720e 	bge	r2,r16,8003464 <___vfprintf_internal_r+0x10a0>
 800329c:	d9013717 	ldw	r4,1244(sp)
 80032a0:	d9413917 	ldw	r5,1252(sp)
 80032a4:	000d883a 	mov	r6,zero
 80032a8:	000f883a 	mov	r7,zero
 80032ac:	d8c13d15 	stw	r3,1268(sp)
 80032b0:	da013f15 	stw	r8,1276(sp)
 80032b4:	800d57c0 	call	800d57c <__eqdf2>
 80032b8:	d8c13d17 	ldw	r3,1268(sp)
 80032bc:	da013f17 	ldw	r8,1276(sp)
 80032c0:	1000f41e 	bne	r2,zero,8003694 <___vfprintf_internal_r+0x12d0>
 80032c4:	d8811f17 	ldw	r2,1148(sp)
 80032c8:	01020074 	movhi	r4,2049
 80032cc:	2106d704 	addi	r4,r4,7004
 80032d0:	18c00044 	addi	r3,r3,1
 80032d4:	10800044 	addi	r2,r2,1
 80032d8:	41000015 	stw	r4,0(r8)
 80032dc:	01000044 	movi	r4,1
 80032e0:	41000115 	stw	r4,4(r8)
 80032e4:	d8c12015 	stw	r3,1152(sp)
 80032e8:	d8811f15 	stw	r2,1148(sp)
 80032ec:	010001c4 	movi	r4,7
 80032f0:	20828d16 	blt	r4,r2,8003d28 <___vfprintf_internal_r+0x1964>
 80032f4:	42000204 	addi	r8,r8,8
 80032f8:	d8812617 	ldw	r2,1176(sp)
 80032fc:	d9413317 	ldw	r5,1228(sp)
 8003300:	11400216 	blt	r2,r5,800330c <___vfprintf_internal_r+0xf48>
 8003304:	e080004c 	andi	r2,fp,1
 8003308:	103e4126 	beq	r2,zero,8002c10 <__alt_data_end+0xfc002c10>
 800330c:	d8813817 	ldw	r2,1248(sp)
 8003310:	d9013517 	ldw	r4,1236(sp)
 8003314:	d9413817 	ldw	r5,1248(sp)
 8003318:	1887883a 	add	r3,r3,r2
 800331c:	d8811f17 	ldw	r2,1148(sp)
 8003320:	41000015 	stw	r4,0(r8)
 8003324:	41400115 	stw	r5,4(r8)
 8003328:	10800044 	addi	r2,r2,1
 800332c:	d8c12015 	stw	r3,1152(sp)
 8003330:	d8811f15 	stw	r2,1148(sp)
 8003334:	010001c4 	movi	r4,7
 8003338:	20830916 	blt	r4,r2,8003f60 <___vfprintf_internal_r+0x1b9c>
 800333c:	42000204 	addi	r8,r8,8
 8003340:	d8813317 	ldw	r2,1228(sp)
 8003344:	143fffc4 	addi	r16,r2,-1
 8003348:	043e310e 	bge	zero,r16,8002c10 <__alt_data_end+0xfc002c10>
 800334c:	04400404 	movi	r17,16
 8003350:	d8811f17 	ldw	r2,1148(sp)
 8003354:	8c007e0e 	bge	r17,r16,8003550 <___vfprintf_internal_r+0x118c>
 8003358:	01420074 	movhi	r5,2049
 800335c:	2946d784 	addi	r5,r5,7006
 8003360:	d9412c15 	stw	r5,1200(sp)
 8003364:	04c001c4 	movi	r19,7
 8003368:	00000306 	br	8003378 <___vfprintf_internal_r+0xfb4>
 800336c:	42000204 	addi	r8,r8,8
 8003370:	843ffc04 	addi	r16,r16,-16
 8003374:	8c00790e 	bge	r17,r16,800355c <___vfprintf_internal_r+0x1198>
 8003378:	18c00404 	addi	r3,r3,16
 800337c:	10800044 	addi	r2,r2,1
 8003380:	45000015 	stw	r20,0(r8)
 8003384:	44400115 	stw	r17,4(r8)
 8003388:	d8c12015 	stw	r3,1152(sp)
 800338c:	d8811f15 	stw	r2,1148(sp)
 8003390:	98bff60e 	bge	r19,r2,800336c <__alt_data_end+0xfc00336c>
 8003394:	b809883a 	mov	r4,r23
 8003398:	b00b883a 	mov	r5,r22
 800339c:	d9811e04 	addi	r6,sp,1144
 80033a0:	80098040 	call	8009804 <__sprint_r>
 80033a4:	103d1f1e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 80033a8:	d8c12017 	ldw	r3,1152(sp)
 80033ac:	d8811f17 	ldw	r2,1148(sp)
 80033b0:	da000404 	addi	r8,sp,16
 80033b4:	003fee06 	br	8003370 <__alt_data_end+0xfc003370>
 80033b8:	d9412e17 	ldw	r5,1208(sp)
 80033bc:	d8812b17 	ldw	r2,1196(sp)
 80033c0:	28a7c83a 	sub	r19,r5,r2
 80033c4:	04fddc0e 	bge	zero,r19,8002b38 <__alt_data_end+0xfc002b38>
 80033c8:	05400404 	movi	r21,16
 80033cc:	d8811f17 	ldw	r2,1148(sp)
 80033d0:	acc3870e 	bge	r21,r19,80041f0 <___vfprintf_internal_r+0x1e2c>
 80033d4:	01420074 	movhi	r5,2049
 80033d8:	2946d784 	addi	r5,r5,7006
 80033dc:	d9412c15 	stw	r5,1200(sp)
 80033e0:	048001c4 	movi	r18,7
 80033e4:	00000306 	br	80033f4 <___vfprintf_internal_r+0x1030>
 80033e8:	9cfffc04 	addi	r19,r19,-16
 80033ec:	42000204 	addi	r8,r8,8
 80033f0:	acc0110e 	bge	r21,r19,8003438 <___vfprintf_internal_r+0x1074>
 80033f4:	18c00404 	addi	r3,r3,16
 80033f8:	10800044 	addi	r2,r2,1
 80033fc:	45000015 	stw	r20,0(r8)
 8003400:	45400115 	stw	r21,4(r8)
 8003404:	d8c12015 	stw	r3,1152(sp)
 8003408:	d8811f15 	stw	r2,1148(sp)
 800340c:	90bff60e 	bge	r18,r2,80033e8 <__alt_data_end+0xfc0033e8>
 8003410:	b809883a 	mov	r4,r23
 8003414:	b00b883a 	mov	r5,r22
 8003418:	d9811e04 	addi	r6,sp,1144
 800341c:	80098040 	call	8009804 <__sprint_r>
 8003420:	103d001e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 8003424:	9cfffc04 	addi	r19,r19,-16
 8003428:	d8c12017 	ldw	r3,1152(sp)
 800342c:	d8811f17 	ldw	r2,1148(sp)
 8003430:	da000404 	addi	r8,sp,16
 8003434:	acffef16 	blt	r21,r19,80033f4 <__alt_data_end+0xfc0033f4>
 8003438:	d9012c17 	ldw	r4,1200(sp)
 800343c:	1cc7883a 	add	r3,r3,r19
 8003440:	10800044 	addi	r2,r2,1
 8003444:	41000015 	stw	r4,0(r8)
 8003448:	44c00115 	stw	r19,4(r8)
 800344c:	d8c12015 	stw	r3,1152(sp)
 8003450:	d8811f15 	stw	r2,1148(sp)
 8003454:	010001c4 	movi	r4,7
 8003458:	20817816 	blt	r4,r2,8003a3c <___vfprintf_internal_r+0x1678>
 800345c:	42000204 	addi	r8,r8,8
 8003460:	003db506 	br	8002b38 <__alt_data_end+0xfc002b38>
 8003464:	d9413317 	ldw	r5,1228(sp)
 8003468:	00800044 	movi	r2,1
 800346c:	18c00044 	addi	r3,r3,1
 8003470:	11413e0e 	bge	r2,r5,800396c <___vfprintf_internal_r+0x15a8>
 8003474:	dc011f17 	ldw	r16,1148(sp)
 8003478:	d8813117 	ldw	r2,1220(sp)
 800347c:	d8c12015 	stw	r3,1152(sp)
 8003480:	84000044 	addi	r16,r16,1
 8003484:	40800015 	stw	r2,0(r8)
 8003488:	00800044 	movi	r2,1
 800348c:	40800115 	stw	r2,4(r8)
 8003490:	dc011f15 	stw	r16,1148(sp)
 8003494:	008001c4 	movi	r2,7
 8003498:	14015616 	blt	r2,r16,80039f4 <___vfprintf_internal_r+0x1630>
 800349c:	42000204 	addi	r8,r8,8
 80034a0:	d9013817 	ldw	r4,1248(sp)
 80034a4:	d9413517 	ldw	r5,1236(sp)
 80034a8:	84000044 	addi	r16,r16,1
 80034ac:	1907883a 	add	r3,r3,r4
 80034b0:	41400015 	stw	r5,0(r8)
 80034b4:	41000115 	stw	r4,4(r8)
 80034b8:	d8c12015 	stw	r3,1152(sp)
 80034bc:	dc011f15 	stw	r16,1148(sp)
 80034c0:	008001c4 	movi	r2,7
 80034c4:	14015416 	blt	r2,r16,8003a18 <___vfprintf_internal_r+0x1654>
 80034c8:	44400204 	addi	r17,r8,8
 80034cc:	d9013717 	ldw	r4,1244(sp)
 80034d0:	d9413917 	ldw	r5,1252(sp)
 80034d4:	000d883a 	mov	r6,zero
 80034d8:	000f883a 	mov	r7,zero
 80034dc:	d8c13d15 	stw	r3,1268(sp)
 80034e0:	800d57c0 	call	800d57c <__eqdf2>
 80034e4:	d8c13d17 	ldw	r3,1268(sp)
 80034e8:	1000a726 	beq	r2,zero,8003788 <___vfprintf_internal_r+0x13c4>
 80034ec:	d9013317 	ldw	r4,1228(sp)
 80034f0:	d9413117 	ldw	r5,1220(sp)
 80034f4:	84000044 	addi	r16,r16,1
 80034f8:	20bfffc4 	addi	r2,r4,-1
 80034fc:	1887883a 	add	r3,r3,r2
 8003500:	29000044 	addi	r4,r5,1
 8003504:	88800115 	stw	r2,4(r17)
 8003508:	89000015 	stw	r4,0(r17)
 800350c:	d8c12015 	stw	r3,1152(sp)
 8003510:	dc011f15 	stw	r16,1148(sp)
 8003514:	008001c4 	movi	r2,7
 8003518:	14012d16 	blt	r2,r16,80039d0 <___vfprintf_internal_r+0x160c>
 800351c:	8c400204 	addi	r17,r17,8
 8003520:	d9413a17 	ldw	r5,1256(sp)
 8003524:	dcc122c4 	addi	r19,sp,1163
 8003528:	84000044 	addi	r16,r16,1
 800352c:	28c7883a 	add	r3,r5,r3
 8003530:	8cc00015 	stw	r19,0(r17)
 8003534:	89400115 	stw	r5,4(r17)
 8003538:	d8c12015 	stw	r3,1152(sp)
 800353c:	dc011f15 	stw	r16,1148(sp)
 8003540:	008001c4 	movi	r2,7
 8003544:	14000e16 	blt	r2,r16,8003580 <___vfprintf_internal_r+0x11bc>
 8003548:	8a000204 	addi	r8,r17,8
 800354c:	003db006 	br	8002c10 <__alt_data_end+0xfc002c10>
 8003550:	01020074 	movhi	r4,2049
 8003554:	2106d784 	addi	r4,r4,7006
 8003558:	d9012c15 	stw	r4,1200(sp)
 800355c:	d9012c17 	ldw	r4,1200(sp)
 8003560:	1c07883a 	add	r3,r3,r16
 8003564:	44000115 	stw	r16,4(r8)
 8003568:	41000015 	stw	r4,0(r8)
 800356c:	10800044 	addi	r2,r2,1
 8003570:	d8c12015 	stw	r3,1152(sp)
 8003574:	d8811f15 	stw	r2,1148(sp)
 8003578:	010001c4 	movi	r4,7
 800357c:	20bda30e 	bge	r4,r2,8002c0c <__alt_data_end+0xfc002c0c>
 8003580:	b809883a 	mov	r4,r23
 8003584:	b00b883a 	mov	r5,r22
 8003588:	d9811e04 	addi	r6,sp,1144
 800358c:	80098040 	call	8009804 <__sprint_r>
 8003590:	103ca41e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 8003594:	d8c12017 	ldw	r3,1152(sp)
 8003598:	da000404 	addi	r8,sp,16
 800359c:	003d9c06 	br	8002c10 <__alt_data_end+0xfc002c10>
 80035a0:	b809883a 	mov	r4,r23
 80035a4:	b00b883a 	mov	r5,r22
 80035a8:	d9811e04 	addi	r6,sp,1144
 80035ac:	80098040 	call	8009804 <__sprint_r>
 80035b0:	103dd226 	beq	r2,zero,8002cfc <__alt_data_end+0xfc002cfc>
 80035b4:	003c9b06 	br	8002824 <__alt_data_end+0xfc002824>
 80035b8:	10803fcc 	andi	r2,r2,255
 80035bc:	1000311e 	bne	r2,zero,8003684 <___vfprintf_internal_r+0x12c0>
 80035c0:	e080004c 	andi	r2,fp,1
 80035c4:	10002f26 	beq	r2,zero,8003684 <___vfprintf_internal_r+0x12c0>
 80035c8:	00800c04 	movi	r2,48
 80035cc:	d8c10dc4 	addi	r3,sp,1079
 80035d0:	d8810dc5 	stb	r2,1079(sp)
 80035d4:	dc413c17 	ldw	r17,1264(sp)
 80035d8:	d8c13115 	stw	r3,1220(sp)
 80035dc:	003cf406 	br	80029b0 <__alt_data_end+0xfc0029b0>
 80035e0:	b809883a 	mov	r4,r23
 80035e4:	b00b883a 	mov	r5,r22
 80035e8:	d9811e04 	addi	r6,sp,1144
 80035ec:	80098040 	call	8009804 <__sprint_r>
 80035f0:	103c8c1e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 80035f4:	d8c12017 	ldw	r3,1152(sp)
 80035f8:	da000404 	addi	r8,sp,16
 80035fc:	003d7706 	br	8002bdc <__alt_data_end+0xfc002bdc>
 8003600:	b809883a 	mov	r4,r23
 8003604:	b00b883a 	mov	r5,r22
 8003608:	d9811e04 	addi	r6,sp,1144
 800360c:	80098040 	call	8009804 <__sprint_r>
 8003610:	103c841e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 8003614:	d8c12017 	ldw	r3,1152(sp)
 8003618:	da000404 	addi	r8,sp,16
 800361c:	003d3506 	br	8002af4 <__alt_data_end+0xfc002af4>
 8003620:	b809883a 	mov	r4,r23
 8003624:	b00b883a 	mov	r5,r22
 8003628:	d9811e04 	addi	r6,sp,1144
 800362c:	80098040 	call	8009804 <__sprint_r>
 8003630:	103c7c1e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 8003634:	d8c12017 	ldw	r3,1152(sp)
 8003638:	da000404 	addi	r8,sp,16
 800363c:	003d3b06 	br	8002b2c <__alt_data_end+0xfc002b2c>
 8003640:	d9413b17 	ldw	r5,1260(sp)
 8003644:	d8c10e04 	addi	r3,sp,1080
 8003648:	908003cc 	andi	r2,r18,15
 800364c:	a808973a 	slli	r4,r21,28
 8003650:	2885883a 	add	r2,r5,r2
 8003654:	9024d13a 	srli	r18,r18,4
 8003658:	10800003 	ldbu	r2,0(r2)
 800365c:	a82ad13a 	srli	r21,r21,4
 8003660:	18ffffc4 	addi	r3,r3,-1
 8003664:	24a4b03a 	or	r18,r4,r18
 8003668:	18800005 	stb	r2,0(r3)
 800366c:	9544b03a 	or	r2,r18,r21
 8003670:	103ff51e 	bne	r2,zero,8003648 <__alt_data_end+0xfc003648>
 8003674:	d9412817 	ldw	r5,1184(sp)
 8003678:	d8c13115 	stw	r3,1220(sp)
 800367c:	28e3c83a 	sub	r17,r5,r3
 8003680:	003ccb06 	br	80029b0 <__alt_data_end+0xfc0029b0>
 8003684:	d8c10e04 	addi	r3,sp,1080
 8003688:	0023883a 	mov	r17,zero
 800368c:	d8c13115 	stw	r3,1220(sp)
 8003690:	003cc706 	br	80029b0 <__alt_data_end+0xfc0029b0>
 8003694:	dc012617 	ldw	r16,1176(sp)
 8003698:	0401ab0e 	bge	zero,r16,8003d48 <___vfprintf_internal_r+0x1984>
 800369c:	d8813317 	ldw	r2,1228(sp)
 80036a0:	d9413117 	ldw	r5,1220(sp)
 80036a4:	d9013417 	ldw	r4,1232(sp)
 80036a8:	1023883a 	mov	r17,r2
 80036ac:	28a1883a 	add	r16,r5,r2
 80036b0:	2080010e 	bge	r4,r2,80036b8 <___vfprintf_internal_r+0x12f4>
 80036b4:	2023883a 	mov	r17,r4
 80036b8:	04400b0e 	bge	zero,r17,80036e8 <___vfprintf_internal_r+0x1324>
 80036bc:	d8811f17 	ldw	r2,1148(sp)
 80036c0:	d9413117 	ldw	r5,1220(sp)
 80036c4:	1c47883a 	add	r3,r3,r17
 80036c8:	10800044 	addi	r2,r2,1
 80036cc:	41400015 	stw	r5,0(r8)
 80036d0:	44400115 	stw	r17,4(r8)
 80036d4:	d8c12015 	stw	r3,1152(sp)
 80036d8:	d8811f15 	stw	r2,1148(sp)
 80036dc:	010001c4 	movi	r4,7
 80036e0:	20826716 	blt	r4,r2,8004080 <___vfprintf_internal_r+0x1cbc>
 80036e4:	42000204 	addi	r8,r8,8
 80036e8:	88026316 	blt	r17,zero,8004078 <___vfprintf_internal_r+0x1cb4>
 80036ec:	d8813417 	ldw	r2,1232(sp)
 80036f0:	1463c83a 	sub	r17,r2,r17
 80036f4:	0440590e 	bge	zero,r17,800385c <___vfprintf_internal_r+0x1498>
 80036f8:	04c00404 	movi	r19,16
 80036fc:	d8811f17 	ldw	r2,1148(sp)
 8003700:	9c41770e 	bge	r19,r17,8003ce0 <___vfprintf_internal_r+0x191c>
 8003704:	01420074 	movhi	r5,2049
 8003708:	2946d784 	addi	r5,r5,7006
 800370c:	d9412c15 	stw	r5,1200(sp)
 8003710:	054001c4 	movi	r21,7
 8003714:	00000306 	br	8003724 <___vfprintf_internal_r+0x1360>
 8003718:	42000204 	addi	r8,r8,8
 800371c:	8c7ffc04 	addi	r17,r17,-16
 8003720:	9c41720e 	bge	r19,r17,8003cec <___vfprintf_internal_r+0x1928>
 8003724:	18c00404 	addi	r3,r3,16
 8003728:	10800044 	addi	r2,r2,1
 800372c:	45000015 	stw	r20,0(r8)
 8003730:	44c00115 	stw	r19,4(r8)
 8003734:	d8c12015 	stw	r3,1152(sp)
 8003738:	d8811f15 	stw	r2,1148(sp)
 800373c:	a8bff60e 	bge	r21,r2,8003718 <__alt_data_end+0xfc003718>
 8003740:	b809883a 	mov	r4,r23
 8003744:	b00b883a 	mov	r5,r22
 8003748:	d9811e04 	addi	r6,sp,1144
 800374c:	80098040 	call	8009804 <__sprint_r>
 8003750:	103c341e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 8003754:	d8c12017 	ldw	r3,1152(sp)
 8003758:	d8811f17 	ldw	r2,1148(sp)
 800375c:	da000404 	addi	r8,sp,16
 8003760:	003fee06 	br	800371c <__alt_data_end+0xfc00371c>
 8003764:	b809883a 	mov	r4,r23
 8003768:	b00b883a 	mov	r5,r22
 800376c:	d9811e04 	addi	r6,sp,1144
 8003770:	80098040 	call	8009804 <__sprint_r>
 8003774:	103c2b1e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 8003778:	d8c12017 	ldw	r3,1152(sp)
 800377c:	d8812787 	ldb	r2,1182(sp)
 8003780:	da000404 	addi	r8,sp,16
 8003784:	003cce06 	br	8002ac0 <__alt_data_end+0xfc002ac0>
 8003788:	d8813317 	ldw	r2,1228(sp)
 800378c:	14ffffc4 	addi	r19,r2,-1
 8003790:	04ff630e 	bge	zero,r19,8003520 <__alt_data_end+0xfc003520>
 8003794:	05400404 	movi	r21,16
 8003798:	acc0810e 	bge	r21,r19,80039a0 <___vfprintf_internal_r+0x15dc>
 800379c:	01420074 	movhi	r5,2049
 80037a0:	2946d784 	addi	r5,r5,7006
 80037a4:	d9412c15 	stw	r5,1200(sp)
 80037a8:	01c001c4 	movi	r7,7
 80037ac:	00000306 	br	80037bc <___vfprintf_internal_r+0x13f8>
 80037b0:	8c400204 	addi	r17,r17,8
 80037b4:	9cfffc04 	addi	r19,r19,-16
 80037b8:	acc07c0e 	bge	r21,r19,80039ac <___vfprintf_internal_r+0x15e8>
 80037bc:	18c00404 	addi	r3,r3,16
 80037c0:	84000044 	addi	r16,r16,1
 80037c4:	8d000015 	stw	r20,0(r17)
 80037c8:	8d400115 	stw	r21,4(r17)
 80037cc:	d8c12015 	stw	r3,1152(sp)
 80037d0:	dc011f15 	stw	r16,1148(sp)
 80037d4:	3c3ff60e 	bge	r7,r16,80037b0 <__alt_data_end+0xfc0037b0>
 80037d8:	b809883a 	mov	r4,r23
 80037dc:	b00b883a 	mov	r5,r22
 80037e0:	d9811e04 	addi	r6,sp,1144
 80037e4:	d9c13d15 	stw	r7,1268(sp)
 80037e8:	80098040 	call	8009804 <__sprint_r>
 80037ec:	d9c13d17 	ldw	r7,1268(sp)
 80037f0:	103c0c1e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 80037f4:	d8c12017 	ldw	r3,1152(sp)
 80037f8:	dc011f17 	ldw	r16,1148(sp)
 80037fc:	dc400404 	addi	r17,sp,16
 8003800:	003fec06 	br	80037b4 <__alt_data_end+0xfc0037b4>
 8003804:	00800084 	movi	r2,2
 8003808:	9546b03a 	or	r3,r18,r21
 800380c:	003d7d06 	br	8002e04 <__alt_data_end+0xfc002e04>
 8003810:	10803fcc 	andi	r2,r2,255
 8003814:	1080201c 	xori	r2,r2,128
 8003818:	10bfe004 	addi	r2,r2,-128
 800381c:	01000c04 	movi	r4,48
 8003820:	1101d726 	beq	r2,r4,8003f80 <___vfprintf_internal_r+0x1bbc>
 8003824:	d9413117 	ldw	r5,1220(sp)
 8003828:	d8812817 	ldw	r2,1184(sp)
 800382c:	193fffc5 	stb	r4,-1(r3)
 8003830:	297fffc4 	addi	r5,r5,-1
 8003834:	d9413115 	stw	r5,1220(sp)
 8003838:	1163c83a 	sub	r17,r2,r5
 800383c:	003c5c06 	br	80029b0 <__alt_data_end+0xfc0029b0>
 8003840:	b809883a 	mov	r4,r23
 8003844:	b00b883a 	mov	r5,r22
 8003848:	d9811e04 	addi	r6,sp,1144
 800384c:	80098040 	call	8009804 <__sprint_r>
 8003850:	103bf41e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 8003854:	d8c12017 	ldw	r3,1152(sp)
 8003858:	da000404 	addi	r8,sp,16
 800385c:	d9413117 	ldw	r5,1220(sp)
 8003860:	d9013417 	ldw	r4,1232(sp)
 8003864:	d8812617 	ldw	r2,1176(sp)
 8003868:	2923883a 	add	r17,r5,r4
 800386c:	d9413317 	ldw	r5,1228(sp)
 8003870:	11400216 	blt	r2,r5,800387c <___vfprintf_internal_r+0x14b8>
 8003874:	e100004c 	andi	r4,fp,1
 8003878:	20000d26 	beq	r4,zero,80038b0 <___vfprintf_internal_r+0x14ec>
 800387c:	d9013817 	ldw	r4,1248(sp)
 8003880:	d9413517 	ldw	r5,1236(sp)
 8003884:	1907883a 	add	r3,r3,r4
 8003888:	d9011f17 	ldw	r4,1148(sp)
 800388c:	41400015 	stw	r5,0(r8)
 8003890:	d9413817 	ldw	r5,1248(sp)
 8003894:	21000044 	addi	r4,r4,1
 8003898:	d8c12015 	stw	r3,1152(sp)
 800389c:	41400115 	stw	r5,4(r8)
 80038a0:	d9011f15 	stw	r4,1148(sp)
 80038a4:	014001c4 	movi	r5,7
 80038a8:	2901fd16 	blt	r5,r4,80040a0 <___vfprintf_internal_r+0x1cdc>
 80038ac:	42000204 	addi	r8,r8,8
 80038b0:	d9013317 	ldw	r4,1228(sp)
 80038b4:	2085c83a 	sub	r2,r4,r2
 80038b8:	8449c83a 	sub	r4,r16,r17
 80038bc:	1021883a 	mov	r16,r2
 80038c0:	2080010e 	bge	r4,r2,80038c8 <___vfprintf_internal_r+0x1504>
 80038c4:	2021883a 	mov	r16,r4
 80038c8:	04000a0e 	bge	zero,r16,80038f4 <___vfprintf_internal_r+0x1530>
 80038cc:	d9011f17 	ldw	r4,1148(sp)
 80038d0:	1c07883a 	add	r3,r3,r16
 80038d4:	44400015 	stw	r17,0(r8)
 80038d8:	21000044 	addi	r4,r4,1
 80038dc:	44000115 	stw	r16,4(r8)
 80038e0:	d8c12015 	stw	r3,1152(sp)
 80038e4:	d9011f15 	stw	r4,1148(sp)
 80038e8:	014001c4 	movi	r5,7
 80038ec:	29020916 	blt	r5,r4,8004114 <___vfprintf_internal_r+0x1d50>
 80038f0:	42000204 	addi	r8,r8,8
 80038f4:	80020116 	blt	r16,zero,80040fc <___vfprintf_internal_r+0x1d38>
 80038f8:	1421c83a 	sub	r16,r2,r16
 80038fc:	043cc40e 	bge	zero,r16,8002c10 <__alt_data_end+0xfc002c10>
 8003900:	04400404 	movi	r17,16
 8003904:	d8811f17 	ldw	r2,1148(sp)
 8003908:	8c3f110e 	bge	r17,r16,8003550 <__alt_data_end+0xfc003550>
 800390c:	01420074 	movhi	r5,2049
 8003910:	2946d784 	addi	r5,r5,7006
 8003914:	d9412c15 	stw	r5,1200(sp)
 8003918:	04c001c4 	movi	r19,7
 800391c:	00000306 	br	800392c <___vfprintf_internal_r+0x1568>
 8003920:	42000204 	addi	r8,r8,8
 8003924:	843ffc04 	addi	r16,r16,-16
 8003928:	8c3f0c0e 	bge	r17,r16,800355c <__alt_data_end+0xfc00355c>
 800392c:	18c00404 	addi	r3,r3,16
 8003930:	10800044 	addi	r2,r2,1
 8003934:	45000015 	stw	r20,0(r8)
 8003938:	44400115 	stw	r17,4(r8)
 800393c:	d8c12015 	stw	r3,1152(sp)
 8003940:	d8811f15 	stw	r2,1148(sp)
 8003944:	98bff60e 	bge	r19,r2,8003920 <__alt_data_end+0xfc003920>
 8003948:	b809883a 	mov	r4,r23
 800394c:	b00b883a 	mov	r5,r22
 8003950:	d9811e04 	addi	r6,sp,1144
 8003954:	80098040 	call	8009804 <__sprint_r>
 8003958:	103bb21e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 800395c:	d8c12017 	ldw	r3,1152(sp)
 8003960:	d8811f17 	ldw	r2,1148(sp)
 8003964:	da000404 	addi	r8,sp,16
 8003968:	003fee06 	br	8003924 <__alt_data_end+0xfc003924>
 800396c:	e088703a 	and	r4,fp,r2
 8003970:	203ec01e 	bne	r4,zero,8003474 <__alt_data_end+0xfc003474>
 8003974:	dc011f17 	ldw	r16,1148(sp)
 8003978:	d9013117 	ldw	r4,1220(sp)
 800397c:	40800115 	stw	r2,4(r8)
 8003980:	84000044 	addi	r16,r16,1
 8003984:	41000015 	stw	r4,0(r8)
 8003988:	d8c12015 	stw	r3,1152(sp)
 800398c:	dc011f15 	stw	r16,1148(sp)
 8003990:	008001c4 	movi	r2,7
 8003994:	14000e16 	blt	r2,r16,80039d0 <___vfprintf_internal_r+0x160c>
 8003998:	44400204 	addi	r17,r8,8
 800399c:	003ee006 	br	8003520 <__alt_data_end+0xfc003520>
 80039a0:	01020074 	movhi	r4,2049
 80039a4:	2106d784 	addi	r4,r4,7006
 80039a8:	d9012c15 	stw	r4,1200(sp)
 80039ac:	d8812c17 	ldw	r2,1200(sp)
 80039b0:	1cc7883a 	add	r3,r3,r19
 80039b4:	84000044 	addi	r16,r16,1
 80039b8:	88800015 	stw	r2,0(r17)
 80039bc:	8cc00115 	stw	r19,4(r17)
 80039c0:	d8c12015 	stw	r3,1152(sp)
 80039c4:	dc011f15 	stw	r16,1148(sp)
 80039c8:	008001c4 	movi	r2,7
 80039cc:	143ed30e 	bge	r2,r16,800351c <__alt_data_end+0xfc00351c>
 80039d0:	b809883a 	mov	r4,r23
 80039d4:	b00b883a 	mov	r5,r22
 80039d8:	d9811e04 	addi	r6,sp,1144
 80039dc:	80098040 	call	8009804 <__sprint_r>
 80039e0:	103b901e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 80039e4:	d8c12017 	ldw	r3,1152(sp)
 80039e8:	dc011f17 	ldw	r16,1148(sp)
 80039ec:	dc400404 	addi	r17,sp,16
 80039f0:	003ecb06 	br	8003520 <__alt_data_end+0xfc003520>
 80039f4:	b809883a 	mov	r4,r23
 80039f8:	b00b883a 	mov	r5,r22
 80039fc:	d9811e04 	addi	r6,sp,1144
 8003a00:	80098040 	call	8009804 <__sprint_r>
 8003a04:	103b871e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 8003a08:	d8c12017 	ldw	r3,1152(sp)
 8003a0c:	dc011f17 	ldw	r16,1148(sp)
 8003a10:	da000404 	addi	r8,sp,16
 8003a14:	003ea206 	br	80034a0 <__alt_data_end+0xfc0034a0>
 8003a18:	b809883a 	mov	r4,r23
 8003a1c:	b00b883a 	mov	r5,r22
 8003a20:	d9811e04 	addi	r6,sp,1144
 8003a24:	80098040 	call	8009804 <__sprint_r>
 8003a28:	103b7e1e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 8003a2c:	d8c12017 	ldw	r3,1152(sp)
 8003a30:	dc011f17 	ldw	r16,1148(sp)
 8003a34:	dc400404 	addi	r17,sp,16
 8003a38:	003ea406 	br	80034cc <__alt_data_end+0xfc0034cc>
 8003a3c:	b809883a 	mov	r4,r23
 8003a40:	b00b883a 	mov	r5,r22
 8003a44:	d9811e04 	addi	r6,sp,1144
 8003a48:	80098040 	call	8009804 <__sprint_r>
 8003a4c:	103b751e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 8003a50:	d8c12017 	ldw	r3,1152(sp)
 8003a54:	da000404 	addi	r8,sp,16
 8003a58:	003c3706 	br	8002b38 <__alt_data_end+0xfc002b38>
 8003a5c:	04a5c83a 	sub	r18,zero,r18
 8003a60:	9004c03a 	cmpne	r2,r18,zero
 8003a64:	056bc83a 	sub	r21,zero,r21
 8003a68:	a8abc83a 	sub	r21,r21,r2
 8003a6c:	04c00b44 	movi	r19,45
 8003a70:	dcc12785 	stb	r19,1182(sp)
 8003a74:	da413215 	stw	r9,1224(sp)
 8003a78:	00800044 	movi	r2,1
 8003a7c:	9546b03a 	or	r3,r18,r21
 8003a80:	003bb106 	br	8002948 <__alt_data_end+0xfc002948>
 8003a84:	da013f15 	stw	r8,1276(sp)
 8003a88:	da413e15 	stw	r9,1272(sp)
 8003a8c:	80094600 	call	8009460 <__fpclassifyd>
 8003a90:	da013f17 	ldw	r8,1276(sp)
 8003a94:	da413e17 	ldw	r9,1272(sp)
 8003a98:	1000e526 	beq	r2,zero,8003e30 <___vfprintf_internal_r+0x1a6c>
 8003a9c:	04fff7c4 	movi	r19,-33
 8003aa0:	00bfffc4 	movi	r2,-1
 8003aa4:	84e6703a 	and	r19,r16,r19
 8003aa8:	48822926 	beq	r9,r2,8004350 <___vfprintf_internal_r+0x1f8c>
 8003aac:	008011c4 	movi	r2,71
 8003ab0:	98821626 	beq	r19,r2,800430c <___vfprintf_internal_r+0x1f48>
 8003ab4:	d9013917 	ldw	r4,1252(sp)
 8003ab8:	e0c04014 	ori	r3,fp,256
 8003abc:	d8c12d15 	stw	r3,1204(sp)
 8003ac0:	20021f16 	blt	r4,zero,8004340 <___vfprintf_internal_r+0x1f7c>
 8003ac4:	dc413917 	ldw	r17,1252(sp)
 8003ac8:	d8012b05 	stb	zero,1196(sp)
 8003acc:	00801984 	movi	r2,102
 8003ad0:	80814d26 	beq	r16,r2,8004008 <___vfprintf_internal_r+0x1c44>
 8003ad4:	00801184 	movi	r2,70
 8003ad8:	80814b26 	beq	r16,r2,8004008 <___vfprintf_internal_r+0x1c44>
 8003adc:	00801144 	movi	r2,69
 8003ae0:	98821d26 	beq	r19,r2,8004358 <___vfprintf_internal_r+0x1f94>
 8003ae4:	482b883a 	mov	r21,r9
 8003ae8:	d8812604 	addi	r2,sp,1176
 8003aec:	d8800115 	stw	r2,4(sp)
 8003af0:	d9413717 	ldw	r5,1244(sp)
 8003af4:	d8812504 	addi	r2,sp,1172
 8003af8:	d8800215 	stw	r2,8(sp)
 8003afc:	d8812104 	addi	r2,sp,1156
 8003b00:	dd400015 	stw	r21,0(sp)
 8003b04:	d8800315 	stw	r2,12(sp)
 8003b08:	b809883a 	mov	r4,r23
 8003b0c:	880d883a 	mov	r6,r17
 8003b10:	01c00084 	movi	r7,2
 8003b14:	da013f15 	stw	r8,1276(sp)
 8003b18:	da413e15 	stw	r9,1272(sp)
 8003b1c:	800483c0 	call	800483c <_dtoa_r>
 8003b20:	d8813115 	stw	r2,1220(sp)
 8003b24:	008019c4 	movi	r2,103
 8003b28:	da013f17 	ldw	r8,1276(sp)
 8003b2c:	da413e17 	ldw	r9,1272(sp)
 8003b30:	80800226 	beq	r16,r2,8003b3c <___vfprintf_internal_r+0x1778>
 8003b34:	008011c4 	movi	r2,71
 8003b38:	8081451e 	bne	r16,r2,8004050 <___vfprintf_internal_r+0x1c8c>
 8003b3c:	e080004c 	andi	r2,fp,1
 8003b40:	10021e26 	beq	r2,zero,80043bc <___vfprintf_internal_r+0x1ff8>
 8003b44:	d8c13117 	ldw	r3,1220(sp)
 8003b48:	1d55883a 	add	r10,r3,r21
 8003b4c:	d9013717 	ldw	r4,1244(sp)
 8003b50:	880b883a 	mov	r5,r17
 8003b54:	000d883a 	mov	r6,zero
 8003b58:	000f883a 	mov	r7,zero
 8003b5c:	da013f15 	stw	r8,1276(sp)
 8003b60:	da413e15 	stw	r9,1272(sp)
 8003b64:	da813d15 	stw	r10,1268(sp)
 8003b68:	800d57c0 	call	800d57c <__eqdf2>
 8003b6c:	da013f17 	ldw	r8,1276(sp)
 8003b70:	da413e17 	ldw	r9,1272(sp)
 8003b74:	da813d17 	ldw	r10,1268(sp)
 8003b78:	1001a126 	beq	r2,zero,8004200 <___vfprintf_internal_r+0x1e3c>
 8003b7c:	d8812117 	ldw	r2,1156(sp)
 8003b80:	1280062e 	bgeu	r2,r10,8003b9c <___vfprintf_internal_r+0x17d8>
 8003b84:	01000c04 	movi	r4,48
 8003b88:	10c00044 	addi	r3,r2,1
 8003b8c:	d8c12115 	stw	r3,1156(sp)
 8003b90:	11000005 	stb	r4,0(r2)
 8003b94:	d8812117 	ldw	r2,1156(sp)
 8003b98:	12bffb36 	bltu	r2,r10,8003b88 <__alt_data_end+0xfc003b88>
 8003b9c:	d8c13117 	ldw	r3,1220(sp)
 8003ba0:	10c5c83a 	sub	r2,r2,r3
 8003ba4:	d8813315 	stw	r2,1228(sp)
 8003ba8:	008011c4 	movi	r2,71
 8003bac:	98818926 	beq	r19,r2,80041d4 <___vfprintf_internal_r+0x1e10>
 8003bb0:	00801944 	movi	r2,101
 8003bb4:	14023c0e 	bge	r2,r16,80044a8 <___vfprintf_internal_r+0x20e4>
 8003bb8:	d8c12617 	ldw	r3,1176(sp)
 8003bbc:	00801984 	movi	r2,102
 8003bc0:	d8c13415 	stw	r3,1232(sp)
 8003bc4:	8081ef26 	beq	r16,r2,8004384 <___vfprintf_internal_r+0x1fc0>
 8003bc8:	d8c13417 	ldw	r3,1232(sp)
 8003bcc:	d9013317 	ldw	r4,1228(sp)
 8003bd0:	1901e316 	blt	r3,r4,8004360 <___vfprintf_internal_r+0x1f9c>
 8003bd4:	e080004c 	andi	r2,fp,1
 8003bd8:	1001f426 	beq	r2,zero,80043ac <___vfprintf_internal_r+0x1fe8>
 8003bdc:	d8c13417 	ldw	r3,1232(sp)
 8003be0:	1c400044 	addi	r17,r3,1
 8003be4:	8839883a 	mov	fp,r17
 8003be8:	8801e416 	blt	r17,zero,800437c <___vfprintf_internal_r+0x1fb8>
 8003bec:	dd412b07 	ldb	r21,1196(sp)
 8003bf0:	a801701e 	bne	r21,zero,80041b4 <___vfprintf_internal_r+0x1df0>
 8003bf4:	df012b15 	stw	fp,1196(sp)
 8003bf8:	dcc12783 	ldbu	r19,1182(sp)
 8003bfc:	df012d17 	ldw	fp,1204(sp)
 8003c00:	d8013215 	stw	zero,1224(sp)
 8003c04:	dc812d15 	stw	r18,1204(sp)
 8003c08:	003b6e06 	br	80029c4 <__alt_data_end+0xfc0029c4>
 8003c0c:	e080040c 	andi	r2,fp,16
 8003c10:	1000b51e 	bne	r2,zero,8003ee8 <___vfprintf_internal_r+0x1b24>
 8003c14:	e080100c 	andi	r2,fp,64
 8003c18:	10015b26 	beq	r2,zero,8004188 <___vfprintf_internal_r+0x1dc4>
 8003c1c:	d9012d17 	ldw	r4,1204(sp)
 8003c20:	d9412f17 	ldw	r5,1212(sp)
 8003c24:	20800017 	ldw	r2,0(r4)
 8003c28:	21000104 	addi	r4,r4,4
 8003c2c:	d9012d15 	stw	r4,1204(sp)
 8003c30:	1140000d 	sth	r5,0(r2)
 8003c34:	003a2006 	br	80024b8 <__alt_data_end+0xfc0024b8>
 8003c38:	e0c0100c 	andi	r3,fp,64
 8003c3c:	1800a226 	beq	r3,zero,8003ec8 <___vfprintf_internal_r+0x1b04>
 8003c40:	d8c12d17 	ldw	r3,1204(sp)
 8003c44:	1480000b 	ldhu	r18,0(r2)
 8003c48:	002b883a 	mov	r21,zero
 8003c4c:	18c00104 	addi	r3,r3,4
 8003c50:	d8c12d15 	stw	r3,1204(sp)
 8003c54:	0005883a 	mov	r2,zero
 8003c58:	9007883a 	mov	r3,r18
 8003c5c:	003c6906 	br	8002e04 <__alt_data_end+0xfc002e04>
 8003c60:	e0c0100c 	andi	r3,fp,64
 8003c64:	18009026 	beq	r3,zero,8003ea8 <___vfprintf_internal_r+0x1ae4>
 8003c68:	1480000b 	ldhu	r18,0(r2)
 8003c6c:	d8812d17 	ldw	r2,1204(sp)
 8003c70:	002b883a 	mov	r21,zero
 8003c74:	9007883a 	mov	r3,r18
 8003c78:	10800104 	addi	r2,r2,4
 8003c7c:	d8812d15 	stw	r2,1204(sp)
 8003c80:	00800044 	movi	r2,1
 8003c84:	003c5f06 	br	8002e04 <__alt_data_end+0xfc002e04>
 8003c88:	e0c0100c 	andi	r3,fp,64
 8003c8c:	18008026 	beq	r3,zero,8003e90 <___vfprintf_internal_r+0x1acc>
 8003c90:	d9012d17 	ldw	r4,1204(sp)
 8003c94:	1480000b 	ldhu	r18,0(r2)
 8003c98:	002b883a 	mov	r21,zero
 8003c9c:	21000104 	addi	r4,r4,4
 8003ca0:	d9012d15 	stw	r4,1204(sp)
 8003ca4:	003c7906 	br	8002e8c <__alt_data_end+0xfc002e8c>
 8003ca8:	e080100c 	andi	r2,fp,64
 8003cac:	10007126 	beq	r2,zero,8003e74 <___vfprintf_internal_r+0x1ab0>
 8003cb0:	1c80000f 	ldh	r18,0(r3)
 8003cb4:	d8812d17 	ldw	r2,1204(sp)
 8003cb8:	902bd7fa 	srai	r21,r18,31
 8003cbc:	10800104 	addi	r2,r2,4
 8003cc0:	d8812d15 	stw	r2,1204(sp)
 8003cc4:	a805883a 	mov	r2,r21
 8003cc8:	003b1a06 	br	8002934 <__alt_data_end+0xfc002934>
 8003ccc:	e4000007 	ldb	r16,0(fp)
 8003cd0:	e005883a 	mov	r2,fp
 8003cd4:	003a2306 	br	8002564 <__alt_data_end+0xfc002564>
 8003cd8:	00800084 	movi	r2,2
 8003cdc:	003c4906 	br	8002e04 <__alt_data_end+0xfc002e04>
 8003ce0:	01020074 	movhi	r4,2049
 8003ce4:	2106d784 	addi	r4,r4,7006
 8003ce8:	d9012c15 	stw	r4,1200(sp)
 8003cec:	d9012c17 	ldw	r4,1200(sp)
 8003cf0:	1c47883a 	add	r3,r3,r17
 8003cf4:	10800044 	addi	r2,r2,1
 8003cf8:	41000015 	stw	r4,0(r8)
 8003cfc:	44400115 	stw	r17,4(r8)
 8003d00:	d8c12015 	stw	r3,1152(sp)
 8003d04:	d8811f15 	stw	r2,1148(sp)
 8003d08:	010001c4 	movi	r4,7
 8003d0c:	20becc16 	blt	r4,r2,8003840 <__alt_data_end+0xfc003840>
 8003d10:	42000204 	addi	r8,r8,8
 8003d14:	003ed106 	br	800385c <__alt_data_end+0xfc00385c>
 8003d18:	01020074 	movhi	r4,2049
 8003d1c:	2106d784 	addi	r4,r4,7006
 8003d20:	d9012c15 	stw	r4,1200(sp)
 8003d24:	003ba306 	br	8002bb4 <__alt_data_end+0xfc002bb4>
 8003d28:	b809883a 	mov	r4,r23
 8003d2c:	b00b883a 	mov	r5,r22
 8003d30:	d9811e04 	addi	r6,sp,1144
 8003d34:	80098040 	call	8009804 <__sprint_r>
 8003d38:	103aba1e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 8003d3c:	d8c12017 	ldw	r3,1152(sp)
 8003d40:	da000404 	addi	r8,sp,16
 8003d44:	003d6c06 	br	80032f8 <__alt_data_end+0xfc0032f8>
 8003d48:	d8811f17 	ldw	r2,1148(sp)
 8003d4c:	01420074 	movhi	r5,2049
 8003d50:	01000044 	movi	r4,1
 8003d54:	18c00044 	addi	r3,r3,1
 8003d58:	10800044 	addi	r2,r2,1
 8003d5c:	2946d704 	addi	r5,r5,7004
 8003d60:	41000115 	stw	r4,4(r8)
 8003d64:	41400015 	stw	r5,0(r8)
 8003d68:	d8c12015 	stw	r3,1152(sp)
 8003d6c:	d8811f15 	stw	r2,1148(sp)
 8003d70:	010001c4 	movi	r4,7
 8003d74:	20806716 	blt	r4,r2,8003f14 <___vfprintf_internal_r+0x1b50>
 8003d78:	42000204 	addi	r8,r8,8
 8003d7c:	8000041e 	bne	r16,zero,8003d90 <___vfprintf_internal_r+0x19cc>
 8003d80:	d8813317 	ldw	r2,1228(sp)
 8003d84:	1000021e 	bne	r2,zero,8003d90 <___vfprintf_internal_r+0x19cc>
 8003d88:	e080004c 	andi	r2,fp,1
 8003d8c:	103ba026 	beq	r2,zero,8002c10 <__alt_data_end+0xfc002c10>
 8003d90:	d9013817 	ldw	r4,1248(sp)
 8003d94:	d8811f17 	ldw	r2,1148(sp)
 8003d98:	d9413517 	ldw	r5,1236(sp)
 8003d9c:	1907883a 	add	r3,r3,r4
 8003da0:	10800044 	addi	r2,r2,1
 8003da4:	41000115 	stw	r4,4(r8)
 8003da8:	41400015 	stw	r5,0(r8)
 8003dac:	d8c12015 	stw	r3,1152(sp)
 8003db0:	d8811f15 	stw	r2,1148(sp)
 8003db4:	010001c4 	movi	r4,7
 8003db8:	20815716 	blt	r4,r2,8004318 <___vfprintf_internal_r+0x1f54>
 8003dbc:	42000204 	addi	r8,r8,8
 8003dc0:	0421c83a 	sub	r16,zero,r16
 8003dc4:	0400810e 	bge	zero,r16,8003fcc <___vfprintf_internal_r+0x1c08>
 8003dc8:	04400404 	movi	r17,16
 8003dcc:	8c00bd0e 	bge	r17,r16,80040c4 <___vfprintf_internal_r+0x1d00>
 8003dd0:	01420074 	movhi	r5,2049
 8003dd4:	2946d784 	addi	r5,r5,7006
 8003dd8:	d9412c15 	stw	r5,1200(sp)
 8003ddc:	04c001c4 	movi	r19,7
 8003de0:	00000306 	br	8003df0 <___vfprintf_internal_r+0x1a2c>
 8003de4:	42000204 	addi	r8,r8,8
 8003de8:	843ffc04 	addi	r16,r16,-16
 8003dec:	8c00b80e 	bge	r17,r16,80040d0 <___vfprintf_internal_r+0x1d0c>
 8003df0:	18c00404 	addi	r3,r3,16
 8003df4:	10800044 	addi	r2,r2,1
 8003df8:	45000015 	stw	r20,0(r8)
 8003dfc:	44400115 	stw	r17,4(r8)
 8003e00:	d8c12015 	stw	r3,1152(sp)
 8003e04:	d8811f15 	stw	r2,1148(sp)
 8003e08:	98bff60e 	bge	r19,r2,8003de4 <__alt_data_end+0xfc003de4>
 8003e0c:	b809883a 	mov	r4,r23
 8003e10:	b00b883a 	mov	r5,r22
 8003e14:	d9811e04 	addi	r6,sp,1144
 8003e18:	80098040 	call	8009804 <__sprint_r>
 8003e1c:	103a811e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 8003e20:	d8c12017 	ldw	r3,1152(sp)
 8003e24:	d8811f17 	ldw	r2,1148(sp)
 8003e28:	da000404 	addi	r8,sp,16
 8003e2c:	003fee06 	br	8003de8 <__alt_data_end+0xfc003de8>
 8003e30:	008011c4 	movi	r2,71
 8003e34:	1400db16 	blt	r2,r16,80041a4 <___vfprintf_internal_r+0x1de0>
 8003e38:	01020074 	movhi	r4,2049
 8003e3c:	2106c904 	addi	r4,r4,6948
 8003e40:	d9013115 	stw	r4,1220(sp)
 8003e44:	00c000c4 	movi	r3,3
 8003e48:	00bfdfc4 	movi	r2,-129
 8003e4c:	d8c12b15 	stw	r3,1196(sp)
 8003e50:	e0b8703a 	and	fp,fp,r2
 8003e54:	dcc12783 	ldbu	r19,1182(sp)
 8003e58:	dc812d15 	stw	r18,1204(sp)
 8003e5c:	1823883a 	mov	r17,r3
 8003e60:	d8013215 	stw	zero,1224(sp)
 8003e64:	d8013415 	stw	zero,1232(sp)
 8003e68:	003ad606 	br	80029c4 <__alt_data_end+0xfc0029c4>
 8003e6c:	4823883a 	mov	r17,r9
 8003e70:	003cc906 	br	8003198 <__alt_data_end+0xfc003198>
 8003e74:	1c800017 	ldw	r18,0(r3)
 8003e78:	d8c12d17 	ldw	r3,1204(sp)
 8003e7c:	902bd7fa 	srai	r21,r18,31
 8003e80:	18c00104 	addi	r3,r3,4
 8003e84:	d8c12d15 	stw	r3,1204(sp)
 8003e88:	a805883a 	mov	r2,r21
 8003e8c:	003aa906 	br	8002934 <__alt_data_end+0xfc002934>
 8003e90:	d9412d17 	ldw	r5,1204(sp)
 8003e94:	14800017 	ldw	r18,0(r2)
 8003e98:	002b883a 	mov	r21,zero
 8003e9c:	29400104 	addi	r5,r5,4
 8003ea0:	d9412d15 	stw	r5,1204(sp)
 8003ea4:	003bf906 	br	8002e8c <__alt_data_end+0xfc002e8c>
 8003ea8:	d8c12d17 	ldw	r3,1204(sp)
 8003eac:	14800017 	ldw	r18,0(r2)
 8003eb0:	002b883a 	mov	r21,zero
 8003eb4:	18c00104 	addi	r3,r3,4
 8003eb8:	d8c12d15 	stw	r3,1204(sp)
 8003ebc:	00800044 	movi	r2,1
 8003ec0:	9007883a 	mov	r3,r18
 8003ec4:	003bcf06 	br	8002e04 <__alt_data_end+0xfc002e04>
 8003ec8:	d9012d17 	ldw	r4,1204(sp)
 8003ecc:	14800017 	ldw	r18,0(r2)
 8003ed0:	002b883a 	mov	r21,zero
 8003ed4:	21000104 	addi	r4,r4,4
 8003ed8:	d9012d15 	stw	r4,1204(sp)
 8003edc:	0005883a 	mov	r2,zero
 8003ee0:	9007883a 	mov	r3,r18
 8003ee4:	003bc706 	br	8002e04 <__alt_data_end+0xfc002e04>
 8003ee8:	d9412d17 	ldw	r5,1204(sp)
 8003eec:	d8c12f17 	ldw	r3,1212(sp)
 8003ef0:	28800017 	ldw	r2,0(r5)
 8003ef4:	29400104 	addi	r5,r5,4
 8003ef8:	d9412d15 	stw	r5,1204(sp)
 8003efc:	10c00015 	stw	r3,0(r2)
 8003f00:	00396d06 	br	80024b8 <__alt_data_end+0xfc0024b8>
 8003f04:	01020074 	movhi	r4,2049
 8003f08:	2106c704 	addi	r4,r4,6940
 8003f0c:	d9013115 	stw	r4,1220(sp)
 8003f10:	003ba206 	br	8002d9c <__alt_data_end+0xfc002d9c>
 8003f14:	b809883a 	mov	r4,r23
 8003f18:	b00b883a 	mov	r5,r22
 8003f1c:	d9811e04 	addi	r6,sp,1144
 8003f20:	80098040 	call	8009804 <__sprint_r>
 8003f24:	103a3f1e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 8003f28:	dc012617 	ldw	r16,1176(sp)
 8003f2c:	d8c12017 	ldw	r3,1152(sp)
 8003f30:	da000404 	addi	r8,sp,16
 8003f34:	003f9106 	br	8003d7c <__alt_data_end+0xfc003d7c>
 8003f38:	e0800044 	addi	r2,fp,1
 8003f3c:	9cc00814 	ori	r19,r19,32
 8003f40:	e4000047 	ldb	r16,1(fp)
 8003f44:	00398706 	br	8002564 <__alt_data_end+0xfc002564>
 8003f48:	d8812e17 	ldw	r2,1208(sp)
 8003f4c:	d8c12d15 	stw	r3,1204(sp)
 8003f50:	0085c83a 	sub	r2,zero,r2
 8003f54:	d8812e15 	stw	r2,1208(sp)
 8003f58:	e005883a 	mov	r2,fp
 8003f5c:	003a3a06 	br	8002848 <__alt_data_end+0xfc002848>
 8003f60:	b809883a 	mov	r4,r23
 8003f64:	b00b883a 	mov	r5,r22
 8003f68:	d9811e04 	addi	r6,sp,1144
 8003f6c:	80098040 	call	8009804 <__sprint_r>
 8003f70:	103a2c1e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 8003f74:	d8c12017 	ldw	r3,1152(sp)
 8003f78:	da000404 	addi	r8,sp,16
 8003f7c:	003cf006 	br	8003340 <__alt_data_end+0xfc003340>
 8003f80:	d8c12817 	ldw	r3,1184(sp)
 8003f84:	d9013117 	ldw	r4,1220(sp)
 8003f88:	1923c83a 	sub	r17,r3,r4
 8003f8c:	003a8806 	br	80029b0 <__alt_data_end+0xfc0029b0>
 8003f90:	da013f15 	stw	r8,1276(sp)
 8003f94:	800232c0 	call	800232c <strlen>
 8003f98:	1023883a 	mov	r17,r2
 8003f9c:	da013f17 	ldw	r8,1276(sp)
 8003fa0:	883c7f0e 	bge	r17,zero,80031a0 <__alt_data_end+0xfc0031a0>
 8003fa4:	0005883a 	mov	r2,zero
 8003fa8:	003c7d06 	br	80031a0 <__alt_data_end+0xfc0031a0>
 8003fac:	b809883a 	mov	r4,r23
 8003fb0:	b00b883a 	mov	r5,r22
 8003fb4:	d9811e04 	addi	r6,sp,1144
 8003fb8:	80098040 	call	8009804 <__sprint_r>
 8003fbc:	103a191e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 8003fc0:	d8c12017 	ldw	r3,1152(sp)
 8003fc4:	d8811f17 	ldw	r2,1148(sp)
 8003fc8:	da000404 	addi	r8,sp,16
 8003fcc:	d9413317 	ldw	r5,1228(sp)
 8003fd0:	d9013117 	ldw	r4,1220(sp)
 8003fd4:	10800044 	addi	r2,r2,1
 8003fd8:	28c7883a 	add	r3,r5,r3
 8003fdc:	41000015 	stw	r4,0(r8)
 8003fe0:	41400115 	stw	r5,4(r8)
 8003fe4:	d8c12015 	stw	r3,1152(sp)
 8003fe8:	d8811f15 	stw	r2,1148(sp)
 8003fec:	010001c4 	movi	r4,7
 8003ff0:	20bb060e 	bge	r4,r2,8002c0c <__alt_data_end+0xfc002c0c>
 8003ff4:	003d6206 	br	8003580 <__alt_data_end+0xfc003580>
 8003ff8:	01020074 	movhi	r4,2049
 8003ffc:	2106db84 	addi	r4,r4,7022
 8004000:	d9013615 	stw	r4,1240(sp)
 8004004:	003aa306 	br	8002a94 <__alt_data_end+0xfc002a94>
 8004008:	d8812604 	addi	r2,sp,1176
 800400c:	d8800115 	stw	r2,4(sp)
 8004010:	d9413717 	ldw	r5,1244(sp)
 8004014:	d8812504 	addi	r2,sp,1172
 8004018:	d8800215 	stw	r2,8(sp)
 800401c:	d8812104 	addi	r2,sp,1156
 8004020:	da400015 	stw	r9,0(sp)
 8004024:	d8800315 	stw	r2,12(sp)
 8004028:	b809883a 	mov	r4,r23
 800402c:	880d883a 	mov	r6,r17
 8004030:	01c000c4 	movi	r7,3
 8004034:	da013f15 	stw	r8,1276(sp)
 8004038:	da413e15 	stw	r9,1272(sp)
 800403c:	800483c0 	call	800483c <_dtoa_r>
 8004040:	da413e17 	ldw	r9,1272(sp)
 8004044:	da013f17 	ldw	r8,1276(sp)
 8004048:	d8813115 	stw	r2,1220(sp)
 800404c:	482b883a 	mov	r21,r9
 8004050:	d8c13117 	ldw	r3,1220(sp)
 8004054:	00801184 	movi	r2,70
 8004058:	1d55883a 	add	r10,r3,r21
 800405c:	98bebb1e 	bne	r19,r2,8003b4c <__alt_data_end+0xfc003b4c>
 8004060:	19000007 	ldb	r4,0(r3)
 8004064:	00800c04 	movi	r2,48
 8004068:	2080dd26 	beq	r4,r2,80043e0 <___vfprintf_internal_r+0x201c>
 800406c:	d8c12617 	ldw	r3,1176(sp)
 8004070:	50d5883a 	add	r10,r10,r3
 8004074:	003eb506 	br	8003b4c <__alt_data_end+0xfc003b4c>
 8004078:	0023883a 	mov	r17,zero
 800407c:	003d9b06 	br	80036ec <__alt_data_end+0xfc0036ec>
 8004080:	b809883a 	mov	r4,r23
 8004084:	b00b883a 	mov	r5,r22
 8004088:	d9811e04 	addi	r6,sp,1144
 800408c:	80098040 	call	8009804 <__sprint_r>
 8004090:	1039e41e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 8004094:	d8c12017 	ldw	r3,1152(sp)
 8004098:	da000404 	addi	r8,sp,16
 800409c:	003d9206 	br	80036e8 <__alt_data_end+0xfc0036e8>
 80040a0:	b809883a 	mov	r4,r23
 80040a4:	b00b883a 	mov	r5,r22
 80040a8:	d9811e04 	addi	r6,sp,1144
 80040ac:	80098040 	call	8009804 <__sprint_r>
 80040b0:	1039dc1e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 80040b4:	d8812617 	ldw	r2,1176(sp)
 80040b8:	d8c12017 	ldw	r3,1152(sp)
 80040bc:	da000404 	addi	r8,sp,16
 80040c0:	003dfb06 	br	80038b0 <__alt_data_end+0xfc0038b0>
 80040c4:	01020074 	movhi	r4,2049
 80040c8:	2106d784 	addi	r4,r4,7006
 80040cc:	d9012c15 	stw	r4,1200(sp)
 80040d0:	d9012c17 	ldw	r4,1200(sp)
 80040d4:	1c07883a 	add	r3,r3,r16
 80040d8:	10800044 	addi	r2,r2,1
 80040dc:	41000015 	stw	r4,0(r8)
 80040e0:	44000115 	stw	r16,4(r8)
 80040e4:	d8c12015 	stw	r3,1152(sp)
 80040e8:	d8811f15 	stw	r2,1148(sp)
 80040ec:	010001c4 	movi	r4,7
 80040f0:	20bfae16 	blt	r4,r2,8003fac <__alt_data_end+0xfc003fac>
 80040f4:	42000204 	addi	r8,r8,8
 80040f8:	003fb406 	br	8003fcc <__alt_data_end+0xfc003fcc>
 80040fc:	0021883a 	mov	r16,zero
 8004100:	003dfd06 	br	80038f8 <__alt_data_end+0xfc0038f8>
 8004104:	01420074 	movhi	r5,2049
 8004108:	2946db84 	addi	r5,r5,7022
 800410c:	d9413615 	stw	r5,1240(sp)
 8004110:	003ae306 	br	8002ca0 <__alt_data_end+0xfc002ca0>
 8004114:	b809883a 	mov	r4,r23
 8004118:	b00b883a 	mov	r5,r22
 800411c:	d9811e04 	addi	r6,sp,1144
 8004120:	80098040 	call	8009804 <__sprint_r>
 8004124:	1039bf1e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 8004128:	d8812617 	ldw	r2,1176(sp)
 800412c:	d9413317 	ldw	r5,1228(sp)
 8004130:	d8c12017 	ldw	r3,1152(sp)
 8004134:	da000404 	addi	r8,sp,16
 8004138:	2885c83a 	sub	r2,r5,r2
 800413c:	003ded06 	br	80038f4 <__alt_data_end+0xfc0038f4>
 8004140:	00800184 	movi	r2,6
 8004144:	1240012e 	bgeu	r2,r9,800414c <___vfprintf_internal_r+0x1d88>
 8004148:	1013883a 	mov	r9,r2
 800414c:	4823883a 	mov	r17,r9
 8004150:	4805883a 	mov	r2,r9
 8004154:	4800b216 	blt	r9,zero,8004420 <___vfprintf_internal_r+0x205c>
 8004158:	01420074 	movhi	r5,2049
 800415c:	2946d504 	addi	r5,r5,6996
 8004160:	d8812b15 	stw	r2,1196(sp)
 8004164:	dc812d15 	stw	r18,1204(sp)
 8004168:	d8013215 	stw	zero,1224(sp)
 800416c:	d8013415 	stw	zero,1232(sp)
 8004170:	d9413115 	stw	r5,1220(sp)
 8004174:	0005883a 	mov	r2,zero
 8004178:	003a1906 	br	80029e0 <__alt_data_end+0xfc0029e0>
 800417c:	04c00b44 	movi	r19,45
 8004180:	dcc12785 	stb	r19,1182(sp)
 8004184:	003b0006 	br	8002d88 <__alt_data_end+0xfc002d88>
 8004188:	d8c12d17 	ldw	r3,1204(sp)
 800418c:	d9012f17 	ldw	r4,1212(sp)
 8004190:	18800017 	ldw	r2,0(r3)
 8004194:	18c00104 	addi	r3,r3,4
 8004198:	d8c12d15 	stw	r3,1204(sp)
 800419c:	11000015 	stw	r4,0(r2)
 80041a0:	0038c506 	br	80024b8 <__alt_data_end+0xfc0024b8>
 80041a4:	01420074 	movhi	r5,2049
 80041a8:	2946ca04 	addi	r5,r5,6952
 80041ac:	d9413115 	stw	r5,1220(sp)
 80041b0:	003f2406 	br	8003e44 <__alt_data_end+0xfc003e44>
 80041b4:	00800b44 	movi	r2,45
 80041b8:	d8812785 	stb	r2,1182(sp)
 80041bc:	df012b15 	stw	fp,1196(sp)
 80041c0:	d8013215 	stw	zero,1224(sp)
 80041c4:	df012d17 	ldw	fp,1204(sp)
 80041c8:	00800b44 	movi	r2,45
 80041cc:	dc812d15 	stw	r18,1204(sp)
 80041d0:	003a0006 	br	80029d4 <__alt_data_end+0xfc0029d4>
 80041d4:	d8c12617 	ldw	r3,1176(sp)
 80041d8:	00bfff44 	movi	r2,-3
 80041dc:	18800a16 	blt	r3,r2,8004208 <___vfprintf_internal_r+0x1e44>
 80041e0:	48c00916 	blt	r9,r3,8004208 <___vfprintf_internal_r+0x1e44>
 80041e4:	d8c13415 	stw	r3,1232(sp)
 80041e8:	040019c4 	movi	r16,103
 80041ec:	003e7606 	br	8003bc8 <__alt_data_end+0xfc003bc8>
 80041f0:	01020074 	movhi	r4,2049
 80041f4:	2106d784 	addi	r4,r4,7006
 80041f8:	d9012c15 	stw	r4,1200(sp)
 80041fc:	003c8e06 	br	8003438 <__alt_data_end+0xfc003438>
 8004200:	5005883a 	mov	r2,r10
 8004204:	003e6506 	br	8003b9c <__alt_data_end+0xfc003b9c>
 8004208:	843fff84 	addi	r16,r16,-2
 800420c:	1d7fffc4 	addi	r21,r3,-1
 8004210:	dd412615 	stw	r21,1176(sp)
 8004214:	dc0122c5 	stb	r16,1163(sp)
 8004218:	a8009216 	blt	r21,zero,8004464 <___vfprintf_internal_r+0x20a0>
 800421c:	00800ac4 	movi	r2,43
 8004220:	d8812305 	stb	r2,1164(sp)
 8004224:	00800244 	movi	r2,9
 8004228:	1540660e 	bge	r2,r21,80043c4 <___vfprintf_internal_r+0x2000>
 800422c:	dcc122c4 	addi	r19,sp,1163
 8004230:	dc012c15 	stw	r16,1200(sp)
 8004234:	4023883a 	mov	r17,r8
 8004238:	9821883a 	mov	r16,r19
 800423c:	a809883a 	mov	r4,r21
 8004240:	01400284 	movi	r5,10
 8004244:	800c2cc0 	call	800c2cc <__modsi3>
 8004248:	10800c04 	addi	r2,r2,48
 800424c:	843fffc4 	addi	r16,r16,-1
 8004250:	a809883a 	mov	r4,r21
 8004254:	01400284 	movi	r5,10
 8004258:	80800005 	stb	r2,0(r16)
 800425c:	800c2780 	call	800c278 <__divsi3>
 8004260:	01000244 	movi	r4,9
 8004264:	102b883a 	mov	r21,r2
 8004268:	20bff416 	blt	r4,r2,800423c <__alt_data_end+0xfc00423c>
 800426c:	8811883a 	mov	r8,r17
 8004270:	10800c04 	addi	r2,r2,48
 8004274:	8023883a 	mov	r17,r16
 8004278:	897fffc4 	addi	r5,r17,-1
 800427c:	88bfffc5 	stb	r2,-1(r17)
 8004280:	dc012c17 	ldw	r16,1200(sp)
 8004284:	2cc08a2e 	bgeu	r5,r19,80044b0 <___vfprintf_internal_r+0x20ec>
 8004288:	d9812384 	addi	r6,sp,1166
 800428c:	344dc83a 	sub	r6,r6,r17
 8004290:	d9012344 	addi	r4,sp,1165
 8004294:	998d883a 	add	r6,r19,r6
 8004298:	00000106 	br	80042a0 <___vfprintf_internal_r+0x1edc>
 800429c:	28800003 	ldbu	r2,0(r5)
 80042a0:	20800005 	stb	r2,0(r4)
 80042a4:	21000044 	addi	r4,r4,1
 80042a8:	29400044 	addi	r5,r5,1
 80042ac:	21bffb1e 	bne	r4,r6,800429c <__alt_data_end+0xfc00429c>
 80042b0:	d8812304 	addi	r2,sp,1164
 80042b4:	1445c83a 	sub	r2,r2,r17
 80042b8:	d9412344 	addi	r5,sp,1165
 80042bc:	2885883a 	add	r2,r5,r2
 80042c0:	14e7c83a 	sub	r19,r2,r19
 80042c4:	d8813317 	ldw	r2,1228(sp)
 80042c8:	d8c13317 	ldw	r3,1228(sp)
 80042cc:	dcc13a15 	stw	r19,1256(sp)
 80042d0:	14e3883a 	add	r17,r2,r19
 80042d4:	00800044 	movi	r2,1
 80042d8:	10c0550e 	bge	r2,r3,8004430 <___vfprintf_internal_r+0x206c>
 80042dc:	8c400044 	addi	r17,r17,1
 80042e0:	8839883a 	mov	fp,r17
 80042e4:	88005016 	blt	r17,zero,8004428 <___vfprintf_internal_r+0x2064>
 80042e8:	d8013415 	stw	zero,1232(sp)
 80042ec:	003e3f06 	br	8003bec <__alt_data_end+0xfc003bec>
 80042f0:	da412b15 	stw	r9,1196(sp)
 80042f4:	dcc12783 	ldbu	r19,1182(sp)
 80042f8:	4823883a 	mov	r17,r9
 80042fc:	dc812d15 	stw	r18,1204(sp)
 8004300:	d8013215 	stw	zero,1224(sp)
 8004304:	d8013415 	stw	zero,1232(sp)
 8004308:	0039ae06 	br	80029c4 <__alt_data_end+0xfc0029c4>
 800430c:	483de91e 	bne	r9,zero,8003ab4 <__alt_data_end+0xfc003ab4>
 8004310:	8813883a 	mov	r9,r17
 8004314:	003de706 	br	8003ab4 <__alt_data_end+0xfc003ab4>
 8004318:	b809883a 	mov	r4,r23
 800431c:	b00b883a 	mov	r5,r22
 8004320:	d9811e04 	addi	r6,sp,1144
 8004324:	80098040 	call	8009804 <__sprint_r>
 8004328:	10393e1e 	bne	r2,zero,8002824 <__alt_data_end+0xfc002824>
 800432c:	dc012617 	ldw	r16,1176(sp)
 8004330:	d8c12017 	ldw	r3,1152(sp)
 8004334:	d8811f17 	ldw	r2,1148(sp)
 8004338:	da000404 	addi	r8,sp,16
 800433c:	003ea006 	br	8003dc0 <__alt_data_end+0xfc003dc0>
 8004340:	00c00b44 	movi	r3,45
 8004344:	2460003c 	xorhi	r17,r4,32768
 8004348:	d8c12b05 	stb	r3,1196(sp)
 800434c:	003ddf06 	br	8003acc <__alt_data_end+0xfc003acc>
 8004350:	02400184 	movi	r9,6
 8004354:	003dd706 	br	8003ab4 <__alt_data_end+0xfc003ab4>
 8004358:	4d400044 	addi	r21,r9,1
 800435c:	003de206 	br	8003ae8 <__alt_data_end+0xfc003ae8>
 8004360:	d8c13417 	ldw	r3,1232(sp)
 8004364:	00c0490e 	bge	zero,r3,800448c <___vfprintf_internal_r+0x20c8>
 8004368:	04400044 	movi	r17,1
 800436c:	d9013317 	ldw	r4,1228(sp)
 8004370:	8923883a 	add	r17,r17,r4
 8004374:	8839883a 	mov	fp,r17
 8004378:	883e1c0e 	bge	r17,zero,8003bec <__alt_data_end+0xfc003bec>
 800437c:	0039883a 	mov	fp,zero
 8004380:	003e1a06 	br	8003bec <__alt_data_end+0xfc003bec>
 8004384:	00c03b0e 	bge	zero,r3,8004474 <___vfprintf_internal_r+0x20b0>
 8004388:	4800021e 	bne	r9,zero,8004394 <___vfprintf_internal_r+0x1fd0>
 800438c:	e080004c 	andi	r2,fp,1
 8004390:	10000626 	beq	r2,zero,80043ac <___vfprintf_internal_r+0x1fe8>
 8004394:	d8c13417 	ldw	r3,1232(sp)
 8004398:	4a400044 	addi	r9,r9,1
 800439c:	1a63883a 	add	r17,r3,r9
 80043a0:	8839883a 	mov	fp,r17
 80043a4:	883e110e 	bge	r17,zero,8003bec <__alt_data_end+0xfc003bec>
 80043a8:	003ff406 	br	800437c <__alt_data_end+0xfc00437c>
 80043ac:	1839883a 	mov	fp,r3
 80043b0:	18004116 	blt	r3,zero,80044b8 <___vfprintf_internal_r+0x20f4>
 80043b4:	dc413417 	ldw	r17,1232(sp)
 80043b8:	003e0c06 	br	8003bec <__alt_data_end+0xfc003bec>
 80043bc:	d8812117 	ldw	r2,1156(sp)
 80043c0:	003df606 	br	8003b9c <__alt_data_end+0xfc003b9c>
 80043c4:	00800c04 	movi	r2,48
 80043c8:	a8c00c04 	addi	r3,r21,48
 80043cc:	d8812345 	stb	r2,1165(sp)
 80043d0:	d8c12385 	stb	r3,1166(sp)
 80043d4:	d88123c4 	addi	r2,sp,1167
 80043d8:	dcc122c4 	addi	r19,sp,1163
 80043dc:	003fb806 	br	80042c0 <__alt_data_end+0xfc0042c0>
 80043e0:	d9013717 	ldw	r4,1244(sp)
 80043e4:	880b883a 	mov	r5,r17
 80043e8:	000d883a 	mov	r6,zero
 80043ec:	000f883a 	mov	r7,zero
 80043f0:	da013f15 	stw	r8,1276(sp)
 80043f4:	da413e15 	stw	r9,1272(sp)
 80043f8:	da813d15 	stw	r10,1268(sp)
 80043fc:	800d57c0 	call	800d57c <__eqdf2>
 8004400:	da013f17 	ldw	r8,1276(sp)
 8004404:	da413e17 	ldw	r9,1272(sp)
 8004408:	da813d17 	ldw	r10,1268(sp)
 800440c:	103f1726 	beq	r2,zero,800406c <__alt_data_end+0xfc00406c>
 8004410:	00800044 	movi	r2,1
 8004414:	1547c83a 	sub	r3,r2,r21
 8004418:	d8c12615 	stw	r3,1176(sp)
 800441c:	003f1406 	br	8004070 <__alt_data_end+0xfc004070>
 8004420:	0005883a 	mov	r2,zero
 8004424:	003f4c06 	br	8004158 <__alt_data_end+0xfc004158>
 8004428:	0039883a 	mov	fp,zero
 800442c:	003fae06 	br	80042e8 <__alt_data_end+0xfc0042e8>
 8004430:	e084703a 	and	r2,fp,r2
 8004434:	103faa26 	beq	r2,zero,80042e0 <__alt_data_end+0xfc0042e0>
 8004438:	003fa806 	br	80042dc <__alt_data_end+0xfc0042dc>
 800443c:	d9412d17 	ldw	r5,1204(sp)
 8004440:	2a400017 	ldw	r9,0(r5)
 8004444:	28c00104 	addi	r3,r5,4
 8004448:	d8c12d15 	stw	r3,1204(sp)
 800444c:	483ebc0e 	bge	r9,zero,8003f40 <__alt_data_end+0xfc003f40>
 8004450:	027fffc4 	movi	r9,-1
 8004454:	e4000047 	ldb	r16,1(fp)
 8004458:	00384206 	br	8002564 <__alt_data_end+0xfc002564>
 800445c:	043fffc4 	movi	r16,-1
 8004460:	0038ce06 	br	800279c <__alt_data_end+0xfc00279c>
 8004464:	00800b44 	movi	r2,45
 8004468:	056bc83a 	sub	r21,zero,r21
 800446c:	d8812305 	stb	r2,1164(sp)
 8004470:	003f6c06 	br	8004224 <__alt_data_end+0xfc004224>
 8004474:	4800081e 	bne	r9,zero,8004498 <___vfprintf_internal_r+0x20d4>
 8004478:	e080004c 	andi	r2,fp,1
 800447c:	1000061e 	bne	r2,zero,8004498 <___vfprintf_internal_r+0x20d4>
 8004480:	07000044 	movi	fp,1
 8004484:	e023883a 	mov	r17,fp
 8004488:	003dd806 	br	8003bec <__alt_data_end+0xfc003bec>
 800448c:	04400084 	movi	r17,2
 8004490:	88e3c83a 	sub	r17,r17,r3
 8004494:	003fb506 	br	800436c <__alt_data_end+0xfc00436c>
 8004498:	4c400084 	addi	r17,r9,2
 800449c:	8839883a 	mov	fp,r17
 80044a0:	883dd20e 	bge	r17,zero,8003bec <__alt_data_end+0xfc003bec>
 80044a4:	003fb506 	br	800437c <__alt_data_end+0xfc00437c>
 80044a8:	d8c12617 	ldw	r3,1176(sp)
 80044ac:	003f5706 	br	800420c <__alt_data_end+0xfc00420c>
 80044b0:	d8812344 	addi	r2,sp,1165
 80044b4:	003f8206 	br	80042c0 <__alt_data_end+0xfc0042c0>
 80044b8:	0039883a 	mov	fp,zero
 80044bc:	003fbd06 	br	80043b4 <__alt_data_end+0xfc0043b4>

080044c0 <__vfprintf_internal>:
 80044c0:	2007883a 	mov	r3,r4
 80044c4:	01020074 	movhi	r4,2049
 80044c8:	210e3204 	addi	r4,r4,14536
 80044cc:	21000017 	ldw	r4,0(r4)
 80044d0:	2805883a 	mov	r2,r5
 80044d4:	300f883a 	mov	r7,r6
 80044d8:	180b883a 	mov	r5,r3
 80044dc:	100d883a 	mov	r6,r2
 80044e0:	80023c41 	jmpi	80023c4 <___vfprintf_internal_r>

080044e4 <__swsetup_r>:
 80044e4:	00820074 	movhi	r2,2049
 80044e8:	defffd04 	addi	sp,sp,-12
 80044ec:	108e3204 	addi	r2,r2,14536
 80044f0:	dc400115 	stw	r17,4(sp)
 80044f4:	2023883a 	mov	r17,r4
 80044f8:	11000017 	ldw	r4,0(r2)
 80044fc:	dc000015 	stw	r16,0(sp)
 8004500:	dfc00215 	stw	ra,8(sp)
 8004504:	2821883a 	mov	r16,r5
 8004508:	20000226 	beq	r4,zero,8004514 <__swsetup_r+0x30>
 800450c:	20c00e17 	ldw	r3,56(r4)
 8004510:	18002e26 	beq	r3,zero,80045cc <__swsetup_r+0xe8>
 8004514:	8080030b 	ldhu	r2,12(r16)
 8004518:	10c0020c 	andi	r3,r2,8
 800451c:	100d883a 	mov	r6,r2
 8004520:	18000f26 	beq	r3,zero,8004560 <__swsetup_r+0x7c>
 8004524:	80c00417 	ldw	r3,16(r16)
 8004528:	18001526 	beq	r3,zero,8004580 <__swsetup_r+0x9c>
 800452c:	1100004c 	andi	r4,r2,1
 8004530:	20001c1e 	bne	r4,zero,80045a4 <__swsetup_r+0xc0>
 8004534:	1080008c 	andi	r2,r2,2
 8004538:	1000261e 	bne	r2,zero,80045d4 <__swsetup_r+0xf0>
 800453c:	80800517 	ldw	r2,20(r16)
 8004540:	80800215 	stw	r2,8(r16)
 8004544:	18001c26 	beq	r3,zero,80045b8 <__swsetup_r+0xd4>
 8004548:	0005883a 	mov	r2,zero
 800454c:	dfc00217 	ldw	ra,8(sp)
 8004550:	dc400117 	ldw	r17,4(sp)
 8004554:	dc000017 	ldw	r16,0(sp)
 8004558:	dec00304 	addi	sp,sp,12
 800455c:	f800283a 	ret
 8004560:	3080040c 	andi	r2,r6,16
 8004564:	10001726 	beq	r2,zero,80045c4 <__swsetup_r+0xe0>
 8004568:	3080010c 	andi	r2,r6,4
 800456c:	10001b1e 	bne	r2,zero,80045dc <__swsetup_r+0xf8>
 8004570:	80c00417 	ldw	r3,16(r16)
 8004574:	30800214 	ori	r2,r6,8
 8004578:	8080030d 	sth	r2,12(r16)
 800457c:	183feb1e 	bne	r3,zero,800452c <__alt_data_end+0xfc00452c>
 8004580:	1140a00c 	andi	r5,r2,640
 8004584:	01008004 	movi	r4,512
 8004588:	293fe826 	beq	r5,r4,800452c <__alt_data_end+0xfc00452c>
 800458c:	8809883a 	mov	r4,r17
 8004590:	800b883a 	mov	r5,r16
 8004594:	80070780 	call	8007078 <__smakebuf_r>
 8004598:	8080030b 	ldhu	r2,12(r16)
 800459c:	80c00417 	ldw	r3,16(r16)
 80045a0:	003fe206 	br	800452c <__alt_data_end+0xfc00452c>
 80045a4:	80800517 	ldw	r2,20(r16)
 80045a8:	80000215 	stw	zero,8(r16)
 80045ac:	0085c83a 	sub	r2,zero,r2
 80045b0:	80800615 	stw	r2,24(r16)
 80045b4:	183fe41e 	bne	r3,zero,8004548 <__alt_data_end+0xfc004548>
 80045b8:	8080030b 	ldhu	r2,12(r16)
 80045bc:	1080200c 	andi	r2,r2,128
 80045c0:	103fe226 	beq	r2,zero,800454c <__alt_data_end+0xfc00454c>
 80045c4:	00bfffc4 	movi	r2,-1
 80045c8:	003fe006 	br	800454c <__alt_data_end+0xfc00454c>
 80045cc:	80065200 	call	8006520 <__sinit>
 80045d0:	003fd006 	br	8004514 <__alt_data_end+0xfc004514>
 80045d4:	0005883a 	mov	r2,zero
 80045d8:	003fd906 	br	8004540 <__alt_data_end+0xfc004540>
 80045dc:	81400c17 	ldw	r5,48(r16)
 80045e0:	28000626 	beq	r5,zero,80045fc <__swsetup_r+0x118>
 80045e4:	80801004 	addi	r2,r16,64
 80045e8:	28800326 	beq	r5,r2,80045f8 <__swsetup_r+0x114>
 80045ec:	8809883a 	mov	r4,r17
 80045f0:	80066940 	call	8006694 <_free_r>
 80045f4:	8180030b 	ldhu	r6,12(r16)
 80045f8:	80000c15 	stw	zero,48(r16)
 80045fc:	80c00417 	ldw	r3,16(r16)
 8004600:	00bff6c4 	movi	r2,-37
 8004604:	118c703a 	and	r6,r2,r6
 8004608:	80000115 	stw	zero,4(r16)
 800460c:	80c00015 	stw	r3,0(r16)
 8004610:	003fd806 	br	8004574 <__alt_data_end+0xfc004574>

08004614 <quorem>:
 8004614:	defff204 	addi	sp,sp,-56
 8004618:	ddc00b15 	stw	r23,44(sp)
 800461c:	20800417 	ldw	r2,16(r4)
 8004620:	2dc00417 	ldw	r23,16(r5)
 8004624:	dfc00d15 	stw	ra,52(sp)
 8004628:	df000c15 	stw	fp,48(sp)
 800462c:	dd800a15 	stw	r22,40(sp)
 8004630:	dd400915 	stw	r21,36(sp)
 8004634:	dd000815 	stw	r20,32(sp)
 8004638:	dcc00715 	stw	r19,28(sp)
 800463c:	dc800615 	stw	r18,24(sp)
 8004640:	dc400515 	stw	r17,20(sp)
 8004644:	dc000415 	stw	r16,16(sp)
 8004648:	15c07a16 	blt	r2,r23,8004834 <quorem+0x220>
 800464c:	bdffffc4 	addi	r23,r23,-1
 8004650:	bde9883a 	add	r20,r23,r23
 8004654:	28c00504 	addi	r3,r5,20
 8004658:	a529883a 	add	r20,r20,r20
 800465c:	1d39883a 	add	fp,r3,r20
 8004660:	24c00504 	addi	r19,r4,20
 8004664:	d9400215 	stw	r5,8(sp)
 8004668:	9d29883a 	add	r20,r19,r20
 800466c:	e1400017 	ldw	r5,0(fp)
 8004670:	d9000015 	stw	r4,0(sp)
 8004674:	a1000017 	ldw	r4,0(r20)
 8004678:	29400044 	addi	r5,r5,1
 800467c:	d8c00115 	stw	r3,4(sp)
 8004680:	dd000315 	stw	r20,12(sp)
 8004684:	800c3280 	call	800c328 <__udivsi3>
 8004688:	1025883a 	mov	r18,r2
 800468c:	10003026 	beq	r2,zero,8004750 <quorem+0x13c>
 8004690:	dc400117 	ldw	r17,4(sp)
 8004694:	9829883a 	mov	r20,r19
 8004698:	002d883a 	mov	r22,zero
 800469c:	0021883a 	mov	r16,zero
 80046a0:	8d400017 	ldw	r21,0(r17)
 80046a4:	900b883a 	mov	r5,r18
 80046a8:	8c400104 	addi	r17,r17,4
 80046ac:	a93fffcc 	andi	r4,r21,65535
 80046b0:	800c3380 	call	800c338 <__mulsi3>
 80046b4:	a808d43a 	srli	r4,r21,16
 80046b8:	900b883a 	mov	r5,r18
 80046bc:	b0ad883a 	add	r22,r22,r2
 80046c0:	800c3380 	call	800c338 <__mulsi3>
 80046c4:	a1000017 	ldw	r4,0(r20)
 80046c8:	b00cd43a 	srli	r6,r22,16
 80046cc:	b0ffffcc 	andi	r3,r22,65535
 80046d0:	217fffcc 	andi	r5,r4,65535
 80046d4:	2c21883a 	add	r16,r5,r16
 80046d8:	80c7c83a 	sub	r3,r16,r3
 80046dc:	2008d43a 	srli	r4,r4,16
 80046e0:	3085883a 	add	r2,r6,r2
 80046e4:	1821d43a 	srai	r16,r3,16
 80046e8:	117fffcc 	andi	r5,r2,65535
 80046ec:	2149c83a 	sub	r4,r4,r5
 80046f0:	2421883a 	add	r16,r4,r16
 80046f4:	8008943a 	slli	r4,r16,16
 80046f8:	18ffffcc 	andi	r3,r3,65535
 80046fc:	102cd43a 	srli	r22,r2,16
 8004700:	20c8b03a 	or	r4,r4,r3
 8004704:	a1000015 	stw	r4,0(r20)
 8004708:	8021d43a 	srai	r16,r16,16
 800470c:	a5000104 	addi	r20,r20,4
 8004710:	e47fe32e 	bgeu	fp,r17,80046a0 <__alt_data_end+0xfc0046a0>
 8004714:	d8c00317 	ldw	r3,12(sp)
 8004718:	18800017 	ldw	r2,0(r3)
 800471c:	10000c1e 	bne	r2,zero,8004750 <quorem+0x13c>
 8004720:	18bfff04 	addi	r2,r3,-4
 8004724:	9880082e 	bgeu	r19,r2,8004748 <quorem+0x134>
 8004728:	18ffff17 	ldw	r3,-4(r3)
 800472c:	18000326 	beq	r3,zero,800473c <quorem+0x128>
 8004730:	00000506 	br	8004748 <quorem+0x134>
 8004734:	10c00017 	ldw	r3,0(r2)
 8004738:	1800031e 	bne	r3,zero,8004748 <quorem+0x134>
 800473c:	10bfff04 	addi	r2,r2,-4
 8004740:	bdffffc4 	addi	r23,r23,-1
 8004744:	98bffb36 	bltu	r19,r2,8004734 <__alt_data_end+0xfc004734>
 8004748:	d8c00017 	ldw	r3,0(sp)
 800474c:	1dc00415 	stw	r23,16(r3)
 8004750:	d9000017 	ldw	r4,0(sp)
 8004754:	d9400217 	ldw	r5,8(sp)
 8004758:	80087f40 	call	80087f4 <__mcmp>
 800475c:	10002816 	blt	r2,zero,8004800 <quorem+0x1ec>
 8004760:	dc400117 	ldw	r17,4(sp)
 8004764:	94800044 	addi	r18,r18,1
 8004768:	980d883a 	mov	r6,r19
 800476c:	0007883a 	mov	r3,zero
 8004770:	31000017 	ldw	r4,0(r6)
 8004774:	89400017 	ldw	r5,0(r17)
 8004778:	31800104 	addi	r6,r6,4
 800477c:	20bfffcc 	andi	r2,r4,65535
 8004780:	10c7883a 	add	r3,r2,r3
 8004784:	28bfffcc 	andi	r2,r5,65535
 8004788:	1885c83a 	sub	r2,r3,r2
 800478c:	280ad43a 	srli	r5,r5,16
 8004790:	2008d43a 	srli	r4,r4,16
 8004794:	1007d43a 	srai	r3,r2,16
 8004798:	10bfffcc 	andi	r2,r2,65535
 800479c:	2149c83a 	sub	r4,r4,r5
 80047a0:	20c9883a 	add	r4,r4,r3
 80047a4:	200a943a 	slli	r5,r4,16
 80047a8:	8c400104 	addi	r17,r17,4
 80047ac:	2007d43a 	srai	r3,r4,16
 80047b0:	2884b03a 	or	r2,r5,r2
 80047b4:	30bfff15 	stw	r2,-4(r6)
 80047b8:	e47fed2e 	bgeu	fp,r17,8004770 <__alt_data_end+0xfc004770>
 80047bc:	bdc5883a 	add	r2,r23,r23
 80047c0:	1085883a 	add	r2,r2,r2
 80047c4:	9887883a 	add	r3,r19,r2
 80047c8:	18800017 	ldw	r2,0(r3)
 80047cc:	10000c1e 	bne	r2,zero,8004800 <quorem+0x1ec>
 80047d0:	18bfff04 	addi	r2,r3,-4
 80047d4:	9880082e 	bgeu	r19,r2,80047f8 <quorem+0x1e4>
 80047d8:	18ffff17 	ldw	r3,-4(r3)
 80047dc:	18000326 	beq	r3,zero,80047ec <quorem+0x1d8>
 80047e0:	00000506 	br	80047f8 <quorem+0x1e4>
 80047e4:	10c00017 	ldw	r3,0(r2)
 80047e8:	1800031e 	bne	r3,zero,80047f8 <quorem+0x1e4>
 80047ec:	10bfff04 	addi	r2,r2,-4
 80047f0:	bdffffc4 	addi	r23,r23,-1
 80047f4:	98bffb36 	bltu	r19,r2,80047e4 <__alt_data_end+0xfc0047e4>
 80047f8:	d8c00017 	ldw	r3,0(sp)
 80047fc:	1dc00415 	stw	r23,16(r3)
 8004800:	9005883a 	mov	r2,r18
 8004804:	dfc00d17 	ldw	ra,52(sp)
 8004808:	df000c17 	ldw	fp,48(sp)
 800480c:	ddc00b17 	ldw	r23,44(sp)
 8004810:	dd800a17 	ldw	r22,40(sp)
 8004814:	dd400917 	ldw	r21,36(sp)
 8004818:	dd000817 	ldw	r20,32(sp)
 800481c:	dcc00717 	ldw	r19,28(sp)
 8004820:	dc800617 	ldw	r18,24(sp)
 8004824:	dc400517 	ldw	r17,20(sp)
 8004828:	dc000417 	ldw	r16,16(sp)
 800482c:	dec00e04 	addi	sp,sp,56
 8004830:	f800283a 	ret
 8004834:	0005883a 	mov	r2,zero
 8004838:	003ff206 	br	8004804 <__alt_data_end+0xfc004804>

0800483c <_dtoa_r>:
 800483c:	20801017 	ldw	r2,64(r4)
 8004840:	deffde04 	addi	sp,sp,-136
 8004844:	dd401d15 	stw	r21,116(sp)
 8004848:	dcc01b15 	stw	r19,108(sp)
 800484c:	dc801a15 	stw	r18,104(sp)
 8004850:	dc401915 	stw	r17,100(sp)
 8004854:	dc001815 	stw	r16,96(sp)
 8004858:	dfc02115 	stw	ra,132(sp)
 800485c:	df002015 	stw	fp,128(sp)
 8004860:	ddc01f15 	stw	r23,124(sp)
 8004864:	dd801e15 	stw	r22,120(sp)
 8004868:	dd001c15 	stw	r20,112(sp)
 800486c:	d9c00315 	stw	r7,12(sp)
 8004870:	2021883a 	mov	r16,r4
 8004874:	302b883a 	mov	r21,r6
 8004878:	2825883a 	mov	r18,r5
 800487c:	dc402417 	ldw	r17,144(sp)
 8004880:	3027883a 	mov	r19,r6
 8004884:	10000826 	beq	r2,zero,80048a8 <_dtoa_r+0x6c>
 8004888:	21801117 	ldw	r6,68(r4)
 800488c:	00c00044 	movi	r3,1
 8004890:	100b883a 	mov	r5,r2
 8004894:	1986983a 	sll	r3,r3,r6
 8004898:	11800115 	stw	r6,4(r2)
 800489c:	10c00215 	stw	r3,8(r2)
 80048a0:	8007f200 	call	8007f20 <_Bfree>
 80048a4:	80001015 	stw	zero,64(r16)
 80048a8:	a8002d16 	blt	r21,zero,8004960 <_dtoa_r+0x124>
 80048ac:	88000015 	stw	zero,0(r17)
 80048b0:	a8dffc2c 	andhi	r3,r21,32752
 80048b4:	009ffc34 	movhi	r2,32752
 80048b8:	18801b26 	beq	r3,r2,8004928 <_dtoa_r+0xec>
 80048bc:	9009883a 	mov	r4,r18
 80048c0:	980b883a 	mov	r5,r19
 80048c4:	000d883a 	mov	r6,zero
 80048c8:	000f883a 	mov	r7,zero
 80048cc:	800d57c0 	call	800d57c <__eqdf2>
 80048d0:	10002a1e 	bne	r2,zero,800497c <_dtoa_r+0x140>
 80048d4:	d8c02317 	ldw	r3,140(sp)
 80048d8:	d9002517 	ldw	r4,148(sp)
 80048dc:	00800044 	movi	r2,1
 80048e0:	18800015 	stw	r2,0(r3)
 80048e4:	2001a226 	beq	r4,zero,8004f70 <_dtoa_r+0x734>
 80048e8:	00820074 	movhi	r2,2049
 80048ec:	1086d744 	addi	r2,r2,7005
 80048f0:	20800015 	stw	r2,0(r4)
 80048f4:	10bfffc4 	addi	r2,r2,-1
 80048f8:	dfc02117 	ldw	ra,132(sp)
 80048fc:	df002017 	ldw	fp,128(sp)
 8004900:	ddc01f17 	ldw	r23,124(sp)
 8004904:	dd801e17 	ldw	r22,120(sp)
 8004908:	dd401d17 	ldw	r21,116(sp)
 800490c:	dd001c17 	ldw	r20,112(sp)
 8004910:	dcc01b17 	ldw	r19,108(sp)
 8004914:	dc801a17 	ldw	r18,104(sp)
 8004918:	dc401917 	ldw	r17,100(sp)
 800491c:	dc001817 	ldw	r16,96(sp)
 8004920:	dec02204 	addi	sp,sp,136
 8004924:	f800283a 	ret
 8004928:	d8c02317 	ldw	r3,140(sp)
 800492c:	0089c3c4 	movi	r2,9999
 8004930:	18800015 	stw	r2,0(r3)
 8004934:	90017c26 	beq	r18,zero,8004f28 <_dtoa_r+0x6ec>
 8004938:	00820074 	movhi	r2,2049
 800493c:	1086e304 	addi	r2,r2,7052
 8004940:	d9002517 	ldw	r4,148(sp)
 8004944:	203fec26 	beq	r4,zero,80048f8 <__alt_data_end+0xfc0048f8>
 8004948:	10c000c7 	ldb	r3,3(r2)
 800494c:	18017d1e 	bne	r3,zero,8004f44 <_dtoa_r+0x708>
 8004950:	10c000c4 	addi	r3,r2,3
 8004954:	d9802517 	ldw	r6,148(sp)
 8004958:	30c00015 	stw	r3,0(r6)
 800495c:	003fe606 	br	80048f8 <__alt_data_end+0xfc0048f8>
 8004960:	04e00034 	movhi	r19,32768
 8004964:	9cffffc4 	addi	r19,r19,-1
 8004968:	00800044 	movi	r2,1
 800496c:	ace6703a 	and	r19,r21,r19
 8004970:	88800015 	stw	r2,0(r17)
 8004974:	982b883a 	mov	r21,r19
 8004978:	003fcd06 	br	80048b0 <__alt_data_end+0xfc0048b0>
 800497c:	d8800204 	addi	r2,sp,8
 8004980:	a822d53a 	srli	r17,r21,20
 8004984:	d8800015 	stw	r2,0(sp)
 8004988:	8009883a 	mov	r4,r16
 800498c:	900b883a 	mov	r5,r18
 8004990:	980d883a 	mov	r6,r19
 8004994:	d9c00104 	addi	r7,sp,4
 8004998:	8008b680 	call	8008b68 <__d2b>
 800499c:	1039883a 	mov	fp,r2
 80049a0:	88016a1e 	bne	r17,zero,8004f4c <_dtoa_r+0x710>
 80049a4:	dd000217 	ldw	r20,8(sp)
 80049a8:	dc400117 	ldw	r17,4(sp)
 80049ac:	00befbc4 	movi	r2,-1041
 80049b0:	a463883a 	add	r17,r20,r17
 80049b4:	8882ea16 	blt	r17,r2,8005560 <_dtoa_r+0xd24>
 80049b8:	00bf0384 	movi	r2,-1010
 80049bc:	1445c83a 	sub	r2,r2,r17
 80049c0:	89010484 	addi	r4,r17,1042
 80049c4:	a8aa983a 	sll	r21,r21,r2
 80049c8:	9108d83a 	srl	r4,r18,r4
 80049cc:	a908b03a 	or	r4,r21,r4
 80049d0:	800ea540 	call	800ea54 <__floatunsidf>
 80049d4:	017f8434 	movhi	r5,65040
 80049d8:	01800044 	movi	r6,1
 80049dc:	1009883a 	mov	r4,r2
 80049e0:	194b883a 	add	r5,r3,r5
 80049e4:	8c7fffc4 	addi	r17,r17,-1
 80049e8:	d9800f15 	stw	r6,60(sp)
 80049ec:	000d883a 	mov	r6,zero
 80049f0:	01cffe34 	movhi	r7,16376
 80049f4:	800e02c0 	call	800e02c <__subdf3>
 80049f8:	0198dbf4 	movhi	r6,25455
 80049fc:	01cff4f4 	movhi	r7,16339
 8004a00:	1009883a 	mov	r4,r2
 8004a04:	180b883a 	mov	r5,r3
 8004a08:	3190d844 	addi	r6,r6,17249
 8004a0c:	39e1e9c4 	addi	r7,r7,-30809
 8004a10:	800d7c00 	call	800d7c0 <__muldf3>
 8004a14:	01a2d874 	movhi	r6,35681
 8004a18:	01cff1f4 	movhi	r7,16327
 8004a1c:	180b883a 	mov	r5,r3
 8004a20:	31b22cc4 	addi	r6,r6,-14157
 8004a24:	39e28a04 	addi	r7,r7,-30168
 8004a28:	1009883a 	mov	r4,r2
 8004a2c:	800c3600 	call	800c360 <__adddf3>
 8004a30:	8809883a 	mov	r4,r17
 8004a34:	102d883a 	mov	r22,r2
 8004a38:	182b883a 	mov	r21,r3
 8004a3c:	800e9840 	call	800e984 <__floatsidf>
 8004a40:	019427f4 	movhi	r6,20639
 8004a44:	01cff4f4 	movhi	r7,16339
 8004a48:	1009883a 	mov	r4,r2
 8004a4c:	180b883a 	mov	r5,r3
 8004a50:	319e7ec4 	addi	r6,r6,31227
 8004a54:	39d104c4 	addi	r7,r7,17427
 8004a58:	800d7c00 	call	800d7c0 <__muldf3>
 8004a5c:	b009883a 	mov	r4,r22
 8004a60:	a80b883a 	mov	r5,r21
 8004a64:	100d883a 	mov	r6,r2
 8004a68:	180f883a 	mov	r7,r3
 8004a6c:	800c3600 	call	800c360 <__adddf3>
 8004a70:	1009883a 	mov	r4,r2
 8004a74:	180b883a 	mov	r5,r3
 8004a78:	102d883a 	mov	r22,r2
 8004a7c:	182b883a 	mov	r21,r3
 8004a80:	800e8fc0 	call	800e8fc <__fixdfsi>
 8004a84:	b009883a 	mov	r4,r22
 8004a88:	a80b883a 	mov	r5,r21
 8004a8c:	000d883a 	mov	r6,zero
 8004a90:	000f883a 	mov	r7,zero
 8004a94:	d8800515 	stw	r2,20(sp)
 8004a98:	800d6e00 	call	800d6e0 <__ledf2>
 8004a9c:	10023116 	blt	r2,zero,8005364 <_dtoa_r+0xb28>
 8004aa0:	d8c00517 	ldw	r3,20(sp)
 8004aa4:	00800584 	movi	r2,22
 8004aa8:	10c21f36 	bltu	r2,r3,8005328 <_dtoa_r+0xaec>
 8004aac:	180490fa 	slli	r2,r3,3
 8004ab0:	00c20074 	movhi	r3,2049
 8004ab4:	18c6ff04 	addi	r3,r3,7164
 8004ab8:	1885883a 	add	r2,r3,r2
 8004abc:	11000017 	ldw	r4,0(r2)
 8004ac0:	11400117 	ldw	r5,4(r2)
 8004ac4:	900d883a 	mov	r6,r18
 8004ac8:	980f883a 	mov	r7,r19
 8004acc:	800d6000 	call	800d600 <__gedf2>
 8004ad0:	0082a70e 	bge	zero,r2,8005570 <_dtoa_r+0xd34>
 8004ad4:	d9000517 	ldw	r4,20(sp)
 8004ad8:	d8000c15 	stw	zero,48(sp)
 8004adc:	213fffc4 	addi	r4,r4,-1
 8004ae0:	d9000515 	stw	r4,20(sp)
 8004ae4:	a463c83a 	sub	r17,r20,r17
 8004ae8:	8dbfffc4 	addi	r22,r17,-1
 8004aec:	b0021916 	blt	r22,zero,8005354 <_dtoa_r+0xb18>
 8004af0:	d8000815 	stw	zero,32(sp)
 8004af4:	d8800517 	ldw	r2,20(sp)
 8004af8:	10020e16 	blt	r2,zero,8005334 <_dtoa_r+0xaf8>
 8004afc:	b0ad883a 	add	r22,r22,r2
 8004b00:	d8800a15 	stw	r2,40(sp)
 8004b04:	d8000915 	stw	zero,36(sp)
 8004b08:	d8c00317 	ldw	r3,12(sp)
 8004b0c:	00800244 	movi	r2,9
 8004b10:	10c11a36 	bltu	r2,r3,8004f7c <_dtoa_r+0x740>
 8004b14:	00800144 	movi	r2,5
 8004b18:	10c4fc0e 	bge	r2,r3,8005f0c <_dtoa_r+0x16d0>
 8004b1c:	18ffff04 	addi	r3,r3,-4
 8004b20:	d8c00315 	stw	r3,12(sp)
 8004b24:	0029883a 	mov	r20,zero
 8004b28:	d9800317 	ldw	r6,12(sp)
 8004b2c:	008000c4 	movi	r2,3
 8004b30:	3083bd26 	beq	r6,r2,8005a28 <_dtoa_r+0x11ec>
 8004b34:	1183670e 	bge	r2,r6,80058d4 <_dtoa_r+0x1098>
 8004b38:	d8c00317 	ldw	r3,12(sp)
 8004b3c:	00800104 	movi	r2,4
 8004b40:	1882e726 	beq	r3,r2,80056e0 <_dtoa_r+0xea4>
 8004b44:	00800144 	movi	r2,5
 8004b48:	1884f21e 	bne	r3,r2,8005f14 <_dtoa_r+0x16d8>
 8004b4c:	00800044 	movi	r2,1
 8004b50:	d8800b15 	stw	r2,44(sp)
 8004b54:	d8c02217 	ldw	r3,136(sp)
 8004b58:	d9000517 	ldw	r4,20(sp)
 8004b5c:	1907883a 	add	r3,r3,r4
 8004b60:	19800044 	addi	r6,r3,1
 8004b64:	d8c00d15 	stw	r3,52(sp)
 8004b68:	d9800615 	stw	r6,24(sp)
 8004b6c:	0183c30e 	bge	zero,r6,8005a7c <_dtoa_r+0x1240>
 8004b70:	d9800617 	ldw	r6,24(sp)
 8004b74:	3023883a 	mov	r17,r6
 8004b78:	80001115 	stw	zero,68(r16)
 8004b7c:	008005c4 	movi	r2,23
 8004b80:	1184f62e 	bgeu	r2,r6,8005f5c <_dtoa_r+0x1720>
 8004b84:	00c00044 	movi	r3,1
 8004b88:	00800104 	movi	r2,4
 8004b8c:	1085883a 	add	r2,r2,r2
 8004b90:	11000504 	addi	r4,r2,20
 8004b94:	180b883a 	mov	r5,r3
 8004b98:	18c00044 	addi	r3,r3,1
 8004b9c:	313ffb2e 	bgeu	r6,r4,8004b8c <__alt_data_end+0xfc004b8c>
 8004ba0:	81401115 	stw	r5,68(r16)
 8004ba4:	8009883a 	mov	r4,r16
 8004ba8:	8007e780 	call	8007e78 <_Balloc>
 8004bac:	d8800715 	stw	r2,28(sp)
 8004bb0:	80801015 	stw	r2,64(r16)
 8004bb4:	00800384 	movi	r2,14
 8004bb8:	1440fd36 	bltu	r2,r17,8004fb0 <_dtoa_r+0x774>
 8004bbc:	a000fc26 	beq	r20,zero,8004fb0 <_dtoa_r+0x774>
 8004bc0:	d8800517 	ldw	r2,20(sp)
 8004bc4:	0083b90e 	bge	zero,r2,8005aac <_dtoa_r+0x1270>
 8004bc8:	d8c00517 	ldw	r3,20(sp)
 8004bcc:	108003cc 	andi	r2,r2,15
 8004bd0:	100490fa 	slli	r2,r2,3
 8004bd4:	182fd13a 	srai	r23,r3,4
 8004bd8:	00c20074 	movhi	r3,2049
 8004bdc:	18c6ff04 	addi	r3,r3,7164
 8004be0:	1885883a 	add	r2,r3,r2
 8004be4:	b8c0040c 	andi	r3,r23,16
 8004be8:	12c00017 	ldw	r11,0(r2)
 8004bec:	12800117 	ldw	r10,4(r2)
 8004bf0:	18039726 	beq	r3,zero,8005a50 <_dtoa_r+0x1214>
 8004bf4:	00820074 	movhi	r2,2049
 8004bf8:	1086f504 	addi	r2,r2,7124
 8004bfc:	11800817 	ldw	r6,32(r2)
 8004c00:	11c00917 	ldw	r7,36(r2)
 8004c04:	9009883a 	mov	r4,r18
 8004c08:	980b883a 	mov	r5,r19
 8004c0c:	da801615 	stw	r10,88(sp)
 8004c10:	dac01515 	stw	r11,84(sp)
 8004c14:	800cbfc0 	call	800cbfc <__divdf3>
 8004c18:	da801617 	ldw	r10,88(sp)
 8004c1c:	dac01517 	ldw	r11,84(sp)
 8004c20:	bdc003cc 	andi	r23,r23,15
 8004c24:	044000c4 	movi	r17,3
 8004c28:	d8800e15 	stw	r2,56(sp)
 8004c2c:	182b883a 	mov	r21,r3
 8004c30:	b8001126 	beq	r23,zero,8004c78 <_dtoa_r+0x43c>
 8004c34:	05020074 	movhi	r20,2049
 8004c38:	a506f504 	addi	r20,r20,7124
 8004c3c:	5805883a 	mov	r2,r11
 8004c40:	5007883a 	mov	r3,r10
 8004c44:	b980004c 	andi	r6,r23,1
 8004c48:	1009883a 	mov	r4,r2
 8004c4c:	b82fd07a 	srai	r23,r23,1
 8004c50:	180b883a 	mov	r5,r3
 8004c54:	30000426 	beq	r6,zero,8004c68 <_dtoa_r+0x42c>
 8004c58:	a1800017 	ldw	r6,0(r20)
 8004c5c:	a1c00117 	ldw	r7,4(r20)
 8004c60:	8c400044 	addi	r17,r17,1
 8004c64:	800d7c00 	call	800d7c0 <__muldf3>
 8004c68:	a5000204 	addi	r20,r20,8
 8004c6c:	b83ff51e 	bne	r23,zero,8004c44 <__alt_data_end+0xfc004c44>
 8004c70:	1017883a 	mov	r11,r2
 8004c74:	1815883a 	mov	r10,r3
 8004c78:	d9000e17 	ldw	r4,56(sp)
 8004c7c:	a80b883a 	mov	r5,r21
 8004c80:	580d883a 	mov	r6,r11
 8004c84:	500f883a 	mov	r7,r10
 8004c88:	800cbfc0 	call	800cbfc <__divdf3>
 8004c8c:	1029883a 	mov	r20,r2
 8004c90:	182b883a 	mov	r21,r3
 8004c94:	d9800c17 	ldw	r6,48(sp)
 8004c98:	30000626 	beq	r6,zero,8004cb4 <_dtoa_r+0x478>
 8004c9c:	a009883a 	mov	r4,r20
 8004ca0:	a80b883a 	mov	r5,r21
 8004ca4:	000d883a 	mov	r6,zero
 8004ca8:	01cffc34 	movhi	r7,16368
 8004cac:	800d6e00 	call	800d6e0 <__ledf2>
 8004cb0:	10043216 	blt	r2,zero,8005d7c <_dtoa_r+0x1540>
 8004cb4:	8809883a 	mov	r4,r17
 8004cb8:	800e9840 	call	800e984 <__floatsidf>
 8004cbc:	1009883a 	mov	r4,r2
 8004cc0:	180b883a 	mov	r5,r3
 8004cc4:	a00d883a 	mov	r6,r20
 8004cc8:	a80f883a 	mov	r7,r21
 8004ccc:	800d7c00 	call	800d7c0 <__muldf3>
 8004cd0:	000d883a 	mov	r6,zero
 8004cd4:	1009883a 	mov	r4,r2
 8004cd8:	180b883a 	mov	r5,r3
 8004cdc:	01d00734 	movhi	r7,16412
 8004ce0:	800c3600 	call	800c360 <__adddf3>
 8004ce4:	1023883a 	mov	r17,r2
 8004ce8:	d9800617 	ldw	r6,24(sp)
 8004cec:	00bf3034 	movhi	r2,64704
 8004cf0:	1885883a 	add	r2,r3,r2
 8004cf4:	d8800e15 	stw	r2,56(sp)
 8004cf8:	30032e26 	beq	r6,zero,80059b4 <_dtoa_r+0x1178>
 8004cfc:	d8c00517 	ldw	r3,20(sp)
 8004d00:	da800617 	ldw	r10,24(sp)
 8004d04:	d8c01215 	stw	r3,72(sp)
 8004d08:	d9000b17 	ldw	r4,44(sp)
 8004d0c:	2003b026 	beq	r4,zero,8005bd0 <_dtoa_r+0x1394>
 8004d10:	50bfffc4 	addi	r2,r10,-1
 8004d14:	100490fa 	slli	r2,r2,3
 8004d18:	00c20074 	movhi	r3,2049
 8004d1c:	18c6ff04 	addi	r3,r3,7164
 8004d20:	1885883a 	add	r2,r3,r2
 8004d24:	11800017 	ldw	r6,0(r2)
 8004d28:	11c00117 	ldw	r7,4(r2)
 8004d2c:	d8800717 	ldw	r2,28(sp)
 8004d30:	0009883a 	mov	r4,zero
 8004d34:	014ff834 	movhi	r5,16352
 8004d38:	da801615 	stw	r10,88(sp)
 8004d3c:	15c00044 	addi	r23,r2,1
 8004d40:	800cbfc0 	call	800cbfc <__divdf3>
 8004d44:	d9c00e17 	ldw	r7,56(sp)
 8004d48:	880d883a 	mov	r6,r17
 8004d4c:	1009883a 	mov	r4,r2
 8004d50:	180b883a 	mov	r5,r3
 8004d54:	800e02c0 	call	800e02c <__subdf3>
 8004d58:	a80b883a 	mov	r5,r21
 8004d5c:	a009883a 	mov	r4,r20
 8004d60:	d8c01015 	stw	r3,64(sp)
 8004d64:	d8800e15 	stw	r2,56(sp)
 8004d68:	800e8fc0 	call	800e8fc <__fixdfsi>
 8004d6c:	1009883a 	mov	r4,r2
 8004d70:	d8801715 	stw	r2,92(sp)
 8004d74:	800e9840 	call	800e984 <__floatsidf>
 8004d78:	a009883a 	mov	r4,r20
 8004d7c:	a80b883a 	mov	r5,r21
 8004d80:	100d883a 	mov	r6,r2
 8004d84:	180f883a 	mov	r7,r3
 8004d88:	800e02c0 	call	800e02c <__subdf3>
 8004d8c:	da001717 	ldw	r8,92(sp)
 8004d90:	1829883a 	mov	r20,r3
 8004d94:	d8c00717 	ldw	r3,28(sp)
 8004d98:	d9000e17 	ldw	r4,56(sp)
 8004d9c:	d9401017 	ldw	r5,64(sp)
 8004da0:	42000c04 	addi	r8,r8,48
 8004da4:	1023883a 	mov	r17,r2
 8004da8:	1a000005 	stb	r8,0(r3)
 8004dac:	880d883a 	mov	r6,r17
 8004db0:	a00f883a 	mov	r7,r20
 8004db4:	402b883a 	mov	r21,r8
 8004db8:	800d6000 	call	800d600 <__gedf2>
 8004dbc:	00844516 	blt	zero,r2,8005ed4 <_dtoa_r+0x1698>
 8004dc0:	0009883a 	mov	r4,zero
 8004dc4:	014ffc34 	movhi	r5,16368
 8004dc8:	880d883a 	mov	r6,r17
 8004dcc:	a00f883a 	mov	r7,r20
 8004dd0:	800e02c0 	call	800e02c <__subdf3>
 8004dd4:	d9000e17 	ldw	r4,56(sp)
 8004dd8:	d9401017 	ldw	r5,64(sp)
 8004ddc:	100d883a 	mov	r6,r2
 8004de0:	180f883a 	mov	r7,r3
 8004de4:	800d6000 	call	800d600 <__gedf2>
 8004de8:	da801617 	ldw	r10,88(sp)
 8004dec:	00843616 	blt	zero,r2,8005ec8 <_dtoa_r+0x168c>
 8004df0:	00800044 	movi	r2,1
 8004df4:	12806e0e 	bge	r2,r10,8004fb0 <_dtoa_r+0x774>
 8004df8:	d9000717 	ldw	r4,28(sp)
 8004dfc:	dd801315 	stw	r22,76(sp)
 8004e00:	dc001115 	stw	r16,68(sp)
 8004e04:	2295883a 	add	r10,r4,r10
 8004e08:	dcc01415 	stw	r19,80(sp)
 8004e0c:	502d883a 	mov	r22,r10
 8004e10:	dcc01017 	ldw	r19,64(sp)
 8004e14:	b821883a 	mov	r16,r23
 8004e18:	dc801015 	stw	r18,64(sp)
 8004e1c:	dc800e17 	ldw	r18,56(sp)
 8004e20:	00000906 	br	8004e48 <_dtoa_r+0x60c>
 8004e24:	800e02c0 	call	800e02c <__subdf3>
 8004e28:	1009883a 	mov	r4,r2
 8004e2c:	180b883a 	mov	r5,r3
 8004e30:	900d883a 	mov	r6,r18
 8004e34:	980f883a 	mov	r7,r19
 8004e38:	800d6e00 	call	800d6e0 <__ledf2>
 8004e3c:	10040e16 	blt	r2,zero,8005e78 <_dtoa_r+0x163c>
 8004e40:	b821883a 	mov	r16,r23
 8004e44:	bd841026 	beq	r23,r22,8005e88 <_dtoa_r+0x164c>
 8004e48:	9009883a 	mov	r4,r18
 8004e4c:	980b883a 	mov	r5,r19
 8004e50:	000d883a 	mov	r6,zero
 8004e54:	01d00934 	movhi	r7,16420
 8004e58:	800d7c00 	call	800d7c0 <__muldf3>
 8004e5c:	000d883a 	mov	r6,zero
 8004e60:	01d00934 	movhi	r7,16420
 8004e64:	8809883a 	mov	r4,r17
 8004e68:	a00b883a 	mov	r5,r20
 8004e6c:	1025883a 	mov	r18,r2
 8004e70:	1827883a 	mov	r19,r3
 8004e74:	800d7c00 	call	800d7c0 <__muldf3>
 8004e78:	180b883a 	mov	r5,r3
 8004e7c:	1009883a 	mov	r4,r2
 8004e80:	1823883a 	mov	r17,r3
 8004e84:	1029883a 	mov	r20,r2
 8004e88:	800e8fc0 	call	800e8fc <__fixdfsi>
 8004e8c:	1009883a 	mov	r4,r2
 8004e90:	102b883a 	mov	r21,r2
 8004e94:	800e9840 	call	800e984 <__floatsidf>
 8004e98:	a009883a 	mov	r4,r20
 8004e9c:	880b883a 	mov	r5,r17
 8004ea0:	100d883a 	mov	r6,r2
 8004ea4:	180f883a 	mov	r7,r3
 8004ea8:	800e02c0 	call	800e02c <__subdf3>
 8004eac:	ad400c04 	addi	r21,r21,48
 8004eb0:	1009883a 	mov	r4,r2
 8004eb4:	180b883a 	mov	r5,r3
 8004eb8:	900d883a 	mov	r6,r18
 8004ebc:	980f883a 	mov	r7,r19
 8004ec0:	85400005 	stb	r21,0(r16)
 8004ec4:	1023883a 	mov	r17,r2
 8004ec8:	1829883a 	mov	r20,r3
 8004ecc:	800d6e00 	call	800d6e0 <__ledf2>
 8004ed0:	bdc00044 	addi	r23,r23,1
 8004ed4:	0009883a 	mov	r4,zero
 8004ed8:	014ffc34 	movhi	r5,16368
 8004edc:	880d883a 	mov	r6,r17
 8004ee0:	a00f883a 	mov	r7,r20
 8004ee4:	103fcf0e 	bge	r2,zero,8004e24 <__alt_data_end+0xfc004e24>
 8004ee8:	d9801217 	ldw	r6,72(sp)
 8004eec:	dc001117 	ldw	r16,68(sp)
 8004ef0:	d9800515 	stw	r6,20(sp)
 8004ef4:	8009883a 	mov	r4,r16
 8004ef8:	e00b883a 	mov	r5,fp
 8004efc:	8007f200 	call	8007f20 <_Bfree>
 8004f00:	d8c00517 	ldw	r3,20(sp)
 8004f04:	d9002317 	ldw	r4,140(sp)
 8004f08:	d9802517 	ldw	r6,148(sp)
 8004f0c:	b8000005 	stb	zero,0(r23)
 8004f10:	18800044 	addi	r2,r3,1
 8004f14:	20800015 	stw	r2,0(r4)
 8004f18:	30027226 	beq	r6,zero,80058e4 <_dtoa_r+0x10a8>
 8004f1c:	35c00015 	stw	r23,0(r6)
 8004f20:	d8800717 	ldw	r2,28(sp)
 8004f24:	003e7406 	br	80048f8 <__alt_data_end+0xfc0048f8>
 8004f28:	00800434 	movhi	r2,16
 8004f2c:	10bfffc4 	addi	r2,r2,-1
 8004f30:	a8aa703a 	and	r21,r21,r2
 8004f34:	a83e801e 	bne	r21,zero,8004938 <__alt_data_end+0xfc004938>
 8004f38:	00820074 	movhi	r2,2049
 8004f3c:	1086e004 	addi	r2,r2,7040
 8004f40:	003e7f06 	br	8004940 <__alt_data_end+0xfc004940>
 8004f44:	10c00204 	addi	r3,r2,8
 8004f48:	003e8206 	br	8004954 <__alt_data_end+0xfc004954>
 8004f4c:	01400434 	movhi	r5,16
 8004f50:	297fffc4 	addi	r5,r5,-1
 8004f54:	994a703a 	and	r5,r19,r5
 8004f58:	9009883a 	mov	r4,r18
 8004f5c:	8c7f0044 	addi	r17,r17,-1023
 8004f60:	294ffc34 	orhi	r5,r5,16368
 8004f64:	dd000217 	ldw	r20,8(sp)
 8004f68:	d8000f15 	stw	zero,60(sp)
 8004f6c:	003e9f06 	br	80049ec <__alt_data_end+0xfc0049ec>
 8004f70:	00820074 	movhi	r2,2049
 8004f74:	1086d704 	addi	r2,r2,7004
 8004f78:	003e5f06 	br	80048f8 <__alt_data_end+0xfc0048f8>
 8004f7c:	80001115 	stw	zero,68(r16)
 8004f80:	8009883a 	mov	r4,r16
 8004f84:	000b883a 	mov	r5,zero
 8004f88:	8007e780 	call	8007e78 <_Balloc>
 8004f8c:	01bfffc4 	movi	r6,-1
 8004f90:	d8800715 	stw	r2,28(sp)
 8004f94:	80801015 	stw	r2,64(r16)
 8004f98:	00800044 	movi	r2,1
 8004f9c:	d9800615 	stw	r6,24(sp)
 8004fa0:	d8800b15 	stw	r2,44(sp)
 8004fa4:	d8002215 	stw	zero,136(sp)
 8004fa8:	d9800d15 	stw	r6,52(sp)
 8004fac:	d8000315 	stw	zero,12(sp)
 8004fb0:	d8800117 	ldw	r2,4(sp)
 8004fb4:	10008e16 	blt	r2,zero,80051f0 <_dtoa_r+0x9b4>
 8004fb8:	d9000517 	ldw	r4,20(sp)
 8004fbc:	00c00384 	movi	r3,14
 8004fc0:	19008b16 	blt	r3,r4,80051f0 <_dtoa_r+0x9b4>
 8004fc4:	200490fa 	slli	r2,r4,3
 8004fc8:	00c20074 	movhi	r3,2049
 8004fcc:	d9802217 	ldw	r6,136(sp)
 8004fd0:	18c6ff04 	addi	r3,r3,7164
 8004fd4:	1885883a 	add	r2,r3,r2
 8004fd8:	14400017 	ldw	r17,0(r2)
 8004fdc:	15000117 	ldw	r20,4(r2)
 8004fe0:	3001c716 	blt	r6,zero,8005700 <_dtoa_r+0xec4>
 8004fe4:	880d883a 	mov	r6,r17
 8004fe8:	a00f883a 	mov	r7,r20
 8004fec:	9009883a 	mov	r4,r18
 8004ff0:	980b883a 	mov	r5,r19
 8004ff4:	800cbfc0 	call	800cbfc <__divdf3>
 8004ff8:	180b883a 	mov	r5,r3
 8004ffc:	1009883a 	mov	r4,r2
 8005000:	800e8fc0 	call	800e8fc <__fixdfsi>
 8005004:	1009883a 	mov	r4,r2
 8005008:	102d883a 	mov	r22,r2
 800500c:	800e9840 	call	800e984 <__floatsidf>
 8005010:	1009883a 	mov	r4,r2
 8005014:	180b883a 	mov	r5,r3
 8005018:	880d883a 	mov	r6,r17
 800501c:	a00f883a 	mov	r7,r20
 8005020:	800d7c00 	call	800d7c0 <__muldf3>
 8005024:	9009883a 	mov	r4,r18
 8005028:	980b883a 	mov	r5,r19
 800502c:	100d883a 	mov	r6,r2
 8005030:	180f883a 	mov	r7,r3
 8005034:	800e02c0 	call	800e02c <__subdf3>
 8005038:	d9000717 	ldw	r4,28(sp)
 800503c:	d9800617 	ldw	r6,24(sp)
 8005040:	180b883a 	mov	r5,r3
 8005044:	b0c00c04 	addi	r3,r22,48
 8005048:	20c00005 	stb	r3,0(r4)
 800504c:	25c00044 	addi	r23,r4,1
 8005050:	01000044 	movi	r4,1
 8005054:	1011883a 	mov	r8,r2
 8005058:	2807883a 	mov	r3,r5
 800505c:	31003d26 	beq	r6,r4,8005154 <_dtoa_r+0x918>
 8005060:	000d883a 	mov	r6,zero
 8005064:	01d00934 	movhi	r7,16420
 8005068:	1009883a 	mov	r4,r2
 800506c:	800d7c00 	call	800d7c0 <__muldf3>
 8005070:	1009883a 	mov	r4,r2
 8005074:	180b883a 	mov	r5,r3
 8005078:	000d883a 	mov	r6,zero
 800507c:	000f883a 	mov	r7,zero
 8005080:	1027883a 	mov	r19,r2
 8005084:	182b883a 	mov	r21,r3
 8005088:	800d57c0 	call	800d57c <__eqdf2>
 800508c:	103f9926 	beq	r2,zero,8004ef4 <__alt_data_end+0xfc004ef4>
 8005090:	d8c00617 	ldw	r3,24(sp)
 8005094:	d9000717 	ldw	r4,28(sp)
 8005098:	b825883a 	mov	r18,r23
 800509c:	18bfffc4 	addi	r2,r3,-1
 80050a0:	20ad883a 	add	r22,r4,r2
 80050a4:	dc000315 	stw	r16,12(sp)
 80050a8:	00000a06 	br	80050d4 <_dtoa_r+0x898>
 80050ac:	800d7c00 	call	800d7c0 <__muldf3>
 80050b0:	1009883a 	mov	r4,r2
 80050b4:	180b883a 	mov	r5,r3
 80050b8:	000d883a 	mov	r6,zero
 80050bc:	000f883a 	mov	r7,zero
 80050c0:	1027883a 	mov	r19,r2
 80050c4:	182b883a 	mov	r21,r3
 80050c8:	b825883a 	mov	r18,r23
 80050cc:	800d57c0 	call	800d57c <__eqdf2>
 80050d0:	10022626 	beq	r2,zero,800596c <_dtoa_r+0x1130>
 80050d4:	880d883a 	mov	r6,r17
 80050d8:	a00f883a 	mov	r7,r20
 80050dc:	9809883a 	mov	r4,r19
 80050e0:	a80b883a 	mov	r5,r21
 80050e4:	800cbfc0 	call	800cbfc <__divdf3>
 80050e8:	180b883a 	mov	r5,r3
 80050ec:	1009883a 	mov	r4,r2
 80050f0:	800e8fc0 	call	800e8fc <__fixdfsi>
 80050f4:	1009883a 	mov	r4,r2
 80050f8:	1021883a 	mov	r16,r2
 80050fc:	800e9840 	call	800e984 <__floatsidf>
 8005100:	1009883a 	mov	r4,r2
 8005104:	180b883a 	mov	r5,r3
 8005108:	880d883a 	mov	r6,r17
 800510c:	a00f883a 	mov	r7,r20
 8005110:	800d7c00 	call	800d7c0 <__muldf3>
 8005114:	9809883a 	mov	r4,r19
 8005118:	a80b883a 	mov	r5,r21
 800511c:	100d883a 	mov	r6,r2
 8005120:	180f883a 	mov	r7,r3
 8005124:	800e02c0 	call	800e02c <__subdf3>
 8005128:	82000c04 	addi	r8,r16,48
 800512c:	92000005 	stb	r8,0(r18)
 8005130:	1009883a 	mov	r4,r2
 8005134:	180b883a 	mov	r5,r3
 8005138:	000d883a 	mov	r6,zero
 800513c:	01d00934 	movhi	r7,16420
 8005140:	1011883a 	mov	r8,r2
 8005144:	bdc00044 	addi	r23,r23,1
 8005148:	95bfd81e 	bne	r18,r22,80050ac <__alt_data_end+0xfc0050ac>
 800514c:	802d883a 	mov	r22,r16
 8005150:	dc000317 	ldw	r16,12(sp)
 8005154:	4009883a 	mov	r4,r8
 8005158:	180b883a 	mov	r5,r3
 800515c:	400d883a 	mov	r6,r8
 8005160:	180f883a 	mov	r7,r3
 8005164:	800c3600 	call	800c360 <__adddf3>
 8005168:	8809883a 	mov	r4,r17
 800516c:	a00b883a 	mov	r5,r20
 8005170:	100d883a 	mov	r6,r2
 8005174:	180f883a 	mov	r7,r3
 8005178:	1027883a 	mov	r19,r2
 800517c:	1825883a 	mov	r18,r3
 8005180:	800d6e00 	call	800d6e0 <__ledf2>
 8005184:	10000816 	blt	r2,zero,80051a8 <_dtoa_r+0x96c>
 8005188:	8809883a 	mov	r4,r17
 800518c:	a00b883a 	mov	r5,r20
 8005190:	980d883a 	mov	r6,r19
 8005194:	900f883a 	mov	r7,r18
 8005198:	800d57c0 	call	800d57c <__eqdf2>
 800519c:	103f551e 	bne	r2,zero,8004ef4 <__alt_data_end+0xfc004ef4>
 80051a0:	b580004c 	andi	r22,r22,1
 80051a4:	b03f5326 	beq	r22,zero,8004ef4 <__alt_data_end+0xfc004ef4>
 80051a8:	bd7fffc3 	ldbu	r21,-1(r23)
 80051ac:	b8bfffc4 	addi	r2,r23,-1
 80051b0:	1007883a 	mov	r3,r2
 80051b4:	01400e44 	movi	r5,57
 80051b8:	d9800717 	ldw	r6,28(sp)
 80051bc:	00000506 	br	80051d4 <_dtoa_r+0x998>
 80051c0:	18ffffc4 	addi	r3,r3,-1
 80051c4:	30825e26 	beq	r6,r2,8005b40 <_dtoa_r+0x1304>
 80051c8:	1d400003 	ldbu	r21,0(r3)
 80051cc:	102f883a 	mov	r23,r2
 80051d0:	10bfffc4 	addi	r2,r2,-1
 80051d4:	a9003fcc 	andi	r4,r21,255
 80051d8:	2100201c 	xori	r4,r4,128
 80051dc:	213fe004 	addi	r4,r4,-128
 80051e0:	217ff726 	beq	r4,r5,80051c0 <__alt_data_end+0xfc0051c0>
 80051e4:	aa000044 	addi	r8,r21,1
 80051e8:	12000005 	stb	r8,0(r2)
 80051ec:	003f4106 	br	8004ef4 <__alt_data_end+0xfc004ef4>
 80051f0:	d8c00b17 	ldw	r3,44(sp)
 80051f4:	18006726 	beq	r3,zero,8005394 <_dtoa_r+0xb58>
 80051f8:	d9000317 	ldw	r4,12(sp)
 80051fc:	00c00044 	movi	r3,1
 8005200:	19016a0e 	bge	r3,r4,80057ac <_dtoa_r+0xf70>
 8005204:	d8800617 	ldw	r2,24(sp)
 8005208:	d8c00917 	ldw	r3,36(sp)
 800520c:	157fffc4 	addi	r21,r2,-1
 8005210:	1d420716 	blt	r3,r21,8005a30 <_dtoa_r+0x11f4>
 8005214:	1d6bc83a 	sub	r21,r3,r21
 8005218:	d8800617 	ldw	r2,24(sp)
 800521c:	1002c716 	blt	r2,zero,8005d3c <_dtoa_r+0x1500>
 8005220:	dd000817 	ldw	r20,32(sp)
 8005224:	d8800617 	ldw	r2,24(sp)
 8005228:	d9800817 	ldw	r6,32(sp)
 800522c:	8009883a 	mov	r4,r16
 8005230:	01400044 	movi	r5,1
 8005234:	308d883a 	add	r6,r6,r2
 8005238:	d9800815 	stw	r6,32(sp)
 800523c:	b0ad883a 	add	r22,r22,r2
 8005240:	80082a00 	call	80082a0 <__i2b>
 8005244:	1023883a 	mov	r17,r2
 8005248:	a0000826 	beq	r20,zero,800526c <_dtoa_r+0xa30>
 800524c:	0580070e 	bge	zero,r22,800526c <_dtoa_r+0xa30>
 8005250:	b005883a 	mov	r2,r22
 8005254:	a5812016 	blt	r20,r22,80056d8 <_dtoa_r+0xe9c>
 8005258:	d8c00817 	ldw	r3,32(sp)
 800525c:	a0a9c83a 	sub	r20,r20,r2
 8005260:	b0adc83a 	sub	r22,r22,r2
 8005264:	1887c83a 	sub	r3,r3,r2
 8005268:	d8c00815 	stw	r3,32(sp)
 800526c:	d9000917 	ldw	r4,36(sp)
 8005270:	0100140e 	bge	zero,r4,80052c4 <_dtoa_r+0xa88>
 8005274:	d9800b17 	ldw	r6,44(sp)
 8005278:	3001e526 	beq	r6,zero,8005a10 <_dtoa_r+0x11d4>
 800527c:	05400e0e 	bge	zero,r21,80052b8 <_dtoa_r+0xa7c>
 8005280:	880b883a 	mov	r5,r17
 8005284:	8009883a 	mov	r4,r16
 8005288:	a80d883a 	mov	r6,r21
 800528c:	800856c0 	call	800856c <__pow5mult>
 8005290:	e00d883a 	mov	r6,fp
 8005294:	8009883a 	mov	r4,r16
 8005298:	100b883a 	mov	r5,r2
 800529c:	1023883a 	mov	r17,r2
 80052a0:	80082dc0 	call	80082dc <__multiply>
 80052a4:	102f883a 	mov	r23,r2
 80052a8:	e00b883a 	mov	r5,fp
 80052ac:	8009883a 	mov	r4,r16
 80052b0:	8007f200 	call	8007f20 <_Bfree>
 80052b4:	b839883a 	mov	fp,r23
 80052b8:	d8800917 	ldw	r2,36(sp)
 80052bc:	154dc83a 	sub	r6,r2,r21
 80052c0:	3001281e 	bne	r6,zero,8005764 <_dtoa_r+0xf28>
 80052c4:	05c00044 	movi	r23,1
 80052c8:	8009883a 	mov	r4,r16
 80052cc:	b80b883a 	mov	r5,r23
 80052d0:	80082a00 	call	80082a0 <__i2b>
 80052d4:	d8c00a17 	ldw	r3,40(sp)
 80052d8:	102b883a 	mov	r21,r2
 80052dc:	00c0310e 	bge	zero,r3,80053a4 <_dtoa_r+0xb68>
 80052e0:	8009883a 	mov	r4,r16
 80052e4:	100b883a 	mov	r5,r2
 80052e8:	180d883a 	mov	r6,r3
 80052ec:	800856c0 	call	800856c <__pow5mult>
 80052f0:	d9000317 	ldw	r4,12(sp)
 80052f4:	102b883a 	mov	r21,r2
 80052f8:	b9011f0e 	bge	r23,r4,8005778 <_dtoa_r+0xf3c>
 80052fc:	0027883a 	mov	r19,zero
 8005300:	a8800417 	ldw	r2,16(r21)
 8005304:	10800104 	addi	r2,r2,4
 8005308:	1085883a 	add	r2,r2,r2
 800530c:	1085883a 	add	r2,r2,r2
 8005310:	a885883a 	add	r2,r21,r2
 8005314:	11000017 	ldw	r4,0(r2)
 8005318:	80081880 	call	8008188 <__hi0bits>
 800531c:	00c00804 	movi	r3,32
 8005320:	1885c83a 	sub	r2,r3,r2
 8005324:	00002506 	br	80053bc <_dtoa_r+0xb80>
 8005328:	01800044 	movi	r6,1
 800532c:	d9800c15 	stw	r6,48(sp)
 8005330:	003dec06 	br	8004ae4 <__alt_data_end+0xfc004ae4>
 8005334:	d8c00817 	ldw	r3,32(sp)
 8005338:	d9000517 	ldw	r4,20(sp)
 800533c:	d8000a15 	stw	zero,40(sp)
 8005340:	1907c83a 	sub	r3,r3,r4
 8005344:	010dc83a 	sub	r6,zero,r4
 8005348:	d8c00815 	stw	r3,32(sp)
 800534c:	d9800915 	stw	r6,36(sp)
 8005350:	003ded06 	br	8004b08 <__alt_data_end+0xfc004b08>
 8005354:	05adc83a 	sub	r22,zero,r22
 8005358:	dd800815 	stw	r22,32(sp)
 800535c:	002d883a 	mov	r22,zero
 8005360:	003de406 	br	8004af4 <__alt_data_end+0xfc004af4>
 8005364:	d9000517 	ldw	r4,20(sp)
 8005368:	800e9840 	call	800e984 <__floatsidf>
 800536c:	1009883a 	mov	r4,r2
 8005370:	180b883a 	mov	r5,r3
 8005374:	b00d883a 	mov	r6,r22
 8005378:	a80f883a 	mov	r7,r21
 800537c:	800d57c0 	call	800d57c <__eqdf2>
 8005380:	103dc726 	beq	r2,zero,8004aa0 <__alt_data_end+0xfc004aa0>
 8005384:	d8800517 	ldw	r2,20(sp)
 8005388:	10bfffc4 	addi	r2,r2,-1
 800538c:	d8800515 	stw	r2,20(sp)
 8005390:	003dc306 	br	8004aa0 <__alt_data_end+0xfc004aa0>
 8005394:	dd400917 	ldw	r21,36(sp)
 8005398:	dd000817 	ldw	r20,32(sp)
 800539c:	0023883a 	mov	r17,zero
 80053a0:	003fa906 	br	8005248 <__alt_data_end+0xfc005248>
 80053a4:	d9800317 	ldw	r6,12(sp)
 80053a8:	b981670e 	bge	r23,r6,8005948 <_dtoa_r+0x110c>
 80053ac:	0027883a 	mov	r19,zero
 80053b0:	d8c00a17 	ldw	r3,40(sp)
 80053b4:	183fd21e 	bne	r3,zero,8005300 <__alt_data_end+0xfc005300>
 80053b8:	00800044 	movi	r2,1
 80053bc:	1585883a 	add	r2,r2,r22
 80053c0:	108007cc 	andi	r2,r2,31
 80053c4:	10005f26 	beq	r2,zero,8005544 <_dtoa_r+0xd08>
 80053c8:	00c00804 	movi	r3,32
 80053cc:	1887c83a 	sub	r3,r3,r2
 80053d0:	01000104 	movi	r4,4
 80053d4:	20c2dd0e 	bge	r4,r3,8005f4c <_dtoa_r+0x1710>
 80053d8:	d9000817 	ldw	r4,32(sp)
 80053dc:	00c00704 	movi	r3,28
 80053e0:	1885c83a 	sub	r2,r3,r2
 80053e4:	2089883a 	add	r4,r4,r2
 80053e8:	d9000815 	stw	r4,32(sp)
 80053ec:	a0a9883a 	add	r20,r20,r2
 80053f0:	b0ad883a 	add	r22,r22,r2
 80053f4:	d8800817 	ldw	r2,32(sp)
 80053f8:	0080050e 	bge	zero,r2,8005410 <_dtoa_r+0xbd4>
 80053fc:	e00b883a 	mov	r5,fp
 8005400:	8009883a 	mov	r4,r16
 8005404:	100d883a 	mov	r6,r2
 8005408:	80086ac0 	call	80086ac <__lshift>
 800540c:	1039883a 	mov	fp,r2
 8005410:	0580050e 	bge	zero,r22,8005428 <_dtoa_r+0xbec>
 8005414:	a80b883a 	mov	r5,r21
 8005418:	8009883a 	mov	r4,r16
 800541c:	b00d883a 	mov	r6,r22
 8005420:	80086ac0 	call	80086ac <__lshift>
 8005424:	102b883a 	mov	r21,r2
 8005428:	d8c00c17 	ldw	r3,48(sp)
 800542c:	1801161e 	bne	r3,zero,8005888 <_dtoa_r+0x104c>
 8005430:	d8c00617 	ldw	r3,24(sp)
 8005434:	00c12d0e 	bge	zero,r3,80058ec <_dtoa_r+0x10b0>
 8005438:	d8c00b17 	ldw	r3,44(sp)
 800543c:	1800571e 	bne	r3,zero,800559c <_dtoa_r+0xd60>
 8005440:	dc800717 	ldw	r18,28(sp)
 8005444:	dcc00617 	ldw	r19,24(sp)
 8005448:	9029883a 	mov	r20,r18
 800544c:	00000206 	br	8005458 <_dtoa_r+0xc1c>
 8005450:	8007f480 	call	8007f48 <__multadd>
 8005454:	1039883a 	mov	fp,r2
 8005458:	e009883a 	mov	r4,fp
 800545c:	a80b883a 	mov	r5,r21
 8005460:	80046140 	call	8004614 <quorem>
 8005464:	10800c04 	addi	r2,r2,48
 8005468:	90800005 	stb	r2,0(r18)
 800546c:	94800044 	addi	r18,r18,1
 8005470:	9507c83a 	sub	r3,r18,r20
 8005474:	8009883a 	mov	r4,r16
 8005478:	e00b883a 	mov	r5,fp
 800547c:	01800284 	movi	r6,10
 8005480:	000f883a 	mov	r7,zero
 8005484:	1cfff216 	blt	r3,r19,8005450 <__alt_data_end+0xfc005450>
 8005488:	1011883a 	mov	r8,r2
 800548c:	d8800617 	ldw	r2,24(sp)
 8005490:	00822e0e 	bge	zero,r2,8005d4c <_dtoa_r+0x1510>
 8005494:	d9000717 	ldw	r4,28(sp)
 8005498:	0025883a 	mov	r18,zero
 800549c:	20af883a 	add	r23,r4,r2
 80054a0:	e00b883a 	mov	r5,fp
 80054a4:	01800044 	movi	r6,1
 80054a8:	8009883a 	mov	r4,r16
 80054ac:	da001715 	stw	r8,92(sp)
 80054b0:	80086ac0 	call	80086ac <__lshift>
 80054b4:	1009883a 	mov	r4,r2
 80054b8:	a80b883a 	mov	r5,r21
 80054bc:	1039883a 	mov	fp,r2
 80054c0:	80087f40 	call	80087f4 <__mcmp>
 80054c4:	da001717 	ldw	r8,92(sp)
 80054c8:	00816e0e 	bge	zero,r2,8005a84 <_dtoa_r+0x1248>
 80054cc:	b93fffc3 	ldbu	r4,-1(r23)
 80054d0:	b8bfffc4 	addi	r2,r23,-1
 80054d4:	1007883a 	mov	r3,r2
 80054d8:	01800e44 	movi	r6,57
 80054dc:	d9c00717 	ldw	r7,28(sp)
 80054e0:	00000506 	br	80054f8 <_dtoa_r+0xcbc>
 80054e4:	18ffffc4 	addi	r3,r3,-1
 80054e8:	38811926 	beq	r7,r2,8005950 <_dtoa_r+0x1114>
 80054ec:	19000003 	ldbu	r4,0(r3)
 80054f0:	102f883a 	mov	r23,r2
 80054f4:	10bfffc4 	addi	r2,r2,-1
 80054f8:	21403fcc 	andi	r5,r4,255
 80054fc:	2940201c 	xori	r5,r5,128
 8005500:	297fe004 	addi	r5,r5,-128
 8005504:	29bff726 	beq	r5,r6,80054e4 <__alt_data_end+0xfc0054e4>
 8005508:	21000044 	addi	r4,r4,1
 800550c:	11000005 	stb	r4,0(r2)
 8005510:	8009883a 	mov	r4,r16
 8005514:	a80b883a 	mov	r5,r21
 8005518:	8007f200 	call	8007f20 <_Bfree>
 800551c:	883e7526 	beq	r17,zero,8004ef4 <__alt_data_end+0xfc004ef4>
 8005520:	90000426 	beq	r18,zero,8005534 <_dtoa_r+0xcf8>
 8005524:	94400326 	beq	r18,r17,8005534 <_dtoa_r+0xcf8>
 8005528:	8009883a 	mov	r4,r16
 800552c:	900b883a 	mov	r5,r18
 8005530:	8007f200 	call	8007f20 <_Bfree>
 8005534:	8009883a 	mov	r4,r16
 8005538:	880b883a 	mov	r5,r17
 800553c:	8007f200 	call	8007f20 <_Bfree>
 8005540:	003e6c06 	br	8004ef4 <__alt_data_end+0xfc004ef4>
 8005544:	00800704 	movi	r2,28
 8005548:	d9800817 	ldw	r6,32(sp)
 800554c:	a0a9883a 	add	r20,r20,r2
 8005550:	b0ad883a 	add	r22,r22,r2
 8005554:	308d883a 	add	r6,r6,r2
 8005558:	d9800815 	stw	r6,32(sp)
 800555c:	003fa506 	br	80053f4 <__alt_data_end+0xfc0053f4>
 8005560:	013efb84 	movi	r4,-1042
 8005564:	246bc83a 	sub	r21,r4,r17
 8005568:	9548983a 	sll	r4,r18,r21
 800556c:	003d1806 	br	80049d0 <__alt_data_end+0xfc0049d0>
 8005570:	d8000c15 	stw	zero,48(sp)
 8005574:	003d5b06 	br	8004ae4 <__alt_data_end+0xfc004ae4>
 8005578:	880b883a 	mov	r5,r17
 800557c:	8009883a 	mov	r4,r16
 8005580:	01800284 	movi	r6,10
 8005584:	000f883a 	mov	r7,zero
 8005588:	8007f480 	call	8007f48 <__multadd>
 800558c:	1023883a 	mov	r17,r2
 8005590:	d8800d17 	ldw	r2,52(sp)
 8005594:	0082550e 	bge	zero,r2,8005eec <_dtoa_r+0x16b0>
 8005598:	d8800615 	stw	r2,24(sp)
 800559c:	0500050e 	bge	zero,r20,80055b4 <_dtoa_r+0xd78>
 80055a0:	880b883a 	mov	r5,r17
 80055a4:	8009883a 	mov	r4,r16
 80055a8:	a00d883a 	mov	r6,r20
 80055ac:	80086ac0 	call	80086ac <__lshift>
 80055b0:	1023883a 	mov	r17,r2
 80055b4:	98016a1e 	bne	r19,zero,8005b60 <_dtoa_r+0x1324>
 80055b8:	8829883a 	mov	r20,r17
 80055bc:	d9000617 	ldw	r4,24(sp)
 80055c0:	dcc00717 	ldw	r19,28(sp)
 80055c4:	9480004c 	andi	r18,r18,1
 80055c8:	20bfffc4 	addi	r2,r4,-1
 80055cc:	9885883a 	add	r2,r19,r2
 80055d0:	d8800415 	stw	r2,16(sp)
 80055d4:	dc800615 	stw	r18,24(sp)
 80055d8:	e009883a 	mov	r4,fp
 80055dc:	a80b883a 	mov	r5,r21
 80055e0:	80046140 	call	8004614 <quorem>
 80055e4:	e009883a 	mov	r4,fp
 80055e8:	880b883a 	mov	r5,r17
 80055ec:	102f883a 	mov	r23,r2
 80055f0:	80087f40 	call	80087f4 <__mcmp>
 80055f4:	8009883a 	mov	r4,r16
 80055f8:	a80b883a 	mov	r5,r21
 80055fc:	a00d883a 	mov	r6,r20
 8005600:	102d883a 	mov	r22,r2
 8005604:	80088540 	call	8008854 <__mdiff>
 8005608:	1007883a 	mov	r3,r2
 800560c:	10800317 	ldw	r2,12(r2)
 8005610:	bc800c04 	addi	r18,r23,48
 8005614:	1000971e 	bne	r2,zero,8005874 <_dtoa_r+0x1038>
 8005618:	180b883a 	mov	r5,r3
 800561c:	e009883a 	mov	r4,fp
 8005620:	d8c01515 	stw	r3,84(sp)
 8005624:	80087f40 	call	80087f4 <__mcmp>
 8005628:	d8c01517 	ldw	r3,84(sp)
 800562c:	8009883a 	mov	r4,r16
 8005630:	d8801515 	stw	r2,84(sp)
 8005634:	180b883a 	mov	r5,r3
 8005638:	8007f200 	call	8007f20 <_Bfree>
 800563c:	d8801517 	ldw	r2,84(sp)
 8005640:	1000041e 	bne	r2,zero,8005654 <_dtoa_r+0xe18>
 8005644:	d9800317 	ldw	r6,12(sp)
 8005648:	3000021e 	bne	r6,zero,8005654 <_dtoa_r+0xe18>
 800564c:	d8c00617 	ldw	r3,24(sp)
 8005650:	18007626 	beq	r3,zero,800582c <_dtoa_r+0xff0>
 8005654:	b0005b16 	blt	r22,zero,80057c4 <_dtoa_r+0xf88>
 8005658:	b000041e 	bne	r22,zero,800566c <_dtoa_r+0xe30>
 800565c:	d9000317 	ldw	r4,12(sp)
 8005660:	2000021e 	bne	r4,zero,800566c <_dtoa_r+0xe30>
 8005664:	d8c00617 	ldw	r3,24(sp)
 8005668:	18005626 	beq	r3,zero,80057c4 <_dtoa_r+0xf88>
 800566c:	00814d16 	blt	zero,r2,8005ba4 <_dtoa_r+0x1368>
 8005670:	d8c00417 	ldw	r3,16(sp)
 8005674:	9d800044 	addi	r22,r19,1
 8005678:	9c800005 	stb	r18,0(r19)
 800567c:	b02f883a 	mov	r23,r22
 8005680:	98c14c26 	beq	r19,r3,8005bb4 <_dtoa_r+0x1378>
 8005684:	e00b883a 	mov	r5,fp
 8005688:	8009883a 	mov	r4,r16
 800568c:	01800284 	movi	r6,10
 8005690:	000f883a 	mov	r7,zero
 8005694:	8007f480 	call	8007f48 <__multadd>
 8005698:	1039883a 	mov	fp,r2
 800569c:	8d006d26 	beq	r17,r20,8005854 <_dtoa_r+0x1018>
 80056a0:	880b883a 	mov	r5,r17
 80056a4:	01800284 	movi	r6,10
 80056a8:	000f883a 	mov	r7,zero
 80056ac:	8009883a 	mov	r4,r16
 80056b0:	8007f480 	call	8007f48 <__multadd>
 80056b4:	a00b883a 	mov	r5,r20
 80056b8:	8009883a 	mov	r4,r16
 80056bc:	01800284 	movi	r6,10
 80056c0:	000f883a 	mov	r7,zero
 80056c4:	1023883a 	mov	r17,r2
 80056c8:	8007f480 	call	8007f48 <__multadd>
 80056cc:	1029883a 	mov	r20,r2
 80056d0:	b027883a 	mov	r19,r22
 80056d4:	003fc006 	br	80055d8 <__alt_data_end+0xfc0055d8>
 80056d8:	a005883a 	mov	r2,r20
 80056dc:	003ede06 	br	8005258 <__alt_data_end+0xfc005258>
 80056e0:	01000044 	movi	r4,1
 80056e4:	d9000b15 	stw	r4,44(sp)
 80056e8:	d9802217 	ldw	r6,136(sp)
 80056ec:	0180dc0e 	bge	zero,r6,8005a60 <_dtoa_r+0x1224>
 80056f0:	3023883a 	mov	r17,r6
 80056f4:	d9800d15 	stw	r6,52(sp)
 80056f8:	d9800615 	stw	r6,24(sp)
 80056fc:	003d1e06 	br	8004b78 <__alt_data_end+0xfc004b78>
 8005700:	d8800617 	ldw	r2,24(sp)
 8005704:	00be3716 	blt	zero,r2,8004fe4 <__alt_data_end+0xfc004fe4>
 8005708:	1000be1e 	bne	r2,zero,8005a04 <_dtoa_r+0x11c8>
 800570c:	8809883a 	mov	r4,r17
 8005710:	a00b883a 	mov	r5,r20
 8005714:	000d883a 	mov	r6,zero
 8005718:	01d00534 	movhi	r7,16404
 800571c:	800d7c00 	call	800d7c0 <__muldf3>
 8005720:	1009883a 	mov	r4,r2
 8005724:	180b883a 	mov	r5,r3
 8005728:	900d883a 	mov	r6,r18
 800572c:	980f883a 	mov	r7,r19
 8005730:	800d6000 	call	800d600 <__gedf2>
 8005734:	002b883a 	mov	r21,zero
 8005738:	0023883a 	mov	r17,zero
 800573c:	10007a16 	blt	r2,zero,8005928 <_dtoa_r+0x10ec>
 8005740:	d9002217 	ldw	r4,136(sp)
 8005744:	ddc00717 	ldw	r23,28(sp)
 8005748:	0108303a 	nor	r4,zero,r4
 800574c:	d9000515 	stw	r4,20(sp)
 8005750:	8009883a 	mov	r4,r16
 8005754:	a80b883a 	mov	r5,r21
 8005758:	8007f200 	call	8007f20 <_Bfree>
 800575c:	883f751e 	bne	r17,zero,8005534 <__alt_data_end+0xfc005534>
 8005760:	003de406 	br	8004ef4 <__alt_data_end+0xfc004ef4>
 8005764:	e00b883a 	mov	r5,fp
 8005768:	8009883a 	mov	r4,r16
 800576c:	800856c0 	call	800856c <__pow5mult>
 8005770:	1039883a 	mov	fp,r2
 8005774:	003ed306 	br	80052c4 <__alt_data_end+0xfc0052c4>
 8005778:	903ee01e 	bne	r18,zero,80052fc <__alt_data_end+0xfc0052fc>
 800577c:	00800434 	movhi	r2,16
 8005780:	10bfffc4 	addi	r2,r2,-1
 8005784:	9884703a 	and	r2,r19,r2
 8005788:	103f081e 	bne	r2,zero,80053ac <__alt_data_end+0xfc0053ac>
 800578c:	9cdffc2c 	andhi	r19,r19,32752
 8005790:	983f0626 	beq	r19,zero,80053ac <__alt_data_end+0xfc0053ac>
 8005794:	d8800817 	ldw	r2,32(sp)
 8005798:	b5800044 	addi	r22,r22,1
 800579c:	04c00044 	movi	r19,1
 80057a0:	10800044 	addi	r2,r2,1
 80057a4:	d8800815 	stw	r2,32(sp)
 80057a8:	003f0106 	br	80053b0 <__alt_data_end+0xfc0053b0>
 80057ac:	d9800f17 	ldw	r6,60(sp)
 80057b0:	30016826 	beq	r6,zero,8005d54 <_dtoa_r+0x1518>
 80057b4:	10810cc4 	addi	r2,r2,1075
 80057b8:	dd400917 	ldw	r21,36(sp)
 80057bc:	dd000817 	ldw	r20,32(sp)
 80057c0:	003e9906 	br	8005228 <__alt_data_end+0xfc005228>
 80057c4:	9011883a 	mov	r8,r18
 80057c8:	4007883a 	mov	r3,r8
 80057cc:	e02d883a 	mov	r22,fp
 80057d0:	0080100e 	bge	zero,r2,8005814 <_dtoa_r+0xfd8>
 80057d4:	01800044 	movi	r6,1
 80057d8:	8009883a 	mov	r4,r16
 80057dc:	e00b883a 	mov	r5,fp
 80057e0:	da001515 	stw	r8,84(sp)
 80057e4:	da001715 	stw	r8,92(sp)
 80057e8:	80086ac0 	call	80086ac <__lshift>
 80057ec:	1009883a 	mov	r4,r2
 80057f0:	a80b883a 	mov	r5,r21
 80057f4:	102d883a 	mov	r22,r2
 80057f8:	80087f40 	call	80087f4 <__mcmp>
 80057fc:	d8c01517 	ldw	r3,84(sp)
 8005800:	da001717 	ldw	r8,92(sp)
 8005804:	0081a50e 	bge	zero,r2,8005e9c <_dtoa_r+0x1660>
 8005808:	00800e44 	movi	r2,57
 800580c:	40817b26 	beq	r8,r2,8005dfc <_dtoa_r+0x15c0>
 8005810:	40c00044 	addi	r3,r8,1
 8005814:	8825883a 	mov	r18,r17
 8005818:	9dc00044 	addi	r23,r19,1
 800581c:	98c00005 	stb	r3,0(r19)
 8005820:	a023883a 	mov	r17,r20
 8005824:	b039883a 	mov	fp,r22
 8005828:	003f3906 	br	8005510 <__alt_data_end+0xfc005510>
 800582c:	00800e44 	movi	r2,57
 8005830:	9011883a 	mov	r8,r18
 8005834:	90817226 	beq	r18,r2,8005e00 <_dtoa_r+0x15c4>
 8005838:	0580010e 	bge	zero,r22,8005840 <_dtoa_r+0x1004>
 800583c:	ba000c44 	addi	r8,r23,49
 8005840:	8825883a 	mov	r18,r17
 8005844:	9dc00044 	addi	r23,r19,1
 8005848:	9a000005 	stb	r8,0(r19)
 800584c:	a023883a 	mov	r17,r20
 8005850:	003f2f06 	br	8005510 <__alt_data_end+0xfc005510>
 8005854:	880b883a 	mov	r5,r17
 8005858:	8009883a 	mov	r4,r16
 800585c:	01800284 	movi	r6,10
 8005860:	000f883a 	mov	r7,zero
 8005864:	8007f480 	call	8007f48 <__multadd>
 8005868:	1023883a 	mov	r17,r2
 800586c:	1029883a 	mov	r20,r2
 8005870:	003f9706 	br	80056d0 <__alt_data_end+0xfc0056d0>
 8005874:	8009883a 	mov	r4,r16
 8005878:	180b883a 	mov	r5,r3
 800587c:	8007f200 	call	8007f20 <_Bfree>
 8005880:	00800044 	movi	r2,1
 8005884:	003f7306 	br	8005654 <__alt_data_end+0xfc005654>
 8005888:	e009883a 	mov	r4,fp
 800588c:	a80b883a 	mov	r5,r21
 8005890:	80087f40 	call	80087f4 <__mcmp>
 8005894:	103ee60e 	bge	r2,zero,8005430 <__alt_data_end+0xfc005430>
 8005898:	8009883a 	mov	r4,r16
 800589c:	e00b883a 	mov	r5,fp
 80058a0:	01800284 	movi	r6,10
 80058a4:	000f883a 	mov	r7,zero
 80058a8:	8007f480 	call	8007f48 <__multadd>
 80058ac:	d9000517 	ldw	r4,20(sp)
 80058b0:	d9800b17 	ldw	r6,44(sp)
 80058b4:	1039883a 	mov	fp,r2
 80058b8:	213fffc4 	addi	r4,r4,-1
 80058bc:	d9000515 	stw	r4,20(sp)
 80058c0:	303f2d1e 	bne	r6,zero,8005578 <__alt_data_end+0xfc005578>
 80058c4:	d9000d17 	ldw	r4,52(sp)
 80058c8:	0101780e 	bge	zero,r4,8005eac <_dtoa_r+0x1670>
 80058cc:	d9000615 	stw	r4,24(sp)
 80058d0:	003edb06 	br	8005440 <__alt_data_end+0xfc005440>
 80058d4:	00800084 	movi	r2,2
 80058d8:	30818e1e 	bne	r6,r2,8005f14 <_dtoa_r+0x16d8>
 80058dc:	d8000b15 	stw	zero,44(sp)
 80058e0:	003f8106 	br	80056e8 <__alt_data_end+0xfc0056e8>
 80058e4:	d8800717 	ldw	r2,28(sp)
 80058e8:	003c0306 	br	80048f8 <__alt_data_end+0xfc0048f8>
 80058ec:	d9000317 	ldw	r4,12(sp)
 80058f0:	00800084 	movi	r2,2
 80058f4:	113ed00e 	bge	r2,r4,8005438 <__alt_data_end+0xfc005438>
 80058f8:	d8c00617 	ldw	r3,24(sp)
 80058fc:	183f901e 	bne	r3,zero,8005740 <__alt_data_end+0xfc005740>
 8005900:	a80b883a 	mov	r5,r21
 8005904:	8009883a 	mov	r4,r16
 8005908:	01800144 	movi	r6,5
 800590c:	000f883a 	mov	r7,zero
 8005910:	8007f480 	call	8007f48 <__multadd>
 8005914:	e009883a 	mov	r4,fp
 8005918:	100b883a 	mov	r5,r2
 800591c:	102b883a 	mov	r21,r2
 8005920:	80087f40 	call	80087f4 <__mcmp>
 8005924:	00bf860e 	bge	zero,r2,8005740 <__alt_data_end+0xfc005740>
 8005928:	d9800717 	ldw	r6,28(sp)
 800592c:	00800c44 	movi	r2,49
 8005930:	30800005 	stb	r2,0(r6)
 8005934:	d8800517 	ldw	r2,20(sp)
 8005938:	35c00044 	addi	r23,r6,1
 800593c:	10800044 	addi	r2,r2,1
 8005940:	d8800515 	stw	r2,20(sp)
 8005944:	003f8206 	br	8005750 <__alt_data_end+0xfc005750>
 8005948:	903e981e 	bne	r18,zero,80053ac <__alt_data_end+0xfc0053ac>
 800594c:	003f8b06 	br	800577c <__alt_data_end+0xfc00577c>
 8005950:	d9800517 	ldw	r6,20(sp)
 8005954:	d8c00717 	ldw	r3,28(sp)
 8005958:	00800c44 	movi	r2,49
 800595c:	31800044 	addi	r6,r6,1
 8005960:	d9800515 	stw	r6,20(sp)
 8005964:	18800005 	stb	r2,0(r3)
 8005968:	003ee906 	br	8005510 <__alt_data_end+0xfc005510>
 800596c:	dc000317 	ldw	r16,12(sp)
 8005970:	003d6006 	br	8004ef4 <__alt_data_end+0xfc004ef4>
 8005974:	8809883a 	mov	r4,r17
 8005978:	800e9840 	call	800e984 <__floatsidf>
 800597c:	a009883a 	mov	r4,r20
 8005980:	a80b883a 	mov	r5,r21
 8005984:	100d883a 	mov	r6,r2
 8005988:	180f883a 	mov	r7,r3
 800598c:	800d7c00 	call	800d7c0 <__muldf3>
 8005990:	1009883a 	mov	r4,r2
 8005994:	180b883a 	mov	r5,r3
 8005998:	000d883a 	mov	r6,zero
 800599c:	01d00734 	movhi	r7,16412
 80059a0:	800c3600 	call	800c360 <__adddf3>
 80059a4:	1023883a 	mov	r17,r2
 80059a8:	00bf3034 	movhi	r2,64704
 80059ac:	1885883a 	add	r2,r3,r2
 80059b0:	d8800e15 	stw	r2,56(sp)
 80059b4:	a009883a 	mov	r4,r20
 80059b8:	a80b883a 	mov	r5,r21
 80059bc:	000d883a 	mov	r6,zero
 80059c0:	01d00534 	movhi	r7,16404
 80059c4:	800e02c0 	call	800e02c <__subdf3>
 80059c8:	d9c00e17 	ldw	r7,56(sp)
 80059cc:	1009883a 	mov	r4,r2
 80059d0:	180b883a 	mov	r5,r3
 80059d4:	880d883a 	mov	r6,r17
 80059d8:	102b883a 	mov	r21,r2
 80059dc:	1829883a 	mov	r20,r3
 80059e0:	800d6000 	call	800d600 <__gedf2>
 80059e4:	00807716 	blt	zero,r2,8005bc4 <_dtoa_r+0x1388>
 80059e8:	d8800e17 	ldw	r2,56(sp)
 80059ec:	a809883a 	mov	r4,r21
 80059f0:	a00b883a 	mov	r5,r20
 80059f4:	11e0003c 	xorhi	r7,r2,32768
 80059f8:	880d883a 	mov	r6,r17
 80059fc:	800d6e00 	call	800d6e0 <__ledf2>
 8005a00:	103d6b0e 	bge	r2,zero,8004fb0 <__alt_data_end+0xfc004fb0>
 8005a04:	002b883a 	mov	r21,zero
 8005a08:	0023883a 	mov	r17,zero
 8005a0c:	003f4c06 	br	8005740 <__alt_data_end+0xfc005740>
 8005a10:	d9800917 	ldw	r6,36(sp)
 8005a14:	e00b883a 	mov	r5,fp
 8005a18:	8009883a 	mov	r4,r16
 8005a1c:	800856c0 	call	800856c <__pow5mult>
 8005a20:	1039883a 	mov	fp,r2
 8005a24:	003e2706 	br	80052c4 <__alt_data_end+0xfc0052c4>
 8005a28:	d8000b15 	stw	zero,44(sp)
 8005a2c:	003c4906 	br	8004b54 <__alt_data_end+0xfc004b54>
 8005a30:	d9000917 	ldw	r4,36(sp)
 8005a34:	d9800a17 	ldw	r6,40(sp)
 8005a38:	dd400915 	stw	r21,36(sp)
 8005a3c:	a905c83a 	sub	r2,r21,r4
 8005a40:	308d883a 	add	r6,r6,r2
 8005a44:	d9800a15 	stw	r6,40(sp)
 8005a48:	002b883a 	mov	r21,zero
 8005a4c:	003df206 	br	8005218 <__alt_data_end+0xfc005218>
 8005a50:	dc800e15 	stw	r18,56(sp)
 8005a54:	982b883a 	mov	r21,r19
 8005a58:	04400084 	movi	r17,2
 8005a5c:	003c7406 	br	8004c30 <__alt_data_end+0xfc004c30>
 8005a60:	04400044 	movi	r17,1
 8005a64:	dc400d15 	stw	r17,52(sp)
 8005a68:	dc400615 	stw	r17,24(sp)
 8005a6c:	dc402215 	stw	r17,136(sp)
 8005a70:	80001115 	stw	zero,68(r16)
 8005a74:	000b883a 	mov	r5,zero
 8005a78:	003c4a06 	br	8004ba4 <__alt_data_end+0xfc004ba4>
 8005a7c:	3023883a 	mov	r17,r6
 8005a80:	003ffb06 	br	8005a70 <__alt_data_end+0xfc005a70>
 8005a84:	1000021e 	bne	r2,zero,8005a90 <_dtoa_r+0x1254>
 8005a88:	4200004c 	andi	r8,r8,1
 8005a8c:	403e8f1e 	bne	r8,zero,80054cc <__alt_data_end+0xfc0054cc>
 8005a90:	01000c04 	movi	r4,48
 8005a94:	00000106 	br	8005a9c <_dtoa_r+0x1260>
 8005a98:	102f883a 	mov	r23,r2
 8005a9c:	b8bfffc4 	addi	r2,r23,-1
 8005aa0:	10c00007 	ldb	r3,0(r2)
 8005aa4:	193ffc26 	beq	r3,r4,8005a98 <__alt_data_end+0xfc005a98>
 8005aa8:	003e9906 	br	8005510 <__alt_data_end+0xfc005510>
 8005aac:	d9000517 	ldw	r4,20(sp)
 8005ab0:	012fc83a 	sub	r23,zero,r4
 8005ab4:	b800ad26 	beq	r23,zero,8005d6c <_dtoa_r+0x1530>
 8005ab8:	b88003cc 	andi	r2,r23,15
 8005abc:	100490fa 	slli	r2,r2,3
 8005ac0:	00c20074 	movhi	r3,2049
 8005ac4:	18c6ff04 	addi	r3,r3,7164
 8005ac8:	1885883a 	add	r2,r3,r2
 8005acc:	11800017 	ldw	r6,0(r2)
 8005ad0:	11c00117 	ldw	r7,4(r2)
 8005ad4:	b82fd13a 	srai	r23,r23,4
 8005ad8:	9009883a 	mov	r4,r18
 8005adc:	980b883a 	mov	r5,r19
 8005ae0:	800d7c00 	call	800d7c0 <__muldf3>
 8005ae4:	1029883a 	mov	r20,r2
 8005ae8:	182b883a 	mov	r21,r3
 8005aec:	b800f426 	beq	r23,zero,8005ec0 <_dtoa_r+0x1684>
 8005af0:	02020074 	movhi	r8,2049
 8005af4:	4206f504 	addi	r8,r8,7124
 8005af8:	8029883a 	mov	r20,r16
 8005afc:	04400084 	movi	r17,2
 8005b00:	4021883a 	mov	r16,r8
 8005b04:	b980004c 	andi	r6,r23,1
 8005b08:	1009883a 	mov	r4,r2
 8005b0c:	b82fd07a 	srai	r23,r23,1
 8005b10:	180b883a 	mov	r5,r3
 8005b14:	30000426 	beq	r6,zero,8005b28 <_dtoa_r+0x12ec>
 8005b18:	81800017 	ldw	r6,0(r16)
 8005b1c:	81c00117 	ldw	r7,4(r16)
 8005b20:	8c400044 	addi	r17,r17,1
 8005b24:	800d7c00 	call	800d7c0 <__muldf3>
 8005b28:	84000204 	addi	r16,r16,8
 8005b2c:	b83ff51e 	bne	r23,zero,8005b04 <__alt_data_end+0xfc005b04>
 8005b30:	a021883a 	mov	r16,r20
 8005b34:	182b883a 	mov	r21,r3
 8005b38:	1029883a 	mov	r20,r2
 8005b3c:	003c5506 	br	8004c94 <__alt_data_end+0xfc004c94>
 8005b40:	d9800517 	ldw	r6,20(sp)
 8005b44:	d9000717 	ldw	r4,28(sp)
 8005b48:	00c00c04 	movi	r3,48
 8005b4c:	31800044 	addi	r6,r6,1
 8005b50:	d9800515 	stw	r6,20(sp)
 8005b54:	20c00005 	stb	r3,0(r4)
 8005b58:	02000c44 	movi	r8,49
 8005b5c:	003da206 	br	80051e8 <__alt_data_end+0xfc0051e8>
 8005b60:	89400117 	ldw	r5,4(r17)
 8005b64:	8009883a 	mov	r4,r16
 8005b68:	8007e780 	call	8007e78 <_Balloc>
 8005b6c:	89800417 	ldw	r6,16(r17)
 8005b70:	11000304 	addi	r4,r2,12
 8005b74:	89400304 	addi	r5,r17,12
 8005b78:	31800084 	addi	r6,r6,2
 8005b7c:	318d883a 	add	r6,r6,r6
 8005b80:	318d883a 	add	r6,r6,r6
 8005b84:	1027883a 	mov	r19,r2
 8005b88:	8007ac00 	call	8007ac0 <memcpy>
 8005b8c:	8009883a 	mov	r4,r16
 8005b90:	980b883a 	mov	r5,r19
 8005b94:	01800044 	movi	r6,1
 8005b98:	80086ac0 	call	80086ac <__lshift>
 8005b9c:	1029883a 	mov	r20,r2
 8005ba0:	003e8606 	br	80055bc <__alt_data_end+0xfc0055bc>
 8005ba4:	00800e44 	movi	r2,57
 8005ba8:	90809526 	beq	r18,r2,8005e00 <_dtoa_r+0x15c4>
 8005bac:	92000044 	addi	r8,r18,1
 8005bb0:	003f2306 	br	8005840 <__alt_data_end+0xfc005840>
 8005bb4:	9011883a 	mov	r8,r18
 8005bb8:	8825883a 	mov	r18,r17
 8005bbc:	a023883a 	mov	r17,r20
 8005bc0:	003e3706 	br	80054a0 <__alt_data_end+0xfc0054a0>
 8005bc4:	002b883a 	mov	r21,zero
 8005bc8:	0023883a 	mov	r17,zero
 8005bcc:	003f5606 	br	8005928 <__alt_data_end+0xfc005928>
 8005bd0:	51bfffc4 	addi	r6,r10,-1
 8005bd4:	300490fa 	slli	r2,r6,3
 8005bd8:	00c20074 	movhi	r3,2049
 8005bdc:	18c6ff04 	addi	r3,r3,7164
 8005be0:	1885883a 	add	r2,r3,r2
 8005be4:	d9c00e17 	ldw	r7,56(sp)
 8005be8:	11000017 	ldw	r4,0(r2)
 8005bec:	11400117 	ldw	r5,4(r2)
 8005bf0:	d8800717 	ldw	r2,28(sp)
 8005bf4:	d9801015 	stw	r6,64(sp)
 8005bf8:	880d883a 	mov	r6,r17
 8005bfc:	da801615 	stw	r10,88(sp)
 8005c00:	15c00044 	addi	r23,r2,1
 8005c04:	800d7c00 	call	800d7c0 <__muldf3>
 8005c08:	a80b883a 	mov	r5,r21
 8005c0c:	a009883a 	mov	r4,r20
 8005c10:	d8c01115 	stw	r3,68(sp)
 8005c14:	d8800e15 	stw	r2,56(sp)
 8005c18:	800e8fc0 	call	800e8fc <__fixdfsi>
 8005c1c:	1009883a 	mov	r4,r2
 8005c20:	1023883a 	mov	r17,r2
 8005c24:	800e9840 	call	800e984 <__floatsidf>
 8005c28:	a009883a 	mov	r4,r20
 8005c2c:	a80b883a 	mov	r5,r21
 8005c30:	100d883a 	mov	r6,r2
 8005c34:	180f883a 	mov	r7,r3
 8005c38:	800e02c0 	call	800e02c <__subdf3>
 8005c3c:	1813883a 	mov	r9,r3
 8005c40:	d8c00717 	ldw	r3,28(sp)
 8005c44:	8c400c04 	addi	r17,r17,48
 8005c48:	1011883a 	mov	r8,r2
 8005c4c:	1c400005 	stb	r17,0(r3)
 8005c50:	da801617 	ldw	r10,88(sp)
 8005c54:	00800044 	movi	r2,1
 8005c58:	50802326 	beq	r10,r2,8005ce8 <_dtoa_r+0x14ac>
 8005c5c:	d8800717 	ldw	r2,28(sp)
 8005c60:	b82b883a 	mov	r21,r23
 8005c64:	dc001315 	stw	r16,76(sp)
 8005c68:	12a9883a 	add	r20,r2,r10
 8005c6c:	4807883a 	mov	r3,r9
 8005c70:	4005883a 	mov	r2,r8
 8005c74:	dc801415 	stw	r18,80(sp)
 8005c78:	000d883a 	mov	r6,zero
 8005c7c:	01d00934 	movhi	r7,16420
 8005c80:	1009883a 	mov	r4,r2
 8005c84:	180b883a 	mov	r5,r3
 8005c88:	800d7c00 	call	800d7c0 <__muldf3>
 8005c8c:	180b883a 	mov	r5,r3
 8005c90:	1009883a 	mov	r4,r2
 8005c94:	1821883a 	mov	r16,r3
 8005c98:	1025883a 	mov	r18,r2
 8005c9c:	800e8fc0 	call	800e8fc <__fixdfsi>
 8005ca0:	1009883a 	mov	r4,r2
 8005ca4:	1023883a 	mov	r17,r2
 8005ca8:	800e9840 	call	800e984 <__floatsidf>
 8005cac:	9009883a 	mov	r4,r18
 8005cb0:	800b883a 	mov	r5,r16
 8005cb4:	100d883a 	mov	r6,r2
 8005cb8:	180f883a 	mov	r7,r3
 8005cbc:	8c400c04 	addi	r17,r17,48
 8005cc0:	800e02c0 	call	800e02c <__subdf3>
 8005cc4:	ad400044 	addi	r21,r21,1
 8005cc8:	ac7fffc5 	stb	r17,-1(r21)
 8005ccc:	ad3fea1e 	bne	r21,r20,8005c78 <__alt_data_end+0xfc005c78>
 8005cd0:	1813883a 	mov	r9,r3
 8005cd4:	d8c01017 	ldw	r3,64(sp)
 8005cd8:	dc001317 	ldw	r16,76(sp)
 8005cdc:	dc801417 	ldw	r18,80(sp)
 8005ce0:	1011883a 	mov	r8,r2
 8005ce4:	b8ef883a 	add	r23,r23,r3
 8005ce8:	d9000e17 	ldw	r4,56(sp)
 8005cec:	d9401117 	ldw	r5,68(sp)
 8005cf0:	000d883a 	mov	r6,zero
 8005cf4:	01cff834 	movhi	r7,16352
 8005cf8:	da001715 	stw	r8,92(sp)
 8005cfc:	da401515 	stw	r9,84(sp)
 8005d00:	800c3600 	call	800c360 <__adddf3>
 8005d04:	da001717 	ldw	r8,92(sp)
 8005d08:	da401517 	ldw	r9,84(sp)
 8005d0c:	1009883a 	mov	r4,r2
 8005d10:	400d883a 	mov	r6,r8
 8005d14:	480f883a 	mov	r7,r9
 8005d18:	180b883a 	mov	r5,r3
 8005d1c:	800d6e00 	call	800d6e0 <__ledf2>
 8005d20:	da001717 	ldw	r8,92(sp)
 8005d24:	da401517 	ldw	r9,84(sp)
 8005d28:	10003b0e 	bge	r2,zero,8005e18 <_dtoa_r+0x15dc>
 8005d2c:	d9001217 	ldw	r4,72(sp)
 8005d30:	bd7fffc3 	ldbu	r21,-1(r23)
 8005d34:	d9000515 	stw	r4,20(sp)
 8005d38:	003d1c06 	br	80051ac <__alt_data_end+0xfc0051ac>
 8005d3c:	d8c00817 	ldw	r3,32(sp)
 8005d40:	18a9c83a 	sub	r20,r3,r2
 8005d44:	0005883a 	mov	r2,zero
 8005d48:	003d3706 	br	8005228 <__alt_data_end+0xfc005228>
 8005d4c:	00800044 	movi	r2,1
 8005d50:	003dd006 	br	8005494 <__alt_data_end+0xfc005494>
 8005d54:	d8c00217 	ldw	r3,8(sp)
 8005d58:	00800d84 	movi	r2,54
 8005d5c:	dd400917 	ldw	r21,36(sp)
 8005d60:	10c5c83a 	sub	r2,r2,r3
 8005d64:	dd000817 	ldw	r20,32(sp)
 8005d68:	003d2f06 	br	8005228 <__alt_data_end+0xfc005228>
 8005d6c:	9029883a 	mov	r20,r18
 8005d70:	982b883a 	mov	r21,r19
 8005d74:	04400084 	movi	r17,2
 8005d78:	003bc606 	br	8004c94 <__alt_data_end+0xfc004c94>
 8005d7c:	d8800617 	ldw	r2,24(sp)
 8005d80:	103efc26 	beq	r2,zero,8005974 <__alt_data_end+0xfc005974>
 8005d84:	d8c00d17 	ldw	r3,52(sp)
 8005d88:	00fc890e 	bge	zero,r3,8004fb0 <__alt_data_end+0xfc004fb0>
 8005d8c:	a80b883a 	mov	r5,r21
 8005d90:	a009883a 	mov	r4,r20
 8005d94:	000d883a 	mov	r6,zero
 8005d98:	01d00934 	movhi	r7,16420
 8005d9c:	800d7c00 	call	800d7c0 <__muldf3>
 8005da0:	89000044 	addi	r4,r17,1
 8005da4:	1029883a 	mov	r20,r2
 8005da8:	182b883a 	mov	r21,r3
 8005dac:	800e9840 	call	800e984 <__floatsidf>
 8005db0:	a009883a 	mov	r4,r20
 8005db4:	a80b883a 	mov	r5,r21
 8005db8:	100d883a 	mov	r6,r2
 8005dbc:	180f883a 	mov	r7,r3
 8005dc0:	800d7c00 	call	800d7c0 <__muldf3>
 8005dc4:	1009883a 	mov	r4,r2
 8005dc8:	180b883a 	mov	r5,r3
 8005dcc:	000d883a 	mov	r6,zero
 8005dd0:	01d00734 	movhi	r7,16412
 8005dd4:	800c3600 	call	800c360 <__adddf3>
 8005dd8:	d9000517 	ldw	r4,20(sp)
 8005ddc:	1023883a 	mov	r17,r2
 8005de0:	00bf3034 	movhi	r2,64704
 8005de4:	213fffc4 	addi	r4,r4,-1
 8005de8:	1885883a 	add	r2,r3,r2
 8005dec:	d9001215 	stw	r4,72(sp)
 8005df0:	d8800e15 	stw	r2,56(sp)
 8005df4:	da800d17 	ldw	r10,52(sp)
 8005df8:	003bc306 	br	8004d08 <__alt_data_end+0xfc004d08>
 8005dfc:	b039883a 	mov	fp,r22
 8005e00:	01000e44 	movi	r4,57
 8005e04:	8825883a 	mov	r18,r17
 8005e08:	9dc00044 	addi	r23,r19,1
 8005e0c:	99000005 	stb	r4,0(r19)
 8005e10:	a023883a 	mov	r17,r20
 8005e14:	003dae06 	br	80054d0 <__alt_data_end+0xfc0054d0>
 8005e18:	d9800e17 	ldw	r6,56(sp)
 8005e1c:	d9c01117 	ldw	r7,68(sp)
 8005e20:	0009883a 	mov	r4,zero
 8005e24:	014ff834 	movhi	r5,16352
 8005e28:	da001715 	stw	r8,92(sp)
 8005e2c:	da401515 	stw	r9,84(sp)
 8005e30:	800e02c0 	call	800e02c <__subdf3>
 8005e34:	da001717 	ldw	r8,92(sp)
 8005e38:	da401517 	ldw	r9,84(sp)
 8005e3c:	1009883a 	mov	r4,r2
 8005e40:	180b883a 	mov	r5,r3
 8005e44:	400d883a 	mov	r6,r8
 8005e48:	480f883a 	mov	r7,r9
 8005e4c:	800d6000 	call	800d600 <__gedf2>
 8005e50:	00bc570e 	bge	zero,r2,8004fb0 <__alt_data_end+0xfc004fb0>
 8005e54:	01000c04 	movi	r4,48
 8005e58:	00000106 	br	8005e60 <_dtoa_r+0x1624>
 8005e5c:	102f883a 	mov	r23,r2
 8005e60:	b8bfffc4 	addi	r2,r23,-1
 8005e64:	10c00007 	ldb	r3,0(r2)
 8005e68:	193ffc26 	beq	r3,r4,8005e5c <__alt_data_end+0xfc005e5c>
 8005e6c:	d9801217 	ldw	r6,72(sp)
 8005e70:	d9800515 	stw	r6,20(sp)
 8005e74:	003c1f06 	br	8004ef4 <__alt_data_end+0xfc004ef4>
 8005e78:	d8801217 	ldw	r2,72(sp)
 8005e7c:	dc001117 	ldw	r16,68(sp)
 8005e80:	d8800515 	stw	r2,20(sp)
 8005e84:	003cc906 	br	80051ac <__alt_data_end+0xfc0051ac>
 8005e88:	dd801317 	ldw	r22,76(sp)
 8005e8c:	dc001117 	ldw	r16,68(sp)
 8005e90:	dcc01417 	ldw	r19,80(sp)
 8005e94:	dc801017 	ldw	r18,64(sp)
 8005e98:	003c4506 	br	8004fb0 <__alt_data_end+0xfc004fb0>
 8005e9c:	103e5d1e 	bne	r2,zero,8005814 <__alt_data_end+0xfc005814>
 8005ea0:	4080004c 	andi	r2,r8,1
 8005ea4:	103e5b26 	beq	r2,zero,8005814 <__alt_data_end+0xfc005814>
 8005ea8:	003e5706 	br	8005808 <__alt_data_end+0xfc005808>
 8005eac:	d8c00317 	ldw	r3,12(sp)
 8005eb0:	00800084 	movi	r2,2
 8005eb4:	10c00a16 	blt	r2,r3,8005ee0 <_dtoa_r+0x16a4>
 8005eb8:	d9000d17 	ldw	r4,52(sp)
 8005ebc:	003e8306 	br	80058cc <__alt_data_end+0xfc0058cc>
 8005ec0:	04400084 	movi	r17,2
 8005ec4:	003b7306 	br	8004c94 <__alt_data_end+0xfc004c94>
 8005ec8:	d9801217 	ldw	r6,72(sp)
 8005ecc:	d9800515 	stw	r6,20(sp)
 8005ed0:	003cb606 	br	80051ac <__alt_data_end+0xfc0051ac>
 8005ed4:	d9001217 	ldw	r4,72(sp)
 8005ed8:	d9000515 	stw	r4,20(sp)
 8005edc:	003c0506 	br	8004ef4 <__alt_data_end+0xfc004ef4>
 8005ee0:	d9800d17 	ldw	r6,52(sp)
 8005ee4:	d9800615 	stw	r6,24(sp)
 8005ee8:	003e8306 	br	80058f8 <__alt_data_end+0xfc0058f8>
 8005eec:	d9800317 	ldw	r6,12(sp)
 8005ef0:	00800084 	movi	r2,2
 8005ef4:	11800216 	blt	r2,r6,8005f00 <_dtoa_r+0x16c4>
 8005ef8:	d8800d17 	ldw	r2,52(sp)
 8005efc:	003da606 	br	8005598 <__alt_data_end+0xfc005598>
 8005f00:	d8800d17 	ldw	r2,52(sp)
 8005f04:	d8800615 	stw	r2,24(sp)
 8005f08:	003e7b06 	br	80058f8 <__alt_data_end+0xfc0058f8>
 8005f0c:	05000044 	movi	r20,1
 8005f10:	003b0506 	br	8004b28 <__alt_data_end+0xfc004b28>
 8005f14:	8009883a 	mov	r4,r16
 8005f18:	80001115 	stw	zero,68(r16)
 8005f1c:	000b883a 	mov	r5,zero
 8005f20:	8007e780 	call	8007e78 <_Balloc>
 8005f24:	d8800715 	stw	r2,28(sp)
 8005f28:	d8c00717 	ldw	r3,28(sp)
 8005f2c:	00bfffc4 	movi	r2,-1
 8005f30:	01000044 	movi	r4,1
 8005f34:	d8800615 	stw	r2,24(sp)
 8005f38:	80c01015 	stw	r3,64(r16)
 8005f3c:	d9000b15 	stw	r4,44(sp)
 8005f40:	d8002215 	stw	zero,136(sp)
 8005f44:	d8800d15 	stw	r2,52(sp)
 8005f48:	003c1906 	br	8004fb0 <__alt_data_end+0xfc004fb0>
 8005f4c:	193d2926 	beq	r3,r4,80053f4 <__alt_data_end+0xfc0053f4>
 8005f50:	00c00f04 	movi	r3,60
 8005f54:	1885c83a 	sub	r2,r3,r2
 8005f58:	003d7b06 	br	8005548 <__alt_data_end+0xfc005548>
 8005f5c:	000b883a 	mov	r5,zero
 8005f60:	003b1006 	br	8004ba4 <__alt_data_end+0xfc004ba4>

08005f64 <_fflush_r>:
 8005f64:	defffb04 	addi	sp,sp,-20
 8005f68:	dcc00315 	stw	r19,12(sp)
 8005f6c:	dc000015 	stw	r16,0(sp)
 8005f70:	dfc00415 	stw	ra,16(sp)
 8005f74:	dc800215 	stw	r18,8(sp)
 8005f78:	dc400115 	stw	r17,4(sp)
 8005f7c:	2027883a 	mov	r19,r4
 8005f80:	2821883a 	mov	r16,r5
 8005f84:	20000226 	beq	r4,zero,8005f90 <_fflush_r+0x2c>
 8005f88:	20800e17 	ldw	r2,56(r4)
 8005f8c:	10005326 	beq	r2,zero,80060dc <_fflush_r+0x178>
 8005f90:	8080030b 	ldhu	r2,12(r16)
 8005f94:	10ffffcc 	andi	r3,r2,65535
 8005f98:	18e0001c 	xori	r3,r3,32768
 8005f9c:	18e00004 	addi	r3,r3,-32768
 8005fa0:	18002c26 	beq	r3,zero,8006054 <_fflush_r+0xf0>
 8005fa4:	10c0020c 	andi	r3,r2,8
 8005fa8:	1800321e 	bne	r3,zero,8006074 <_fflush_r+0x110>
 8005fac:	80c00117 	ldw	r3,4(r16)
 8005fb0:	10820014 	ori	r2,r2,2048
 8005fb4:	8080030d 	sth	r2,12(r16)
 8005fb8:	00c0570e 	bge	zero,r3,8006118 <_fflush_r+0x1b4>
 8005fbc:	82000a17 	ldw	r8,40(r16)
 8005fc0:	40002426 	beq	r8,zero,8006054 <_fflush_r+0xf0>
 8005fc4:	9c400017 	ldw	r17,0(r19)
 8005fc8:	10c4000c 	andi	r3,r2,4096
 8005fcc:	98000015 	stw	zero,0(r19)
 8005fd0:	18004626 	beq	r3,zero,80060ec <_fflush_r+0x188>
 8005fd4:	81801417 	ldw	r6,80(r16)
 8005fd8:	10c0010c 	andi	r3,r2,4
 8005fdc:	18000626 	beq	r3,zero,8005ff8 <_fflush_r+0x94>
 8005fe0:	80c00117 	ldw	r3,4(r16)
 8005fe4:	80800c17 	ldw	r2,48(r16)
 8005fe8:	30cdc83a 	sub	r6,r6,r3
 8005fec:	10000226 	beq	r2,zero,8005ff8 <_fflush_r+0x94>
 8005ff0:	80800f17 	ldw	r2,60(r16)
 8005ff4:	308dc83a 	sub	r6,r6,r2
 8005ff8:	81400717 	ldw	r5,28(r16)
 8005ffc:	9809883a 	mov	r4,r19
 8006000:	000f883a 	mov	r7,zero
 8006004:	403ee83a 	callr	r8
 8006008:	00ffffc4 	movi	r3,-1
 800600c:	10c04526 	beq	r2,r3,8006124 <_fflush_r+0x1c0>
 8006010:	80c0030b 	ldhu	r3,12(r16)
 8006014:	81000417 	ldw	r4,16(r16)
 8006018:	80000115 	stw	zero,4(r16)
 800601c:	197dffcc 	andi	r5,r3,63487
 8006020:	8140030d 	sth	r5,12(r16)
 8006024:	81000015 	stw	r4,0(r16)
 8006028:	18c4000c 	andi	r3,r3,4096
 800602c:	18000126 	beq	r3,zero,8006034 <_fflush_r+0xd0>
 8006030:	80801415 	stw	r2,80(r16)
 8006034:	81400c17 	ldw	r5,48(r16)
 8006038:	9c400015 	stw	r17,0(r19)
 800603c:	28000526 	beq	r5,zero,8006054 <_fflush_r+0xf0>
 8006040:	80801004 	addi	r2,r16,64
 8006044:	28800226 	beq	r5,r2,8006050 <_fflush_r+0xec>
 8006048:	9809883a 	mov	r4,r19
 800604c:	80066940 	call	8006694 <_free_r>
 8006050:	80000c15 	stw	zero,48(r16)
 8006054:	0005883a 	mov	r2,zero
 8006058:	dfc00417 	ldw	ra,16(sp)
 800605c:	dcc00317 	ldw	r19,12(sp)
 8006060:	dc800217 	ldw	r18,8(sp)
 8006064:	dc400117 	ldw	r17,4(sp)
 8006068:	dc000017 	ldw	r16,0(sp)
 800606c:	dec00504 	addi	sp,sp,20
 8006070:	f800283a 	ret
 8006074:	84800417 	ldw	r18,16(r16)
 8006078:	903ff626 	beq	r18,zero,8006054 <__alt_data_end+0xfc006054>
 800607c:	84400017 	ldw	r17,0(r16)
 8006080:	108000cc 	andi	r2,r2,3
 8006084:	84800015 	stw	r18,0(r16)
 8006088:	8ca3c83a 	sub	r17,r17,r18
 800608c:	10001526 	beq	r2,zero,80060e4 <_fflush_r+0x180>
 8006090:	0005883a 	mov	r2,zero
 8006094:	80800215 	stw	r2,8(r16)
 8006098:	04400316 	blt	zero,r17,80060a8 <_fflush_r+0x144>
 800609c:	003fed06 	br	8006054 <__alt_data_end+0xfc006054>
 80060a0:	90a5883a 	add	r18,r18,r2
 80060a4:	047feb0e 	bge	zero,r17,8006054 <__alt_data_end+0xfc006054>
 80060a8:	80800917 	ldw	r2,36(r16)
 80060ac:	81400717 	ldw	r5,28(r16)
 80060b0:	880f883a 	mov	r7,r17
 80060b4:	900d883a 	mov	r6,r18
 80060b8:	9809883a 	mov	r4,r19
 80060bc:	103ee83a 	callr	r2
 80060c0:	88a3c83a 	sub	r17,r17,r2
 80060c4:	00bff616 	blt	zero,r2,80060a0 <__alt_data_end+0xfc0060a0>
 80060c8:	80c0030b 	ldhu	r3,12(r16)
 80060cc:	00bfffc4 	movi	r2,-1
 80060d0:	18c01014 	ori	r3,r3,64
 80060d4:	80c0030d 	sth	r3,12(r16)
 80060d8:	003fdf06 	br	8006058 <__alt_data_end+0xfc006058>
 80060dc:	80065200 	call	8006520 <__sinit>
 80060e0:	003fab06 	br	8005f90 <__alt_data_end+0xfc005f90>
 80060e4:	80800517 	ldw	r2,20(r16)
 80060e8:	003fea06 	br	8006094 <__alt_data_end+0xfc006094>
 80060ec:	81400717 	ldw	r5,28(r16)
 80060f0:	000d883a 	mov	r6,zero
 80060f4:	9809883a 	mov	r4,r19
 80060f8:	01c00044 	movi	r7,1
 80060fc:	403ee83a 	callr	r8
 8006100:	100d883a 	mov	r6,r2
 8006104:	00bfffc4 	movi	r2,-1
 8006108:	30801326 	beq	r6,r2,8006158 <_fflush_r+0x1f4>
 800610c:	8080030b 	ldhu	r2,12(r16)
 8006110:	82000a17 	ldw	r8,40(r16)
 8006114:	003fb006 	br	8005fd8 <__alt_data_end+0xfc005fd8>
 8006118:	80c00f17 	ldw	r3,60(r16)
 800611c:	00ffa716 	blt	zero,r3,8005fbc <__alt_data_end+0xfc005fbc>
 8006120:	003fcc06 	br	8006054 <__alt_data_end+0xfc006054>
 8006124:	98c00017 	ldw	r3,0(r19)
 8006128:	183fb926 	beq	r3,zero,8006010 <__alt_data_end+0xfc006010>
 800612c:	01000744 	movi	r4,29
 8006130:	19000226 	beq	r3,r4,800613c <_fflush_r+0x1d8>
 8006134:	01000584 	movi	r4,22
 8006138:	1900101e 	bne	r3,r4,800617c <_fflush_r+0x218>
 800613c:	8080030b 	ldhu	r2,12(r16)
 8006140:	80c00417 	ldw	r3,16(r16)
 8006144:	80000115 	stw	zero,4(r16)
 8006148:	10bdffcc 	andi	r2,r2,63487
 800614c:	8080030d 	sth	r2,12(r16)
 8006150:	80c00015 	stw	r3,0(r16)
 8006154:	003fb706 	br	8006034 <__alt_data_end+0xfc006034>
 8006158:	98800017 	ldw	r2,0(r19)
 800615c:	103feb26 	beq	r2,zero,800610c <__alt_data_end+0xfc00610c>
 8006160:	00c00744 	movi	r3,29
 8006164:	10c00226 	beq	r2,r3,8006170 <_fflush_r+0x20c>
 8006168:	00c00584 	movi	r3,22
 800616c:	10ffd61e 	bne	r2,r3,80060c8 <__alt_data_end+0xfc0060c8>
 8006170:	9c400015 	stw	r17,0(r19)
 8006174:	0005883a 	mov	r2,zero
 8006178:	003fb706 	br	8006058 <__alt_data_end+0xfc006058>
 800617c:	80c0030b 	ldhu	r3,12(r16)
 8006180:	18c01014 	ori	r3,r3,64
 8006184:	80c0030d 	sth	r3,12(r16)
 8006188:	003fb306 	br	8006058 <__alt_data_end+0xfc006058>

0800618c <fflush>:
 800618c:	20000526 	beq	r4,zero,80061a4 <fflush+0x18>
 8006190:	00820074 	movhi	r2,2049
 8006194:	108e3204 	addi	r2,r2,14536
 8006198:	200b883a 	mov	r5,r4
 800619c:	11000017 	ldw	r4,0(r2)
 80061a0:	8005f641 	jmpi	8005f64 <_fflush_r>
 80061a4:	00820074 	movhi	r2,2049
 80061a8:	108e3104 	addi	r2,r2,14532
 80061ac:	11000017 	ldw	r4,0(r2)
 80061b0:	01420034 	movhi	r5,2048
 80061b4:	2957d904 	addi	r5,r5,24420
 80061b8:	8006ee01 	jmpi	8006ee0 <_fwalk_reent>

080061bc <__fp_lock>:
 80061bc:	0005883a 	mov	r2,zero
 80061c0:	f800283a 	ret

080061c4 <__fp_unlock>:
 80061c4:	0005883a 	mov	r2,zero
 80061c8:	f800283a 	ret

080061cc <_cleanup_r>:
 80061cc:	01420074 	movhi	r5,2049
 80061d0:	296bbb04 	addi	r5,r5,-20756
 80061d4:	8006e281 	jmpi	8006e28 <_fwalk>

080061d8 <__sinit.part.1>:
 80061d8:	defff604 	addi	sp,sp,-40
 80061dc:	00c20034 	movhi	r3,2048
 80061e0:	dfc00915 	stw	ra,36(sp)
 80061e4:	df000815 	stw	fp,32(sp)
 80061e8:	ddc00715 	stw	r23,28(sp)
 80061ec:	dd800615 	stw	r22,24(sp)
 80061f0:	dd400515 	stw	r21,20(sp)
 80061f4:	dd000415 	stw	r20,16(sp)
 80061f8:	dcc00315 	stw	r19,12(sp)
 80061fc:	dc800215 	stw	r18,8(sp)
 8006200:	dc400115 	stw	r17,4(sp)
 8006204:	dc000015 	stw	r16,0(sp)
 8006208:	18d87304 	addi	r3,r3,25036
 800620c:	24000117 	ldw	r16,4(r4)
 8006210:	20c00f15 	stw	r3,60(r4)
 8006214:	07000044 	movi	fp,1
 8006218:	00c000c4 	movi	r3,3
 800621c:	2080bb04 	addi	r2,r4,748
 8006220:	20c0b915 	stw	r3,740(r4)
 8006224:	27000e15 	stw	fp,56(r4)
 8006228:	2080ba15 	stw	r2,744(r4)
 800622c:	2000b815 	stw	zero,736(r4)
 8006230:	05c00204 	movi	r23,8
 8006234:	00800104 	movi	r2,4
 8006238:	2025883a 	mov	r18,r4
 800623c:	b80d883a 	mov	r6,r23
 8006240:	81001704 	addi	r4,r16,92
 8006244:	000b883a 	mov	r5,zero
 8006248:	80000015 	stw	zero,0(r16)
 800624c:	80000115 	stw	zero,4(r16)
 8006250:	80000215 	stw	zero,8(r16)
 8006254:	8080030d 	sth	r2,12(r16)
 8006258:	80001915 	stw	zero,100(r16)
 800625c:	8000038d 	sth	zero,14(r16)
 8006260:	80000415 	stw	zero,16(r16)
 8006264:	80000515 	stw	zero,20(r16)
 8006268:	80000615 	stw	zero,24(r16)
 800626c:	8007d540 	call	8007d54 <memset>
 8006270:	05820074 	movhi	r22,2049
 8006274:	94400217 	ldw	r17,8(r18)
 8006278:	05420074 	movhi	r21,2049
 800627c:	05020074 	movhi	r20,2049
 8006280:	04c20074 	movhi	r19,2049
 8006284:	b5a54a04 	addi	r22,r22,-27352
 8006288:	ad656104 	addi	r21,r21,-27260
 800628c:	a5258004 	addi	r20,r20,-27136
 8006290:	9ce59704 	addi	r19,r19,-27044
 8006294:	85800815 	stw	r22,32(r16)
 8006298:	85400915 	stw	r21,36(r16)
 800629c:	85000a15 	stw	r20,40(r16)
 80062a0:	84c00b15 	stw	r19,44(r16)
 80062a4:	84000715 	stw	r16,28(r16)
 80062a8:	00800284 	movi	r2,10
 80062ac:	89001704 	addi	r4,r17,92
 80062b0:	b80d883a 	mov	r6,r23
 80062b4:	000b883a 	mov	r5,zero
 80062b8:	88000015 	stw	zero,0(r17)
 80062bc:	88000115 	stw	zero,4(r17)
 80062c0:	88000215 	stw	zero,8(r17)
 80062c4:	8880030d 	sth	r2,12(r17)
 80062c8:	88001915 	stw	zero,100(r17)
 80062cc:	8f00038d 	sth	fp,14(r17)
 80062d0:	88000415 	stw	zero,16(r17)
 80062d4:	88000515 	stw	zero,20(r17)
 80062d8:	88000615 	stw	zero,24(r17)
 80062dc:	8007d540 	call	8007d54 <memset>
 80062e0:	94000317 	ldw	r16,12(r18)
 80062e4:	00800484 	movi	r2,18
 80062e8:	8c400715 	stw	r17,28(r17)
 80062ec:	8d800815 	stw	r22,32(r17)
 80062f0:	8d400915 	stw	r21,36(r17)
 80062f4:	8d000a15 	stw	r20,40(r17)
 80062f8:	8cc00b15 	stw	r19,44(r17)
 80062fc:	8080030d 	sth	r2,12(r16)
 8006300:	00800084 	movi	r2,2
 8006304:	80000015 	stw	zero,0(r16)
 8006308:	80000115 	stw	zero,4(r16)
 800630c:	80000215 	stw	zero,8(r16)
 8006310:	80001915 	stw	zero,100(r16)
 8006314:	8080038d 	sth	r2,14(r16)
 8006318:	80000415 	stw	zero,16(r16)
 800631c:	80000515 	stw	zero,20(r16)
 8006320:	80000615 	stw	zero,24(r16)
 8006324:	81001704 	addi	r4,r16,92
 8006328:	000b883a 	mov	r5,zero
 800632c:	b80d883a 	mov	r6,r23
 8006330:	8007d540 	call	8007d54 <memset>
 8006334:	84000715 	stw	r16,28(r16)
 8006338:	85800815 	stw	r22,32(r16)
 800633c:	85400915 	stw	r21,36(r16)
 8006340:	85000a15 	stw	r20,40(r16)
 8006344:	84c00b15 	stw	r19,44(r16)
 8006348:	dfc00917 	ldw	ra,36(sp)
 800634c:	df000817 	ldw	fp,32(sp)
 8006350:	ddc00717 	ldw	r23,28(sp)
 8006354:	dd800617 	ldw	r22,24(sp)
 8006358:	dd400517 	ldw	r21,20(sp)
 800635c:	dd000417 	ldw	r20,16(sp)
 8006360:	dcc00317 	ldw	r19,12(sp)
 8006364:	dc800217 	ldw	r18,8(sp)
 8006368:	dc400117 	ldw	r17,4(sp)
 800636c:	dc000017 	ldw	r16,0(sp)
 8006370:	dec00a04 	addi	sp,sp,40
 8006374:	f800283a 	ret

08006378 <__sfmoreglue>:
 8006378:	defffc04 	addi	sp,sp,-16
 800637c:	dc800215 	stw	r18,8(sp)
 8006380:	2825883a 	mov	r18,r5
 8006384:	dc000015 	stw	r16,0(sp)
 8006388:	01401a04 	movi	r5,104
 800638c:	2021883a 	mov	r16,r4
 8006390:	9009883a 	mov	r4,r18
 8006394:	dfc00315 	stw	ra,12(sp)
 8006398:	dc400115 	stw	r17,4(sp)
 800639c:	800c3380 	call	800c338 <__mulsi3>
 80063a0:	8009883a 	mov	r4,r16
 80063a4:	11400304 	addi	r5,r2,12
 80063a8:	1023883a 	mov	r17,r2
 80063ac:	80072300 	call	8007230 <_malloc_r>
 80063b0:	1021883a 	mov	r16,r2
 80063b4:	10000726 	beq	r2,zero,80063d4 <__sfmoreglue+0x5c>
 80063b8:	11000304 	addi	r4,r2,12
 80063bc:	10000015 	stw	zero,0(r2)
 80063c0:	14800115 	stw	r18,4(r2)
 80063c4:	11000215 	stw	r4,8(r2)
 80063c8:	000b883a 	mov	r5,zero
 80063cc:	880d883a 	mov	r6,r17
 80063d0:	8007d540 	call	8007d54 <memset>
 80063d4:	8005883a 	mov	r2,r16
 80063d8:	dfc00317 	ldw	ra,12(sp)
 80063dc:	dc800217 	ldw	r18,8(sp)
 80063e0:	dc400117 	ldw	r17,4(sp)
 80063e4:	dc000017 	ldw	r16,0(sp)
 80063e8:	dec00404 	addi	sp,sp,16
 80063ec:	f800283a 	ret

080063f0 <__sfp>:
 80063f0:	00820074 	movhi	r2,2049
 80063f4:	defffb04 	addi	sp,sp,-20
 80063f8:	108e3104 	addi	r2,r2,14532
 80063fc:	dc800215 	stw	r18,8(sp)
 8006400:	14800017 	ldw	r18,0(r2)
 8006404:	dcc00315 	stw	r19,12(sp)
 8006408:	dfc00415 	stw	ra,16(sp)
 800640c:	90800e17 	ldw	r2,56(r18)
 8006410:	dc400115 	stw	r17,4(sp)
 8006414:	dc000015 	stw	r16,0(sp)
 8006418:	2027883a 	mov	r19,r4
 800641c:	1000021e 	bne	r2,zero,8006428 <__sfp+0x38>
 8006420:	9009883a 	mov	r4,r18
 8006424:	80061d80 	call	80061d8 <__sinit.part.1>
 8006428:	9480b804 	addi	r18,r18,736
 800642c:	047fffc4 	movi	r17,-1
 8006430:	91400117 	ldw	r5,4(r18)
 8006434:	94000217 	ldw	r16,8(r18)
 8006438:	297fffc4 	addi	r5,r5,-1
 800643c:	28000a16 	blt	r5,zero,8006468 <__sfp+0x78>
 8006440:	8080030f 	ldh	r2,12(r16)
 8006444:	10000c26 	beq	r2,zero,8006478 <__sfp+0x88>
 8006448:	80c01d04 	addi	r3,r16,116
 800644c:	00000206 	br	8006458 <__sfp+0x68>
 8006450:	18bfe60f 	ldh	r2,-104(r3)
 8006454:	10000826 	beq	r2,zero,8006478 <__sfp+0x88>
 8006458:	297fffc4 	addi	r5,r5,-1
 800645c:	1c3ffd04 	addi	r16,r3,-12
 8006460:	18c01a04 	addi	r3,r3,104
 8006464:	2c7ffa1e 	bne	r5,r17,8006450 <__alt_data_end+0xfc006450>
 8006468:	90800017 	ldw	r2,0(r18)
 800646c:	10001d26 	beq	r2,zero,80064e4 <__sfp+0xf4>
 8006470:	1025883a 	mov	r18,r2
 8006474:	003fee06 	br	8006430 <__alt_data_end+0xfc006430>
 8006478:	00bfffc4 	movi	r2,-1
 800647c:	8080038d 	sth	r2,14(r16)
 8006480:	00800044 	movi	r2,1
 8006484:	8080030d 	sth	r2,12(r16)
 8006488:	80001915 	stw	zero,100(r16)
 800648c:	80000015 	stw	zero,0(r16)
 8006490:	80000215 	stw	zero,8(r16)
 8006494:	80000115 	stw	zero,4(r16)
 8006498:	80000415 	stw	zero,16(r16)
 800649c:	80000515 	stw	zero,20(r16)
 80064a0:	80000615 	stw	zero,24(r16)
 80064a4:	81001704 	addi	r4,r16,92
 80064a8:	000b883a 	mov	r5,zero
 80064ac:	01800204 	movi	r6,8
 80064b0:	8007d540 	call	8007d54 <memset>
 80064b4:	8005883a 	mov	r2,r16
 80064b8:	80000c15 	stw	zero,48(r16)
 80064bc:	80000d15 	stw	zero,52(r16)
 80064c0:	80001115 	stw	zero,68(r16)
 80064c4:	80001215 	stw	zero,72(r16)
 80064c8:	dfc00417 	ldw	ra,16(sp)
 80064cc:	dcc00317 	ldw	r19,12(sp)
 80064d0:	dc800217 	ldw	r18,8(sp)
 80064d4:	dc400117 	ldw	r17,4(sp)
 80064d8:	dc000017 	ldw	r16,0(sp)
 80064dc:	dec00504 	addi	sp,sp,20
 80064e0:	f800283a 	ret
 80064e4:	9809883a 	mov	r4,r19
 80064e8:	01400104 	movi	r5,4
 80064ec:	80063780 	call	8006378 <__sfmoreglue>
 80064f0:	90800015 	stw	r2,0(r18)
 80064f4:	103fde1e 	bne	r2,zero,8006470 <__alt_data_end+0xfc006470>
 80064f8:	00800304 	movi	r2,12
 80064fc:	98800015 	stw	r2,0(r19)
 8006500:	0005883a 	mov	r2,zero
 8006504:	003ff006 	br	80064c8 <__alt_data_end+0xfc0064c8>

08006508 <_cleanup>:
 8006508:	00820074 	movhi	r2,2049
 800650c:	108e3104 	addi	r2,r2,14532
 8006510:	11000017 	ldw	r4,0(r2)
 8006514:	01420074 	movhi	r5,2049
 8006518:	296bbb04 	addi	r5,r5,-20756
 800651c:	8006e281 	jmpi	8006e28 <_fwalk>

08006520 <__sinit>:
 8006520:	20800e17 	ldw	r2,56(r4)
 8006524:	10000126 	beq	r2,zero,800652c <__sinit+0xc>
 8006528:	f800283a 	ret
 800652c:	80061d81 	jmpi	80061d8 <__sinit.part.1>

08006530 <__sfp_lock_acquire>:
 8006530:	f800283a 	ret

08006534 <__sfp_lock_release>:
 8006534:	f800283a 	ret

08006538 <__sinit_lock_acquire>:
 8006538:	f800283a 	ret

0800653c <__sinit_lock_release>:
 800653c:	f800283a 	ret

08006540 <__fp_lock_all>:
 8006540:	00820074 	movhi	r2,2049
 8006544:	108e3204 	addi	r2,r2,14536
 8006548:	11000017 	ldw	r4,0(r2)
 800654c:	01420034 	movhi	r5,2048
 8006550:	29586f04 	addi	r5,r5,25020
 8006554:	8006e281 	jmpi	8006e28 <_fwalk>

08006558 <__fp_unlock_all>:
 8006558:	00820074 	movhi	r2,2049
 800655c:	108e3204 	addi	r2,r2,14536
 8006560:	11000017 	ldw	r4,0(r2)
 8006564:	01420034 	movhi	r5,2048
 8006568:	29587104 	addi	r5,r5,25028
 800656c:	8006e281 	jmpi	8006e28 <_fwalk>

08006570 <_malloc_trim_r>:
 8006570:	defffb04 	addi	sp,sp,-20
 8006574:	dcc00315 	stw	r19,12(sp)
 8006578:	04c20074 	movhi	r19,2049
 800657c:	dc800215 	stw	r18,8(sp)
 8006580:	dc400115 	stw	r17,4(sp)
 8006584:	dc000015 	stw	r16,0(sp)
 8006588:	dfc00415 	stw	ra,16(sp)
 800658c:	2821883a 	mov	r16,r5
 8006590:	9cc8ad04 	addi	r19,r19,8884
 8006594:	2025883a 	mov	r18,r4
 8006598:	800f13c0 	call	800f13c <__malloc_lock>
 800659c:	98800217 	ldw	r2,8(r19)
 80065a0:	14400117 	ldw	r17,4(r2)
 80065a4:	00bfff04 	movi	r2,-4
 80065a8:	88a2703a 	and	r17,r17,r2
 80065ac:	8c21c83a 	sub	r16,r17,r16
 80065b0:	8403fbc4 	addi	r16,r16,4079
 80065b4:	8020d33a 	srli	r16,r16,12
 80065b8:	0083ffc4 	movi	r2,4095
 80065bc:	843fffc4 	addi	r16,r16,-1
 80065c0:	8020933a 	slli	r16,r16,12
 80065c4:	1400060e 	bge	r2,r16,80065e0 <_malloc_trim_r+0x70>
 80065c8:	9009883a 	mov	r4,r18
 80065cc:	000b883a 	mov	r5,zero
 80065d0:	80094d40 	call	80094d4 <_sbrk_r>
 80065d4:	98c00217 	ldw	r3,8(r19)
 80065d8:	1c47883a 	add	r3,r3,r17
 80065dc:	10c00a26 	beq	r2,r3,8006608 <_malloc_trim_r+0x98>
 80065e0:	9009883a 	mov	r4,r18
 80065e4:	800f15c0 	call	800f15c <__malloc_unlock>
 80065e8:	0005883a 	mov	r2,zero
 80065ec:	dfc00417 	ldw	ra,16(sp)
 80065f0:	dcc00317 	ldw	r19,12(sp)
 80065f4:	dc800217 	ldw	r18,8(sp)
 80065f8:	dc400117 	ldw	r17,4(sp)
 80065fc:	dc000017 	ldw	r16,0(sp)
 8006600:	dec00504 	addi	sp,sp,20
 8006604:	f800283a 	ret
 8006608:	9009883a 	mov	r4,r18
 800660c:	040bc83a 	sub	r5,zero,r16
 8006610:	80094d40 	call	80094d4 <_sbrk_r>
 8006614:	00ffffc4 	movi	r3,-1
 8006618:	10c00d26 	beq	r2,r3,8006650 <_malloc_trim_r+0xe0>
 800661c:	00c20074 	movhi	r3,2049
 8006620:	18d50a04 	addi	r3,r3,21544
 8006624:	18800017 	ldw	r2,0(r3)
 8006628:	99000217 	ldw	r4,8(r19)
 800662c:	8c23c83a 	sub	r17,r17,r16
 8006630:	8c400054 	ori	r17,r17,1
 8006634:	1421c83a 	sub	r16,r2,r16
 8006638:	24400115 	stw	r17,4(r4)
 800663c:	9009883a 	mov	r4,r18
 8006640:	1c000015 	stw	r16,0(r3)
 8006644:	800f15c0 	call	800f15c <__malloc_unlock>
 8006648:	00800044 	movi	r2,1
 800664c:	003fe706 	br	80065ec <__alt_data_end+0xfc0065ec>
 8006650:	9009883a 	mov	r4,r18
 8006654:	000b883a 	mov	r5,zero
 8006658:	80094d40 	call	80094d4 <_sbrk_r>
 800665c:	99000217 	ldw	r4,8(r19)
 8006660:	014003c4 	movi	r5,15
 8006664:	1107c83a 	sub	r3,r2,r4
 8006668:	28ffdd0e 	bge	r5,r3,80065e0 <__alt_data_end+0xfc0065e0>
 800666c:	01420074 	movhi	r5,2049
 8006670:	294e3404 	addi	r5,r5,14544
 8006674:	29400017 	ldw	r5,0(r5)
 8006678:	18c00054 	ori	r3,r3,1
 800667c:	20c00115 	stw	r3,4(r4)
 8006680:	00c20074 	movhi	r3,2049
 8006684:	1145c83a 	sub	r2,r2,r5
 8006688:	18d50a04 	addi	r3,r3,21544
 800668c:	18800015 	stw	r2,0(r3)
 8006690:	003fd306 	br	80065e0 <__alt_data_end+0xfc0065e0>

08006694 <_free_r>:
 8006694:	28004c26 	beq	r5,zero,80067c8 <_free_r+0x134>
 8006698:	defffd04 	addi	sp,sp,-12
 800669c:	dc400115 	stw	r17,4(sp)
 80066a0:	dc000015 	stw	r16,0(sp)
 80066a4:	2023883a 	mov	r17,r4
 80066a8:	2821883a 	mov	r16,r5
 80066ac:	dfc00215 	stw	ra,8(sp)
 80066b0:	800f13c0 	call	800f13c <__malloc_lock>
 80066b4:	813fff17 	ldw	r4,-4(r16)
 80066b8:	00bfff84 	movi	r2,-2
 80066bc:	02420074 	movhi	r9,2049
 80066c0:	81bffe04 	addi	r6,r16,-8
 80066c4:	2084703a 	and	r2,r4,r2
 80066c8:	4a48ad04 	addi	r9,r9,8884
 80066cc:	308b883a 	add	r5,r6,r2
 80066d0:	2a000117 	ldw	r8,4(r5)
 80066d4:	49c00217 	ldw	r7,8(r9)
 80066d8:	00ffff04 	movi	r3,-4
 80066dc:	40c6703a 	and	r3,r8,r3
 80066e0:	39405326 	beq	r7,r5,8006830 <_free_r+0x19c>
 80066e4:	28c00115 	stw	r3,4(r5)
 80066e8:	2100004c 	andi	r4,r4,1
 80066ec:	2000091e 	bne	r4,zero,8006714 <_free_r+0x80>
 80066f0:	81fffe17 	ldw	r7,-8(r16)
 80066f4:	4a000204 	addi	r8,r9,8
 80066f8:	31cdc83a 	sub	r6,r6,r7
 80066fc:	31000217 	ldw	r4,8(r6)
 8006700:	11c5883a 	add	r2,r2,r7
 8006704:	22006126 	beq	r4,r8,800688c <_free_r+0x1f8>
 8006708:	31c00317 	ldw	r7,12(r6)
 800670c:	21c00315 	stw	r7,12(r4)
 8006710:	39000215 	stw	r4,8(r7)
 8006714:	28c9883a 	add	r4,r5,r3
 8006718:	21c00117 	ldw	r7,4(r4)
 800671c:	39c0004c 	andi	r7,r7,1
 8006720:	38000d1e 	bne	r7,zero,8006758 <_free_r+0xc4>
 8006724:	29000217 	ldw	r4,8(r5)
 8006728:	10c5883a 	add	r2,r2,r3
 800672c:	00c20074 	movhi	r3,2049
 8006730:	18c8af04 	addi	r3,r3,8892
 8006734:	20c07526 	beq	r4,r3,800690c <_free_r+0x278>
 8006738:	29c00317 	ldw	r7,12(r5)
 800673c:	11400054 	ori	r5,r2,1
 8006740:	3087883a 	add	r3,r6,r2
 8006744:	21c00315 	stw	r7,12(r4)
 8006748:	39000215 	stw	r4,8(r7)
 800674c:	31400115 	stw	r5,4(r6)
 8006750:	18800015 	stw	r2,0(r3)
 8006754:	00000406 	br	8006768 <_free_r+0xd4>
 8006758:	10c00054 	ori	r3,r2,1
 800675c:	30c00115 	stw	r3,4(r6)
 8006760:	3087883a 	add	r3,r6,r2
 8006764:	18800015 	stw	r2,0(r3)
 8006768:	00c07fc4 	movi	r3,511
 800676c:	18801736 	bltu	r3,r2,80067cc <_free_r+0x138>
 8006770:	1004d0fa 	srli	r2,r2,3
 8006774:	01400044 	movi	r5,1
 8006778:	49000117 	ldw	r4,4(r9)
 800677c:	1087883a 	add	r3,r2,r2
 8006780:	18c7883a 	add	r3,r3,r3
 8006784:	1005d0ba 	srai	r2,r2,2
 8006788:	18c7883a 	add	r3,r3,r3
 800678c:	1a47883a 	add	r3,r3,r9
 8006790:	19c00217 	ldw	r7,8(r3)
 8006794:	2884983a 	sll	r2,r5,r2
 8006798:	30c00315 	stw	r3,12(r6)
 800679c:	31c00215 	stw	r7,8(r6)
 80067a0:	1104b03a 	or	r2,r2,r4
 80067a4:	19800215 	stw	r6,8(r3)
 80067a8:	48800115 	stw	r2,4(r9)
 80067ac:	39800315 	stw	r6,12(r7)
 80067b0:	8809883a 	mov	r4,r17
 80067b4:	dfc00217 	ldw	ra,8(sp)
 80067b8:	dc400117 	ldw	r17,4(sp)
 80067bc:	dc000017 	ldw	r16,0(sp)
 80067c0:	dec00304 	addi	sp,sp,12
 80067c4:	800f15c1 	jmpi	800f15c <__malloc_unlock>
 80067c8:	f800283a 	ret
 80067cc:	1006d27a 	srli	r3,r2,9
 80067d0:	01000104 	movi	r4,4
 80067d4:	20c04036 	bltu	r4,r3,80068d8 <_free_r+0x244>
 80067d8:	1006d1ba 	srli	r3,r2,6
 80067dc:	19400e04 	addi	r5,r3,56
 80067e0:	2947883a 	add	r3,r5,r5
 80067e4:	18c7883a 	add	r3,r3,r3
 80067e8:	18c7883a 	add	r3,r3,r3
 80067ec:	1a49883a 	add	r4,r3,r9
 80067f0:	20c00217 	ldw	r3,8(r4)
 80067f4:	01c20074 	movhi	r7,2049
 80067f8:	39c8ad04 	addi	r7,r7,8884
 80067fc:	19003b26 	beq	r3,r4,80068ec <_free_r+0x258>
 8006800:	01ffff04 	movi	r7,-4
 8006804:	19400117 	ldw	r5,4(r3)
 8006808:	29ca703a 	and	r5,r5,r7
 800680c:	1140022e 	bgeu	r2,r5,8006818 <_free_r+0x184>
 8006810:	18c00217 	ldw	r3,8(r3)
 8006814:	20fffb1e 	bne	r4,r3,8006804 <__alt_data_end+0xfc006804>
 8006818:	18800317 	ldw	r2,12(r3)
 800681c:	30800315 	stw	r2,12(r6)
 8006820:	30c00215 	stw	r3,8(r6)
 8006824:	11800215 	stw	r6,8(r2)
 8006828:	19800315 	stw	r6,12(r3)
 800682c:	003fe006 	br	80067b0 <__alt_data_end+0xfc0067b0>
 8006830:	2100004c 	andi	r4,r4,1
 8006834:	1885883a 	add	r2,r3,r2
 8006838:	2000071e 	bne	r4,zero,8006858 <_free_r+0x1c4>
 800683c:	817ffe17 	ldw	r5,-8(r16)
 8006840:	314dc83a 	sub	r6,r6,r5
 8006844:	30c00317 	ldw	r3,12(r6)
 8006848:	31000217 	ldw	r4,8(r6)
 800684c:	1145883a 	add	r2,r2,r5
 8006850:	20c00315 	stw	r3,12(r4)
 8006854:	19000215 	stw	r4,8(r3)
 8006858:	10c00054 	ori	r3,r2,1
 800685c:	30c00115 	stw	r3,4(r6)
 8006860:	00c20074 	movhi	r3,2049
 8006864:	18ce3504 	addi	r3,r3,14548
 8006868:	18c00017 	ldw	r3,0(r3)
 800686c:	49800215 	stw	r6,8(r9)
 8006870:	10ffcf36 	bltu	r2,r3,80067b0 <__alt_data_end+0xfc0067b0>
 8006874:	00820074 	movhi	r2,2049
 8006878:	10950204 	addi	r2,r2,21512
 800687c:	11400017 	ldw	r5,0(r2)
 8006880:	8809883a 	mov	r4,r17
 8006884:	80065700 	call	8006570 <_malloc_trim_r>
 8006888:	003fc906 	br	80067b0 <__alt_data_end+0xfc0067b0>
 800688c:	28c9883a 	add	r4,r5,r3
 8006890:	21000117 	ldw	r4,4(r4)
 8006894:	2100004c 	andi	r4,r4,1
 8006898:	20000a1e 	bne	r4,zero,80068c4 <_free_r+0x230>
 800689c:	29000317 	ldw	r4,12(r5)
 80068a0:	29400217 	ldw	r5,8(r5)
 80068a4:	10c5883a 	add	r2,r2,r3
 80068a8:	10c00054 	ori	r3,r2,1
 80068ac:	29000315 	stw	r4,12(r5)
 80068b0:	21400215 	stw	r5,8(r4)
 80068b4:	30c00115 	stw	r3,4(r6)
 80068b8:	308d883a 	add	r6,r6,r2
 80068bc:	30800015 	stw	r2,0(r6)
 80068c0:	003fbb06 	br	80067b0 <__alt_data_end+0xfc0067b0>
 80068c4:	10c00054 	ori	r3,r2,1
 80068c8:	30c00115 	stw	r3,4(r6)
 80068cc:	308d883a 	add	r6,r6,r2
 80068d0:	30800015 	stw	r2,0(r6)
 80068d4:	003fb606 	br	80067b0 <__alt_data_end+0xfc0067b0>
 80068d8:	01000504 	movi	r4,20
 80068dc:	20c01436 	bltu	r4,r3,8006930 <_free_r+0x29c>
 80068e0:	194016c4 	addi	r5,r3,91
 80068e4:	2947883a 	add	r3,r5,r5
 80068e8:	003fbe06 	br	80067e4 <__alt_data_end+0xfc0067e4>
 80068ec:	280bd0ba 	srai	r5,r5,2
 80068f0:	00800044 	movi	r2,1
 80068f4:	39000117 	ldw	r4,4(r7)
 80068f8:	114a983a 	sll	r5,r2,r5
 80068fc:	1805883a 	mov	r2,r3
 8006900:	2908b03a 	or	r4,r5,r4
 8006904:	39000115 	stw	r4,4(r7)
 8006908:	003fc406 	br	800681c <__alt_data_end+0xfc00681c>
 800690c:	49800515 	stw	r6,20(r9)
 8006910:	49800415 	stw	r6,16(r9)
 8006914:	10c00054 	ori	r3,r2,1
 8006918:	31000315 	stw	r4,12(r6)
 800691c:	31000215 	stw	r4,8(r6)
 8006920:	30c00115 	stw	r3,4(r6)
 8006924:	308d883a 	add	r6,r6,r2
 8006928:	30800015 	stw	r2,0(r6)
 800692c:	003fa006 	br	80067b0 <__alt_data_end+0xfc0067b0>
 8006930:	01001504 	movi	r4,84
 8006934:	20c00436 	bltu	r4,r3,8006948 <_free_r+0x2b4>
 8006938:	1006d33a 	srli	r3,r2,12
 800693c:	19401b84 	addi	r5,r3,110
 8006940:	2947883a 	add	r3,r5,r5
 8006944:	003fa706 	br	80067e4 <__alt_data_end+0xfc0067e4>
 8006948:	01005504 	movi	r4,340
 800694c:	20c00436 	bltu	r4,r3,8006960 <_free_r+0x2cc>
 8006950:	1006d3fa 	srli	r3,r2,15
 8006954:	19401dc4 	addi	r5,r3,119
 8006958:	2947883a 	add	r3,r5,r5
 800695c:	003fa106 	br	80067e4 <__alt_data_end+0xfc0067e4>
 8006960:	01015504 	movi	r4,1364
 8006964:	20c00436 	bltu	r4,r3,8006978 <_free_r+0x2e4>
 8006968:	1006d4ba 	srli	r3,r2,18
 800696c:	19401f04 	addi	r5,r3,124
 8006970:	2947883a 	add	r3,r5,r5
 8006974:	003f9b06 	br	80067e4 <__alt_data_end+0xfc0067e4>
 8006978:	00c03f04 	movi	r3,252
 800697c:	01401f84 	movi	r5,126
 8006980:	003f9806 	br	80067e4 <__alt_data_end+0xfc0067e4>

08006984 <__sfvwrite_r>:
 8006984:	30800217 	ldw	r2,8(r6)
 8006988:	10004526 	beq	r2,zero,8006aa0 <__sfvwrite_r+0x11c>
 800698c:	28c0030b 	ldhu	r3,12(r5)
 8006990:	defff404 	addi	sp,sp,-48
 8006994:	dd400715 	stw	r21,28(sp)
 8006998:	dcc00515 	stw	r19,20(sp)
 800699c:	dc000215 	stw	r16,8(sp)
 80069a0:	dfc00b15 	stw	ra,44(sp)
 80069a4:	df000a15 	stw	fp,40(sp)
 80069a8:	ddc00915 	stw	r23,36(sp)
 80069ac:	dd800815 	stw	r22,32(sp)
 80069b0:	dd000615 	stw	r20,24(sp)
 80069b4:	dc800415 	stw	r18,16(sp)
 80069b8:	dc400315 	stw	r17,12(sp)
 80069bc:	1880020c 	andi	r2,r3,8
 80069c0:	2821883a 	mov	r16,r5
 80069c4:	202b883a 	mov	r21,r4
 80069c8:	3027883a 	mov	r19,r6
 80069cc:	10002526 	beq	r2,zero,8006a64 <__sfvwrite_r+0xe0>
 80069d0:	28800417 	ldw	r2,16(r5)
 80069d4:	10002326 	beq	r2,zero,8006a64 <__sfvwrite_r+0xe0>
 80069d8:	1880008c 	andi	r2,r3,2
 80069dc:	9c400017 	ldw	r17,0(r19)
 80069e0:	10003126 	beq	r2,zero,8006aa8 <__sfvwrite_r+0x124>
 80069e4:	0029883a 	mov	r20,zero
 80069e8:	0025883a 	mov	r18,zero
 80069ec:	05810004 	movi	r22,1024
 80069f0:	a00d883a 	mov	r6,r20
 80069f4:	a809883a 	mov	r4,r21
 80069f8:	90002526 	beq	r18,zero,8006a90 <__sfvwrite_r+0x10c>
 80069fc:	900f883a 	mov	r7,r18
 8006a00:	81400717 	ldw	r5,28(r16)
 8006a04:	b480012e 	bgeu	r22,r18,8006a0c <__sfvwrite_r+0x88>
 8006a08:	01c10004 	movi	r7,1024
 8006a0c:	80800917 	ldw	r2,36(r16)
 8006a10:	103ee83a 	callr	r2
 8006a14:	0080510e 	bge	zero,r2,8006b5c <__sfvwrite_r+0x1d8>
 8006a18:	98c00217 	ldw	r3,8(r19)
 8006a1c:	a0a9883a 	add	r20,r20,r2
 8006a20:	90a5c83a 	sub	r18,r18,r2
 8006a24:	1885c83a 	sub	r2,r3,r2
 8006a28:	98800215 	stw	r2,8(r19)
 8006a2c:	103ff01e 	bne	r2,zero,80069f0 <__alt_data_end+0xfc0069f0>
 8006a30:	0005883a 	mov	r2,zero
 8006a34:	dfc00b17 	ldw	ra,44(sp)
 8006a38:	df000a17 	ldw	fp,40(sp)
 8006a3c:	ddc00917 	ldw	r23,36(sp)
 8006a40:	dd800817 	ldw	r22,32(sp)
 8006a44:	dd400717 	ldw	r21,28(sp)
 8006a48:	dd000617 	ldw	r20,24(sp)
 8006a4c:	dcc00517 	ldw	r19,20(sp)
 8006a50:	dc800417 	ldw	r18,16(sp)
 8006a54:	dc400317 	ldw	r17,12(sp)
 8006a58:	dc000217 	ldw	r16,8(sp)
 8006a5c:	dec00c04 	addi	sp,sp,48
 8006a60:	f800283a 	ret
 8006a64:	a809883a 	mov	r4,r21
 8006a68:	800b883a 	mov	r5,r16
 8006a6c:	80044e40 	call	80044e4 <__swsetup_r>
 8006a70:	80c0030b 	ldhu	r3,12(r16)
 8006a74:	103fd826 	beq	r2,zero,80069d8 <__alt_data_end+0xfc0069d8>
 8006a78:	18c01014 	ori	r3,r3,64
 8006a7c:	80c0030d 	sth	r3,12(r16)
 8006a80:	00c00244 	movi	r3,9
 8006a84:	00bfffc4 	movi	r2,-1
 8006a88:	a8c00015 	stw	r3,0(r21)
 8006a8c:	003fe906 	br	8006a34 <__alt_data_end+0xfc006a34>
 8006a90:	8d000017 	ldw	r20,0(r17)
 8006a94:	8c800117 	ldw	r18,4(r17)
 8006a98:	8c400204 	addi	r17,r17,8
 8006a9c:	003fd406 	br	80069f0 <__alt_data_end+0xfc0069f0>
 8006aa0:	0005883a 	mov	r2,zero
 8006aa4:	f800283a 	ret
 8006aa8:	1880004c 	andi	r2,r3,1
 8006aac:	1000301e 	bne	r2,zero,8006b70 <__sfvwrite_r+0x1ec>
 8006ab0:	002f883a 	mov	r23,zero
 8006ab4:	0025883a 	mov	r18,zero
 8006ab8:	90001c26 	beq	r18,zero,8006b2c <__sfvwrite_r+0x1a8>
 8006abc:	1880800c 	andi	r2,r3,512
 8006ac0:	85000217 	ldw	r20,8(r16)
 8006ac4:	10006c26 	beq	r2,zero,8006c78 <__sfvwrite_r+0x2f4>
 8006ac8:	a02d883a 	mov	r22,r20
 8006acc:	95008536 	bltu	r18,r20,8006ce4 <__sfvwrite_r+0x360>
 8006ad0:	1881200c 	andi	r2,r3,1152
 8006ad4:	10009d1e 	bne	r2,zero,8006d4c <__sfvwrite_r+0x3c8>
 8006ad8:	81000017 	ldw	r4,0(r16)
 8006adc:	a039883a 	mov	fp,r20
 8006ae0:	9029883a 	mov	r20,r18
 8006ae4:	b80b883a 	mov	r5,r23
 8006ae8:	b00d883a 	mov	r6,r22
 8006aec:	8007bf80 	call	8007bf8 <memmove>
 8006af0:	80c00217 	ldw	r3,8(r16)
 8006af4:	81000017 	ldw	r4,0(r16)
 8006af8:	9005883a 	mov	r2,r18
 8006afc:	1f39c83a 	sub	fp,r3,fp
 8006b00:	258f883a 	add	r7,r4,r22
 8006b04:	87000215 	stw	fp,8(r16)
 8006b08:	81c00015 	stw	r7,0(r16)
 8006b0c:	98c00217 	ldw	r3,8(r19)
 8006b10:	b8af883a 	add	r23,r23,r2
 8006b14:	90a5c83a 	sub	r18,r18,r2
 8006b18:	1d05c83a 	sub	r2,r3,r20
 8006b1c:	98800215 	stw	r2,8(r19)
 8006b20:	103fc326 	beq	r2,zero,8006a30 <__alt_data_end+0xfc006a30>
 8006b24:	80c0030b 	ldhu	r3,12(r16)
 8006b28:	903fe41e 	bne	r18,zero,8006abc <__alt_data_end+0xfc006abc>
 8006b2c:	8dc00017 	ldw	r23,0(r17)
 8006b30:	8c800117 	ldw	r18,4(r17)
 8006b34:	8c400204 	addi	r17,r17,8
 8006b38:	003fdf06 	br	8006ab8 <__alt_data_end+0xfc006ab8>
 8006b3c:	8008ec00 	call	8008ec0 <_realloc_r>
 8006b40:	102d883a 	mov	r22,r2
 8006b44:	1000a01e 	bne	r2,zero,8006dc8 <__sfvwrite_r+0x444>
 8006b48:	81400417 	ldw	r5,16(r16)
 8006b4c:	a809883a 	mov	r4,r21
 8006b50:	80066940 	call	8006694 <_free_r>
 8006b54:	00800304 	movi	r2,12
 8006b58:	a8800015 	stw	r2,0(r21)
 8006b5c:	80c0030b 	ldhu	r3,12(r16)
 8006b60:	00bfffc4 	movi	r2,-1
 8006b64:	18c01014 	ori	r3,r3,64
 8006b68:	80c0030d 	sth	r3,12(r16)
 8006b6c:	003fb106 	br	8006a34 <__alt_data_end+0xfc006a34>
 8006b70:	0029883a 	mov	r20,zero
 8006b74:	0011883a 	mov	r8,zero
 8006b78:	0039883a 	mov	fp,zero
 8006b7c:	0025883a 	mov	r18,zero
 8006b80:	90001f26 	beq	r18,zero,8006c00 <__sfvwrite_r+0x27c>
 8006b84:	40006826 	beq	r8,zero,8006d28 <__sfvwrite_r+0x3a4>
 8006b88:	a02f883a 	mov	r23,r20
 8006b8c:	9500012e 	bgeu	r18,r20,8006b94 <__sfvwrite_r+0x210>
 8006b90:	902f883a 	mov	r23,r18
 8006b94:	81000017 	ldw	r4,0(r16)
 8006b98:	80800417 	ldw	r2,16(r16)
 8006b9c:	b82d883a 	mov	r22,r23
 8006ba0:	81800217 	ldw	r6,8(r16)
 8006ba4:	81c00517 	ldw	r7,20(r16)
 8006ba8:	1100022e 	bgeu	r2,r4,8006bb4 <__sfvwrite_r+0x230>
 8006bac:	31c7883a 	add	r3,r6,r7
 8006bb0:	1dc01816 	blt	r3,r23,8006c14 <__sfvwrite_r+0x290>
 8006bb4:	b9c03f16 	blt	r23,r7,8006cb4 <__sfvwrite_r+0x330>
 8006bb8:	80800917 	ldw	r2,36(r16)
 8006bbc:	81400717 	ldw	r5,28(r16)
 8006bc0:	a809883a 	mov	r4,r21
 8006bc4:	da000115 	stw	r8,4(sp)
 8006bc8:	e00d883a 	mov	r6,fp
 8006bcc:	103ee83a 	callr	r2
 8006bd0:	102d883a 	mov	r22,r2
 8006bd4:	da000117 	ldw	r8,4(sp)
 8006bd8:	00bfe00e 	bge	zero,r2,8006b5c <__alt_data_end+0xfc006b5c>
 8006bdc:	a5a9c83a 	sub	r20,r20,r22
 8006be0:	a0001f26 	beq	r20,zero,8006c60 <__sfvwrite_r+0x2dc>
 8006be4:	98800217 	ldw	r2,8(r19)
 8006be8:	e5b9883a 	add	fp,fp,r22
 8006bec:	95a5c83a 	sub	r18,r18,r22
 8006bf0:	15adc83a 	sub	r22,r2,r22
 8006bf4:	9d800215 	stw	r22,8(r19)
 8006bf8:	b03f8d26 	beq	r22,zero,8006a30 <__alt_data_end+0xfc006a30>
 8006bfc:	903fe11e 	bne	r18,zero,8006b84 <__alt_data_end+0xfc006b84>
 8006c00:	8f000017 	ldw	fp,0(r17)
 8006c04:	8c800117 	ldw	r18,4(r17)
 8006c08:	0011883a 	mov	r8,zero
 8006c0c:	8c400204 	addi	r17,r17,8
 8006c10:	003fdb06 	br	8006b80 <__alt_data_end+0xfc006b80>
 8006c14:	180d883a 	mov	r6,r3
 8006c18:	e00b883a 	mov	r5,fp
 8006c1c:	da000115 	stw	r8,4(sp)
 8006c20:	d8c00015 	stw	r3,0(sp)
 8006c24:	8007bf80 	call	8007bf8 <memmove>
 8006c28:	d8c00017 	ldw	r3,0(sp)
 8006c2c:	80800017 	ldw	r2,0(r16)
 8006c30:	a809883a 	mov	r4,r21
 8006c34:	800b883a 	mov	r5,r16
 8006c38:	10c5883a 	add	r2,r2,r3
 8006c3c:	80800015 	stw	r2,0(r16)
 8006c40:	d8c00015 	stw	r3,0(sp)
 8006c44:	8005f640 	call	8005f64 <_fflush_r>
 8006c48:	d8c00017 	ldw	r3,0(sp)
 8006c4c:	da000117 	ldw	r8,4(sp)
 8006c50:	103fc21e 	bne	r2,zero,8006b5c <__alt_data_end+0xfc006b5c>
 8006c54:	182d883a 	mov	r22,r3
 8006c58:	a5a9c83a 	sub	r20,r20,r22
 8006c5c:	a03fe11e 	bne	r20,zero,8006be4 <__alt_data_end+0xfc006be4>
 8006c60:	a809883a 	mov	r4,r21
 8006c64:	800b883a 	mov	r5,r16
 8006c68:	8005f640 	call	8005f64 <_fflush_r>
 8006c6c:	103fbb1e 	bne	r2,zero,8006b5c <__alt_data_end+0xfc006b5c>
 8006c70:	0011883a 	mov	r8,zero
 8006c74:	003fdb06 	br	8006be4 <__alt_data_end+0xfc006be4>
 8006c78:	81000017 	ldw	r4,0(r16)
 8006c7c:	80800417 	ldw	r2,16(r16)
 8006c80:	1100012e 	bgeu	r2,r4,8006c88 <__sfvwrite_r+0x304>
 8006c84:	a4805a36 	bltu	r20,r18,8006df0 <__sfvwrite_r+0x46c>
 8006c88:	81c00517 	ldw	r7,20(r16)
 8006c8c:	91c01a36 	bltu	r18,r7,8006cf8 <__sfvwrite_r+0x374>
 8006c90:	80800917 	ldw	r2,36(r16)
 8006c94:	81400717 	ldw	r5,28(r16)
 8006c98:	a809883a 	mov	r4,r21
 8006c9c:	b80d883a 	mov	r6,r23
 8006ca0:	103ee83a 	callr	r2
 8006ca4:	1029883a 	mov	r20,r2
 8006ca8:	00bfac0e 	bge	zero,r2,8006b5c <__alt_data_end+0xfc006b5c>
 8006cac:	a005883a 	mov	r2,r20
 8006cb0:	003f9606 	br	8006b0c <__alt_data_end+0xfc006b0c>
 8006cb4:	b80d883a 	mov	r6,r23
 8006cb8:	e00b883a 	mov	r5,fp
 8006cbc:	da000115 	stw	r8,4(sp)
 8006cc0:	8007bf80 	call	8007bf8 <memmove>
 8006cc4:	80800217 	ldw	r2,8(r16)
 8006cc8:	80c00017 	ldw	r3,0(r16)
 8006ccc:	da000117 	ldw	r8,4(sp)
 8006cd0:	15c5c83a 	sub	r2,r2,r23
 8006cd4:	1def883a 	add	r23,r3,r23
 8006cd8:	80800215 	stw	r2,8(r16)
 8006cdc:	85c00015 	stw	r23,0(r16)
 8006ce0:	003fbe06 	br	8006bdc <__alt_data_end+0xfc006bdc>
 8006ce4:	81000017 	ldw	r4,0(r16)
 8006ce8:	9039883a 	mov	fp,r18
 8006cec:	9029883a 	mov	r20,r18
 8006cf0:	902d883a 	mov	r22,r18
 8006cf4:	003f7b06 	br	8006ae4 <__alt_data_end+0xfc006ae4>
 8006cf8:	b80b883a 	mov	r5,r23
 8006cfc:	900d883a 	mov	r6,r18
 8006d00:	8007bf80 	call	8007bf8 <memmove>
 8006d04:	80c00217 	ldw	r3,8(r16)
 8006d08:	80800017 	ldw	r2,0(r16)
 8006d0c:	9029883a 	mov	r20,r18
 8006d10:	1c87c83a 	sub	r3,r3,r18
 8006d14:	1485883a 	add	r2,r2,r18
 8006d18:	80800015 	stw	r2,0(r16)
 8006d1c:	80c00215 	stw	r3,8(r16)
 8006d20:	9005883a 	mov	r2,r18
 8006d24:	003f7906 	br	8006b0c <__alt_data_end+0xfc006b0c>
 8006d28:	e009883a 	mov	r4,fp
 8006d2c:	01400284 	movi	r5,10
 8006d30:	900d883a 	mov	r6,r18
 8006d34:	80079d80 	call	80079d8 <memchr>
 8006d38:	10003826 	beq	r2,zero,8006e1c <__sfvwrite_r+0x498>
 8006d3c:	10800044 	addi	r2,r2,1
 8006d40:	1729c83a 	sub	r20,r2,fp
 8006d44:	02000044 	movi	r8,1
 8006d48:	003f8f06 	br	8006b88 <__alt_data_end+0xfc006b88>
 8006d4c:	80800517 	ldw	r2,20(r16)
 8006d50:	81400417 	ldw	r5,16(r16)
 8006d54:	87000017 	ldw	fp,0(r16)
 8006d58:	10a9883a 	add	r20,r2,r2
 8006d5c:	a085883a 	add	r2,r20,r2
 8006d60:	1028d7fa 	srli	r20,r2,31
 8006d64:	e179c83a 	sub	fp,fp,r5
 8006d68:	e1000044 	addi	r4,fp,1
 8006d6c:	a085883a 	add	r2,r20,r2
 8006d70:	1029d07a 	srai	r20,r2,1
 8006d74:	2485883a 	add	r2,r4,r18
 8006d78:	a00d883a 	mov	r6,r20
 8006d7c:	a080022e 	bgeu	r20,r2,8006d88 <__sfvwrite_r+0x404>
 8006d80:	1029883a 	mov	r20,r2
 8006d84:	100d883a 	mov	r6,r2
 8006d88:	18c1000c 	andi	r3,r3,1024
 8006d8c:	a809883a 	mov	r4,r21
 8006d90:	183f6a26 	beq	r3,zero,8006b3c <__alt_data_end+0xfc006b3c>
 8006d94:	300b883a 	mov	r5,r6
 8006d98:	80072300 	call	8007230 <_malloc_r>
 8006d9c:	102d883a 	mov	r22,r2
 8006da0:	103f6c26 	beq	r2,zero,8006b54 <__alt_data_end+0xfc006b54>
 8006da4:	81400417 	ldw	r5,16(r16)
 8006da8:	1009883a 	mov	r4,r2
 8006dac:	e00d883a 	mov	r6,fp
 8006db0:	8007ac00 	call	8007ac0 <memcpy>
 8006db4:	8080030b 	ldhu	r2,12(r16)
 8006db8:	00fedfc4 	movi	r3,-1153
 8006dbc:	10c4703a 	and	r2,r2,r3
 8006dc0:	10802014 	ori	r2,r2,128
 8006dc4:	8080030d 	sth	r2,12(r16)
 8006dc8:	b709883a 	add	r4,r22,fp
 8006dcc:	a707c83a 	sub	r3,r20,fp
 8006dd0:	85800415 	stw	r22,16(r16)
 8006dd4:	85000515 	stw	r20,20(r16)
 8006dd8:	81000015 	stw	r4,0(r16)
 8006ddc:	9039883a 	mov	fp,r18
 8006de0:	80c00215 	stw	r3,8(r16)
 8006de4:	9029883a 	mov	r20,r18
 8006de8:	902d883a 	mov	r22,r18
 8006dec:	003f3d06 	br	8006ae4 <__alt_data_end+0xfc006ae4>
 8006df0:	b80b883a 	mov	r5,r23
 8006df4:	a00d883a 	mov	r6,r20
 8006df8:	8007bf80 	call	8007bf8 <memmove>
 8006dfc:	80800017 	ldw	r2,0(r16)
 8006e00:	a809883a 	mov	r4,r21
 8006e04:	800b883a 	mov	r5,r16
 8006e08:	1505883a 	add	r2,r2,r20
 8006e0c:	80800015 	stw	r2,0(r16)
 8006e10:	8005f640 	call	8005f64 <_fflush_r>
 8006e14:	103fa526 	beq	r2,zero,8006cac <__alt_data_end+0xfc006cac>
 8006e18:	003f5006 	br	8006b5c <__alt_data_end+0xfc006b5c>
 8006e1c:	95000044 	addi	r20,r18,1
 8006e20:	02000044 	movi	r8,1
 8006e24:	003f5806 	br	8006b88 <__alt_data_end+0xfc006b88>

08006e28 <_fwalk>:
 8006e28:	defff804 	addi	sp,sp,-32
 8006e2c:	dd400515 	stw	r21,20(sp)
 8006e30:	2540b804 	addi	r21,r4,736
 8006e34:	dd800615 	stw	r22,24(sp)
 8006e38:	dd000415 	stw	r20,16(sp)
 8006e3c:	dfc00715 	stw	ra,28(sp)
 8006e40:	dcc00315 	stw	r19,12(sp)
 8006e44:	dc800215 	stw	r18,8(sp)
 8006e48:	dc400115 	stw	r17,4(sp)
 8006e4c:	dc000015 	stw	r16,0(sp)
 8006e50:	2829883a 	mov	r20,r5
 8006e54:	002d883a 	mov	r22,zero
 8006e58:	80065300 	call	8006530 <__sfp_lock_acquire>
 8006e5c:	a8001426 	beq	r21,zero,8006eb0 <_fwalk+0x88>
 8006e60:	04ffffc4 	movi	r19,-1
 8006e64:	ac400117 	ldw	r17,4(r21)
 8006e68:	ac800217 	ldw	r18,8(r21)
 8006e6c:	8c7fffc4 	addi	r17,r17,-1
 8006e70:	88000d16 	blt	r17,zero,8006ea8 <_fwalk+0x80>
 8006e74:	94000304 	addi	r16,r18,12
 8006e78:	94800384 	addi	r18,r18,14
 8006e7c:	80c0000f 	ldh	r3,0(r16)
 8006e80:	8c7fffc4 	addi	r17,r17,-1
 8006e84:	813ffd04 	addi	r4,r16,-12
 8006e88:	18000426 	beq	r3,zero,8006e9c <_fwalk+0x74>
 8006e8c:	90c0000f 	ldh	r3,0(r18)
 8006e90:	1cc00226 	beq	r3,r19,8006e9c <_fwalk+0x74>
 8006e94:	a03ee83a 	callr	r20
 8006e98:	b0acb03a 	or	r22,r22,r2
 8006e9c:	84001a04 	addi	r16,r16,104
 8006ea0:	94801a04 	addi	r18,r18,104
 8006ea4:	8cfff51e 	bne	r17,r19,8006e7c <__alt_data_end+0xfc006e7c>
 8006ea8:	ad400017 	ldw	r21,0(r21)
 8006eac:	a83fed1e 	bne	r21,zero,8006e64 <__alt_data_end+0xfc006e64>
 8006eb0:	80065340 	call	8006534 <__sfp_lock_release>
 8006eb4:	b005883a 	mov	r2,r22
 8006eb8:	dfc00717 	ldw	ra,28(sp)
 8006ebc:	dd800617 	ldw	r22,24(sp)
 8006ec0:	dd400517 	ldw	r21,20(sp)
 8006ec4:	dd000417 	ldw	r20,16(sp)
 8006ec8:	dcc00317 	ldw	r19,12(sp)
 8006ecc:	dc800217 	ldw	r18,8(sp)
 8006ed0:	dc400117 	ldw	r17,4(sp)
 8006ed4:	dc000017 	ldw	r16,0(sp)
 8006ed8:	dec00804 	addi	sp,sp,32
 8006edc:	f800283a 	ret

08006ee0 <_fwalk_reent>:
 8006ee0:	defff804 	addi	sp,sp,-32
 8006ee4:	dd400515 	stw	r21,20(sp)
 8006ee8:	2540b804 	addi	r21,r4,736
 8006eec:	dd800615 	stw	r22,24(sp)
 8006ef0:	dd000415 	stw	r20,16(sp)
 8006ef4:	dcc00315 	stw	r19,12(sp)
 8006ef8:	dfc00715 	stw	ra,28(sp)
 8006efc:	dc800215 	stw	r18,8(sp)
 8006f00:	dc400115 	stw	r17,4(sp)
 8006f04:	dc000015 	stw	r16,0(sp)
 8006f08:	2027883a 	mov	r19,r4
 8006f0c:	2829883a 	mov	r20,r5
 8006f10:	002d883a 	mov	r22,zero
 8006f14:	80065300 	call	8006530 <__sfp_lock_acquire>
 8006f18:	a8001326 	beq	r21,zero,8006f68 <_fwalk_reent+0x88>
 8006f1c:	04bfffc4 	movi	r18,-1
 8006f20:	ac400117 	ldw	r17,4(r21)
 8006f24:	ac000217 	ldw	r16,8(r21)
 8006f28:	8c7fffc4 	addi	r17,r17,-1
 8006f2c:	88000c16 	blt	r17,zero,8006f60 <_fwalk_reent+0x80>
 8006f30:	84000304 	addi	r16,r16,12
 8006f34:	80c0000f 	ldh	r3,0(r16)
 8006f38:	8c7fffc4 	addi	r17,r17,-1
 8006f3c:	817ffd04 	addi	r5,r16,-12
 8006f40:	18000526 	beq	r3,zero,8006f58 <_fwalk_reent+0x78>
 8006f44:	80c0008f 	ldh	r3,2(r16)
 8006f48:	9809883a 	mov	r4,r19
 8006f4c:	1c800226 	beq	r3,r18,8006f58 <_fwalk_reent+0x78>
 8006f50:	a03ee83a 	callr	r20
 8006f54:	b0acb03a 	or	r22,r22,r2
 8006f58:	84001a04 	addi	r16,r16,104
 8006f5c:	8cbff51e 	bne	r17,r18,8006f34 <__alt_data_end+0xfc006f34>
 8006f60:	ad400017 	ldw	r21,0(r21)
 8006f64:	a83fee1e 	bne	r21,zero,8006f20 <__alt_data_end+0xfc006f20>
 8006f68:	80065340 	call	8006534 <__sfp_lock_release>
 8006f6c:	b005883a 	mov	r2,r22
 8006f70:	dfc00717 	ldw	ra,28(sp)
 8006f74:	dd800617 	ldw	r22,24(sp)
 8006f78:	dd400517 	ldw	r21,20(sp)
 8006f7c:	dd000417 	ldw	r20,16(sp)
 8006f80:	dcc00317 	ldw	r19,12(sp)
 8006f84:	dc800217 	ldw	r18,8(sp)
 8006f88:	dc400117 	ldw	r17,4(sp)
 8006f8c:	dc000017 	ldw	r16,0(sp)
 8006f90:	dec00804 	addi	sp,sp,32
 8006f94:	f800283a 	ret

08006f98 <_setlocale_r>:
 8006f98:	30001b26 	beq	r6,zero,8007008 <_setlocale_r+0x70>
 8006f9c:	01420074 	movhi	r5,2049
 8006fa0:	defffe04 	addi	sp,sp,-8
 8006fa4:	2946e504 	addi	r5,r5,7060
 8006fa8:	3009883a 	mov	r4,r6
 8006fac:	dc000015 	stw	r16,0(sp)
 8006fb0:	dfc00115 	stw	ra,4(sp)
 8006fb4:	3021883a 	mov	r16,r6
 8006fb8:	80096640 	call	8009664 <strcmp>
 8006fbc:	1000061e 	bne	r2,zero,8006fd8 <_setlocale_r+0x40>
 8006fc0:	00820074 	movhi	r2,2049
 8006fc4:	1086e404 	addi	r2,r2,7056
 8006fc8:	dfc00117 	ldw	ra,4(sp)
 8006fcc:	dc000017 	ldw	r16,0(sp)
 8006fd0:	dec00204 	addi	sp,sp,8
 8006fd4:	f800283a 	ret
 8006fd8:	01420074 	movhi	r5,2049
 8006fdc:	2946e404 	addi	r5,r5,7056
 8006fe0:	8009883a 	mov	r4,r16
 8006fe4:	80096640 	call	8009664 <strcmp>
 8006fe8:	103ff526 	beq	r2,zero,8006fc0 <__alt_data_end+0xfc006fc0>
 8006fec:	01420074 	movhi	r5,2049
 8006ff0:	2946cf04 	addi	r5,r5,6972
 8006ff4:	8009883a 	mov	r4,r16
 8006ff8:	80096640 	call	8009664 <strcmp>
 8006ffc:	103ff026 	beq	r2,zero,8006fc0 <__alt_data_end+0xfc006fc0>
 8007000:	0005883a 	mov	r2,zero
 8007004:	003ff006 	br	8006fc8 <__alt_data_end+0xfc006fc8>
 8007008:	00820074 	movhi	r2,2049
 800700c:	1086e404 	addi	r2,r2,7056
 8007010:	f800283a 	ret

08007014 <__locale_charset>:
 8007014:	00820074 	movhi	r2,2049
 8007018:	10889704 	addi	r2,r2,8796
 800701c:	f800283a 	ret

08007020 <__locale_mb_cur_max>:
 8007020:	00820074 	movhi	r2,2049
 8007024:	108e3304 	addi	r2,r2,14540
 8007028:	10800017 	ldw	r2,0(r2)
 800702c:	f800283a 	ret

08007030 <__locale_msgcharset>:
 8007030:	00820074 	movhi	r2,2049
 8007034:	10888f04 	addi	r2,r2,8764
 8007038:	f800283a 	ret

0800703c <__locale_cjk_lang>:
 800703c:	0005883a 	mov	r2,zero
 8007040:	f800283a 	ret

08007044 <_localeconv_r>:
 8007044:	00820074 	movhi	r2,2049
 8007048:	10889f04 	addi	r2,r2,8828
 800704c:	f800283a 	ret

08007050 <setlocale>:
 8007050:	00c20074 	movhi	r3,2049
 8007054:	18ce3204 	addi	r3,r3,14536
 8007058:	2005883a 	mov	r2,r4
 800705c:	19000017 	ldw	r4,0(r3)
 8007060:	280d883a 	mov	r6,r5
 8007064:	100b883a 	mov	r5,r2
 8007068:	8006f981 	jmpi	8006f98 <_setlocale_r>

0800706c <localeconv>:
 800706c:	00820074 	movhi	r2,2049
 8007070:	10889f04 	addi	r2,r2,8828
 8007074:	f800283a 	ret

08007078 <__smakebuf_r>:
 8007078:	2880030b 	ldhu	r2,12(r5)
 800707c:	10c0008c 	andi	r3,r2,2
 8007080:	1800401e 	bne	r3,zero,8007184 <__smakebuf_r+0x10c>
 8007084:	deffec04 	addi	sp,sp,-80
 8007088:	dc000f15 	stw	r16,60(sp)
 800708c:	2821883a 	mov	r16,r5
 8007090:	2940038f 	ldh	r5,14(r5)
 8007094:	dc401015 	stw	r17,64(sp)
 8007098:	dfc01315 	stw	ra,76(sp)
 800709c:	dcc01215 	stw	r19,72(sp)
 80070a0:	dc801115 	stw	r18,68(sp)
 80070a4:	2023883a 	mov	r17,r4
 80070a8:	28001b16 	blt	r5,zero,8007118 <__smakebuf_r+0xa0>
 80070ac:	d80d883a 	mov	r6,sp
 80070b0:	800b0dc0 	call	800b0dc <_fstat_r>
 80070b4:	10001716 	blt	r2,zero,8007114 <__smakebuf_r+0x9c>
 80070b8:	d8800117 	ldw	r2,4(sp)
 80070bc:	00e00014 	movui	r3,32768
 80070c0:	10bc000c 	andi	r2,r2,61440
 80070c4:	10c03726 	beq	r2,r3,80071a4 <__smakebuf_r+0x12c>
 80070c8:	80c0030b 	ldhu	r3,12(r16)
 80070cc:	18c20014 	ori	r3,r3,2048
 80070d0:	80c0030d 	sth	r3,12(r16)
 80070d4:	00c80004 	movi	r3,8192
 80070d8:	10c03c1e 	bne	r2,r3,80071cc <__smakebuf_r+0x154>
 80070dc:	8140038f 	ldh	r5,14(r16)
 80070e0:	8809883a 	mov	r4,r17
 80070e4:	800b1340 	call	800b134 <_isatty_r>
 80070e8:	10004e26 	beq	r2,zero,8007224 <__smakebuf_r+0x1ac>
 80070ec:	8080030b 	ldhu	r2,12(r16)
 80070f0:	04c00044 	movi	r19,1
 80070f4:	80c010c4 	addi	r3,r16,67
 80070f8:	14c4b03a 	or	r2,r2,r19
 80070fc:	8080030d 	sth	r2,12(r16)
 8007100:	80c00015 	stw	r3,0(r16)
 8007104:	80c00415 	stw	r3,16(r16)
 8007108:	84c00515 	stw	r19,20(r16)
 800710c:	04810004 	movi	r18,1024
 8007110:	00000706 	br	8007130 <__smakebuf_r+0xb8>
 8007114:	8080030b 	ldhu	r2,12(r16)
 8007118:	10c0200c 	andi	r3,r2,128
 800711c:	18001f1e 	bne	r3,zero,800719c <__smakebuf_r+0x124>
 8007120:	04810004 	movi	r18,1024
 8007124:	10820014 	ori	r2,r2,2048
 8007128:	8080030d 	sth	r2,12(r16)
 800712c:	0027883a 	mov	r19,zero
 8007130:	8809883a 	mov	r4,r17
 8007134:	900b883a 	mov	r5,r18
 8007138:	80072300 	call	8007230 <_malloc_r>
 800713c:	10002e26 	beq	r2,zero,80071f8 <__smakebuf_r+0x180>
 8007140:	80c0030b 	ldhu	r3,12(r16)
 8007144:	01020034 	movhi	r4,2048
 8007148:	21187304 	addi	r4,r4,25036
 800714c:	89000f15 	stw	r4,60(r17)
 8007150:	18c02014 	ori	r3,r3,128
 8007154:	80c0030d 	sth	r3,12(r16)
 8007158:	80800015 	stw	r2,0(r16)
 800715c:	80800415 	stw	r2,16(r16)
 8007160:	84800515 	stw	r18,20(r16)
 8007164:	98001c1e 	bne	r19,zero,80071d8 <__smakebuf_r+0x160>
 8007168:	dfc01317 	ldw	ra,76(sp)
 800716c:	dcc01217 	ldw	r19,72(sp)
 8007170:	dc801117 	ldw	r18,68(sp)
 8007174:	dc401017 	ldw	r17,64(sp)
 8007178:	dc000f17 	ldw	r16,60(sp)
 800717c:	dec01404 	addi	sp,sp,80
 8007180:	f800283a 	ret
 8007184:	288010c4 	addi	r2,r5,67
 8007188:	28800015 	stw	r2,0(r5)
 800718c:	28800415 	stw	r2,16(r5)
 8007190:	00800044 	movi	r2,1
 8007194:	28800515 	stw	r2,20(r5)
 8007198:	f800283a 	ret
 800719c:	04801004 	movi	r18,64
 80071a0:	003fe006 	br	8007124 <__alt_data_end+0xfc007124>
 80071a4:	81000a17 	ldw	r4,40(r16)
 80071a8:	00c20074 	movhi	r3,2049
 80071ac:	18e58004 	addi	r3,r3,-27136
 80071b0:	20ffc51e 	bne	r4,r3,80070c8 <__alt_data_end+0xfc0070c8>
 80071b4:	80c0030b 	ldhu	r3,12(r16)
 80071b8:	01010004 	movi	r4,1024
 80071bc:	81001315 	stw	r4,76(r16)
 80071c0:	1906b03a 	or	r3,r3,r4
 80071c4:	80c0030d 	sth	r3,12(r16)
 80071c8:	003fc206 	br	80070d4 <__alt_data_end+0xfc0070d4>
 80071cc:	0027883a 	mov	r19,zero
 80071d0:	04810004 	movi	r18,1024
 80071d4:	003fd606 	br	8007130 <__alt_data_end+0xfc007130>
 80071d8:	8140038f 	ldh	r5,14(r16)
 80071dc:	8809883a 	mov	r4,r17
 80071e0:	800b1340 	call	800b134 <_isatty_r>
 80071e4:	103fe026 	beq	r2,zero,8007168 <__alt_data_end+0xfc007168>
 80071e8:	8080030b 	ldhu	r2,12(r16)
 80071ec:	10800054 	ori	r2,r2,1
 80071f0:	8080030d 	sth	r2,12(r16)
 80071f4:	003fdc06 	br	8007168 <__alt_data_end+0xfc007168>
 80071f8:	8080030b 	ldhu	r2,12(r16)
 80071fc:	10c0800c 	andi	r3,r2,512
 8007200:	183fd91e 	bne	r3,zero,8007168 <__alt_data_end+0xfc007168>
 8007204:	10800094 	ori	r2,r2,2
 8007208:	80c010c4 	addi	r3,r16,67
 800720c:	8080030d 	sth	r2,12(r16)
 8007210:	00800044 	movi	r2,1
 8007214:	80c00015 	stw	r3,0(r16)
 8007218:	80c00415 	stw	r3,16(r16)
 800721c:	80800515 	stw	r2,20(r16)
 8007220:	003fd106 	br	8007168 <__alt_data_end+0xfc007168>
 8007224:	04c00044 	movi	r19,1
 8007228:	04810004 	movi	r18,1024
 800722c:	003fc006 	br	8007130 <__alt_data_end+0xfc007130>

08007230 <_malloc_r>:
 8007230:	defff504 	addi	sp,sp,-44
 8007234:	dc800315 	stw	r18,12(sp)
 8007238:	dfc00a15 	stw	ra,40(sp)
 800723c:	df000915 	stw	fp,36(sp)
 8007240:	ddc00815 	stw	r23,32(sp)
 8007244:	dd800715 	stw	r22,28(sp)
 8007248:	dd400615 	stw	r21,24(sp)
 800724c:	dd000515 	stw	r20,20(sp)
 8007250:	dcc00415 	stw	r19,16(sp)
 8007254:	dc400215 	stw	r17,8(sp)
 8007258:	dc000115 	stw	r16,4(sp)
 800725c:	288002c4 	addi	r2,r5,11
 8007260:	00c00584 	movi	r3,22
 8007264:	2025883a 	mov	r18,r4
 8007268:	18802a2e 	bgeu	r3,r2,8007314 <_malloc_r+0xe4>
 800726c:	047ffe04 	movi	r17,-8
 8007270:	1462703a 	and	r17,r2,r17
 8007274:	88009e16 	blt	r17,zero,80074f0 <_malloc_r+0x2c0>
 8007278:	89409d36 	bltu	r17,r5,80074f0 <_malloc_r+0x2c0>
 800727c:	800f13c0 	call	800f13c <__malloc_lock>
 8007280:	00807dc4 	movi	r2,503
 8007284:	14402736 	bltu	r2,r17,8007324 <_malloc_r+0xf4>
 8007288:	8806d0fa 	srli	r3,r17,3
 800728c:	04c20074 	movhi	r19,2049
 8007290:	9cc8ad04 	addi	r19,r19,8884
 8007294:	18c5883a 	add	r2,r3,r3
 8007298:	1085883a 	add	r2,r2,r2
 800729c:	1085883a 	add	r2,r2,r2
 80072a0:	9885883a 	add	r2,r19,r2
 80072a4:	14000317 	ldw	r16,12(r2)
 80072a8:	80814a26 	beq	r16,r2,80077d4 <_malloc_r+0x5a4>
 80072ac:	80c00117 	ldw	r3,4(r16)
 80072b0:	81000317 	ldw	r4,12(r16)
 80072b4:	00bfff04 	movi	r2,-4
 80072b8:	1884703a 	and	r2,r3,r2
 80072bc:	81400217 	ldw	r5,8(r16)
 80072c0:	8085883a 	add	r2,r16,r2
 80072c4:	10c00117 	ldw	r3,4(r2)
 80072c8:	29000315 	stw	r4,12(r5)
 80072cc:	21400215 	stw	r5,8(r4)
 80072d0:	18c00054 	ori	r3,r3,1
 80072d4:	10c00115 	stw	r3,4(r2)
 80072d8:	9009883a 	mov	r4,r18
 80072dc:	800f15c0 	call	800f15c <__malloc_unlock>
 80072e0:	80800204 	addi	r2,r16,8
 80072e4:	dfc00a17 	ldw	ra,40(sp)
 80072e8:	df000917 	ldw	fp,36(sp)
 80072ec:	ddc00817 	ldw	r23,32(sp)
 80072f0:	dd800717 	ldw	r22,28(sp)
 80072f4:	dd400617 	ldw	r21,24(sp)
 80072f8:	dd000517 	ldw	r20,20(sp)
 80072fc:	dcc00417 	ldw	r19,16(sp)
 8007300:	dc800317 	ldw	r18,12(sp)
 8007304:	dc400217 	ldw	r17,8(sp)
 8007308:	dc000117 	ldw	r16,4(sp)
 800730c:	dec00b04 	addi	sp,sp,44
 8007310:	f800283a 	ret
 8007314:	04400404 	movi	r17,16
 8007318:	89407536 	bltu	r17,r5,80074f0 <_malloc_r+0x2c0>
 800731c:	800f13c0 	call	800f13c <__malloc_lock>
 8007320:	003fd906 	br	8007288 <__alt_data_end+0xfc007288>
 8007324:	8806d27a 	srli	r3,r17,9
 8007328:	18007526 	beq	r3,zero,8007500 <_malloc_r+0x2d0>
 800732c:	00800104 	movi	r2,4
 8007330:	10c0ef36 	bltu	r2,r3,80076f0 <_malloc_r+0x4c0>
 8007334:	8806d1ba 	srli	r3,r17,6
 8007338:	19c00e04 	addi	r7,r3,56
 800733c:	39cb883a 	add	r5,r7,r7
 8007340:	04c20074 	movhi	r19,2049
 8007344:	294b883a 	add	r5,r5,r5
 8007348:	9cc8ad04 	addi	r19,r19,8884
 800734c:	294b883a 	add	r5,r5,r5
 8007350:	994b883a 	add	r5,r19,r5
 8007354:	2c000317 	ldw	r16,12(r5)
 8007358:	2c000e26 	beq	r5,r16,8007394 <_malloc_r+0x164>
 800735c:	80800117 	ldw	r2,4(r16)
 8007360:	01bfff04 	movi	r6,-4
 8007364:	010003c4 	movi	r4,15
 8007368:	1184703a 	and	r2,r2,r6
 800736c:	1447c83a 	sub	r3,r2,r17
 8007370:	20c00716 	blt	r4,r3,8007390 <_malloc_r+0x160>
 8007374:	1800650e 	bge	r3,zero,800750c <_malloc_r+0x2dc>
 8007378:	84000317 	ldw	r16,12(r16)
 800737c:	2c000526 	beq	r5,r16,8007394 <_malloc_r+0x164>
 8007380:	80800117 	ldw	r2,4(r16)
 8007384:	1184703a 	and	r2,r2,r6
 8007388:	1447c83a 	sub	r3,r2,r17
 800738c:	20fff90e 	bge	r4,r3,8007374 <__alt_data_end+0xfc007374>
 8007390:	39ffffc4 	addi	r7,r7,-1
 8007394:	38c00044 	addi	r3,r7,1
 8007398:	01820074 	movhi	r6,2049
 800739c:	9c000417 	ldw	r16,16(r19)
 80073a0:	3188ad04 	addi	r6,r6,8884
 80073a4:	32400204 	addi	r9,r6,8
 80073a8:	82410326 	beq	r16,r9,80077b8 <_malloc_r+0x588>
 80073ac:	81000117 	ldw	r4,4(r16)
 80073b0:	00bfff04 	movi	r2,-4
 80073b4:	208e703a 	and	r7,r4,r2
 80073b8:	3c45c83a 	sub	r2,r7,r17
 80073bc:	010003c4 	movi	r4,15
 80073c0:	2080ee16 	blt	r4,r2,800777c <_malloc_r+0x54c>
 80073c4:	32400515 	stw	r9,20(r6)
 80073c8:	32400415 	stw	r9,16(r6)
 80073cc:	1000510e 	bge	r2,zero,8007514 <_malloc_r+0x2e4>
 80073d0:	00807fc4 	movi	r2,511
 80073d4:	11c0ce36 	bltu	r2,r7,8007710 <_malloc_r+0x4e0>
 80073d8:	3808d0fa 	srli	r4,r7,3
 80073dc:	01c00044 	movi	r7,1
 80073e0:	30800117 	ldw	r2,4(r6)
 80073e4:	210b883a 	add	r5,r4,r4
 80073e8:	294b883a 	add	r5,r5,r5
 80073ec:	2009d0ba 	srai	r4,r4,2
 80073f0:	294b883a 	add	r5,r5,r5
 80073f4:	298b883a 	add	r5,r5,r6
 80073f8:	2a000217 	ldw	r8,8(r5)
 80073fc:	3908983a 	sll	r4,r7,r4
 8007400:	81400315 	stw	r5,12(r16)
 8007404:	82000215 	stw	r8,8(r16)
 8007408:	2088b03a 	or	r4,r4,r2
 800740c:	2c000215 	stw	r16,8(r5)
 8007410:	31000115 	stw	r4,4(r6)
 8007414:	44000315 	stw	r16,12(r8)
 8007418:	1805d0ba 	srai	r2,r3,2
 800741c:	01400044 	movi	r5,1
 8007420:	288a983a 	sll	r5,r5,r2
 8007424:	21404336 	bltu	r4,r5,8007534 <_malloc_r+0x304>
 8007428:	2144703a 	and	r2,r4,r5
 800742c:	10000a1e 	bne	r2,zero,8007458 <_malloc_r+0x228>
 8007430:	00bfff04 	movi	r2,-4
 8007434:	294b883a 	add	r5,r5,r5
 8007438:	1886703a 	and	r3,r3,r2
 800743c:	2144703a 	and	r2,r4,r5
 8007440:	18c00104 	addi	r3,r3,4
 8007444:	1000041e 	bne	r2,zero,8007458 <_malloc_r+0x228>
 8007448:	294b883a 	add	r5,r5,r5
 800744c:	2144703a 	and	r2,r4,r5
 8007450:	18c00104 	addi	r3,r3,4
 8007454:	103ffc26 	beq	r2,zero,8007448 <__alt_data_end+0xfc007448>
 8007458:	023fff04 	movi	r8,-4
 800745c:	01c003c4 	movi	r7,15
 8007460:	18c5883a 	add	r2,r3,r3
 8007464:	1085883a 	add	r2,r2,r2
 8007468:	1085883a 	add	r2,r2,r2
 800746c:	9895883a 	add	r10,r19,r2
 8007470:	52c00304 	addi	r11,r10,12
 8007474:	1819883a 	mov	r12,r3
 8007478:	5c000017 	ldw	r16,0(r11)
 800747c:	59bffd04 	addi	r6,r11,-12
 8007480:	8180041e 	bne	r16,r6,8007494 <_malloc_r+0x264>
 8007484:	0000ce06 	br	80077c0 <_malloc_r+0x590>
 8007488:	2000d70e 	bge	r4,zero,80077e8 <_malloc_r+0x5b8>
 800748c:	84000317 	ldw	r16,12(r16)
 8007490:	8180cb26 	beq	r16,r6,80077c0 <_malloc_r+0x590>
 8007494:	80800117 	ldw	r2,4(r16)
 8007498:	1204703a 	and	r2,r2,r8
 800749c:	1449c83a 	sub	r4,r2,r17
 80074a0:	393ff90e 	bge	r7,r4,8007488 <__alt_data_end+0xfc007488>
 80074a4:	80800317 	ldw	r2,12(r16)
 80074a8:	80c00217 	ldw	r3,8(r16)
 80074ac:	89400054 	ori	r5,r17,1
 80074b0:	81400115 	stw	r5,4(r16)
 80074b4:	18800315 	stw	r2,12(r3)
 80074b8:	10c00215 	stw	r3,8(r2)
 80074bc:	8463883a 	add	r17,r16,r17
 80074c0:	9c400515 	stw	r17,20(r19)
 80074c4:	9c400415 	stw	r17,16(r19)
 80074c8:	20800054 	ori	r2,r4,1
 80074cc:	88800115 	stw	r2,4(r17)
 80074d0:	8a400315 	stw	r9,12(r17)
 80074d4:	8a400215 	stw	r9,8(r17)
 80074d8:	8923883a 	add	r17,r17,r4
 80074dc:	89000015 	stw	r4,0(r17)
 80074e0:	9009883a 	mov	r4,r18
 80074e4:	800f15c0 	call	800f15c <__malloc_unlock>
 80074e8:	80800204 	addi	r2,r16,8
 80074ec:	003f7d06 	br	80072e4 <__alt_data_end+0xfc0072e4>
 80074f0:	00800304 	movi	r2,12
 80074f4:	90800015 	stw	r2,0(r18)
 80074f8:	0005883a 	mov	r2,zero
 80074fc:	003f7906 	br	80072e4 <__alt_data_end+0xfc0072e4>
 8007500:	01401f84 	movi	r5,126
 8007504:	01c00fc4 	movi	r7,63
 8007508:	003f8d06 	br	8007340 <__alt_data_end+0xfc007340>
 800750c:	81000317 	ldw	r4,12(r16)
 8007510:	003f6a06 	br	80072bc <__alt_data_end+0xfc0072bc>
 8007514:	81c5883a 	add	r2,r16,r7
 8007518:	10c00117 	ldw	r3,4(r2)
 800751c:	9009883a 	mov	r4,r18
 8007520:	18c00054 	ori	r3,r3,1
 8007524:	10c00115 	stw	r3,4(r2)
 8007528:	800f15c0 	call	800f15c <__malloc_unlock>
 800752c:	80800204 	addi	r2,r16,8
 8007530:	003f6c06 	br	80072e4 <__alt_data_end+0xfc0072e4>
 8007534:	9c000217 	ldw	r16,8(r19)
 8007538:	00bfff04 	movi	r2,-4
 800753c:	85800117 	ldw	r22,4(r16)
 8007540:	b0ac703a 	and	r22,r22,r2
 8007544:	b4400336 	bltu	r22,r17,8007554 <_malloc_r+0x324>
 8007548:	b445c83a 	sub	r2,r22,r17
 800754c:	00c003c4 	movi	r3,15
 8007550:	18805d16 	blt	r3,r2,80076c8 <_malloc_r+0x498>
 8007554:	05c20074 	movhi	r23,2049
 8007558:	00820074 	movhi	r2,2049
 800755c:	bdce3404 	addi	r23,r23,14544
 8007560:	10950204 	addi	r2,r2,21512
 8007564:	15400017 	ldw	r21,0(r2)
 8007568:	b9000017 	ldw	r4,0(r23)
 800756c:	00ffffc4 	movi	r3,-1
 8007570:	858d883a 	add	r6,r16,r22
 8007574:	8d6b883a 	add	r21,r17,r21
 8007578:	20c0e426 	beq	r4,r3,800790c <_malloc_r+0x6dc>
 800757c:	ad4403c4 	addi	r21,r21,4111
 8007580:	00fc0004 	movi	r3,-4096
 8007584:	a8ea703a 	and	r21,r21,r3
 8007588:	9009883a 	mov	r4,r18
 800758c:	a80b883a 	mov	r5,r21
 8007590:	d9800015 	stw	r6,0(sp)
 8007594:	80094d40 	call	80094d4 <_sbrk_r>
 8007598:	00ffffc4 	movi	r3,-1
 800759c:	1029883a 	mov	r20,r2
 80075a0:	d9800017 	ldw	r6,0(sp)
 80075a4:	10c0a426 	beq	r2,r3,8007838 <_malloc_r+0x608>
 80075a8:	1180a236 	bltu	r2,r6,8007834 <_malloc_r+0x604>
 80075ac:	07020074 	movhi	fp,2049
 80075b0:	e7150a04 	addi	fp,fp,21544
 80075b4:	e0c00017 	ldw	r3,0(fp)
 80075b8:	a8c7883a 	add	r3,r21,r3
 80075bc:	e0c00015 	stw	r3,0(fp)
 80075c0:	3500da26 	beq	r6,r20,800792c <_malloc_r+0x6fc>
 80075c4:	b9000017 	ldw	r4,0(r23)
 80075c8:	00bfffc4 	movi	r2,-1
 80075cc:	2080e426 	beq	r4,r2,8007960 <_malloc_r+0x730>
 80075d0:	a185c83a 	sub	r2,r20,r6
 80075d4:	1885883a 	add	r2,r3,r2
 80075d8:	e0800015 	stw	r2,0(fp)
 80075dc:	a0c001cc 	andi	r3,r20,7
 80075e0:	1800b526 	beq	r3,zero,80078b8 <_malloc_r+0x688>
 80075e4:	a0e9c83a 	sub	r20,r20,r3
 80075e8:	00840204 	movi	r2,4104
 80075ec:	a5000204 	addi	r20,r20,8
 80075f0:	10c7c83a 	sub	r3,r2,r3
 80075f4:	a545883a 	add	r2,r20,r21
 80075f8:	1083ffcc 	andi	r2,r2,4095
 80075fc:	18abc83a 	sub	r21,r3,r2
 8007600:	9009883a 	mov	r4,r18
 8007604:	a80b883a 	mov	r5,r21
 8007608:	80094d40 	call	80094d4 <_sbrk_r>
 800760c:	00ffffc4 	movi	r3,-1
 8007610:	10c0d026 	beq	r2,r3,8007954 <_malloc_r+0x724>
 8007614:	1507c83a 	sub	r3,r2,r20
 8007618:	a8c7883a 	add	r3,r21,r3
 800761c:	18c00054 	ori	r3,r3,1
 8007620:	e0800017 	ldw	r2,0(fp)
 8007624:	9d000215 	stw	r20,8(r19)
 8007628:	a0c00115 	stw	r3,4(r20)
 800762c:	a887883a 	add	r3,r21,r2
 8007630:	e0c00015 	stw	r3,0(fp)
 8007634:	84c00e26 	beq	r16,r19,8007670 <_malloc_r+0x440>
 8007638:	018003c4 	movi	r6,15
 800763c:	3580a02e 	bgeu	r6,r22,80078c0 <_malloc_r+0x690>
 8007640:	81400117 	ldw	r5,4(r16)
 8007644:	013ffe04 	movi	r4,-8
 8007648:	b0bffd04 	addi	r2,r22,-12
 800764c:	1104703a 	and	r2,r2,r4
 8007650:	2900004c 	andi	r4,r5,1
 8007654:	1108b03a 	or	r4,r2,r4
 8007658:	81000115 	stw	r4,4(r16)
 800765c:	01400144 	movi	r5,5
 8007660:	8089883a 	add	r4,r16,r2
 8007664:	21400115 	stw	r5,4(r4)
 8007668:	21400215 	stw	r5,8(r4)
 800766c:	3080c036 	bltu	r6,r2,8007970 <_malloc_r+0x740>
 8007670:	00820074 	movhi	r2,2049
 8007674:	10950104 	addi	r2,r2,21508
 8007678:	11000017 	ldw	r4,0(r2)
 800767c:	20c0012e 	bgeu	r4,r3,8007684 <_malloc_r+0x454>
 8007680:	10c00015 	stw	r3,0(r2)
 8007684:	00820074 	movhi	r2,2049
 8007688:	10950004 	addi	r2,r2,21504
 800768c:	11000017 	ldw	r4,0(r2)
 8007690:	9c000217 	ldw	r16,8(r19)
 8007694:	20c0012e 	bgeu	r4,r3,800769c <_malloc_r+0x46c>
 8007698:	10c00015 	stw	r3,0(r2)
 800769c:	80c00117 	ldw	r3,4(r16)
 80076a0:	00bfff04 	movi	r2,-4
 80076a4:	1886703a 	and	r3,r3,r2
 80076a8:	1c45c83a 	sub	r2,r3,r17
 80076ac:	1c400236 	bltu	r3,r17,80076b8 <_malloc_r+0x488>
 80076b0:	00c003c4 	movi	r3,15
 80076b4:	18800416 	blt	r3,r2,80076c8 <_malloc_r+0x498>
 80076b8:	9009883a 	mov	r4,r18
 80076bc:	800f15c0 	call	800f15c <__malloc_unlock>
 80076c0:	0005883a 	mov	r2,zero
 80076c4:	003f0706 	br	80072e4 <__alt_data_end+0xfc0072e4>
 80076c8:	88c00054 	ori	r3,r17,1
 80076cc:	80c00115 	stw	r3,4(r16)
 80076d0:	8463883a 	add	r17,r16,r17
 80076d4:	10800054 	ori	r2,r2,1
 80076d8:	9c400215 	stw	r17,8(r19)
 80076dc:	88800115 	stw	r2,4(r17)
 80076e0:	9009883a 	mov	r4,r18
 80076e4:	800f15c0 	call	800f15c <__malloc_unlock>
 80076e8:	80800204 	addi	r2,r16,8
 80076ec:	003efd06 	br	80072e4 <__alt_data_end+0xfc0072e4>
 80076f0:	00800504 	movi	r2,20
 80076f4:	10c0482e 	bgeu	r2,r3,8007818 <_malloc_r+0x5e8>
 80076f8:	00801504 	movi	r2,84
 80076fc:	10c06836 	bltu	r2,r3,80078a0 <_malloc_r+0x670>
 8007700:	8806d33a 	srli	r3,r17,12
 8007704:	19c01b84 	addi	r7,r3,110
 8007708:	39cb883a 	add	r5,r7,r7
 800770c:	003f0c06 	br	8007340 <__alt_data_end+0xfc007340>
 8007710:	3804d27a 	srli	r2,r7,9
 8007714:	01000104 	movi	r4,4
 8007718:	2080422e 	bgeu	r4,r2,8007824 <_malloc_r+0x5f4>
 800771c:	01000504 	movi	r4,20
 8007720:	20807c36 	bltu	r4,r2,8007914 <_malloc_r+0x6e4>
 8007724:	110016c4 	addi	r4,r2,91
 8007728:	210b883a 	add	r5,r4,r4
 800772c:	294b883a 	add	r5,r5,r5
 8007730:	294b883a 	add	r5,r5,r5
 8007734:	994b883a 	add	r5,r19,r5
 8007738:	28800217 	ldw	r2,8(r5)
 800773c:	02020074 	movhi	r8,2049
 8007740:	4208ad04 	addi	r8,r8,8884
 8007744:	11406326 	beq	r2,r5,80078d4 <_malloc_r+0x6a4>
 8007748:	01bfff04 	movi	r6,-4
 800774c:	11000117 	ldw	r4,4(r2)
 8007750:	2188703a 	and	r4,r4,r6
 8007754:	3900022e 	bgeu	r7,r4,8007760 <_malloc_r+0x530>
 8007758:	10800217 	ldw	r2,8(r2)
 800775c:	28bffb1e 	bne	r5,r2,800774c <__alt_data_end+0xfc00774c>
 8007760:	11800317 	ldw	r6,12(r2)
 8007764:	99000117 	ldw	r4,4(r19)
 8007768:	81800315 	stw	r6,12(r16)
 800776c:	80800215 	stw	r2,8(r16)
 8007770:	34000215 	stw	r16,8(r6)
 8007774:	14000315 	stw	r16,12(r2)
 8007778:	003f2706 	br	8007418 <__alt_data_end+0xfc007418>
 800777c:	88c00054 	ori	r3,r17,1
 8007780:	80c00115 	stw	r3,4(r16)
 8007784:	8463883a 	add	r17,r16,r17
 8007788:	34400515 	stw	r17,20(r6)
 800778c:	34400415 	stw	r17,16(r6)
 8007790:	10c00054 	ori	r3,r2,1
 8007794:	8a400315 	stw	r9,12(r17)
 8007798:	8a400215 	stw	r9,8(r17)
 800779c:	88c00115 	stw	r3,4(r17)
 80077a0:	88a3883a 	add	r17,r17,r2
 80077a4:	88800015 	stw	r2,0(r17)
 80077a8:	9009883a 	mov	r4,r18
 80077ac:	800f15c0 	call	800f15c <__malloc_unlock>
 80077b0:	80800204 	addi	r2,r16,8
 80077b4:	003ecb06 	br	80072e4 <__alt_data_end+0xfc0072e4>
 80077b8:	31000117 	ldw	r4,4(r6)
 80077bc:	003f1606 	br	8007418 <__alt_data_end+0xfc007418>
 80077c0:	63000044 	addi	r12,r12,1
 80077c4:	608000cc 	andi	r2,r12,3
 80077c8:	5ac00204 	addi	r11,r11,8
 80077cc:	103f2a1e 	bne	r2,zero,8007478 <__alt_data_end+0xfc007478>
 80077d0:	00002106 	br	8007858 <_malloc_r+0x628>
 80077d4:	80800204 	addi	r2,r16,8
 80077d8:	84000517 	ldw	r16,20(r16)
 80077dc:	143eb31e 	bne	r2,r16,80072ac <__alt_data_end+0xfc0072ac>
 80077e0:	18c00084 	addi	r3,r3,2
 80077e4:	003eec06 	br	8007398 <__alt_data_end+0xfc007398>
 80077e8:	8085883a 	add	r2,r16,r2
 80077ec:	10c00117 	ldw	r3,4(r2)
 80077f0:	81000317 	ldw	r4,12(r16)
 80077f4:	81400217 	ldw	r5,8(r16)
 80077f8:	18c00054 	ori	r3,r3,1
 80077fc:	10c00115 	stw	r3,4(r2)
 8007800:	29000315 	stw	r4,12(r5)
 8007804:	21400215 	stw	r5,8(r4)
 8007808:	9009883a 	mov	r4,r18
 800780c:	800f15c0 	call	800f15c <__malloc_unlock>
 8007810:	80800204 	addi	r2,r16,8
 8007814:	003eb306 	br	80072e4 <__alt_data_end+0xfc0072e4>
 8007818:	19c016c4 	addi	r7,r3,91
 800781c:	39cb883a 	add	r5,r7,r7
 8007820:	003ec706 	br	8007340 <__alt_data_end+0xfc007340>
 8007824:	3804d1ba 	srli	r2,r7,6
 8007828:	11000e04 	addi	r4,r2,56
 800782c:	210b883a 	add	r5,r4,r4
 8007830:	003fbe06 	br	800772c <__alt_data_end+0xfc00772c>
 8007834:	84ff5d26 	beq	r16,r19,80075ac <__alt_data_end+0xfc0075ac>
 8007838:	9c000217 	ldw	r16,8(r19)
 800783c:	00bfff04 	movi	r2,-4
 8007840:	80c00117 	ldw	r3,4(r16)
 8007844:	1886703a 	and	r3,r3,r2
 8007848:	003f9706 	br	80076a8 <__alt_data_end+0xfc0076a8>
 800784c:	52800017 	ldw	r10,0(r10)
 8007850:	18ffffc4 	addi	r3,r3,-1
 8007854:	50805c1e 	bne	r10,r2,80079c8 <_malloc_r+0x798>
 8007858:	190000cc 	andi	r4,r3,3
 800785c:	50bffe04 	addi	r2,r10,-8
 8007860:	203ffa1e 	bne	r4,zero,800784c <__alt_data_end+0xfc00784c>
 8007864:	98800117 	ldw	r2,4(r19)
 8007868:	0146303a 	nor	r3,zero,r5
 800786c:	1884703a 	and	r2,r3,r2
 8007870:	98800115 	stw	r2,4(r19)
 8007874:	294b883a 	add	r5,r5,r5
 8007878:	117f2e36 	bltu	r2,r5,8007534 <__alt_data_end+0xfc007534>
 800787c:	283f2d26 	beq	r5,zero,8007534 <__alt_data_end+0xfc007534>
 8007880:	1146703a 	and	r3,r2,r5
 8007884:	1800521e 	bne	r3,zero,80079d0 <_malloc_r+0x7a0>
 8007888:	6007883a 	mov	r3,r12
 800788c:	294b883a 	add	r5,r5,r5
 8007890:	1148703a 	and	r4,r2,r5
 8007894:	18c00104 	addi	r3,r3,4
 8007898:	203ffc26 	beq	r4,zero,800788c <__alt_data_end+0xfc00788c>
 800789c:	003ef006 	br	8007460 <__alt_data_end+0xfc007460>
 80078a0:	00805504 	movi	r2,340
 80078a4:	10c01336 	bltu	r2,r3,80078f4 <_malloc_r+0x6c4>
 80078a8:	8806d3fa 	srli	r3,r17,15
 80078ac:	19c01dc4 	addi	r7,r3,119
 80078b0:	39cb883a 	add	r5,r7,r7
 80078b4:	003ea206 	br	8007340 <__alt_data_end+0xfc007340>
 80078b8:	00c40004 	movi	r3,4096
 80078bc:	003f4d06 	br	80075f4 <__alt_data_end+0xfc0075f4>
 80078c0:	00800044 	movi	r2,1
 80078c4:	a0800115 	stw	r2,4(r20)
 80078c8:	a021883a 	mov	r16,r20
 80078cc:	0007883a 	mov	r3,zero
 80078d0:	003f7506 	br	80076a8 <__alt_data_end+0xfc0076a8>
 80078d4:	200bd0ba 	srai	r5,r4,2
 80078d8:	01800044 	movi	r6,1
 80078dc:	41000117 	ldw	r4,4(r8)
 80078e0:	314a983a 	sll	r5,r6,r5
 80078e4:	100d883a 	mov	r6,r2
 80078e8:	2908b03a 	or	r4,r5,r4
 80078ec:	41000115 	stw	r4,4(r8)
 80078f0:	003f9d06 	br	8007768 <__alt_data_end+0xfc007768>
 80078f4:	00815504 	movi	r2,1364
 80078f8:	10c01336 	bltu	r2,r3,8007948 <_malloc_r+0x718>
 80078fc:	8806d4ba 	srli	r3,r17,18
 8007900:	19c01f04 	addi	r7,r3,124
 8007904:	39cb883a 	add	r5,r7,r7
 8007908:	003e8d06 	br	8007340 <__alt_data_end+0xfc007340>
 800790c:	ad400404 	addi	r21,r21,16
 8007910:	003f1d06 	br	8007588 <__alt_data_end+0xfc007588>
 8007914:	01001504 	movi	r4,84
 8007918:	20801c36 	bltu	r4,r2,800798c <_malloc_r+0x75c>
 800791c:	3804d33a 	srli	r2,r7,12
 8007920:	11001b84 	addi	r4,r2,110
 8007924:	210b883a 	add	r5,r4,r4
 8007928:	003f8006 	br	800772c <__alt_data_end+0xfc00772c>
 800792c:	3083ffcc 	andi	r2,r6,4095
 8007930:	103f241e 	bne	r2,zero,80075c4 <__alt_data_end+0xfc0075c4>
 8007934:	99000217 	ldw	r4,8(r19)
 8007938:	ad85883a 	add	r2,r21,r22
 800793c:	10800054 	ori	r2,r2,1
 8007940:	20800115 	stw	r2,4(r4)
 8007944:	003f4a06 	br	8007670 <__alt_data_end+0xfc007670>
 8007948:	01403f04 	movi	r5,252
 800794c:	01c01f84 	movi	r7,126
 8007950:	003e7b06 	br	8007340 <__alt_data_end+0xfc007340>
 8007954:	00c00044 	movi	r3,1
 8007958:	002b883a 	mov	r21,zero
 800795c:	003f3006 	br	8007620 <__alt_data_end+0xfc007620>
 8007960:	00820074 	movhi	r2,2049
 8007964:	108e3404 	addi	r2,r2,14544
 8007968:	15000015 	stw	r20,0(r2)
 800796c:	003f1b06 	br	80075dc <__alt_data_end+0xfc0075dc>
 8007970:	9009883a 	mov	r4,r18
 8007974:	81400204 	addi	r5,r16,8
 8007978:	80066940 	call	8006694 <_free_r>
 800797c:	00820074 	movhi	r2,2049
 8007980:	10950a04 	addi	r2,r2,21544
 8007984:	10c00017 	ldw	r3,0(r2)
 8007988:	003f3906 	br	8007670 <__alt_data_end+0xfc007670>
 800798c:	01005504 	movi	r4,340
 8007990:	20800436 	bltu	r4,r2,80079a4 <_malloc_r+0x774>
 8007994:	3804d3fa 	srli	r2,r7,15
 8007998:	11001dc4 	addi	r4,r2,119
 800799c:	210b883a 	add	r5,r4,r4
 80079a0:	003f6206 	br	800772c <__alt_data_end+0xfc00772c>
 80079a4:	01015504 	movi	r4,1364
 80079a8:	20800436 	bltu	r4,r2,80079bc <_malloc_r+0x78c>
 80079ac:	3804d4ba 	srli	r2,r7,18
 80079b0:	11001f04 	addi	r4,r2,124
 80079b4:	210b883a 	add	r5,r4,r4
 80079b8:	003f5c06 	br	800772c <__alt_data_end+0xfc00772c>
 80079bc:	01403f04 	movi	r5,252
 80079c0:	01001f84 	movi	r4,126
 80079c4:	003f5906 	br	800772c <__alt_data_end+0xfc00772c>
 80079c8:	98800117 	ldw	r2,4(r19)
 80079cc:	003fa906 	br	8007874 <__alt_data_end+0xfc007874>
 80079d0:	6007883a 	mov	r3,r12
 80079d4:	003ea206 	br	8007460 <__alt_data_end+0xfc007460>

080079d8 <memchr>:
 80079d8:	208000cc 	andi	r2,r4,3
 80079dc:	280f883a 	mov	r7,r5
 80079e0:	10003526 	beq	r2,zero,8007ab8 <memchr+0xe0>
 80079e4:	30bfffc4 	addi	r2,r6,-1
 80079e8:	30001b26 	beq	r6,zero,8007a58 <memchr+0x80>
 80079ec:	21800003 	ldbu	r6,0(r4)
 80079f0:	28c03fcc 	andi	r3,r5,255
 80079f4:	30c01a26 	beq	r6,r3,8007a60 <memchr+0x88>
 80079f8:	180d883a 	mov	r6,r3
 80079fc:	00000406 	br	8007a10 <memchr+0x38>
 8007a00:	10001526 	beq	r2,zero,8007a58 <memchr+0x80>
 8007a04:	20c00003 	ldbu	r3,0(r4)
 8007a08:	10bfffc4 	addi	r2,r2,-1
 8007a0c:	19801426 	beq	r3,r6,8007a60 <memchr+0x88>
 8007a10:	21000044 	addi	r4,r4,1
 8007a14:	20c000cc 	andi	r3,r4,3
 8007a18:	183ff91e 	bne	r3,zero,8007a00 <__alt_data_end+0xfc007a00>
 8007a1c:	024000c4 	movi	r9,3
 8007a20:	48801136 	bltu	r9,r2,8007a68 <memchr+0x90>
 8007a24:	10000c26 	beq	r2,zero,8007a58 <memchr+0x80>
 8007a28:	20c00003 	ldbu	r3,0(r4)
 8007a2c:	29403fcc 	andi	r5,r5,255
 8007a30:	19400b26 	beq	r3,r5,8007a60 <memchr+0x88>
 8007a34:	20c00044 	addi	r3,r4,1
 8007a38:	2085883a 	add	r2,r4,r2
 8007a3c:	39803fcc 	andi	r6,r7,255
 8007a40:	00000306 	br	8007a50 <memchr+0x78>
 8007a44:	18c00044 	addi	r3,r3,1
 8007a48:	197fffc3 	ldbu	r5,-1(r3)
 8007a4c:	29800426 	beq	r5,r6,8007a60 <memchr+0x88>
 8007a50:	1809883a 	mov	r4,r3
 8007a54:	18bffb1e 	bne	r3,r2,8007a44 <__alt_data_end+0xfc007a44>
 8007a58:	0005883a 	mov	r2,zero
 8007a5c:	f800283a 	ret
 8007a60:	2005883a 	mov	r2,r4
 8007a64:	f800283a 	ret
 8007a68:	28c03fcc 	andi	r3,r5,255
 8007a6c:	1810923a 	slli	r8,r3,8
 8007a70:	02ffbff4 	movhi	r11,65279
 8007a74:	02a02074 	movhi	r10,32897
 8007a78:	40c6b03a 	or	r3,r8,r3
 8007a7c:	1810943a 	slli	r8,r3,16
 8007a80:	5affbfc4 	addi	r11,r11,-257
 8007a84:	52a02004 	addi	r10,r10,-32640
 8007a88:	40d0b03a 	or	r8,r8,r3
 8007a8c:	20c00017 	ldw	r3,0(r4)
 8007a90:	40c6f03a 	xor	r3,r8,r3
 8007a94:	1acd883a 	add	r6,r3,r11
 8007a98:	00c6303a 	nor	r3,zero,r3
 8007a9c:	30c6703a 	and	r3,r6,r3
 8007aa0:	1a86703a 	and	r3,r3,r10
 8007aa4:	183fdf1e 	bne	r3,zero,8007a24 <__alt_data_end+0xfc007a24>
 8007aa8:	10bfff04 	addi	r2,r2,-4
 8007aac:	21000104 	addi	r4,r4,4
 8007ab0:	48bff636 	bltu	r9,r2,8007a8c <__alt_data_end+0xfc007a8c>
 8007ab4:	003fdb06 	br	8007a24 <__alt_data_end+0xfc007a24>
 8007ab8:	3005883a 	mov	r2,r6
 8007abc:	003fd706 	br	8007a1c <__alt_data_end+0xfc007a1c>

08007ac0 <memcpy>:
 8007ac0:	deffff04 	addi	sp,sp,-4
 8007ac4:	dc000015 	stw	r16,0(sp)
 8007ac8:	00c003c4 	movi	r3,15
 8007acc:	2005883a 	mov	r2,r4
 8007ad0:	1980432e 	bgeu	r3,r6,8007be0 <memcpy+0x120>
 8007ad4:	2146b03a 	or	r3,r4,r5
 8007ad8:	18c000cc 	andi	r3,r3,3
 8007adc:	1800421e 	bne	r3,zero,8007be8 <memcpy+0x128>
 8007ae0:	343ffc04 	addi	r16,r6,-16
 8007ae4:	8020d13a 	srli	r16,r16,4
 8007ae8:	28c00104 	addi	r3,r5,4
 8007aec:	23400104 	addi	r13,r4,4
 8007af0:	801e913a 	slli	r15,r16,4
 8007af4:	2b000204 	addi	r12,r5,8
 8007af8:	22c00204 	addi	r11,r4,8
 8007afc:	7bc00504 	addi	r15,r15,20
 8007b00:	2a800304 	addi	r10,r5,12
 8007b04:	22400304 	addi	r9,r4,12
 8007b08:	2bdf883a 	add	r15,r5,r15
 8007b0c:	2811883a 	mov	r8,r5
 8007b10:	200f883a 	mov	r7,r4
 8007b14:	41000017 	ldw	r4,0(r8)
 8007b18:	39c00404 	addi	r7,r7,16
 8007b1c:	18c00404 	addi	r3,r3,16
 8007b20:	393ffc15 	stw	r4,-16(r7)
 8007b24:	1bbffc17 	ldw	r14,-16(r3)
 8007b28:	6b400404 	addi	r13,r13,16
 8007b2c:	5ac00404 	addi	r11,r11,16
 8007b30:	6bbffc15 	stw	r14,-16(r13)
 8007b34:	63800017 	ldw	r14,0(r12)
 8007b38:	4a400404 	addi	r9,r9,16
 8007b3c:	42000404 	addi	r8,r8,16
 8007b40:	5bbffc15 	stw	r14,-16(r11)
 8007b44:	53800017 	ldw	r14,0(r10)
 8007b48:	63000404 	addi	r12,r12,16
 8007b4c:	52800404 	addi	r10,r10,16
 8007b50:	4bbffc15 	stw	r14,-16(r9)
 8007b54:	1bffef1e 	bne	r3,r15,8007b14 <__alt_data_end+0xfc007b14>
 8007b58:	81c00044 	addi	r7,r16,1
 8007b5c:	380e913a 	slli	r7,r7,4
 8007b60:	310003cc 	andi	r4,r6,15
 8007b64:	02c000c4 	movi	r11,3
 8007b68:	11c7883a 	add	r3,r2,r7
 8007b6c:	29cb883a 	add	r5,r5,r7
 8007b70:	59001f2e 	bgeu	r11,r4,8007bf0 <memcpy+0x130>
 8007b74:	1813883a 	mov	r9,r3
 8007b78:	2811883a 	mov	r8,r5
 8007b7c:	200f883a 	mov	r7,r4
 8007b80:	42800017 	ldw	r10,0(r8)
 8007b84:	4a400104 	addi	r9,r9,4
 8007b88:	39ffff04 	addi	r7,r7,-4
 8007b8c:	4abfff15 	stw	r10,-4(r9)
 8007b90:	42000104 	addi	r8,r8,4
 8007b94:	59fffa36 	bltu	r11,r7,8007b80 <__alt_data_end+0xfc007b80>
 8007b98:	213fff04 	addi	r4,r4,-4
 8007b9c:	2008d0ba 	srli	r4,r4,2
 8007ba0:	318000cc 	andi	r6,r6,3
 8007ba4:	21000044 	addi	r4,r4,1
 8007ba8:	2109883a 	add	r4,r4,r4
 8007bac:	2109883a 	add	r4,r4,r4
 8007bb0:	1907883a 	add	r3,r3,r4
 8007bb4:	290b883a 	add	r5,r5,r4
 8007bb8:	30000626 	beq	r6,zero,8007bd4 <memcpy+0x114>
 8007bbc:	198d883a 	add	r6,r3,r6
 8007bc0:	29c00003 	ldbu	r7,0(r5)
 8007bc4:	18c00044 	addi	r3,r3,1
 8007bc8:	29400044 	addi	r5,r5,1
 8007bcc:	19ffffc5 	stb	r7,-1(r3)
 8007bd0:	19bffb1e 	bne	r3,r6,8007bc0 <__alt_data_end+0xfc007bc0>
 8007bd4:	dc000017 	ldw	r16,0(sp)
 8007bd8:	dec00104 	addi	sp,sp,4
 8007bdc:	f800283a 	ret
 8007be0:	2007883a 	mov	r3,r4
 8007be4:	003ff406 	br	8007bb8 <__alt_data_end+0xfc007bb8>
 8007be8:	2007883a 	mov	r3,r4
 8007bec:	003ff306 	br	8007bbc <__alt_data_end+0xfc007bbc>
 8007bf0:	200d883a 	mov	r6,r4
 8007bf4:	003ff006 	br	8007bb8 <__alt_data_end+0xfc007bb8>

08007bf8 <memmove>:
 8007bf8:	2005883a 	mov	r2,r4
 8007bfc:	29000b2e 	bgeu	r5,r4,8007c2c <memmove+0x34>
 8007c00:	298f883a 	add	r7,r5,r6
 8007c04:	21c0092e 	bgeu	r4,r7,8007c2c <memmove+0x34>
 8007c08:	2187883a 	add	r3,r4,r6
 8007c0c:	198bc83a 	sub	r5,r3,r6
 8007c10:	30004b26 	beq	r6,zero,8007d40 <memmove+0x148>
 8007c14:	39ffffc4 	addi	r7,r7,-1
 8007c18:	39000003 	ldbu	r4,0(r7)
 8007c1c:	18ffffc4 	addi	r3,r3,-1
 8007c20:	19000005 	stb	r4,0(r3)
 8007c24:	197ffb1e 	bne	r3,r5,8007c14 <__alt_data_end+0xfc007c14>
 8007c28:	f800283a 	ret
 8007c2c:	00c003c4 	movi	r3,15
 8007c30:	1980412e 	bgeu	r3,r6,8007d38 <memmove+0x140>
 8007c34:	1146b03a 	or	r3,r2,r5
 8007c38:	18c000cc 	andi	r3,r3,3
 8007c3c:	1800411e 	bne	r3,zero,8007d44 <memmove+0x14c>
 8007c40:	33fffc04 	addi	r15,r6,-16
 8007c44:	781ed13a 	srli	r15,r15,4
 8007c48:	28c00104 	addi	r3,r5,4
 8007c4c:	13400104 	addi	r13,r2,4
 8007c50:	781c913a 	slli	r14,r15,4
 8007c54:	2b000204 	addi	r12,r5,8
 8007c58:	12c00204 	addi	r11,r2,8
 8007c5c:	73800504 	addi	r14,r14,20
 8007c60:	2a800304 	addi	r10,r5,12
 8007c64:	12400304 	addi	r9,r2,12
 8007c68:	2b9d883a 	add	r14,r5,r14
 8007c6c:	2811883a 	mov	r8,r5
 8007c70:	100f883a 	mov	r7,r2
 8007c74:	41000017 	ldw	r4,0(r8)
 8007c78:	39c00404 	addi	r7,r7,16
 8007c7c:	18c00404 	addi	r3,r3,16
 8007c80:	393ffc15 	stw	r4,-16(r7)
 8007c84:	193ffc17 	ldw	r4,-16(r3)
 8007c88:	6b400404 	addi	r13,r13,16
 8007c8c:	5ac00404 	addi	r11,r11,16
 8007c90:	693ffc15 	stw	r4,-16(r13)
 8007c94:	61000017 	ldw	r4,0(r12)
 8007c98:	4a400404 	addi	r9,r9,16
 8007c9c:	42000404 	addi	r8,r8,16
 8007ca0:	593ffc15 	stw	r4,-16(r11)
 8007ca4:	51000017 	ldw	r4,0(r10)
 8007ca8:	63000404 	addi	r12,r12,16
 8007cac:	52800404 	addi	r10,r10,16
 8007cb0:	493ffc15 	stw	r4,-16(r9)
 8007cb4:	1bbfef1e 	bne	r3,r14,8007c74 <__alt_data_end+0xfc007c74>
 8007cb8:	79000044 	addi	r4,r15,1
 8007cbc:	2008913a 	slli	r4,r4,4
 8007cc0:	328003cc 	andi	r10,r6,15
 8007cc4:	02c000c4 	movi	r11,3
 8007cc8:	1107883a 	add	r3,r2,r4
 8007ccc:	290b883a 	add	r5,r5,r4
 8007cd0:	5a801e2e 	bgeu	r11,r10,8007d4c <memmove+0x154>
 8007cd4:	1813883a 	mov	r9,r3
 8007cd8:	2811883a 	mov	r8,r5
 8007cdc:	500f883a 	mov	r7,r10
 8007ce0:	41000017 	ldw	r4,0(r8)
 8007ce4:	4a400104 	addi	r9,r9,4
 8007ce8:	39ffff04 	addi	r7,r7,-4
 8007cec:	493fff15 	stw	r4,-4(r9)
 8007cf0:	42000104 	addi	r8,r8,4
 8007cf4:	59fffa36 	bltu	r11,r7,8007ce0 <__alt_data_end+0xfc007ce0>
 8007cf8:	513fff04 	addi	r4,r10,-4
 8007cfc:	2008d0ba 	srli	r4,r4,2
 8007d00:	318000cc 	andi	r6,r6,3
 8007d04:	21000044 	addi	r4,r4,1
 8007d08:	2109883a 	add	r4,r4,r4
 8007d0c:	2109883a 	add	r4,r4,r4
 8007d10:	1907883a 	add	r3,r3,r4
 8007d14:	290b883a 	add	r5,r5,r4
 8007d18:	30000926 	beq	r6,zero,8007d40 <memmove+0x148>
 8007d1c:	198d883a 	add	r6,r3,r6
 8007d20:	29c00003 	ldbu	r7,0(r5)
 8007d24:	18c00044 	addi	r3,r3,1
 8007d28:	29400044 	addi	r5,r5,1
 8007d2c:	19ffffc5 	stb	r7,-1(r3)
 8007d30:	19bffb1e 	bne	r3,r6,8007d20 <__alt_data_end+0xfc007d20>
 8007d34:	f800283a 	ret
 8007d38:	1007883a 	mov	r3,r2
 8007d3c:	003ff606 	br	8007d18 <__alt_data_end+0xfc007d18>
 8007d40:	f800283a 	ret
 8007d44:	1007883a 	mov	r3,r2
 8007d48:	003ff406 	br	8007d1c <__alt_data_end+0xfc007d1c>
 8007d4c:	500d883a 	mov	r6,r10
 8007d50:	003ff106 	br	8007d18 <__alt_data_end+0xfc007d18>

08007d54 <memset>:
 8007d54:	20c000cc 	andi	r3,r4,3
 8007d58:	2005883a 	mov	r2,r4
 8007d5c:	18004326 	beq	r3,zero,8007e6c <memset+0x118>
 8007d60:	31ffffc4 	addi	r7,r6,-1
 8007d64:	30004026 	beq	r6,zero,8007e68 <memset+0x114>
 8007d68:	2813883a 	mov	r9,r5
 8007d6c:	200d883a 	mov	r6,r4
 8007d70:	2007883a 	mov	r3,r4
 8007d74:	00000406 	br	8007d88 <memset+0x34>
 8007d78:	3a3fffc4 	addi	r8,r7,-1
 8007d7c:	31800044 	addi	r6,r6,1
 8007d80:	38003926 	beq	r7,zero,8007e68 <memset+0x114>
 8007d84:	400f883a 	mov	r7,r8
 8007d88:	18c00044 	addi	r3,r3,1
 8007d8c:	32400005 	stb	r9,0(r6)
 8007d90:	1a0000cc 	andi	r8,r3,3
 8007d94:	403ff81e 	bne	r8,zero,8007d78 <__alt_data_end+0xfc007d78>
 8007d98:	010000c4 	movi	r4,3
 8007d9c:	21c02d2e 	bgeu	r4,r7,8007e54 <memset+0x100>
 8007da0:	29803fcc 	andi	r6,r5,255
 8007da4:	3008923a 	slli	r4,r6,8
 8007da8:	218cb03a 	or	r6,r4,r6
 8007dac:	3008943a 	slli	r4,r6,16
 8007db0:	218cb03a 	or	r6,r4,r6
 8007db4:	010003c4 	movi	r4,15
 8007db8:	21c0182e 	bgeu	r4,r7,8007e1c <memset+0xc8>
 8007dbc:	3b3ffc04 	addi	r12,r7,-16
 8007dc0:	6018d13a 	srli	r12,r12,4
 8007dc4:	1a000104 	addi	r8,r3,4
 8007dc8:	1ac00204 	addi	r11,r3,8
 8007dcc:	6008913a 	slli	r4,r12,4
 8007dd0:	1a800304 	addi	r10,r3,12
 8007dd4:	1813883a 	mov	r9,r3
 8007dd8:	21000504 	addi	r4,r4,20
 8007ddc:	1909883a 	add	r4,r3,r4
 8007de0:	49800015 	stw	r6,0(r9)
 8007de4:	41800015 	stw	r6,0(r8)
 8007de8:	59800015 	stw	r6,0(r11)
 8007dec:	51800015 	stw	r6,0(r10)
 8007df0:	42000404 	addi	r8,r8,16
 8007df4:	4a400404 	addi	r9,r9,16
 8007df8:	5ac00404 	addi	r11,r11,16
 8007dfc:	52800404 	addi	r10,r10,16
 8007e00:	413ff71e 	bne	r8,r4,8007de0 <__alt_data_end+0xfc007de0>
 8007e04:	63000044 	addi	r12,r12,1
 8007e08:	6018913a 	slli	r12,r12,4
 8007e0c:	39c003cc 	andi	r7,r7,15
 8007e10:	010000c4 	movi	r4,3
 8007e14:	1b07883a 	add	r3,r3,r12
 8007e18:	21c00e2e 	bgeu	r4,r7,8007e54 <memset+0x100>
 8007e1c:	1813883a 	mov	r9,r3
 8007e20:	3811883a 	mov	r8,r7
 8007e24:	010000c4 	movi	r4,3
 8007e28:	49800015 	stw	r6,0(r9)
 8007e2c:	423fff04 	addi	r8,r8,-4
 8007e30:	4a400104 	addi	r9,r9,4
 8007e34:	223ffc36 	bltu	r4,r8,8007e28 <__alt_data_end+0xfc007e28>
 8007e38:	393fff04 	addi	r4,r7,-4
 8007e3c:	2008d0ba 	srli	r4,r4,2
 8007e40:	39c000cc 	andi	r7,r7,3
 8007e44:	21000044 	addi	r4,r4,1
 8007e48:	2109883a 	add	r4,r4,r4
 8007e4c:	2109883a 	add	r4,r4,r4
 8007e50:	1907883a 	add	r3,r3,r4
 8007e54:	38000426 	beq	r7,zero,8007e68 <memset+0x114>
 8007e58:	19cf883a 	add	r7,r3,r7
 8007e5c:	19400005 	stb	r5,0(r3)
 8007e60:	18c00044 	addi	r3,r3,1
 8007e64:	19fffd1e 	bne	r3,r7,8007e5c <__alt_data_end+0xfc007e5c>
 8007e68:	f800283a 	ret
 8007e6c:	2007883a 	mov	r3,r4
 8007e70:	300f883a 	mov	r7,r6
 8007e74:	003fc806 	br	8007d98 <__alt_data_end+0xfc007d98>

08007e78 <_Balloc>:
 8007e78:	20801317 	ldw	r2,76(r4)
 8007e7c:	defffc04 	addi	sp,sp,-16
 8007e80:	dc400115 	stw	r17,4(sp)
 8007e84:	dc000015 	stw	r16,0(sp)
 8007e88:	dfc00315 	stw	ra,12(sp)
 8007e8c:	dc800215 	stw	r18,8(sp)
 8007e90:	2023883a 	mov	r17,r4
 8007e94:	2821883a 	mov	r16,r5
 8007e98:	10000f26 	beq	r2,zero,8007ed8 <_Balloc+0x60>
 8007e9c:	8407883a 	add	r3,r16,r16
 8007ea0:	18c7883a 	add	r3,r3,r3
 8007ea4:	10c7883a 	add	r3,r2,r3
 8007ea8:	18800017 	ldw	r2,0(r3)
 8007eac:	10001126 	beq	r2,zero,8007ef4 <_Balloc+0x7c>
 8007eb0:	11000017 	ldw	r4,0(r2)
 8007eb4:	19000015 	stw	r4,0(r3)
 8007eb8:	10000415 	stw	zero,16(r2)
 8007ebc:	10000315 	stw	zero,12(r2)
 8007ec0:	dfc00317 	ldw	ra,12(sp)
 8007ec4:	dc800217 	ldw	r18,8(sp)
 8007ec8:	dc400117 	ldw	r17,4(sp)
 8007ecc:	dc000017 	ldw	r16,0(sp)
 8007ed0:	dec00404 	addi	sp,sp,16
 8007ed4:	f800283a 	ret
 8007ed8:	01400104 	movi	r5,4
 8007edc:	01800844 	movi	r6,33
 8007ee0:	800ad140 	call	800ad14 <_calloc_r>
 8007ee4:	88801315 	stw	r2,76(r17)
 8007ee8:	103fec1e 	bne	r2,zero,8007e9c <__alt_data_end+0xfc007e9c>
 8007eec:	0005883a 	mov	r2,zero
 8007ef0:	003ff306 	br	8007ec0 <__alt_data_end+0xfc007ec0>
 8007ef4:	01400044 	movi	r5,1
 8007ef8:	2c24983a 	sll	r18,r5,r16
 8007efc:	8809883a 	mov	r4,r17
 8007f00:	91800144 	addi	r6,r18,5
 8007f04:	318d883a 	add	r6,r6,r6
 8007f08:	318d883a 	add	r6,r6,r6
 8007f0c:	800ad140 	call	800ad14 <_calloc_r>
 8007f10:	103ff626 	beq	r2,zero,8007eec <__alt_data_end+0xfc007eec>
 8007f14:	14000115 	stw	r16,4(r2)
 8007f18:	14800215 	stw	r18,8(r2)
 8007f1c:	003fe606 	br	8007eb8 <__alt_data_end+0xfc007eb8>

08007f20 <_Bfree>:
 8007f20:	28000826 	beq	r5,zero,8007f44 <_Bfree+0x24>
 8007f24:	28c00117 	ldw	r3,4(r5)
 8007f28:	20801317 	ldw	r2,76(r4)
 8007f2c:	18c7883a 	add	r3,r3,r3
 8007f30:	18c7883a 	add	r3,r3,r3
 8007f34:	10c5883a 	add	r2,r2,r3
 8007f38:	10c00017 	ldw	r3,0(r2)
 8007f3c:	28c00015 	stw	r3,0(r5)
 8007f40:	11400015 	stw	r5,0(r2)
 8007f44:	f800283a 	ret

08007f48 <__multadd>:
 8007f48:	defff704 	addi	sp,sp,-36
 8007f4c:	dc800215 	stw	r18,8(sp)
 8007f50:	2c800417 	ldw	r18,16(r5)
 8007f54:	ddc00715 	stw	r23,28(sp)
 8007f58:	dd800615 	stw	r22,24(sp)
 8007f5c:	dd000415 	stw	r20,16(sp)
 8007f60:	dcc00315 	stw	r19,12(sp)
 8007f64:	dc400115 	stw	r17,4(sp)
 8007f68:	dc000015 	stw	r16,0(sp)
 8007f6c:	dfc00815 	stw	ra,32(sp)
 8007f70:	dd400515 	stw	r21,20(sp)
 8007f74:	2827883a 	mov	r19,r5
 8007f78:	2029883a 	mov	r20,r4
 8007f7c:	3023883a 	mov	r17,r6
 8007f80:	3821883a 	mov	r16,r7
 8007f84:	2d800504 	addi	r22,r5,20
 8007f88:	002f883a 	mov	r23,zero
 8007f8c:	b5400017 	ldw	r21,0(r22)
 8007f90:	880b883a 	mov	r5,r17
 8007f94:	bdc00044 	addi	r23,r23,1
 8007f98:	a93fffcc 	andi	r4,r21,65535
 8007f9c:	800c3380 	call	800c338 <__mulsi3>
 8007fa0:	1421883a 	add	r16,r2,r16
 8007fa4:	a808d43a 	srli	r4,r21,16
 8007fa8:	802ad43a 	srli	r21,r16,16
 8007fac:	880b883a 	mov	r5,r17
 8007fb0:	800c3380 	call	800c338 <__mulsi3>
 8007fb4:	a88f883a 	add	r7,r21,r2
 8007fb8:	3804943a 	slli	r2,r7,16
 8007fbc:	80ffffcc 	andi	r3,r16,65535
 8007fc0:	b5800104 	addi	r22,r22,4
 8007fc4:	10c7883a 	add	r3,r2,r3
 8007fc8:	b0ffff15 	stw	r3,-4(r22)
 8007fcc:	3820d43a 	srli	r16,r7,16
 8007fd0:	bcbfee16 	blt	r23,r18,8007f8c <__alt_data_end+0xfc007f8c>
 8007fd4:	80000926 	beq	r16,zero,8007ffc <__multadd+0xb4>
 8007fd8:	98800217 	ldw	r2,8(r19)
 8007fdc:	9080130e 	bge	r18,r2,800802c <__multadd+0xe4>
 8007fe0:	90800144 	addi	r2,r18,5
 8007fe4:	1085883a 	add	r2,r2,r2
 8007fe8:	1085883a 	add	r2,r2,r2
 8007fec:	9885883a 	add	r2,r19,r2
 8007ff0:	14000015 	stw	r16,0(r2)
 8007ff4:	94800044 	addi	r18,r18,1
 8007ff8:	9c800415 	stw	r18,16(r19)
 8007ffc:	9805883a 	mov	r2,r19
 8008000:	dfc00817 	ldw	ra,32(sp)
 8008004:	ddc00717 	ldw	r23,28(sp)
 8008008:	dd800617 	ldw	r22,24(sp)
 800800c:	dd400517 	ldw	r21,20(sp)
 8008010:	dd000417 	ldw	r20,16(sp)
 8008014:	dcc00317 	ldw	r19,12(sp)
 8008018:	dc800217 	ldw	r18,8(sp)
 800801c:	dc400117 	ldw	r17,4(sp)
 8008020:	dc000017 	ldw	r16,0(sp)
 8008024:	dec00904 	addi	sp,sp,36
 8008028:	f800283a 	ret
 800802c:	99400117 	ldw	r5,4(r19)
 8008030:	a009883a 	mov	r4,r20
 8008034:	29400044 	addi	r5,r5,1
 8008038:	8007e780 	call	8007e78 <_Balloc>
 800803c:	99800417 	ldw	r6,16(r19)
 8008040:	99400304 	addi	r5,r19,12
 8008044:	11000304 	addi	r4,r2,12
 8008048:	31800084 	addi	r6,r6,2
 800804c:	318d883a 	add	r6,r6,r6
 8008050:	318d883a 	add	r6,r6,r6
 8008054:	1023883a 	mov	r17,r2
 8008058:	8007ac00 	call	8007ac0 <memcpy>
 800805c:	99000117 	ldw	r4,4(r19)
 8008060:	a0c01317 	ldw	r3,76(r20)
 8008064:	2109883a 	add	r4,r4,r4
 8008068:	2109883a 	add	r4,r4,r4
 800806c:	1907883a 	add	r3,r3,r4
 8008070:	18800017 	ldw	r2,0(r3)
 8008074:	98800015 	stw	r2,0(r19)
 8008078:	1cc00015 	stw	r19,0(r3)
 800807c:	8827883a 	mov	r19,r17
 8008080:	003fd706 	br	8007fe0 <__alt_data_end+0xfc007fe0>

08008084 <__s2b>:
 8008084:	defff904 	addi	sp,sp,-28
 8008088:	dc400115 	stw	r17,4(sp)
 800808c:	dc000015 	stw	r16,0(sp)
 8008090:	2023883a 	mov	r17,r4
 8008094:	2821883a 	mov	r16,r5
 8008098:	39000204 	addi	r4,r7,8
 800809c:	01400244 	movi	r5,9
 80080a0:	dcc00315 	stw	r19,12(sp)
 80080a4:	dc800215 	stw	r18,8(sp)
 80080a8:	dfc00615 	stw	ra,24(sp)
 80080ac:	dd400515 	stw	r21,20(sp)
 80080b0:	dd000415 	stw	r20,16(sp)
 80080b4:	3825883a 	mov	r18,r7
 80080b8:	3027883a 	mov	r19,r6
 80080bc:	800c2780 	call	800c278 <__divsi3>
 80080c0:	00c00044 	movi	r3,1
 80080c4:	000b883a 	mov	r5,zero
 80080c8:	1880030e 	bge	r3,r2,80080d8 <__s2b+0x54>
 80080cc:	18c7883a 	add	r3,r3,r3
 80080d0:	29400044 	addi	r5,r5,1
 80080d4:	18bffd16 	blt	r3,r2,80080cc <__alt_data_end+0xfc0080cc>
 80080d8:	8809883a 	mov	r4,r17
 80080dc:	8007e780 	call	8007e78 <_Balloc>
 80080e0:	d8c00717 	ldw	r3,28(sp)
 80080e4:	10c00515 	stw	r3,20(r2)
 80080e8:	00c00044 	movi	r3,1
 80080ec:	10c00415 	stw	r3,16(r2)
 80080f0:	00c00244 	movi	r3,9
 80080f4:	1cc0210e 	bge	r3,r19,800817c <__s2b+0xf8>
 80080f8:	80eb883a 	add	r21,r16,r3
 80080fc:	a829883a 	mov	r20,r21
 8008100:	84e1883a 	add	r16,r16,r19
 8008104:	a1c00007 	ldb	r7,0(r20)
 8008108:	8809883a 	mov	r4,r17
 800810c:	a5000044 	addi	r20,r20,1
 8008110:	100b883a 	mov	r5,r2
 8008114:	01800284 	movi	r6,10
 8008118:	39fff404 	addi	r7,r7,-48
 800811c:	8007f480 	call	8007f48 <__multadd>
 8008120:	a43ff81e 	bne	r20,r16,8008104 <__alt_data_end+0xfc008104>
 8008124:	ace1883a 	add	r16,r21,r19
 8008128:	843ffe04 	addi	r16,r16,-8
 800812c:	9c800a0e 	bge	r19,r18,8008158 <__s2b+0xd4>
 8008130:	94e5c83a 	sub	r18,r18,r19
 8008134:	84a5883a 	add	r18,r16,r18
 8008138:	81c00007 	ldb	r7,0(r16)
 800813c:	8809883a 	mov	r4,r17
 8008140:	84000044 	addi	r16,r16,1
 8008144:	100b883a 	mov	r5,r2
 8008148:	01800284 	movi	r6,10
 800814c:	39fff404 	addi	r7,r7,-48
 8008150:	8007f480 	call	8007f48 <__multadd>
 8008154:	84bff81e 	bne	r16,r18,8008138 <__alt_data_end+0xfc008138>
 8008158:	dfc00617 	ldw	ra,24(sp)
 800815c:	dd400517 	ldw	r21,20(sp)
 8008160:	dd000417 	ldw	r20,16(sp)
 8008164:	dcc00317 	ldw	r19,12(sp)
 8008168:	dc800217 	ldw	r18,8(sp)
 800816c:	dc400117 	ldw	r17,4(sp)
 8008170:	dc000017 	ldw	r16,0(sp)
 8008174:	dec00704 	addi	sp,sp,28
 8008178:	f800283a 	ret
 800817c:	84000284 	addi	r16,r16,10
 8008180:	1827883a 	mov	r19,r3
 8008184:	003fe906 	br	800812c <__alt_data_end+0xfc00812c>

08008188 <__hi0bits>:
 8008188:	20bfffec 	andhi	r2,r4,65535
 800818c:	1000141e 	bne	r2,zero,80081e0 <__hi0bits+0x58>
 8008190:	2008943a 	slli	r4,r4,16
 8008194:	00800404 	movi	r2,16
 8008198:	20ffc02c 	andhi	r3,r4,65280
 800819c:	1800021e 	bne	r3,zero,80081a8 <__hi0bits+0x20>
 80081a0:	2008923a 	slli	r4,r4,8
 80081a4:	10800204 	addi	r2,r2,8
 80081a8:	20fc002c 	andhi	r3,r4,61440
 80081ac:	1800021e 	bne	r3,zero,80081b8 <__hi0bits+0x30>
 80081b0:	2008913a 	slli	r4,r4,4
 80081b4:	10800104 	addi	r2,r2,4
 80081b8:	20f0002c 	andhi	r3,r4,49152
 80081bc:	1800031e 	bne	r3,zero,80081cc <__hi0bits+0x44>
 80081c0:	2109883a 	add	r4,r4,r4
 80081c4:	10800084 	addi	r2,r2,2
 80081c8:	2109883a 	add	r4,r4,r4
 80081cc:	20000316 	blt	r4,zero,80081dc <__hi0bits+0x54>
 80081d0:	2110002c 	andhi	r4,r4,16384
 80081d4:	2000041e 	bne	r4,zero,80081e8 <__hi0bits+0x60>
 80081d8:	00800804 	movi	r2,32
 80081dc:	f800283a 	ret
 80081e0:	0005883a 	mov	r2,zero
 80081e4:	003fec06 	br	8008198 <__alt_data_end+0xfc008198>
 80081e8:	10800044 	addi	r2,r2,1
 80081ec:	f800283a 	ret

080081f0 <__lo0bits>:
 80081f0:	20c00017 	ldw	r3,0(r4)
 80081f4:	188001cc 	andi	r2,r3,7
 80081f8:	10000826 	beq	r2,zero,800821c <__lo0bits+0x2c>
 80081fc:	1880004c 	andi	r2,r3,1
 8008200:	1000211e 	bne	r2,zero,8008288 <__lo0bits+0x98>
 8008204:	1880008c 	andi	r2,r3,2
 8008208:	1000211e 	bne	r2,zero,8008290 <__lo0bits+0xa0>
 800820c:	1806d0ba 	srli	r3,r3,2
 8008210:	00800084 	movi	r2,2
 8008214:	20c00015 	stw	r3,0(r4)
 8008218:	f800283a 	ret
 800821c:	18bfffcc 	andi	r2,r3,65535
 8008220:	10001326 	beq	r2,zero,8008270 <__lo0bits+0x80>
 8008224:	0005883a 	mov	r2,zero
 8008228:	19403fcc 	andi	r5,r3,255
 800822c:	2800021e 	bne	r5,zero,8008238 <__lo0bits+0x48>
 8008230:	1806d23a 	srli	r3,r3,8
 8008234:	10800204 	addi	r2,r2,8
 8008238:	194003cc 	andi	r5,r3,15
 800823c:	2800021e 	bne	r5,zero,8008248 <__lo0bits+0x58>
 8008240:	1806d13a 	srli	r3,r3,4
 8008244:	10800104 	addi	r2,r2,4
 8008248:	194000cc 	andi	r5,r3,3
 800824c:	2800021e 	bne	r5,zero,8008258 <__lo0bits+0x68>
 8008250:	1806d0ba 	srli	r3,r3,2
 8008254:	10800084 	addi	r2,r2,2
 8008258:	1940004c 	andi	r5,r3,1
 800825c:	2800081e 	bne	r5,zero,8008280 <__lo0bits+0x90>
 8008260:	1806d07a 	srli	r3,r3,1
 8008264:	1800051e 	bne	r3,zero,800827c <__lo0bits+0x8c>
 8008268:	00800804 	movi	r2,32
 800826c:	f800283a 	ret
 8008270:	1806d43a 	srli	r3,r3,16
 8008274:	00800404 	movi	r2,16
 8008278:	003feb06 	br	8008228 <__alt_data_end+0xfc008228>
 800827c:	10800044 	addi	r2,r2,1
 8008280:	20c00015 	stw	r3,0(r4)
 8008284:	f800283a 	ret
 8008288:	0005883a 	mov	r2,zero
 800828c:	f800283a 	ret
 8008290:	1806d07a 	srli	r3,r3,1
 8008294:	00800044 	movi	r2,1
 8008298:	20c00015 	stw	r3,0(r4)
 800829c:	f800283a 	ret

080082a0 <__i2b>:
 80082a0:	defffd04 	addi	sp,sp,-12
 80082a4:	dc000015 	stw	r16,0(sp)
 80082a8:	04000044 	movi	r16,1
 80082ac:	dc400115 	stw	r17,4(sp)
 80082b0:	2823883a 	mov	r17,r5
 80082b4:	800b883a 	mov	r5,r16
 80082b8:	dfc00215 	stw	ra,8(sp)
 80082bc:	8007e780 	call	8007e78 <_Balloc>
 80082c0:	14400515 	stw	r17,20(r2)
 80082c4:	14000415 	stw	r16,16(r2)
 80082c8:	dfc00217 	ldw	ra,8(sp)
 80082cc:	dc400117 	ldw	r17,4(sp)
 80082d0:	dc000017 	ldw	r16,0(sp)
 80082d4:	dec00304 	addi	sp,sp,12
 80082d8:	f800283a 	ret

080082dc <__multiply>:
 80082dc:	deffef04 	addi	sp,sp,-68
 80082e0:	dc400815 	stw	r17,32(sp)
 80082e4:	dc000715 	stw	r16,28(sp)
 80082e8:	2c400417 	ldw	r17,16(r5)
 80082ec:	34000417 	ldw	r16,16(r6)
 80082f0:	dd800d15 	stw	r22,52(sp)
 80082f4:	dc800915 	stw	r18,36(sp)
 80082f8:	dfc01015 	stw	ra,64(sp)
 80082fc:	df000f15 	stw	fp,60(sp)
 8008300:	ddc00e15 	stw	r23,56(sp)
 8008304:	dd400c15 	stw	r21,48(sp)
 8008308:	dd000b15 	stw	r20,44(sp)
 800830c:	dcc00a15 	stw	r19,40(sp)
 8008310:	2825883a 	mov	r18,r5
 8008314:	302d883a 	mov	r22,r6
 8008318:	8c009116 	blt	r17,r16,8008560 <__multiply+0x284>
 800831c:	8005883a 	mov	r2,r16
 8008320:	8821883a 	mov	r16,r17
 8008324:	1023883a 	mov	r17,r2
 8008328:	90800217 	ldw	r2,8(r18)
 800832c:	8447883a 	add	r3,r16,r17
 8008330:	d8c00215 	stw	r3,8(sp)
 8008334:	91400117 	ldw	r5,4(r18)
 8008338:	10c0010e 	bge	r2,r3,8008340 <__multiply+0x64>
 800833c:	29400044 	addi	r5,r5,1
 8008340:	8007e780 	call	8007e78 <_Balloc>
 8008344:	d8c00217 	ldw	r3,8(sp)
 8008348:	d8800615 	stw	r2,24(sp)
 800834c:	18eb883a 	add	r21,r3,r3
 8008350:	ad6b883a 	add	r21,r21,r21
 8008354:	10c00504 	addi	r3,r2,20
 8008358:	1d6b883a 	add	r21,r3,r21
 800835c:	d8c00115 	stw	r3,4(sp)
 8008360:	dd400315 	stw	r21,12(sp)
 8008364:	1805883a 	mov	r2,r3
 8008368:	1d40042e 	bgeu	r3,r21,800837c <__multiply+0xa0>
 800836c:	d8c00317 	ldw	r3,12(sp)
 8008370:	10000015 	stw	zero,0(r2)
 8008374:	10800104 	addi	r2,r2,4
 8008378:	10fffc36 	bltu	r2,r3,800836c <__alt_data_end+0xfc00836c>
 800837c:	8c63883a 	add	r17,r17,r17
 8008380:	b5800504 	addi	r22,r22,20
 8008384:	8c63883a 	add	r17,r17,r17
 8008388:	94800504 	addi	r18,r18,20
 800838c:	8421883a 	add	r16,r16,r16
 8008390:	b463883a 	add	r17,r22,r17
 8008394:	8421883a 	add	r16,r16,r16
 8008398:	dd800015 	stw	r22,0(sp)
 800839c:	dc800415 	stw	r18,16(sp)
 80083a0:	dc400515 	stw	r17,20(sp)
 80083a4:	9429883a 	add	r20,r18,r16
 80083a8:	b4404f2e 	bgeu	r22,r17,80084e8 <__multiply+0x20c>
 80083ac:	d8c00017 	ldw	r3,0(sp)
 80083b0:	1c800017 	ldw	r18,0(r3)
 80083b4:	943fffcc 	andi	r16,r18,65535
 80083b8:	80001e26 	beq	r16,zero,8008434 <__multiply+0x158>
 80083bc:	dd800117 	ldw	r22,4(sp)
 80083c0:	dd400417 	ldw	r21,16(sp)
 80083c4:	0025883a 	mov	r18,zero
 80083c8:	adc00017 	ldw	r23,0(r21)
 80083cc:	b4c00017 	ldw	r19,0(r22)
 80083d0:	800b883a 	mov	r5,r16
 80083d4:	b93fffcc 	andi	r4,r23,65535
 80083d8:	800c3380 	call	800c338 <__mulsi3>
 80083dc:	9c7fffcc 	andi	r17,r19,65535
 80083e0:	8885883a 	add	r2,r17,r2
 80083e4:	b808d43a 	srli	r4,r23,16
 80083e8:	14a3883a 	add	r17,r2,r18
 80083ec:	9826d43a 	srli	r19,r19,16
 80083f0:	8824d43a 	srli	r18,r17,16
 80083f4:	800b883a 	mov	r5,r16
 80083f8:	800c3380 	call	800c338 <__mulsi3>
 80083fc:	9885883a 	add	r2,r19,r2
 8008400:	14a7883a 	add	r19,r2,r18
 8008404:	88ffffcc 	andi	r3,r17,65535
 8008408:	9822943a 	slli	r17,r19,16
 800840c:	ad400104 	addi	r21,r21,4
 8008410:	b005883a 	mov	r2,r22
 8008414:	88c6b03a 	or	r3,r17,r3
 8008418:	b0c00015 	stw	r3,0(r22)
 800841c:	9824d43a 	srli	r18,r19,16
 8008420:	b5800104 	addi	r22,r22,4
 8008424:	ad3fe836 	bltu	r21,r20,80083c8 <__alt_data_end+0xfc0083c8>
 8008428:	d8c00017 	ldw	r3,0(sp)
 800842c:	14800115 	stw	r18,4(r2)
 8008430:	1c800017 	ldw	r18,0(r3)
 8008434:	9024d43a 	srli	r18,r18,16
 8008438:	90002226 	beq	r18,zero,80084c4 <__multiply+0x1e8>
 800843c:	d8c00117 	ldw	r3,4(sp)
 8008440:	dd800417 	ldw	r22,16(sp)
 8008444:	002f883a 	mov	r23,zero
 8008448:	1f000017 	ldw	fp,0(r3)
 800844c:	1823883a 	mov	r17,r3
 8008450:	182b883a 	mov	r21,r3
 8008454:	e021883a 	mov	r16,fp
 8008458:	00000106 	br	8008460 <__multiply+0x184>
 800845c:	982b883a 	mov	r21,r19
 8008460:	b100000b 	ldhu	r4,0(r22)
 8008464:	8020d43a 	srli	r16,r16,16
 8008468:	900b883a 	mov	r5,r18
 800846c:	800c3380 	call	800c338 <__mulsi3>
 8008470:	1405883a 	add	r2,r2,r16
 8008474:	15ef883a 	add	r23,r2,r23
 8008478:	b804943a 	slli	r2,r23,16
 800847c:	e0ffffcc 	andi	r3,fp,65535
 8008480:	8c400104 	addi	r17,r17,4
 8008484:	10c6b03a 	or	r3,r2,r3
 8008488:	88ffff15 	stw	r3,-4(r17)
 800848c:	b5800104 	addi	r22,r22,4
 8008490:	b13fff17 	ldw	r4,-4(r22)
 8008494:	acc00104 	addi	r19,r21,4
 8008498:	900b883a 	mov	r5,r18
 800849c:	2008d43a 	srli	r4,r4,16
 80084a0:	9c000017 	ldw	r16,0(r19)
 80084a4:	800c3380 	call	800c338 <__mulsi3>
 80084a8:	b806d43a 	srli	r3,r23,16
 80084ac:	813fffcc 	andi	r4,r16,65535
 80084b0:	1105883a 	add	r2,r2,r4
 80084b4:	10f9883a 	add	fp,r2,r3
 80084b8:	e02ed43a 	srli	r23,fp,16
 80084bc:	b53fe736 	bltu	r22,r20,800845c <__alt_data_end+0xfc00845c>
 80084c0:	af000115 	stw	fp,4(r21)
 80084c4:	d8c00017 	ldw	r3,0(sp)
 80084c8:	d9000517 	ldw	r4,20(sp)
 80084cc:	18c00104 	addi	r3,r3,4
 80084d0:	d8c00015 	stw	r3,0(sp)
 80084d4:	d8c00117 	ldw	r3,4(sp)
 80084d8:	18c00104 	addi	r3,r3,4
 80084dc:	d8c00115 	stw	r3,4(sp)
 80084e0:	d8c00017 	ldw	r3,0(sp)
 80084e4:	193fb136 	bltu	r3,r4,80083ac <__alt_data_end+0xfc0083ac>
 80084e8:	d8c00217 	ldw	r3,8(sp)
 80084ec:	00c00c0e 	bge	zero,r3,8008520 <__multiply+0x244>
 80084f0:	d8c00317 	ldw	r3,12(sp)
 80084f4:	18bfff17 	ldw	r2,-4(r3)
 80084f8:	1d7fff04 	addi	r21,r3,-4
 80084fc:	10000326 	beq	r2,zero,800850c <__multiply+0x230>
 8008500:	00000706 	br	8008520 <__multiply+0x244>
 8008504:	a8800017 	ldw	r2,0(r21)
 8008508:	1000051e 	bne	r2,zero,8008520 <__multiply+0x244>
 800850c:	d8c00217 	ldw	r3,8(sp)
 8008510:	ad7fff04 	addi	r21,r21,-4
 8008514:	18ffffc4 	addi	r3,r3,-1
 8008518:	d8c00215 	stw	r3,8(sp)
 800851c:	183ff91e 	bne	r3,zero,8008504 <__alt_data_end+0xfc008504>
 8008520:	d8c00617 	ldw	r3,24(sp)
 8008524:	d9000217 	ldw	r4,8(sp)
 8008528:	1805883a 	mov	r2,r3
 800852c:	19000415 	stw	r4,16(r3)
 8008530:	dfc01017 	ldw	ra,64(sp)
 8008534:	df000f17 	ldw	fp,60(sp)
 8008538:	ddc00e17 	ldw	r23,56(sp)
 800853c:	dd800d17 	ldw	r22,52(sp)
 8008540:	dd400c17 	ldw	r21,48(sp)
 8008544:	dd000b17 	ldw	r20,44(sp)
 8008548:	dcc00a17 	ldw	r19,40(sp)
 800854c:	dc800917 	ldw	r18,36(sp)
 8008550:	dc400817 	ldw	r17,32(sp)
 8008554:	dc000717 	ldw	r16,28(sp)
 8008558:	dec01104 	addi	sp,sp,68
 800855c:	f800283a 	ret
 8008560:	3025883a 	mov	r18,r6
 8008564:	282d883a 	mov	r22,r5
 8008568:	003f6f06 	br	8008328 <__alt_data_end+0xfc008328>

0800856c <__pow5mult>:
 800856c:	defffa04 	addi	sp,sp,-24
 8008570:	dcc00315 	stw	r19,12(sp)
 8008574:	dc800215 	stw	r18,8(sp)
 8008578:	dc000015 	stw	r16,0(sp)
 800857c:	dfc00515 	stw	ra,20(sp)
 8008580:	dd000415 	stw	r20,16(sp)
 8008584:	dc400115 	stw	r17,4(sp)
 8008588:	308000cc 	andi	r2,r6,3
 800858c:	3021883a 	mov	r16,r6
 8008590:	2027883a 	mov	r19,r4
 8008594:	2825883a 	mov	r18,r5
 8008598:	10002e1e 	bne	r2,zero,8008654 <__pow5mult+0xe8>
 800859c:	8021d0ba 	srai	r16,r16,2
 80085a0:	80001a26 	beq	r16,zero,800860c <__pow5mult+0xa0>
 80085a4:	9c401217 	ldw	r17,72(r19)
 80085a8:	8800061e 	bne	r17,zero,80085c4 <__pow5mult+0x58>
 80085ac:	00003406 	br	8008680 <__pow5mult+0x114>
 80085b0:	8021d07a 	srai	r16,r16,1
 80085b4:	80001526 	beq	r16,zero,800860c <__pow5mult+0xa0>
 80085b8:	88800017 	ldw	r2,0(r17)
 80085bc:	10001c26 	beq	r2,zero,8008630 <__pow5mult+0xc4>
 80085c0:	1023883a 	mov	r17,r2
 80085c4:	80c0004c 	andi	r3,r16,1
 80085c8:	183ff926 	beq	r3,zero,80085b0 <__alt_data_end+0xfc0085b0>
 80085cc:	900b883a 	mov	r5,r18
 80085d0:	880d883a 	mov	r6,r17
 80085d4:	9809883a 	mov	r4,r19
 80085d8:	80082dc0 	call	80082dc <__multiply>
 80085dc:	90001b26 	beq	r18,zero,800864c <__pow5mult+0xe0>
 80085e0:	91c00117 	ldw	r7,4(r18)
 80085e4:	98c01317 	ldw	r3,76(r19)
 80085e8:	8021d07a 	srai	r16,r16,1
 80085ec:	39cf883a 	add	r7,r7,r7
 80085f0:	39cf883a 	add	r7,r7,r7
 80085f4:	19c7883a 	add	r3,r3,r7
 80085f8:	19000017 	ldw	r4,0(r3)
 80085fc:	91000015 	stw	r4,0(r18)
 8008600:	1c800015 	stw	r18,0(r3)
 8008604:	1025883a 	mov	r18,r2
 8008608:	803feb1e 	bne	r16,zero,80085b8 <__alt_data_end+0xfc0085b8>
 800860c:	9005883a 	mov	r2,r18
 8008610:	dfc00517 	ldw	ra,20(sp)
 8008614:	dd000417 	ldw	r20,16(sp)
 8008618:	dcc00317 	ldw	r19,12(sp)
 800861c:	dc800217 	ldw	r18,8(sp)
 8008620:	dc400117 	ldw	r17,4(sp)
 8008624:	dc000017 	ldw	r16,0(sp)
 8008628:	dec00604 	addi	sp,sp,24
 800862c:	f800283a 	ret
 8008630:	9809883a 	mov	r4,r19
 8008634:	880b883a 	mov	r5,r17
 8008638:	880d883a 	mov	r6,r17
 800863c:	80082dc0 	call	80082dc <__multiply>
 8008640:	88800015 	stw	r2,0(r17)
 8008644:	10000015 	stw	zero,0(r2)
 8008648:	003fdd06 	br	80085c0 <__alt_data_end+0xfc0085c0>
 800864c:	1025883a 	mov	r18,r2
 8008650:	003fd706 	br	80085b0 <__alt_data_end+0xfc0085b0>
 8008654:	10bfffc4 	addi	r2,r2,-1
 8008658:	1085883a 	add	r2,r2,r2
 800865c:	00c20074 	movhi	r3,2049
 8008660:	18c6e804 	addi	r3,r3,7072
 8008664:	1085883a 	add	r2,r2,r2
 8008668:	1885883a 	add	r2,r3,r2
 800866c:	11800017 	ldw	r6,0(r2)
 8008670:	000f883a 	mov	r7,zero
 8008674:	8007f480 	call	8007f48 <__multadd>
 8008678:	1025883a 	mov	r18,r2
 800867c:	003fc706 	br	800859c <__alt_data_end+0xfc00859c>
 8008680:	05000044 	movi	r20,1
 8008684:	9809883a 	mov	r4,r19
 8008688:	a00b883a 	mov	r5,r20
 800868c:	8007e780 	call	8007e78 <_Balloc>
 8008690:	1023883a 	mov	r17,r2
 8008694:	00809c44 	movi	r2,625
 8008698:	88800515 	stw	r2,20(r17)
 800869c:	8d000415 	stw	r20,16(r17)
 80086a0:	9c401215 	stw	r17,72(r19)
 80086a4:	88000015 	stw	zero,0(r17)
 80086a8:	003fc606 	br	80085c4 <__alt_data_end+0xfc0085c4>

080086ac <__lshift>:
 80086ac:	defff904 	addi	sp,sp,-28
 80086b0:	dd000415 	stw	r20,16(sp)
 80086b4:	dcc00315 	stw	r19,12(sp)
 80086b8:	3029d17a 	srai	r20,r6,5
 80086bc:	2cc00417 	ldw	r19,16(r5)
 80086c0:	28800217 	ldw	r2,8(r5)
 80086c4:	dd400515 	stw	r21,20(sp)
 80086c8:	a4e7883a 	add	r19,r20,r19
 80086cc:	dc800215 	stw	r18,8(sp)
 80086d0:	dc400115 	stw	r17,4(sp)
 80086d4:	dc000015 	stw	r16,0(sp)
 80086d8:	dfc00615 	stw	ra,24(sp)
 80086dc:	9c000044 	addi	r16,r19,1
 80086e0:	2823883a 	mov	r17,r5
 80086e4:	302b883a 	mov	r21,r6
 80086e8:	2025883a 	mov	r18,r4
 80086ec:	29400117 	ldw	r5,4(r5)
 80086f0:	1400030e 	bge	r2,r16,8008700 <__lshift+0x54>
 80086f4:	1085883a 	add	r2,r2,r2
 80086f8:	29400044 	addi	r5,r5,1
 80086fc:	143ffd16 	blt	r2,r16,80086f4 <__alt_data_end+0xfc0086f4>
 8008700:	9009883a 	mov	r4,r18
 8008704:	8007e780 	call	8007e78 <_Balloc>
 8008708:	11c00504 	addi	r7,r2,20
 800870c:	0500090e 	bge	zero,r20,8008734 <__lshift+0x88>
 8008710:	3811883a 	mov	r8,r7
 8008714:	0007883a 	mov	r3,zero
 8008718:	40000015 	stw	zero,0(r8)
 800871c:	18c00044 	addi	r3,r3,1
 8008720:	42000104 	addi	r8,r8,4
 8008724:	1d3ffc1e 	bne	r3,r20,8008718 <__alt_data_end+0xfc008718>
 8008728:	18c7883a 	add	r3,r3,r3
 800872c:	18c7883a 	add	r3,r3,r3
 8008730:	38cf883a 	add	r7,r7,r3
 8008734:	89000417 	ldw	r4,16(r17)
 8008738:	88c00504 	addi	r3,r17,20
 800873c:	a98007cc 	andi	r6,r21,31
 8008740:	2109883a 	add	r4,r4,r4
 8008744:	2109883a 	add	r4,r4,r4
 8008748:	1909883a 	add	r4,r3,r4
 800874c:	30002326 	beq	r6,zero,80087dc <__lshift+0x130>
 8008750:	01400804 	movi	r5,32
 8008754:	298bc83a 	sub	r5,r5,r6
 8008758:	0013883a 	mov	r9,zero
 800875c:	1a000017 	ldw	r8,0(r3)
 8008760:	3815883a 	mov	r10,r7
 8008764:	39c00104 	addi	r7,r7,4
 8008768:	4190983a 	sll	r8,r8,r6
 800876c:	18c00104 	addi	r3,r3,4
 8008770:	4a10b03a 	or	r8,r9,r8
 8008774:	3a3fff15 	stw	r8,-4(r7)
 8008778:	1a3fff17 	ldw	r8,-4(r3)
 800877c:	4152d83a 	srl	r9,r8,r5
 8008780:	193ff636 	bltu	r3,r4,800875c <__alt_data_end+0xfc00875c>
 8008784:	52400115 	stw	r9,4(r10)
 8008788:	48000126 	beq	r9,zero,8008790 <__lshift+0xe4>
 800878c:	9c000084 	addi	r16,r19,2
 8008790:	89000117 	ldw	r4,4(r17)
 8008794:	90c01317 	ldw	r3,76(r18)
 8008798:	843fffc4 	addi	r16,r16,-1
 800879c:	2109883a 	add	r4,r4,r4
 80087a0:	2109883a 	add	r4,r4,r4
 80087a4:	1907883a 	add	r3,r3,r4
 80087a8:	19000017 	ldw	r4,0(r3)
 80087ac:	14000415 	stw	r16,16(r2)
 80087b0:	89000015 	stw	r4,0(r17)
 80087b4:	1c400015 	stw	r17,0(r3)
 80087b8:	dfc00617 	ldw	ra,24(sp)
 80087bc:	dd400517 	ldw	r21,20(sp)
 80087c0:	dd000417 	ldw	r20,16(sp)
 80087c4:	dcc00317 	ldw	r19,12(sp)
 80087c8:	dc800217 	ldw	r18,8(sp)
 80087cc:	dc400117 	ldw	r17,4(sp)
 80087d0:	dc000017 	ldw	r16,0(sp)
 80087d4:	dec00704 	addi	sp,sp,28
 80087d8:	f800283a 	ret
 80087dc:	19400017 	ldw	r5,0(r3)
 80087e0:	39c00104 	addi	r7,r7,4
 80087e4:	18c00104 	addi	r3,r3,4
 80087e8:	397fff15 	stw	r5,-4(r7)
 80087ec:	193ffb36 	bltu	r3,r4,80087dc <__alt_data_end+0xfc0087dc>
 80087f0:	003fe706 	br	8008790 <__alt_data_end+0xfc008790>

080087f4 <__mcmp>:
 80087f4:	20800417 	ldw	r2,16(r4)
 80087f8:	28c00417 	ldw	r3,16(r5)
 80087fc:	10c5c83a 	sub	r2,r2,r3
 8008800:	1000111e 	bne	r2,zero,8008848 <__mcmp+0x54>
 8008804:	18c7883a 	add	r3,r3,r3
 8008808:	18c7883a 	add	r3,r3,r3
 800880c:	21000504 	addi	r4,r4,20
 8008810:	29400504 	addi	r5,r5,20
 8008814:	20c5883a 	add	r2,r4,r3
 8008818:	28cb883a 	add	r5,r5,r3
 800881c:	00000106 	br	8008824 <__mcmp+0x30>
 8008820:	20800a2e 	bgeu	r4,r2,800884c <__mcmp+0x58>
 8008824:	10bfff04 	addi	r2,r2,-4
 8008828:	297fff04 	addi	r5,r5,-4
 800882c:	11800017 	ldw	r6,0(r2)
 8008830:	28c00017 	ldw	r3,0(r5)
 8008834:	30fffa26 	beq	r6,r3,8008820 <__alt_data_end+0xfc008820>
 8008838:	30c00236 	bltu	r6,r3,8008844 <__mcmp+0x50>
 800883c:	00800044 	movi	r2,1
 8008840:	f800283a 	ret
 8008844:	00bfffc4 	movi	r2,-1
 8008848:	f800283a 	ret
 800884c:	0005883a 	mov	r2,zero
 8008850:	f800283a 	ret

08008854 <__mdiff>:
 8008854:	defffb04 	addi	sp,sp,-20
 8008858:	dc000015 	stw	r16,0(sp)
 800885c:	2821883a 	mov	r16,r5
 8008860:	dcc00315 	stw	r19,12(sp)
 8008864:	300b883a 	mov	r5,r6
 8008868:	2027883a 	mov	r19,r4
 800886c:	8009883a 	mov	r4,r16
 8008870:	dc800215 	stw	r18,8(sp)
 8008874:	dfc00415 	stw	ra,16(sp)
 8008878:	dc400115 	stw	r17,4(sp)
 800887c:	3025883a 	mov	r18,r6
 8008880:	80087f40 	call	80087f4 <__mcmp>
 8008884:	10005226 	beq	r2,zero,80089d0 <__mdiff+0x17c>
 8008888:	10004c16 	blt	r2,zero,80089bc <__mdiff+0x168>
 800888c:	0023883a 	mov	r17,zero
 8008890:	81400117 	ldw	r5,4(r16)
 8008894:	9809883a 	mov	r4,r19
 8008898:	8007e780 	call	8007e78 <_Balloc>
 800889c:	83400417 	ldw	r13,16(r16)
 80088a0:	93800417 	ldw	r14,16(r18)
 80088a4:	81000504 	addi	r4,r16,20
 80088a8:	6b59883a 	add	r12,r13,r13
 80088ac:	739d883a 	add	r14,r14,r14
 80088b0:	6319883a 	add	r12,r12,r12
 80088b4:	91800504 	addi	r6,r18,20
 80088b8:	739d883a 	add	r14,r14,r14
 80088bc:	14400315 	stw	r17,12(r2)
 80088c0:	2319883a 	add	r12,r4,r12
 80088c4:	339d883a 	add	r14,r6,r14
 80088c8:	12400504 	addi	r9,r2,20
 80088cc:	0007883a 	mov	r3,zero
 80088d0:	22000017 	ldw	r8,0(r4)
 80088d4:	32800017 	ldw	r10,0(r6)
 80088d8:	4ac00104 	addi	r11,r9,4
 80088dc:	41ffffcc 	andi	r7,r8,65535
 80088e0:	38c7883a 	add	r3,r7,r3
 80088e4:	51ffffcc 	andi	r7,r10,65535
 80088e8:	19cfc83a 	sub	r7,r3,r7
 80088ec:	4010d43a 	srli	r8,r8,16
 80088f0:	5014d43a 	srli	r10,r10,16
 80088f4:	3807d43a 	srai	r3,r7,16
 80088f8:	39ffffcc 	andi	r7,r7,65535
 80088fc:	4291c83a 	sub	r8,r8,r10
 8008900:	40c7883a 	add	r3,r8,r3
 8008904:	1810943a 	slli	r8,r3,16
 8008908:	31800104 	addi	r6,r6,4
 800890c:	21000104 	addi	r4,r4,4
 8008910:	41ceb03a 	or	r7,r8,r7
 8008914:	49c00015 	stw	r7,0(r9)
 8008918:	1807d43a 	srai	r3,r3,16
 800891c:	580b883a 	mov	r5,r11
 8008920:	5813883a 	mov	r9,r11
 8008924:	33bfea36 	bltu	r6,r14,80088d0 <__alt_data_end+0xfc0088d0>
 8008928:	2011883a 	mov	r8,r4
 800892c:	2300152e 	bgeu	r4,r12,8008984 <__mdiff+0x130>
 8008930:	21400017 	ldw	r5,0(r4)
 8008934:	4a400104 	addi	r9,r9,4
 8008938:	21000104 	addi	r4,r4,4
 800893c:	29ffffcc 	andi	r7,r5,65535
 8008940:	38c7883a 	add	r3,r7,r3
 8008944:	280ad43a 	srli	r5,r5,16
 8008948:	180dd43a 	srai	r6,r3,16
 800894c:	19ffffcc 	andi	r7,r3,65535
 8008950:	3147883a 	add	r3,r6,r5
 8008954:	180a943a 	slli	r5,r3,16
 8008958:	1807d43a 	srai	r3,r3,16
 800895c:	29ceb03a 	or	r7,r5,r7
 8008960:	49ffff15 	stw	r7,-4(r9)
 8008964:	233ff236 	bltu	r4,r12,8008930 <__alt_data_end+0xfc008930>
 8008968:	0206303a 	nor	r3,zero,r8
 800896c:	1b07883a 	add	r3,r3,r12
 8008970:	1806d0ba 	srli	r3,r3,2
 8008974:	18c00044 	addi	r3,r3,1
 8008978:	18c7883a 	add	r3,r3,r3
 800897c:	18c7883a 	add	r3,r3,r3
 8008980:	58cb883a 	add	r5,r11,r3
 8008984:	28ffff04 	addi	r3,r5,-4
 8008988:	3800041e 	bne	r7,zero,800899c <__mdiff+0x148>
 800898c:	18ffff04 	addi	r3,r3,-4
 8008990:	19000017 	ldw	r4,0(r3)
 8008994:	6b7fffc4 	addi	r13,r13,-1
 8008998:	203ffc26 	beq	r4,zero,800898c <__alt_data_end+0xfc00898c>
 800899c:	13400415 	stw	r13,16(r2)
 80089a0:	dfc00417 	ldw	ra,16(sp)
 80089a4:	dcc00317 	ldw	r19,12(sp)
 80089a8:	dc800217 	ldw	r18,8(sp)
 80089ac:	dc400117 	ldw	r17,4(sp)
 80089b0:	dc000017 	ldw	r16,0(sp)
 80089b4:	dec00504 	addi	sp,sp,20
 80089b8:	f800283a 	ret
 80089bc:	8005883a 	mov	r2,r16
 80089c0:	04400044 	movi	r17,1
 80089c4:	9021883a 	mov	r16,r18
 80089c8:	1025883a 	mov	r18,r2
 80089cc:	003fb006 	br	8008890 <__alt_data_end+0xfc008890>
 80089d0:	9809883a 	mov	r4,r19
 80089d4:	000b883a 	mov	r5,zero
 80089d8:	8007e780 	call	8007e78 <_Balloc>
 80089dc:	00c00044 	movi	r3,1
 80089e0:	10c00415 	stw	r3,16(r2)
 80089e4:	10000515 	stw	zero,20(r2)
 80089e8:	003fed06 	br	80089a0 <__alt_data_end+0xfc0089a0>

080089ec <__ulp>:
 80089ec:	295ffc2c 	andhi	r5,r5,32752
 80089f0:	00bf3034 	movhi	r2,64704
 80089f4:	2887883a 	add	r3,r5,r2
 80089f8:	00c0020e 	bge	zero,r3,8008a04 <__ulp+0x18>
 80089fc:	0005883a 	mov	r2,zero
 8008a00:	f800283a 	ret
 8008a04:	00c7c83a 	sub	r3,zero,r3
 8008a08:	180bd53a 	srai	r5,r3,20
 8008a0c:	008004c4 	movi	r2,19
 8008a10:	11400a0e 	bge	r2,r5,8008a3c <__ulp+0x50>
 8008a14:	00800c84 	movi	r2,50
 8008a18:	0007883a 	mov	r3,zero
 8008a1c:	11400516 	blt	r2,r5,8008a34 <__ulp+0x48>
 8008a20:	00800cc4 	movi	r2,51
 8008a24:	114bc83a 	sub	r5,r2,r5
 8008a28:	00800044 	movi	r2,1
 8008a2c:	1144983a 	sll	r2,r2,r5
 8008a30:	f800283a 	ret
 8008a34:	00800044 	movi	r2,1
 8008a38:	f800283a 	ret
 8008a3c:	00800234 	movhi	r2,8
 8008a40:	1147d83a 	sra	r3,r2,r5
 8008a44:	0005883a 	mov	r2,zero
 8008a48:	f800283a 	ret

08008a4c <__b2d>:
 8008a4c:	defffa04 	addi	sp,sp,-24
 8008a50:	dc000015 	stw	r16,0(sp)
 8008a54:	24000417 	ldw	r16,16(r4)
 8008a58:	dc400115 	stw	r17,4(sp)
 8008a5c:	24400504 	addi	r17,r4,20
 8008a60:	8421883a 	add	r16,r16,r16
 8008a64:	8421883a 	add	r16,r16,r16
 8008a68:	8c21883a 	add	r16,r17,r16
 8008a6c:	dc800215 	stw	r18,8(sp)
 8008a70:	84bfff17 	ldw	r18,-4(r16)
 8008a74:	dd000415 	stw	r20,16(sp)
 8008a78:	dcc00315 	stw	r19,12(sp)
 8008a7c:	9009883a 	mov	r4,r18
 8008a80:	2829883a 	mov	r20,r5
 8008a84:	dfc00515 	stw	ra,20(sp)
 8008a88:	80081880 	call	8008188 <__hi0bits>
 8008a8c:	00c00804 	movi	r3,32
 8008a90:	1887c83a 	sub	r3,r3,r2
 8008a94:	a0c00015 	stw	r3,0(r20)
 8008a98:	00c00284 	movi	r3,10
 8008a9c:	84ffff04 	addi	r19,r16,-4
 8008aa0:	18801216 	blt	r3,r2,8008aec <__b2d+0xa0>
 8008aa4:	014002c4 	movi	r5,11
 8008aa8:	2889c83a 	sub	r4,r5,r2
 8008aac:	9106d83a 	srl	r3,r18,r4
 8008ab0:	18cffc34 	orhi	r3,r3,16368
 8008ab4:	8cc0282e 	bgeu	r17,r19,8008b58 <__b2d+0x10c>
 8008ab8:	817ffe17 	ldw	r5,-8(r16)
 8008abc:	290ad83a 	srl	r5,r5,r4
 8008ac0:	10800544 	addi	r2,r2,21
 8008ac4:	9084983a 	sll	r2,r18,r2
 8008ac8:	2884b03a 	or	r2,r5,r2
 8008acc:	dfc00517 	ldw	ra,20(sp)
 8008ad0:	dd000417 	ldw	r20,16(sp)
 8008ad4:	dcc00317 	ldw	r19,12(sp)
 8008ad8:	dc800217 	ldw	r18,8(sp)
 8008adc:	dc400117 	ldw	r17,4(sp)
 8008ae0:	dc000017 	ldw	r16,0(sp)
 8008ae4:	dec00604 	addi	sp,sp,24
 8008ae8:	f800283a 	ret
 8008aec:	113ffd44 	addi	r4,r2,-11
 8008af0:	8cc00f2e 	bgeu	r17,r19,8008b30 <__b2d+0xe4>
 8008af4:	81bffe04 	addi	r6,r16,-8
 8008af8:	817ffe17 	ldw	r5,-8(r16)
 8008afc:	20001326 	beq	r4,zero,8008b4c <__b2d+0x100>
 8008b00:	00c00ac4 	movi	r3,43
 8008b04:	1885c83a 	sub	r2,r3,r2
 8008b08:	2886d83a 	srl	r3,r5,r2
 8008b0c:	9124983a 	sll	r18,r18,r4
 8008b10:	90e4b03a 	or	r18,r18,r3
 8008b14:	90cffc34 	orhi	r3,r18,16368
 8008b18:	8980112e 	bgeu	r17,r6,8008b60 <__b2d+0x114>
 8008b1c:	81bffd17 	ldw	r6,-12(r16)
 8008b20:	308cd83a 	srl	r6,r6,r2
 8008b24:	2904983a 	sll	r2,r5,r4
 8008b28:	1184b03a 	or	r2,r2,r6
 8008b2c:	003fe706 	br	8008acc <__alt_data_end+0xfc008acc>
 8008b30:	20000526 	beq	r4,zero,8008b48 <__b2d+0xfc>
 8008b34:	9124983a 	sll	r18,r18,r4
 8008b38:	000d883a 	mov	r6,zero
 8008b3c:	000b883a 	mov	r5,zero
 8008b40:	90cffc34 	orhi	r3,r18,16368
 8008b44:	003ff706 	br	8008b24 <__alt_data_end+0xfc008b24>
 8008b48:	000b883a 	mov	r5,zero
 8008b4c:	90cffc34 	orhi	r3,r18,16368
 8008b50:	2805883a 	mov	r2,r5
 8008b54:	003fdd06 	br	8008acc <__alt_data_end+0xfc008acc>
 8008b58:	000b883a 	mov	r5,zero
 8008b5c:	003fd806 	br	8008ac0 <__alt_data_end+0xfc008ac0>
 8008b60:	000d883a 	mov	r6,zero
 8008b64:	003fef06 	br	8008b24 <__alt_data_end+0xfc008b24>

08008b68 <__d2b>:
 8008b68:	defff704 	addi	sp,sp,-36
 8008b6c:	dc000215 	stw	r16,8(sp)
 8008b70:	3021883a 	mov	r16,r6
 8008b74:	dc400315 	stw	r17,12(sp)
 8008b78:	8022907a 	slli	r17,r16,1
 8008b7c:	dd400715 	stw	r21,28(sp)
 8008b80:	282b883a 	mov	r21,r5
 8008b84:	01400044 	movi	r5,1
 8008b88:	dd000615 	stw	r20,24(sp)
 8008b8c:	dcc00515 	stw	r19,20(sp)
 8008b90:	dc800415 	stw	r18,16(sp)
 8008b94:	dfc00815 	stw	ra,32(sp)
 8008b98:	3829883a 	mov	r20,r7
 8008b9c:	dc800917 	ldw	r18,36(sp)
 8008ba0:	8822d57a 	srli	r17,r17,21
 8008ba4:	8007e780 	call	8007e78 <_Balloc>
 8008ba8:	1027883a 	mov	r19,r2
 8008bac:	00800434 	movhi	r2,16
 8008bb0:	10bfffc4 	addi	r2,r2,-1
 8008bb4:	808c703a 	and	r6,r16,r2
 8008bb8:	88000126 	beq	r17,zero,8008bc0 <__d2b+0x58>
 8008bbc:	31800434 	orhi	r6,r6,16
 8008bc0:	d9800015 	stw	r6,0(sp)
 8008bc4:	a8001f26 	beq	r21,zero,8008c44 <__d2b+0xdc>
 8008bc8:	d9000104 	addi	r4,sp,4
 8008bcc:	dd400115 	stw	r21,4(sp)
 8008bd0:	80081f00 	call	80081f0 <__lo0bits>
 8008bd4:	d8c00017 	ldw	r3,0(sp)
 8008bd8:	1000291e 	bne	r2,zero,8008c80 <__d2b+0x118>
 8008bdc:	d9000117 	ldw	r4,4(sp)
 8008be0:	99000515 	stw	r4,20(r19)
 8008be4:	1820c03a 	cmpne	r16,r3,zero
 8008be8:	84000044 	addi	r16,r16,1
 8008bec:	98c00615 	stw	r3,24(r19)
 8008bf0:	9c000415 	stw	r16,16(r19)
 8008bf4:	88001b1e 	bne	r17,zero,8008c64 <__d2b+0xfc>
 8008bf8:	800690ba 	slli	r3,r16,2
 8008bfc:	10bef384 	addi	r2,r2,-1074
 8008c00:	a0800015 	stw	r2,0(r20)
 8008c04:	98c5883a 	add	r2,r19,r3
 8008c08:	11000417 	ldw	r4,16(r2)
 8008c0c:	8020917a 	slli	r16,r16,5
 8008c10:	80081880 	call	8008188 <__hi0bits>
 8008c14:	8085c83a 	sub	r2,r16,r2
 8008c18:	90800015 	stw	r2,0(r18)
 8008c1c:	9805883a 	mov	r2,r19
 8008c20:	dfc00817 	ldw	ra,32(sp)
 8008c24:	dd400717 	ldw	r21,28(sp)
 8008c28:	dd000617 	ldw	r20,24(sp)
 8008c2c:	dcc00517 	ldw	r19,20(sp)
 8008c30:	dc800417 	ldw	r18,16(sp)
 8008c34:	dc400317 	ldw	r17,12(sp)
 8008c38:	dc000217 	ldw	r16,8(sp)
 8008c3c:	dec00904 	addi	sp,sp,36
 8008c40:	f800283a 	ret
 8008c44:	d809883a 	mov	r4,sp
 8008c48:	80081f00 	call	80081f0 <__lo0bits>
 8008c4c:	d8c00017 	ldw	r3,0(sp)
 8008c50:	04000044 	movi	r16,1
 8008c54:	9c000415 	stw	r16,16(r19)
 8008c58:	98c00515 	stw	r3,20(r19)
 8008c5c:	10800804 	addi	r2,r2,32
 8008c60:	883fe526 	beq	r17,zero,8008bf8 <__alt_data_end+0xfc008bf8>
 8008c64:	8c7ef344 	addi	r17,r17,-1075
 8008c68:	88a3883a 	add	r17,r17,r2
 8008c6c:	00c00d44 	movi	r3,53
 8008c70:	a4400015 	stw	r17,0(r20)
 8008c74:	1885c83a 	sub	r2,r3,r2
 8008c78:	90800015 	stw	r2,0(r18)
 8008c7c:	003fe706 	br	8008c1c <__alt_data_end+0xfc008c1c>
 8008c80:	01000804 	movi	r4,32
 8008c84:	2089c83a 	sub	r4,r4,r2
 8008c88:	1908983a 	sll	r4,r3,r4
 8008c8c:	d9400117 	ldw	r5,4(sp)
 8008c90:	1886d83a 	srl	r3,r3,r2
 8008c94:	2148b03a 	or	r4,r4,r5
 8008c98:	99000515 	stw	r4,20(r19)
 8008c9c:	d8c00015 	stw	r3,0(sp)
 8008ca0:	003fd006 	br	8008be4 <__alt_data_end+0xfc008be4>

08008ca4 <__ratio>:
 8008ca4:	defff904 	addi	sp,sp,-28
 8008ca8:	dc400315 	stw	r17,12(sp)
 8008cac:	2823883a 	mov	r17,r5
 8008cb0:	d9400104 	addi	r5,sp,4
 8008cb4:	dfc00615 	stw	ra,24(sp)
 8008cb8:	dcc00515 	stw	r19,20(sp)
 8008cbc:	dc800415 	stw	r18,16(sp)
 8008cc0:	2027883a 	mov	r19,r4
 8008cc4:	dc000215 	stw	r16,8(sp)
 8008cc8:	8008a4c0 	call	8008a4c <__b2d>
 8008ccc:	8809883a 	mov	r4,r17
 8008cd0:	d80b883a 	mov	r5,sp
 8008cd4:	1025883a 	mov	r18,r2
 8008cd8:	1821883a 	mov	r16,r3
 8008cdc:	8008a4c0 	call	8008a4c <__b2d>
 8008ce0:	8a400417 	ldw	r9,16(r17)
 8008ce4:	9a000417 	ldw	r8,16(r19)
 8008ce8:	100d883a 	mov	r6,r2
 8008cec:	d8800017 	ldw	r2,0(sp)
 8008cf0:	4251c83a 	sub	r8,r8,r9
 8008cf4:	4012917a 	slli	r9,r8,5
 8008cf8:	da000117 	ldw	r8,4(sp)
 8008cfc:	4091c83a 	sub	r8,r8,r2
 8008d00:	4251883a 	add	r8,r8,r9
 8008d04:	02000d0e 	bge	zero,r8,8008d3c <__ratio+0x98>
 8008d08:	4010953a 	slli	r8,r8,20
 8008d0c:	4421883a 	add	r16,r8,r16
 8008d10:	9009883a 	mov	r4,r18
 8008d14:	800b883a 	mov	r5,r16
 8008d18:	180f883a 	mov	r7,r3
 8008d1c:	800cbfc0 	call	800cbfc <__divdf3>
 8008d20:	dfc00617 	ldw	ra,24(sp)
 8008d24:	dcc00517 	ldw	r19,20(sp)
 8008d28:	dc800417 	ldw	r18,16(sp)
 8008d2c:	dc400317 	ldw	r17,12(sp)
 8008d30:	dc000217 	ldw	r16,8(sp)
 8008d34:	dec00704 	addi	sp,sp,28
 8008d38:	f800283a 	ret
 8008d3c:	4010953a 	slli	r8,r8,20
 8008d40:	1a07c83a 	sub	r3,r3,r8
 8008d44:	003ff206 	br	8008d10 <__alt_data_end+0xfc008d10>

08008d48 <_mprec_log10>:
 8008d48:	defffe04 	addi	sp,sp,-8
 8008d4c:	dc000015 	stw	r16,0(sp)
 8008d50:	dfc00115 	stw	ra,4(sp)
 8008d54:	008005c4 	movi	r2,23
 8008d58:	2021883a 	mov	r16,r4
 8008d5c:	11000d0e 	bge	r2,r4,8008d94 <_mprec_log10+0x4c>
 8008d60:	0005883a 	mov	r2,zero
 8008d64:	00cffc34 	movhi	r3,16368
 8008d68:	843fffc4 	addi	r16,r16,-1
 8008d6c:	1009883a 	mov	r4,r2
 8008d70:	180b883a 	mov	r5,r3
 8008d74:	000d883a 	mov	r6,zero
 8008d78:	01d00934 	movhi	r7,16420
 8008d7c:	800d7c00 	call	800d7c0 <__muldf3>
 8008d80:	803ff91e 	bne	r16,zero,8008d68 <__alt_data_end+0xfc008d68>
 8008d84:	dfc00117 	ldw	ra,4(sp)
 8008d88:	dc000017 	ldw	r16,0(sp)
 8008d8c:	dec00204 	addi	sp,sp,8
 8008d90:	f800283a 	ret
 8008d94:	202090fa 	slli	r16,r4,3
 8008d98:	00820074 	movhi	r2,2049
 8008d9c:	1086ff04 	addi	r2,r2,7164
 8008da0:	1421883a 	add	r16,r2,r16
 8008da4:	80800017 	ldw	r2,0(r16)
 8008da8:	80c00117 	ldw	r3,4(r16)
 8008dac:	dfc00117 	ldw	ra,4(sp)
 8008db0:	dc000017 	ldw	r16,0(sp)
 8008db4:	dec00204 	addi	sp,sp,8
 8008db8:	f800283a 	ret

08008dbc <__copybits>:
 8008dbc:	297fffc4 	addi	r5,r5,-1
 8008dc0:	280fd17a 	srai	r7,r5,5
 8008dc4:	30c00417 	ldw	r3,16(r6)
 8008dc8:	30800504 	addi	r2,r6,20
 8008dcc:	39c00044 	addi	r7,r7,1
 8008dd0:	18c7883a 	add	r3,r3,r3
 8008dd4:	39cf883a 	add	r7,r7,r7
 8008dd8:	18c7883a 	add	r3,r3,r3
 8008ddc:	39cf883a 	add	r7,r7,r7
 8008de0:	10c7883a 	add	r3,r2,r3
 8008de4:	21cf883a 	add	r7,r4,r7
 8008de8:	10c00d2e 	bgeu	r2,r3,8008e20 <__copybits+0x64>
 8008dec:	200b883a 	mov	r5,r4
 8008df0:	12000017 	ldw	r8,0(r2)
 8008df4:	29400104 	addi	r5,r5,4
 8008df8:	10800104 	addi	r2,r2,4
 8008dfc:	2a3fff15 	stw	r8,-4(r5)
 8008e00:	10fffb36 	bltu	r2,r3,8008df0 <__alt_data_end+0xfc008df0>
 8008e04:	1985c83a 	sub	r2,r3,r6
 8008e08:	10bffac4 	addi	r2,r2,-21
 8008e0c:	1004d0ba 	srli	r2,r2,2
 8008e10:	10800044 	addi	r2,r2,1
 8008e14:	1085883a 	add	r2,r2,r2
 8008e18:	1085883a 	add	r2,r2,r2
 8008e1c:	2089883a 	add	r4,r4,r2
 8008e20:	21c0032e 	bgeu	r4,r7,8008e30 <__copybits+0x74>
 8008e24:	20000015 	stw	zero,0(r4)
 8008e28:	21000104 	addi	r4,r4,4
 8008e2c:	21fffd36 	bltu	r4,r7,8008e24 <__alt_data_end+0xfc008e24>
 8008e30:	f800283a 	ret

08008e34 <__any_on>:
 8008e34:	20c00417 	ldw	r3,16(r4)
 8008e38:	2805d17a 	srai	r2,r5,5
 8008e3c:	21000504 	addi	r4,r4,20
 8008e40:	18800d0e 	bge	r3,r2,8008e78 <__any_on+0x44>
 8008e44:	18c7883a 	add	r3,r3,r3
 8008e48:	18c7883a 	add	r3,r3,r3
 8008e4c:	20c7883a 	add	r3,r4,r3
 8008e50:	20c0192e 	bgeu	r4,r3,8008eb8 <__any_on+0x84>
 8008e54:	18bfff17 	ldw	r2,-4(r3)
 8008e58:	18ffff04 	addi	r3,r3,-4
 8008e5c:	1000041e 	bne	r2,zero,8008e70 <__any_on+0x3c>
 8008e60:	20c0142e 	bgeu	r4,r3,8008eb4 <__any_on+0x80>
 8008e64:	18ffff04 	addi	r3,r3,-4
 8008e68:	19400017 	ldw	r5,0(r3)
 8008e6c:	283ffc26 	beq	r5,zero,8008e60 <__alt_data_end+0xfc008e60>
 8008e70:	00800044 	movi	r2,1
 8008e74:	f800283a 	ret
 8008e78:	10c00a0e 	bge	r2,r3,8008ea4 <__any_on+0x70>
 8008e7c:	1085883a 	add	r2,r2,r2
 8008e80:	1085883a 	add	r2,r2,r2
 8008e84:	294007cc 	andi	r5,r5,31
 8008e88:	2087883a 	add	r3,r4,r2
 8008e8c:	283ff026 	beq	r5,zero,8008e50 <__alt_data_end+0xfc008e50>
 8008e90:	19800017 	ldw	r6,0(r3)
 8008e94:	3144d83a 	srl	r2,r6,r5
 8008e98:	114a983a 	sll	r5,r2,r5
 8008e9c:	29bff41e 	bne	r5,r6,8008e70 <__alt_data_end+0xfc008e70>
 8008ea0:	003feb06 	br	8008e50 <__alt_data_end+0xfc008e50>
 8008ea4:	1085883a 	add	r2,r2,r2
 8008ea8:	1085883a 	add	r2,r2,r2
 8008eac:	2087883a 	add	r3,r4,r2
 8008eb0:	003fe706 	br	8008e50 <__alt_data_end+0xfc008e50>
 8008eb4:	f800283a 	ret
 8008eb8:	0005883a 	mov	r2,zero
 8008ebc:	f800283a 	ret

08008ec0 <_realloc_r>:
 8008ec0:	defff604 	addi	sp,sp,-40
 8008ec4:	dcc00315 	stw	r19,12(sp)
 8008ec8:	dc400115 	stw	r17,4(sp)
 8008ecc:	dfc00915 	stw	ra,36(sp)
 8008ed0:	df000815 	stw	fp,32(sp)
 8008ed4:	ddc00715 	stw	r23,28(sp)
 8008ed8:	dd800615 	stw	r22,24(sp)
 8008edc:	dd400515 	stw	r21,20(sp)
 8008ee0:	dd000415 	stw	r20,16(sp)
 8008ee4:	dc800215 	stw	r18,8(sp)
 8008ee8:	dc000015 	stw	r16,0(sp)
 8008eec:	2827883a 	mov	r19,r5
 8008ef0:	3023883a 	mov	r17,r6
 8008ef4:	2800bf26 	beq	r5,zero,80091f4 <_realloc_r+0x334>
 8008ef8:	2025883a 	mov	r18,r4
 8008efc:	800f13c0 	call	800f13c <__malloc_lock>
 8008f00:	98ffff17 	ldw	r3,-4(r19)
 8008f04:	01bfff04 	movi	r6,-4
 8008f08:	890002c4 	addi	r4,r17,11
 8008f0c:	01c00584 	movi	r7,22
 8008f10:	9d7ffe04 	addi	r21,r19,-8
 8008f14:	19a0703a 	and	r16,r3,r6
 8008f18:	39003f2e 	bgeu	r7,r4,8009018 <_realloc_r+0x158>
 8008f1c:	053ffe04 	movi	r20,-8
 8008f20:	2528703a 	and	r20,r4,r20
 8008f24:	a00f883a 	mov	r7,r20
 8008f28:	a0008216 	blt	r20,zero,8009134 <_realloc_r+0x274>
 8008f2c:	a4408136 	bltu	r20,r17,8009134 <_realloc_r+0x274>
 8008f30:	81c03c0e 	bge	r16,r7,8009024 <_realloc_r+0x164>
 8008f34:	07020074 	movhi	fp,2049
 8008f38:	e708ad04 	addi	fp,fp,8884
 8008f3c:	e1000217 	ldw	r4,8(fp)
 8008f40:	ac05883a 	add	r2,r21,r16
 8008f44:	2080bf26 	beq	r4,r2,8009244 <_realloc_r+0x384>
 8008f48:	11000117 	ldw	r4,4(r2)
 8008f4c:	023fff84 	movi	r8,-2
 8008f50:	2210703a 	and	r8,r4,r8
 8008f54:	1211883a 	add	r8,r2,r8
 8008f58:	41400117 	ldw	r5,4(r8)
 8008f5c:	2940004c 	andi	r5,r5,1
 8008f60:	28004a1e 	bne	r5,zero,800908c <_realloc_r+0x1cc>
 8008f64:	017fff04 	movi	r5,-4
 8008f68:	2148703a 	and	r4,r4,r5
 8008f6c:	2409883a 	add	r4,r4,r16
 8008f70:	21c0ad0e 	bge	r4,r7,8009228 <_realloc_r+0x368>
 8008f74:	18c0004c 	andi	r3,r3,1
 8008f78:	18007f1e 	bne	r3,zero,8009178 <_realloc_r+0x2b8>
 8008f7c:	9dfffe17 	ldw	r23,-8(r19)
 8008f80:	adefc83a 	sub	r23,r21,r23
 8008f84:	bd800117 	ldw	r22,4(r23)
 8008f88:	b14a703a 	and	r5,r22,r5
 8008f8c:	216d883a 	add	r22,r4,r5
 8008f90:	b1c04516 	blt	r22,r7,80090a8 <_realloc_r+0x1e8>
 8008f94:	10c00317 	ldw	r3,12(r2)
 8008f98:	10800217 	ldw	r2,8(r2)
 8008f9c:	81bfff04 	addi	r6,r16,-4
 8008fa0:	bc400204 	addi	r17,r23,8
 8008fa4:	10c00315 	stw	r3,12(r2)
 8008fa8:	18800215 	stw	r2,8(r3)
 8008fac:	b9400217 	ldw	r5,8(r23)
 8008fb0:	b8c00317 	ldw	r3,12(r23)
 8008fb4:	00800904 	movi	r2,36
 8008fb8:	28c00315 	stw	r3,12(r5)
 8008fbc:	19400215 	stw	r5,8(r3)
 8008fc0:	1180ef36 	bltu	r2,r6,8009380 <_realloc_r+0x4c0>
 8008fc4:	008004c4 	movi	r2,19
 8008fc8:	1180da2e 	bgeu	r2,r6,8009334 <_realloc_r+0x474>
 8008fcc:	98800017 	ldw	r2,0(r19)
 8008fd0:	b8800215 	stw	r2,8(r23)
 8008fd4:	98800117 	ldw	r2,4(r19)
 8008fd8:	b8800315 	stw	r2,12(r23)
 8008fdc:	008006c4 	movi	r2,27
 8008fe0:	1180fc2e 	bgeu	r2,r6,80093d4 <_realloc_r+0x514>
 8008fe4:	98800217 	ldw	r2,8(r19)
 8008fe8:	b8800415 	stw	r2,16(r23)
 8008fec:	98800317 	ldw	r2,12(r19)
 8008ff0:	b8800515 	stw	r2,20(r23)
 8008ff4:	00800904 	movi	r2,36
 8008ff8:	3080421e 	bne	r6,r2,8009104 <_realloc_r+0x244>
 8008ffc:	98800417 	ldw	r2,16(r19)
 8009000:	9cc00604 	addi	r19,r19,24
 8009004:	b8c00804 	addi	r3,r23,32
 8009008:	b8800615 	stw	r2,24(r23)
 800900c:	98bfff17 	ldw	r2,-4(r19)
 8009010:	b8800715 	stw	r2,28(r23)
 8009014:	00003d06 	br	800910c <_realloc_r+0x24c>
 8009018:	01c00404 	movi	r7,16
 800901c:	3829883a 	mov	r20,r7
 8009020:	003fc206 	br	8008f2c <__alt_data_end+0xfc008f2c>
 8009024:	9823883a 	mov	r17,r19
 8009028:	850fc83a 	sub	r7,r16,r20
 800902c:	008003c4 	movi	r2,15
 8009030:	18c0004c 	andi	r3,r3,1
 8009034:	11c04336 	bltu	r2,r7,8009144 <_realloc_r+0x284>
 8009038:	1c06b03a 	or	r3,r3,r16
 800903c:	a8c00115 	stw	r3,4(r21)
 8009040:	ac21883a 	add	r16,r21,r16
 8009044:	80c00117 	ldw	r3,4(r16)
 8009048:	18c00054 	ori	r3,r3,1
 800904c:	80c00115 	stw	r3,4(r16)
 8009050:	9009883a 	mov	r4,r18
 8009054:	800f15c0 	call	800f15c <__malloc_unlock>
 8009058:	8805883a 	mov	r2,r17
 800905c:	dfc00917 	ldw	ra,36(sp)
 8009060:	df000817 	ldw	fp,32(sp)
 8009064:	ddc00717 	ldw	r23,28(sp)
 8009068:	dd800617 	ldw	r22,24(sp)
 800906c:	dd400517 	ldw	r21,20(sp)
 8009070:	dd000417 	ldw	r20,16(sp)
 8009074:	dcc00317 	ldw	r19,12(sp)
 8009078:	dc800217 	ldw	r18,8(sp)
 800907c:	dc400117 	ldw	r17,4(sp)
 8009080:	dc000017 	ldw	r16,0(sp)
 8009084:	dec00a04 	addi	sp,sp,40
 8009088:	f800283a 	ret
 800908c:	18c0004c 	andi	r3,r3,1
 8009090:	1800391e 	bne	r3,zero,8009178 <_realloc_r+0x2b8>
 8009094:	9dfffe17 	ldw	r23,-8(r19)
 8009098:	00bfff04 	movi	r2,-4
 800909c:	adefc83a 	sub	r23,r21,r23
 80090a0:	b9400117 	ldw	r5,4(r23)
 80090a4:	288a703a 	and	r5,r5,r2
 80090a8:	2c2d883a 	add	r22,r5,r16
 80090ac:	b1c03216 	blt	r22,r7,8009178 <_realloc_r+0x2b8>
 80090b0:	b8800317 	ldw	r2,12(r23)
 80090b4:	b8c00217 	ldw	r3,8(r23)
 80090b8:	81bfff04 	addi	r6,r16,-4
 80090bc:	01000904 	movi	r4,36
 80090c0:	18800315 	stw	r2,12(r3)
 80090c4:	10c00215 	stw	r3,8(r2)
 80090c8:	bc400204 	addi	r17,r23,8
 80090cc:	2180ac36 	bltu	r4,r6,8009380 <_realloc_r+0x4c0>
 80090d0:	008004c4 	movi	r2,19
 80090d4:	1180972e 	bgeu	r2,r6,8009334 <_realloc_r+0x474>
 80090d8:	98800017 	ldw	r2,0(r19)
 80090dc:	b8800215 	stw	r2,8(r23)
 80090e0:	98800117 	ldw	r2,4(r19)
 80090e4:	b8800315 	stw	r2,12(r23)
 80090e8:	008006c4 	movi	r2,27
 80090ec:	1180b92e 	bgeu	r2,r6,80093d4 <_realloc_r+0x514>
 80090f0:	98800217 	ldw	r2,8(r19)
 80090f4:	b8800415 	stw	r2,16(r23)
 80090f8:	98800317 	ldw	r2,12(r19)
 80090fc:	b8800515 	stw	r2,20(r23)
 8009100:	313fbe26 	beq	r6,r4,8008ffc <__alt_data_end+0xfc008ffc>
 8009104:	b8c00604 	addi	r3,r23,24
 8009108:	9cc00404 	addi	r19,r19,16
 800910c:	98800017 	ldw	r2,0(r19)
 8009110:	b021883a 	mov	r16,r22
 8009114:	b82b883a 	mov	r21,r23
 8009118:	18800015 	stw	r2,0(r3)
 800911c:	98800117 	ldw	r2,4(r19)
 8009120:	18800115 	stw	r2,4(r3)
 8009124:	98800217 	ldw	r2,8(r19)
 8009128:	18800215 	stw	r2,8(r3)
 800912c:	b8c00117 	ldw	r3,4(r23)
 8009130:	003fbd06 	br	8009028 <__alt_data_end+0xfc009028>
 8009134:	00800304 	movi	r2,12
 8009138:	90800015 	stw	r2,0(r18)
 800913c:	0005883a 	mov	r2,zero
 8009140:	003fc606 	br	800905c <__alt_data_end+0xfc00905c>
 8009144:	1d06b03a 	or	r3,r3,r20
 8009148:	ad0b883a 	add	r5,r21,r20
 800914c:	a8c00115 	stw	r3,4(r21)
 8009150:	38800054 	ori	r2,r7,1
 8009154:	28800115 	stw	r2,4(r5)
 8009158:	29cf883a 	add	r7,r5,r7
 800915c:	38800117 	ldw	r2,4(r7)
 8009160:	9009883a 	mov	r4,r18
 8009164:	29400204 	addi	r5,r5,8
 8009168:	10800054 	ori	r2,r2,1
 800916c:	38800115 	stw	r2,4(r7)
 8009170:	80066940 	call	8006694 <_free_r>
 8009174:	003fb606 	br	8009050 <__alt_data_end+0xfc009050>
 8009178:	880b883a 	mov	r5,r17
 800917c:	9009883a 	mov	r4,r18
 8009180:	80072300 	call	8007230 <_malloc_r>
 8009184:	1023883a 	mov	r17,r2
 8009188:	1000aa26 	beq	r2,zero,8009434 <_realloc_r+0x574>
 800918c:	98ffff17 	ldw	r3,-4(r19)
 8009190:	113ffe04 	addi	r4,r2,-8
 8009194:	00bfff84 	movi	r2,-2
 8009198:	1884703a 	and	r2,r3,r2
 800919c:	a885883a 	add	r2,r21,r2
 80091a0:	20808626 	beq	r4,r2,80093bc <_realloc_r+0x4fc>
 80091a4:	81bfff04 	addi	r6,r16,-4
 80091a8:	00800904 	movi	r2,36
 80091ac:	11807036 	bltu	r2,r6,8009370 <_realloc_r+0x4b0>
 80091b0:	00c004c4 	movi	r3,19
 80091b4:	19805636 	bltu	r3,r6,8009310 <_realloc_r+0x450>
 80091b8:	8805883a 	mov	r2,r17
 80091bc:	9807883a 	mov	r3,r19
 80091c0:	19000017 	ldw	r4,0(r3)
 80091c4:	11000015 	stw	r4,0(r2)
 80091c8:	19000117 	ldw	r4,4(r3)
 80091cc:	11000115 	stw	r4,4(r2)
 80091d0:	18c00217 	ldw	r3,8(r3)
 80091d4:	10c00215 	stw	r3,8(r2)
 80091d8:	980b883a 	mov	r5,r19
 80091dc:	9009883a 	mov	r4,r18
 80091e0:	80066940 	call	8006694 <_free_r>
 80091e4:	9009883a 	mov	r4,r18
 80091e8:	800f15c0 	call	800f15c <__malloc_unlock>
 80091ec:	8805883a 	mov	r2,r17
 80091f0:	003f9a06 	br	800905c <__alt_data_end+0xfc00905c>
 80091f4:	300b883a 	mov	r5,r6
 80091f8:	dfc00917 	ldw	ra,36(sp)
 80091fc:	df000817 	ldw	fp,32(sp)
 8009200:	ddc00717 	ldw	r23,28(sp)
 8009204:	dd800617 	ldw	r22,24(sp)
 8009208:	dd400517 	ldw	r21,20(sp)
 800920c:	dd000417 	ldw	r20,16(sp)
 8009210:	dcc00317 	ldw	r19,12(sp)
 8009214:	dc800217 	ldw	r18,8(sp)
 8009218:	dc400117 	ldw	r17,4(sp)
 800921c:	dc000017 	ldw	r16,0(sp)
 8009220:	dec00a04 	addi	sp,sp,40
 8009224:	80072301 	jmpi	8007230 <_malloc_r>
 8009228:	11400317 	ldw	r5,12(r2)
 800922c:	10800217 	ldw	r2,8(r2)
 8009230:	9823883a 	mov	r17,r19
 8009234:	2021883a 	mov	r16,r4
 8009238:	11400315 	stw	r5,12(r2)
 800923c:	28800215 	stw	r2,8(r5)
 8009240:	003f7906 	br	8009028 <__alt_data_end+0xfc009028>
 8009244:	21000117 	ldw	r4,4(r4)
 8009248:	00bfff04 	movi	r2,-4
 800924c:	a1800404 	addi	r6,r20,16
 8009250:	2088703a 	and	r4,r4,r2
 8009254:	2409883a 	add	r4,r4,r16
 8009258:	2180380e 	bge	r4,r6,800933c <_realloc_r+0x47c>
 800925c:	18c0004c 	andi	r3,r3,1
 8009260:	183fc51e 	bne	r3,zero,8009178 <__alt_data_end+0xfc009178>
 8009264:	9dfffe17 	ldw	r23,-8(r19)
 8009268:	adefc83a 	sub	r23,r21,r23
 800926c:	b9400117 	ldw	r5,4(r23)
 8009270:	288a703a 	and	r5,r5,r2
 8009274:	216d883a 	add	r22,r4,r5
 8009278:	b1bf8b16 	blt	r22,r6,80090a8 <__alt_data_end+0xfc0090a8>
 800927c:	b8800317 	ldw	r2,12(r23)
 8009280:	b8c00217 	ldw	r3,8(r23)
 8009284:	81bfff04 	addi	r6,r16,-4
 8009288:	01000904 	movi	r4,36
 800928c:	18800315 	stw	r2,12(r3)
 8009290:	10c00215 	stw	r3,8(r2)
 8009294:	bc400204 	addi	r17,r23,8
 8009298:	21805a36 	bltu	r4,r6,8009404 <_realloc_r+0x544>
 800929c:	008004c4 	movi	r2,19
 80092a0:	1180562e 	bgeu	r2,r6,80093fc <_realloc_r+0x53c>
 80092a4:	98800017 	ldw	r2,0(r19)
 80092a8:	b8800215 	stw	r2,8(r23)
 80092ac:	98800117 	ldw	r2,4(r19)
 80092b0:	b8800315 	stw	r2,12(r23)
 80092b4:	008006c4 	movi	r2,27
 80092b8:	11805636 	bltu	r2,r6,8009414 <_realloc_r+0x554>
 80092bc:	b8800404 	addi	r2,r23,16
 80092c0:	9cc00204 	addi	r19,r19,8
 80092c4:	98c00017 	ldw	r3,0(r19)
 80092c8:	10c00015 	stw	r3,0(r2)
 80092cc:	98c00117 	ldw	r3,4(r19)
 80092d0:	10c00115 	stw	r3,4(r2)
 80092d4:	98c00217 	ldw	r3,8(r19)
 80092d8:	10c00215 	stw	r3,8(r2)
 80092dc:	bd07883a 	add	r3,r23,r20
 80092e0:	b505c83a 	sub	r2,r22,r20
 80092e4:	e0c00215 	stw	r3,8(fp)
 80092e8:	10800054 	ori	r2,r2,1
 80092ec:	18800115 	stw	r2,4(r3)
 80092f0:	b8800117 	ldw	r2,4(r23)
 80092f4:	9009883a 	mov	r4,r18
 80092f8:	1080004c 	andi	r2,r2,1
 80092fc:	a0a8b03a 	or	r20,r20,r2
 8009300:	bd000115 	stw	r20,4(r23)
 8009304:	800f15c0 	call	800f15c <__malloc_unlock>
 8009308:	8805883a 	mov	r2,r17
 800930c:	003f5306 	br	800905c <__alt_data_end+0xfc00905c>
 8009310:	98c00017 	ldw	r3,0(r19)
 8009314:	88c00015 	stw	r3,0(r17)
 8009318:	98c00117 	ldw	r3,4(r19)
 800931c:	88c00115 	stw	r3,4(r17)
 8009320:	00c006c4 	movi	r3,27
 8009324:	19801d36 	bltu	r3,r6,800939c <_realloc_r+0x4dc>
 8009328:	88800204 	addi	r2,r17,8
 800932c:	98c00204 	addi	r3,r19,8
 8009330:	003fa306 	br	80091c0 <__alt_data_end+0xfc0091c0>
 8009334:	8807883a 	mov	r3,r17
 8009338:	003f7406 	br	800910c <__alt_data_end+0xfc00910c>
 800933c:	ad2b883a 	add	r21,r21,r20
 8009340:	2505c83a 	sub	r2,r4,r20
 8009344:	e5400215 	stw	r21,8(fp)
 8009348:	10800054 	ori	r2,r2,1
 800934c:	a8800115 	stw	r2,4(r21)
 8009350:	98bfff17 	ldw	r2,-4(r19)
 8009354:	9009883a 	mov	r4,r18
 8009358:	1080004c 	andi	r2,r2,1
 800935c:	a0a8b03a 	or	r20,r20,r2
 8009360:	9d3fff15 	stw	r20,-4(r19)
 8009364:	800f15c0 	call	800f15c <__malloc_unlock>
 8009368:	9805883a 	mov	r2,r19
 800936c:	003f3b06 	br	800905c <__alt_data_end+0xfc00905c>
 8009370:	8809883a 	mov	r4,r17
 8009374:	980b883a 	mov	r5,r19
 8009378:	8007bf80 	call	8007bf8 <memmove>
 800937c:	003f9606 	br	80091d8 <__alt_data_end+0xfc0091d8>
 8009380:	8809883a 	mov	r4,r17
 8009384:	980b883a 	mov	r5,r19
 8009388:	8007bf80 	call	8007bf8 <memmove>
 800938c:	b8c00117 	ldw	r3,4(r23)
 8009390:	b021883a 	mov	r16,r22
 8009394:	b82b883a 	mov	r21,r23
 8009398:	003f2306 	br	8009028 <__alt_data_end+0xfc009028>
 800939c:	98c00217 	ldw	r3,8(r19)
 80093a0:	88c00215 	stw	r3,8(r17)
 80093a4:	98c00317 	ldw	r3,12(r19)
 80093a8:	88c00315 	stw	r3,12(r17)
 80093ac:	30800c26 	beq	r6,r2,80093e0 <_realloc_r+0x520>
 80093b0:	88800404 	addi	r2,r17,16
 80093b4:	98c00404 	addi	r3,r19,16
 80093b8:	003f8106 	br	80091c0 <__alt_data_end+0xfc0091c0>
 80093bc:	893fff17 	ldw	r4,-4(r17)
 80093c0:	00bfff04 	movi	r2,-4
 80093c4:	9823883a 	mov	r17,r19
 80093c8:	2084703a 	and	r2,r4,r2
 80093cc:	80a1883a 	add	r16,r16,r2
 80093d0:	003f1506 	br	8009028 <__alt_data_end+0xfc009028>
 80093d4:	b8c00404 	addi	r3,r23,16
 80093d8:	9cc00204 	addi	r19,r19,8
 80093dc:	003f4b06 	br	800910c <__alt_data_end+0xfc00910c>
 80093e0:	99000417 	ldw	r4,16(r19)
 80093e4:	88800604 	addi	r2,r17,24
 80093e8:	98c00604 	addi	r3,r19,24
 80093ec:	89000415 	stw	r4,16(r17)
 80093f0:	99000517 	ldw	r4,20(r19)
 80093f4:	89000515 	stw	r4,20(r17)
 80093f8:	003f7106 	br	80091c0 <__alt_data_end+0xfc0091c0>
 80093fc:	8805883a 	mov	r2,r17
 8009400:	003fb006 	br	80092c4 <__alt_data_end+0xfc0092c4>
 8009404:	8809883a 	mov	r4,r17
 8009408:	980b883a 	mov	r5,r19
 800940c:	8007bf80 	call	8007bf8 <memmove>
 8009410:	003fb206 	br	80092dc <__alt_data_end+0xfc0092dc>
 8009414:	98800217 	ldw	r2,8(r19)
 8009418:	b8800415 	stw	r2,16(r23)
 800941c:	98800317 	ldw	r2,12(r19)
 8009420:	b8800515 	stw	r2,20(r23)
 8009424:	31000726 	beq	r6,r4,8009444 <_realloc_r+0x584>
 8009428:	b8800604 	addi	r2,r23,24
 800942c:	9cc00404 	addi	r19,r19,16
 8009430:	003fa406 	br	80092c4 <__alt_data_end+0xfc0092c4>
 8009434:	9009883a 	mov	r4,r18
 8009438:	800f15c0 	call	800f15c <__malloc_unlock>
 800943c:	0005883a 	mov	r2,zero
 8009440:	003f0606 	br	800905c <__alt_data_end+0xfc00905c>
 8009444:	98c00417 	ldw	r3,16(r19)
 8009448:	9cc00604 	addi	r19,r19,24
 800944c:	b8800804 	addi	r2,r23,32
 8009450:	b8c00615 	stw	r3,24(r23)
 8009454:	98ffff17 	ldw	r3,-4(r19)
 8009458:	b8c00715 	stw	r3,28(r23)
 800945c:	003f9906 	br	80092c4 <__alt_data_end+0xfc0092c4>

08009460 <__fpclassifyd>:
 8009460:	00a00034 	movhi	r2,32768
 8009464:	10bfffc4 	addi	r2,r2,-1
 8009468:	2884703a 	and	r2,r5,r2
 800946c:	10000726 	beq	r2,zero,800948c <__fpclassifyd+0x2c>
 8009470:	00fffc34 	movhi	r3,65520
 8009474:	019ff834 	movhi	r6,32736
 8009478:	28c7883a 	add	r3,r5,r3
 800947c:	31bfffc4 	addi	r6,r6,-1
 8009480:	30c00536 	bltu	r6,r3,8009498 <__fpclassifyd+0x38>
 8009484:	00800104 	movi	r2,4
 8009488:	f800283a 	ret
 800948c:	2000021e 	bne	r4,zero,8009498 <__fpclassifyd+0x38>
 8009490:	00800084 	movi	r2,2
 8009494:	f800283a 	ret
 8009498:	00dffc34 	movhi	r3,32752
 800949c:	019ff834 	movhi	r6,32736
 80094a0:	28cb883a 	add	r5,r5,r3
 80094a4:	31bfffc4 	addi	r6,r6,-1
 80094a8:	317ff62e 	bgeu	r6,r5,8009484 <__alt_data_end+0xfc009484>
 80094ac:	01400434 	movhi	r5,16
 80094b0:	297fffc4 	addi	r5,r5,-1
 80094b4:	28800236 	bltu	r5,r2,80094c0 <__fpclassifyd+0x60>
 80094b8:	008000c4 	movi	r2,3
 80094bc:	f800283a 	ret
 80094c0:	10c00226 	beq	r2,r3,80094cc <__fpclassifyd+0x6c>
 80094c4:	0005883a 	mov	r2,zero
 80094c8:	f800283a 	ret
 80094cc:	2005003a 	cmpeq	r2,r4,zero
 80094d0:	f800283a 	ret

080094d4 <_sbrk_r>:
 80094d4:	defffd04 	addi	sp,sp,-12
 80094d8:	dc000015 	stw	r16,0(sp)
 80094dc:	04020074 	movhi	r16,2049
 80094e0:	dc400115 	stw	r17,4(sp)
 80094e4:	84150304 	addi	r16,r16,21516
 80094e8:	2023883a 	mov	r17,r4
 80094ec:	2809883a 	mov	r4,r5
 80094f0:	dfc00215 	stw	ra,8(sp)
 80094f4:	80000015 	stw	zero,0(r16)
 80094f8:	800f3500 	call	800f350 <sbrk>
 80094fc:	00ffffc4 	movi	r3,-1
 8009500:	10c00526 	beq	r2,r3,8009518 <_sbrk_r+0x44>
 8009504:	dfc00217 	ldw	ra,8(sp)
 8009508:	dc400117 	ldw	r17,4(sp)
 800950c:	dc000017 	ldw	r16,0(sp)
 8009510:	dec00304 	addi	sp,sp,12
 8009514:	f800283a 	ret
 8009518:	80c00017 	ldw	r3,0(r16)
 800951c:	183ff926 	beq	r3,zero,8009504 <__alt_data_end+0xfc009504>
 8009520:	88c00015 	stw	r3,0(r17)
 8009524:	003ff706 	br	8009504 <__alt_data_end+0xfc009504>

08009528 <__sread>:
 8009528:	defffe04 	addi	sp,sp,-8
 800952c:	dc000015 	stw	r16,0(sp)
 8009530:	2821883a 	mov	r16,r5
 8009534:	2940038f 	ldh	r5,14(r5)
 8009538:	dfc00115 	stw	ra,4(sp)
 800953c:	800b1e40 	call	800b1e4 <_read_r>
 8009540:	10000716 	blt	r2,zero,8009560 <__sread+0x38>
 8009544:	80c01417 	ldw	r3,80(r16)
 8009548:	1887883a 	add	r3,r3,r2
 800954c:	80c01415 	stw	r3,80(r16)
 8009550:	dfc00117 	ldw	ra,4(sp)
 8009554:	dc000017 	ldw	r16,0(sp)
 8009558:	dec00204 	addi	sp,sp,8
 800955c:	f800283a 	ret
 8009560:	80c0030b 	ldhu	r3,12(r16)
 8009564:	18fbffcc 	andi	r3,r3,61439
 8009568:	80c0030d 	sth	r3,12(r16)
 800956c:	dfc00117 	ldw	ra,4(sp)
 8009570:	dc000017 	ldw	r16,0(sp)
 8009574:	dec00204 	addi	sp,sp,8
 8009578:	f800283a 	ret

0800957c <__seofread>:
 800957c:	0005883a 	mov	r2,zero
 8009580:	f800283a 	ret

08009584 <__swrite>:
 8009584:	2880030b 	ldhu	r2,12(r5)
 8009588:	defffb04 	addi	sp,sp,-20
 800958c:	dcc00315 	stw	r19,12(sp)
 8009590:	dc800215 	stw	r18,8(sp)
 8009594:	dc400115 	stw	r17,4(sp)
 8009598:	dc000015 	stw	r16,0(sp)
 800959c:	dfc00415 	stw	ra,16(sp)
 80095a0:	10c0400c 	andi	r3,r2,256
 80095a4:	2821883a 	mov	r16,r5
 80095a8:	2027883a 	mov	r19,r4
 80095ac:	3025883a 	mov	r18,r6
 80095b0:	3823883a 	mov	r17,r7
 80095b4:	18000526 	beq	r3,zero,80095cc <__swrite+0x48>
 80095b8:	2940038f 	ldh	r5,14(r5)
 80095bc:	000d883a 	mov	r6,zero
 80095c0:	01c00084 	movi	r7,2
 80095c4:	800b1880 	call	800b188 <_lseek_r>
 80095c8:	8080030b 	ldhu	r2,12(r16)
 80095cc:	8140038f 	ldh	r5,14(r16)
 80095d0:	10bbffcc 	andi	r2,r2,61439
 80095d4:	9809883a 	mov	r4,r19
 80095d8:	900d883a 	mov	r6,r18
 80095dc:	880f883a 	mov	r7,r17
 80095e0:	8080030d 	sth	r2,12(r16)
 80095e4:	dfc00417 	ldw	ra,16(sp)
 80095e8:	dcc00317 	ldw	r19,12(sp)
 80095ec:	dc800217 	ldw	r18,8(sp)
 80095f0:	dc400117 	ldw	r17,4(sp)
 80095f4:	dc000017 	ldw	r16,0(sp)
 80095f8:	dec00504 	addi	sp,sp,20
 80095fc:	800ac641 	jmpi	800ac64 <_write_r>

08009600 <__sseek>:
 8009600:	defffe04 	addi	sp,sp,-8
 8009604:	dc000015 	stw	r16,0(sp)
 8009608:	2821883a 	mov	r16,r5
 800960c:	2940038f 	ldh	r5,14(r5)
 8009610:	dfc00115 	stw	ra,4(sp)
 8009614:	800b1880 	call	800b188 <_lseek_r>
 8009618:	00ffffc4 	movi	r3,-1
 800961c:	10c00826 	beq	r2,r3,8009640 <__sseek+0x40>
 8009620:	80c0030b 	ldhu	r3,12(r16)
 8009624:	80801415 	stw	r2,80(r16)
 8009628:	18c40014 	ori	r3,r3,4096
 800962c:	80c0030d 	sth	r3,12(r16)
 8009630:	dfc00117 	ldw	ra,4(sp)
 8009634:	dc000017 	ldw	r16,0(sp)
 8009638:	dec00204 	addi	sp,sp,8
 800963c:	f800283a 	ret
 8009640:	80c0030b 	ldhu	r3,12(r16)
 8009644:	18fbffcc 	andi	r3,r3,61439
 8009648:	80c0030d 	sth	r3,12(r16)
 800964c:	dfc00117 	ldw	ra,4(sp)
 8009650:	dc000017 	ldw	r16,0(sp)
 8009654:	dec00204 	addi	sp,sp,8
 8009658:	f800283a 	ret

0800965c <__sclose>:
 800965c:	2940038f 	ldh	r5,14(r5)
 8009660:	800acc01 	jmpi	800acc0 <_close_r>

08009664 <strcmp>:
 8009664:	2144b03a 	or	r2,r4,r5
 8009668:	108000cc 	andi	r2,r2,3
 800966c:	1000171e 	bne	r2,zero,80096cc <strcmp+0x68>
 8009670:	20800017 	ldw	r2,0(r4)
 8009674:	28c00017 	ldw	r3,0(r5)
 8009678:	10c0141e 	bne	r2,r3,80096cc <strcmp+0x68>
 800967c:	027fbff4 	movhi	r9,65279
 8009680:	4a7fbfc4 	addi	r9,r9,-257
 8009684:	0086303a 	nor	r3,zero,r2
 8009688:	02202074 	movhi	r8,32897
 800968c:	1245883a 	add	r2,r2,r9
 8009690:	42202004 	addi	r8,r8,-32640
 8009694:	10c4703a 	and	r2,r2,r3
 8009698:	1204703a 	and	r2,r2,r8
 800969c:	10000226 	beq	r2,zero,80096a8 <strcmp+0x44>
 80096a0:	00001706 	br	8009700 <strcmp+0x9c>
 80096a4:	1000161e 	bne	r2,zero,8009700 <strcmp+0x9c>
 80096a8:	21000104 	addi	r4,r4,4
 80096ac:	20c00017 	ldw	r3,0(r4)
 80096b0:	29400104 	addi	r5,r5,4
 80096b4:	29800017 	ldw	r6,0(r5)
 80096b8:	1a4f883a 	add	r7,r3,r9
 80096bc:	00c4303a 	nor	r2,zero,r3
 80096c0:	3884703a 	and	r2,r7,r2
 80096c4:	1204703a 	and	r2,r2,r8
 80096c8:	19bff626 	beq	r3,r6,80096a4 <__alt_data_end+0xfc0096a4>
 80096cc:	20800007 	ldb	r2,0(r4)
 80096d0:	1000051e 	bne	r2,zero,80096e8 <strcmp+0x84>
 80096d4:	00000606 	br	80096f0 <strcmp+0x8c>
 80096d8:	21000044 	addi	r4,r4,1
 80096dc:	20800007 	ldb	r2,0(r4)
 80096e0:	29400044 	addi	r5,r5,1
 80096e4:	10000226 	beq	r2,zero,80096f0 <strcmp+0x8c>
 80096e8:	28c00007 	ldb	r3,0(r5)
 80096ec:	10fffa26 	beq	r2,r3,80096d8 <__alt_data_end+0xfc0096d8>
 80096f0:	20800003 	ldbu	r2,0(r4)
 80096f4:	28c00003 	ldbu	r3,0(r5)
 80096f8:	10c5c83a 	sub	r2,r2,r3
 80096fc:	f800283a 	ret
 8009700:	0005883a 	mov	r2,zero
 8009704:	f800283a 	ret

08009708 <__sprint_r.part.0>:
 8009708:	28801917 	ldw	r2,100(r5)
 800970c:	defff604 	addi	sp,sp,-40
 8009710:	dd400515 	stw	r21,20(sp)
 8009714:	dcc00315 	stw	r19,12(sp)
 8009718:	dfc00915 	stw	ra,36(sp)
 800971c:	df000815 	stw	fp,32(sp)
 8009720:	ddc00715 	stw	r23,28(sp)
 8009724:	dd800615 	stw	r22,24(sp)
 8009728:	dd000415 	stw	r20,16(sp)
 800972c:	dc800215 	stw	r18,8(sp)
 8009730:	dc400115 	stw	r17,4(sp)
 8009734:	dc000015 	stw	r16,0(sp)
 8009738:	1088000c 	andi	r2,r2,8192
 800973c:	2827883a 	mov	r19,r5
 8009740:	302b883a 	mov	r21,r6
 8009744:	10002d26 	beq	r2,zero,80097fc <__sprint_r.part.0+0xf4>
 8009748:	30800217 	ldw	r2,8(r6)
 800974c:	35800017 	ldw	r22,0(r6)
 8009750:	10002826 	beq	r2,zero,80097f4 <__sprint_r.part.0+0xec>
 8009754:	2029883a 	mov	r20,r4
 8009758:	b5c00104 	addi	r23,r22,4
 800975c:	04bfffc4 	movi	r18,-1
 8009760:	bc400017 	ldw	r17,0(r23)
 8009764:	b4000017 	ldw	r16,0(r22)
 8009768:	0039883a 	mov	fp,zero
 800976c:	8822d0ba 	srli	r17,r17,2
 8009770:	04400316 	blt	zero,r17,8009780 <__sprint_r.part.0+0x78>
 8009774:	00001706 	br	80097d4 <__sprint_r.part.0+0xcc>
 8009778:	84000104 	addi	r16,r16,4
 800977c:	8f001526 	beq	r17,fp,80097d4 <__sprint_r.part.0+0xcc>
 8009780:	81400017 	ldw	r5,0(r16)
 8009784:	a009883a 	mov	r4,r20
 8009788:	980d883a 	mov	r6,r19
 800978c:	800af000 	call	800af00 <_fputwc_r>
 8009790:	e7000044 	addi	fp,fp,1
 8009794:	14bff81e 	bne	r2,r18,8009778 <__alt_data_end+0xfc009778>
 8009798:	9005883a 	mov	r2,r18
 800979c:	a8000215 	stw	zero,8(r21)
 80097a0:	a8000115 	stw	zero,4(r21)
 80097a4:	dfc00917 	ldw	ra,36(sp)
 80097a8:	df000817 	ldw	fp,32(sp)
 80097ac:	ddc00717 	ldw	r23,28(sp)
 80097b0:	dd800617 	ldw	r22,24(sp)
 80097b4:	dd400517 	ldw	r21,20(sp)
 80097b8:	dd000417 	ldw	r20,16(sp)
 80097bc:	dcc00317 	ldw	r19,12(sp)
 80097c0:	dc800217 	ldw	r18,8(sp)
 80097c4:	dc400117 	ldw	r17,4(sp)
 80097c8:	dc000017 	ldw	r16,0(sp)
 80097cc:	dec00a04 	addi	sp,sp,40
 80097d0:	f800283a 	ret
 80097d4:	a8c00217 	ldw	r3,8(r21)
 80097d8:	8c63883a 	add	r17,r17,r17
 80097dc:	8c63883a 	add	r17,r17,r17
 80097e0:	1c45c83a 	sub	r2,r3,r17
 80097e4:	a8800215 	stw	r2,8(r21)
 80097e8:	b5800204 	addi	r22,r22,8
 80097ec:	bdc00204 	addi	r23,r23,8
 80097f0:	103fdb1e 	bne	r2,zero,8009760 <__alt_data_end+0xfc009760>
 80097f4:	0005883a 	mov	r2,zero
 80097f8:	003fe806 	br	800979c <__alt_data_end+0xfc00979c>
 80097fc:	80069840 	call	8006984 <__sfvwrite_r>
 8009800:	003fe606 	br	800979c <__alt_data_end+0xfc00979c>

08009804 <__sprint_r>:
 8009804:	30c00217 	ldw	r3,8(r6)
 8009808:	18000126 	beq	r3,zero,8009810 <__sprint_r+0xc>
 800980c:	80097081 	jmpi	8009708 <__sprint_r.part.0>
 8009810:	30000115 	stw	zero,4(r6)
 8009814:	0005883a 	mov	r2,zero
 8009818:	f800283a 	ret

0800981c <___vfiprintf_internal_r>:
 800981c:	defeca04 	addi	sp,sp,-1240
 8009820:	dcc12f15 	stw	r19,1212(sp)
 8009824:	dfc13515 	stw	ra,1236(sp)
 8009828:	df013415 	stw	fp,1232(sp)
 800982c:	ddc13315 	stw	r23,1228(sp)
 8009830:	dd813215 	stw	r22,1224(sp)
 8009834:	dd413115 	stw	r21,1220(sp)
 8009838:	dd013015 	stw	r20,1216(sp)
 800983c:	dc812e15 	stw	r18,1208(sp)
 8009840:	dc412d15 	stw	r17,1204(sp)
 8009844:	dc012c15 	stw	r16,1200(sp)
 8009848:	d9012115 	stw	r4,1156(sp)
 800984c:	d9412015 	stw	r5,1152(sp)
 8009850:	d9c12315 	stw	r7,1164(sp)
 8009854:	3027883a 	mov	r19,r6
 8009858:	20000226 	beq	r4,zero,8009864 <___vfiprintf_internal_r+0x48>
 800985c:	20800e17 	ldw	r2,56(r4)
 8009860:	1000f726 	beq	r2,zero,8009c40 <___vfiprintf_internal_r+0x424>
 8009864:	d8812017 	ldw	r2,1152(sp)
 8009868:	10c0030b 	ldhu	r3,12(r2)
 800986c:	1908000c 	andi	r4,r3,8192
 8009870:	1805883a 	mov	r2,r3
 8009874:	2000081e 	bne	r4,zero,8009898 <___vfiprintf_internal_r+0x7c>
 8009878:	d9412017 	ldw	r5,1152(sp)
 800987c:	18880014 	ori	r2,r3,8192
 8009880:	00f7ffc4 	movi	r3,-8193
 8009884:	29001917 	ldw	r4,100(r5)
 8009888:	2880030d 	sth	r2,12(r5)
 800988c:	20c8703a 	and	r4,r4,r3
 8009890:	29001915 	stw	r4,100(r5)
 8009894:	1007883a 	mov	r3,r2
 8009898:	1100020c 	andi	r4,r2,8
 800989c:	2000a726 	beq	r4,zero,8009b3c <___vfiprintf_internal_r+0x320>
 80098a0:	d9412017 	ldw	r5,1152(sp)
 80098a4:	29000417 	ldw	r4,16(r5)
 80098a8:	2000a426 	beq	r4,zero,8009b3c <___vfiprintf_internal_r+0x320>
 80098ac:	1080068c 	andi	r2,r2,26
 80098b0:	01000284 	movi	r4,10
 80098b4:	1100ab26 	beq	r2,r4,8009b64 <___vfiprintf_internal_r+0x348>
 80098b8:	d9010a04 	addi	r4,sp,1064
 80098bc:	d94109c4 	addi	r5,sp,1063
 80098c0:	07020074 	movhi	fp,2049
 80098c4:	04420074 	movhi	r17,2049
 80098c8:	2145c83a 	sub	r2,r4,r5
 80098cc:	e7073504 	addi	fp,fp,7380
 80098d0:	8c473104 	addi	r17,r17,7364
 80098d4:	d9011e15 	stw	r4,1144(sp)
 80098d8:	d9411f15 	stw	r5,1148(sp)
 80098dc:	dec11a15 	stw	sp,1128(sp)
 80098e0:	d8011c15 	stw	zero,1136(sp)
 80098e4:	d8011b15 	stw	zero,1132(sp)
 80098e8:	d8012715 	stw	zero,1180(sp)
 80098ec:	d8012515 	stw	zero,1172(sp)
 80098f0:	d811883a 	mov	r8,sp
 80098f4:	d8812815 	stw	r2,1184(sp)
 80098f8:	982f883a 	mov	r23,r19
 80098fc:	b8800007 	ldb	r2,0(r23)
 8009900:	1003b026 	beq	r2,zero,800a7c4 <___vfiprintf_internal_r+0xfa8>
 8009904:	01000944 	movi	r4,37
 8009908:	1103ae26 	beq	r2,r4,800a7c4 <___vfiprintf_internal_r+0xfa8>
 800990c:	b805883a 	mov	r2,r23
 8009910:	00000106 	br	8009918 <___vfiprintf_internal_r+0xfc>
 8009914:	19000326 	beq	r3,r4,8009924 <___vfiprintf_internal_r+0x108>
 8009918:	10800044 	addi	r2,r2,1
 800991c:	10c00007 	ldb	r3,0(r2)
 8009920:	183ffc1e 	bne	r3,zero,8009914 <__alt_data_end+0xfc009914>
 8009924:	15e1c83a 	sub	r16,r2,r23
 8009928:	1029883a 	mov	r20,r2
 800992c:	80001026 	beq	r16,zero,8009970 <___vfiprintf_internal_r+0x154>
 8009930:	d8c11c17 	ldw	r3,1136(sp)
 8009934:	d8811b17 	ldw	r2,1132(sp)
 8009938:	45c00015 	stw	r23,0(r8)
 800993c:	80c7883a 	add	r3,r16,r3
 8009940:	10800044 	addi	r2,r2,1
 8009944:	44000115 	stw	r16,4(r8)
 8009948:	d8c11c15 	stw	r3,1136(sp)
 800994c:	d8811b15 	stw	r2,1132(sp)
 8009950:	010001c4 	movi	r4,7
 8009954:	2080740e 	bge	r4,r2,8009b28 <___vfiprintf_internal_r+0x30c>
 8009958:	1803a71e 	bne	r3,zero,800a7f8 <___vfiprintf_internal_r+0xfdc>
 800995c:	d8c12517 	ldw	r3,1172(sp)
 8009960:	d8011b15 	stw	zero,1132(sp)
 8009964:	d811883a 	mov	r8,sp
 8009968:	1c07883a 	add	r3,r3,r16
 800996c:	d8c12515 	stw	r3,1172(sp)
 8009970:	a0800007 	ldb	r2,0(r20)
 8009974:	1002bf26 	beq	r2,zero,800a474 <___vfiprintf_internal_r+0xc58>
 8009978:	a5c00044 	addi	r23,r20,1
 800997c:	a1800047 	ldb	r6,1(r20)
 8009980:	d8011d85 	stb	zero,1142(sp)
 8009984:	d8012205 	stb	zero,1160(sp)
 8009988:	043fffc4 	movi	r16,-1
 800998c:	d8012415 	stw	zero,1168(sp)
 8009990:	0025883a 	mov	r18,zero
 8009994:	05001604 	movi	r20,88
 8009998:	05400244 	movi	r21,9
 800999c:	4027883a 	mov	r19,r8
 80099a0:	bdc00044 	addi	r23,r23,1
 80099a4:	30bff804 	addi	r2,r6,-32
 80099a8:	a0825636 	bltu	r20,r2,800a304 <___vfiprintf_internal_r+0xae8>
 80099ac:	100490ba 	slli	r2,r2,2
 80099b0:	01020074 	movhi	r4,2049
 80099b4:	21267104 	addi	r4,r4,-26172
 80099b8:	1105883a 	add	r2,r2,r4
 80099bc:	10800017 	ldw	r2,0(r2)
 80099c0:	1000683a 	jmp	r2
 80099c4:	0800a294 	ori	zero,at,650
 80099c8:	0800a304 	addi	zero,at,652
 80099cc:	0800a304 	addi	zero,at,652
 80099d0:	0800a2f8 	rdprs	zero,at,651
 80099d4:	0800a304 	addi	zero,at,652
 80099d8:	0800a304 	addi	zero,at,652
 80099dc:	0800a304 	addi	zero,at,652
 80099e0:	0800a304 	addi	zero,at,652
 80099e4:	0800a304 	addi	zero,at,652
 80099e8:	0800a304 	addi	zero,at,652
 80099ec:	0800a084 	addi	zero,at,642
 80099f0:	0800a2ac 	andhi	zero,at,650
 80099f4:	0800a304 	addi	zero,at,652
 80099f8:	08009c58 	cmpnei	zero,at,625
 80099fc:	0800a0a8 	cmpgeui	zero,at,642
 8009a00:	0800a304 	addi	zero,at,652
 8009a04:	08009c64 	muli	zero,at,625
 8009a08:	08009c70 	cmpltui	zero,at,625
 8009a0c:	08009c70 	cmpltui	zero,at,625
 8009a10:	08009c70 	cmpltui	zero,at,625
 8009a14:	08009c70 	cmpltui	zero,at,625
 8009a18:	08009c70 	cmpltui	zero,at,625
 8009a1c:	08009c70 	cmpltui	zero,at,625
 8009a20:	08009c70 	cmpltui	zero,at,625
 8009a24:	08009c70 	cmpltui	zero,at,625
 8009a28:	08009c70 	cmpltui	zero,at,625
 8009a2c:	0800a304 	addi	zero,at,652
 8009a30:	0800a304 	addi	zero,at,652
 8009a34:	0800a304 	addi	zero,at,652
 8009a38:	0800a304 	addi	zero,at,652
 8009a3c:	0800a304 	addi	zero,at,652
 8009a40:	0800a304 	addi	zero,at,652
 8009a44:	0800a304 	addi	zero,at,652
 8009a48:	0800a304 	addi	zero,at,652
 8009a4c:	0800a304 	addi	zero,at,652
 8009a50:	0800a304 	addi	zero,at,652
 8009a54:	08009cb0 	cmpltui	zero,at,626
 8009a58:	0800a304 	addi	zero,at,652
 8009a5c:	0800a304 	addi	zero,at,652
 8009a60:	0800a304 	addi	zero,at,652
 8009a64:	0800a304 	addi	zero,at,652
 8009a68:	0800a304 	addi	zero,at,652
 8009a6c:	0800a304 	addi	zero,at,652
 8009a70:	0800a304 	addi	zero,at,652
 8009a74:	0800a304 	addi	zero,at,652
 8009a78:	0800a304 	addi	zero,at,652
 8009a7c:	0800a304 	addi	zero,at,652
 8009a80:	08009fa0 	cmpeqi	zero,at,638
 8009a84:	0800a304 	addi	zero,at,652
 8009a88:	0800a304 	addi	zero,at,652
 8009a8c:	0800a304 	addi	zero,at,652
 8009a90:	0800a304 	addi	zero,at,652
 8009a94:	0800a304 	addi	zero,at,652
 8009a98:	08009fe0 	cmpeqi	zero,at,639
 8009a9c:	0800a304 	addi	zero,at,652
 8009aa0:	0800a304 	addi	zero,at,652
 8009aa4:	0800a024 	muli	zero,at,640
 8009aa8:	0800a304 	addi	zero,at,652
 8009aac:	0800a304 	addi	zero,at,652
 8009ab0:	0800a304 	addi	zero,at,652
 8009ab4:	0800a304 	addi	zero,at,652
 8009ab8:	0800a304 	addi	zero,at,652
 8009abc:	0800a304 	addi	zero,at,652
 8009ac0:	0800a304 	addi	zero,at,652
 8009ac4:	0800a304 	addi	zero,at,652
 8009ac8:	0800a304 	addi	zero,at,652
 8009acc:	0800a304 	addi	zero,at,652
 8009ad0:	08009f6c 	andhi	zero,at,637
 8009ad4:	0800a2bc 	xorhi	zero,at,650
 8009ad8:	0800a304 	addi	zero,at,652
 8009adc:	0800a304 	addi	zero,at,652
 8009ae0:	0800a304 	addi	zero,at,652
 8009ae4:	0800a0f8 	rdprs	zero,at,643
 8009ae8:	0800a2bc 	xorhi	zero,at,650
 8009aec:	0800a304 	addi	zero,at,652
 8009af0:	0800a304 	addi	zero,at,652
 8009af4:	0800a010 	cmplti	zero,at,640
 8009af8:	0800a304 	addi	zero,at,652
 8009afc:	0800a25c 	xori	zero,at,649
 8009b00:	0800a1e4 	muli	zero,at,647
 8009b04:	0800a218 	cmpnei	zero,at,648
 8009b08:	0800a104 	addi	zero,at,644
 8009b0c:	0800a304 	addi	zero,at,652
 8009b10:	0800a110 	cmplti	zero,at,644
 8009b14:	0800a304 	addi	zero,at,652
 8009b18:	0800a16c 	andhi	zero,at,645
 8009b1c:	0800a304 	addi	zero,at,652
 8009b20:	0800a304 	addi	zero,at,652
 8009b24:	0800a1a0 	cmpeqi	zero,at,646
 8009b28:	42000204 	addi	r8,r8,8
 8009b2c:	d8c12517 	ldw	r3,1172(sp)
 8009b30:	1c07883a 	add	r3,r3,r16
 8009b34:	d8c12515 	stw	r3,1172(sp)
 8009b38:	003f8d06 	br	8009970 <__alt_data_end+0xfc009970>
 8009b3c:	d9012117 	ldw	r4,1156(sp)
 8009b40:	d9412017 	ldw	r5,1152(sp)
 8009b44:	80044e40 	call	80044e4 <__swsetup_r>
 8009b48:	1000301e 	bne	r2,zero,8009c0c <___vfiprintf_internal_r+0x3f0>
 8009b4c:	d8812017 	ldw	r2,1152(sp)
 8009b50:	01000284 	movi	r4,10
 8009b54:	10c0030b 	ldhu	r3,12(r2)
 8009b58:	1805883a 	mov	r2,r3
 8009b5c:	1080068c 	andi	r2,r2,26
 8009b60:	113f551e 	bne	r2,r4,80098b8 <__alt_data_end+0xfc0098b8>
 8009b64:	d9012017 	ldw	r4,1152(sp)
 8009b68:	2080038b 	ldhu	r2,14(r4)
 8009b6c:	113fffcc 	andi	r4,r2,65535
 8009b70:	2120001c 	xori	r4,r4,32768
 8009b74:	21200004 	addi	r4,r4,-32768
 8009b78:	203f4f16 	blt	r4,zero,80098b8 <__alt_data_end+0xfc0098b8>
 8009b7c:	d9412017 	ldw	r5,1152(sp)
 8009b80:	d9012117 	ldw	r4,1156(sp)
 8009b84:	d9c12317 	ldw	r7,1164(sp)
 8009b88:	2b001917 	ldw	r12,100(r5)
 8009b8c:	2ac00717 	ldw	r11,28(r5)
 8009b90:	2a800917 	ldw	r10,36(r5)
 8009b94:	02010004 	movi	r8,1024
 8009b98:	18ffff4c 	andi	r3,r3,65533
 8009b9c:	da0b883a 	add	r5,sp,r8
 8009ba0:	980d883a 	mov	r6,r19
 8009ba4:	d8c1030d 	sth	r3,1036(sp)
 8009ba8:	db011915 	stw	r12,1124(sp)
 8009bac:	d881038d 	sth	r2,1038(sp)
 8009bb0:	dac10715 	stw	r11,1052(sp)
 8009bb4:	da810915 	stw	r10,1060(sp)
 8009bb8:	dec10015 	stw	sp,1024(sp)
 8009bbc:	dec10415 	stw	sp,1040(sp)
 8009bc0:	da010215 	stw	r8,1032(sp)
 8009bc4:	da010515 	stw	r8,1044(sp)
 8009bc8:	d8010615 	stw	zero,1048(sp)
 8009bcc:	800981c0 	call	800981c <___vfiprintf_internal_r>
 8009bd0:	1021883a 	mov	r16,r2
 8009bd4:	10000416 	blt	r2,zero,8009be8 <___vfiprintf_internal_r+0x3cc>
 8009bd8:	d9012117 	ldw	r4,1156(sp)
 8009bdc:	d9410004 	addi	r5,sp,1024
 8009be0:	8005f640 	call	8005f64 <_fflush_r>
 8009be4:	10040f1e 	bne	r2,zero,800ac24 <___vfiprintf_internal_r+0x1408>
 8009be8:	d881030b 	ldhu	r2,1036(sp)
 8009bec:	1080100c 	andi	r2,r2,64
 8009bf0:	10000426 	beq	r2,zero,8009c04 <___vfiprintf_internal_r+0x3e8>
 8009bf4:	d8c12017 	ldw	r3,1152(sp)
 8009bf8:	1880030b 	ldhu	r2,12(r3)
 8009bfc:	10801014 	ori	r2,r2,64
 8009c00:	1880030d 	sth	r2,12(r3)
 8009c04:	8005883a 	mov	r2,r16
 8009c08:	00000106 	br	8009c10 <___vfiprintf_internal_r+0x3f4>
 8009c0c:	00bfffc4 	movi	r2,-1
 8009c10:	dfc13517 	ldw	ra,1236(sp)
 8009c14:	df013417 	ldw	fp,1232(sp)
 8009c18:	ddc13317 	ldw	r23,1228(sp)
 8009c1c:	dd813217 	ldw	r22,1224(sp)
 8009c20:	dd413117 	ldw	r21,1220(sp)
 8009c24:	dd013017 	ldw	r20,1216(sp)
 8009c28:	dcc12f17 	ldw	r19,1212(sp)
 8009c2c:	dc812e17 	ldw	r18,1208(sp)
 8009c30:	dc412d17 	ldw	r17,1204(sp)
 8009c34:	dc012c17 	ldw	r16,1200(sp)
 8009c38:	dec13604 	addi	sp,sp,1240
 8009c3c:	f800283a 	ret
 8009c40:	80065200 	call	8006520 <__sinit>
 8009c44:	003f0706 	br	8009864 <__alt_data_end+0xfc009864>
 8009c48:	d8c12417 	ldw	r3,1168(sp)
 8009c4c:	d8812315 	stw	r2,1164(sp)
 8009c50:	00c7c83a 	sub	r3,zero,r3
 8009c54:	d8c12415 	stw	r3,1168(sp)
 8009c58:	94800114 	ori	r18,r18,4
 8009c5c:	b9800007 	ldb	r6,0(r23)
 8009c60:	003f4f06 	br	80099a0 <__alt_data_end+0xfc0099a0>
 8009c64:	94802014 	ori	r18,r18,128
 8009c68:	b9800007 	ldb	r6,0(r23)
 8009c6c:	003f4c06 	br	80099a0 <__alt_data_end+0xfc0099a0>
 8009c70:	dc012615 	stw	r16,1176(sp)
 8009c74:	d8012415 	stw	zero,1168(sp)
 8009c78:	35bff404 	addi	r22,r6,-48
 8009c7c:	0009883a 	mov	r4,zero
 8009c80:	b821883a 	mov	r16,r23
 8009c84:	01400284 	movi	r5,10
 8009c88:	800c3380 	call	800c338 <__mulsi3>
 8009c8c:	81800007 	ldb	r6,0(r16)
 8009c90:	1589883a 	add	r4,r2,r22
 8009c94:	bdc00044 	addi	r23,r23,1
 8009c98:	35bff404 	addi	r22,r6,-48
 8009c9c:	b821883a 	mov	r16,r23
 8009ca0:	adbff82e 	bgeu	r21,r22,8009c84 <__alt_data_end+0xfc009c84>
 8009ca4:	d9012415 	stw	r4,1168(sp)
 8009ca8:	dc012617 	ldw	r16,1176(sp)
 8009cac:	003f3d06 	br	80099a4 <__alt_data_end+0xfc0099a4>
 8009cb0:	d8c12203 	ldbu	r3,1160(sp)
 8009cb4:	94800414 	ori	r18,r18,16
 8009cb8:	9080080c 	andi	r2,r18,32
 8009cbc:	d8c11d85 	stb	r3,1142(sp)
 8009cc0:	9811883a 	mov	r8,r19
 8009cc4:	d8c12317 	ldw	r3,1164(sp)
 8009cc8:	10018226 	beq	r2,zero,800a2d4 <___vfiprintf_internal_r+0xab8>
 8009ccc:	d9012317 	ldw	r4,1164(sp)
 8009cd0:	18800117 	ldw	r2,4(r3)
 8009cd4:	1cc00017 	ldw	r19,0(r3)
 8009cd8:	21000204 	addi	r4,r4,8
 8009cdc:	d9012315 	stw	r4,1164(sp)
 8009ce0:	102b883a 	mov	r21,r2
 8009ce4:	10030016 	blt	r2,zero,800a8e8 <___vfiprintf_internal_r+0x10cc>
 8009ce8:	dd811d83 	ldbu	r22,1142(sp)
 8009cec:	8029883a 	mov	r20,r16
 8009cf0:	00800044 	movi	r2,1
 8009cf4:	9d46b03a 	or	r3,r19,r21
 8009cf8:	80000216 	blt	r16,zero,8009d04 <___vfiprintf_internal_r+0x4e8>
 8009cfc:	013fdfc4 	movi	r4,-129
 8009d00:	9124703a 	and	r18,r18,r4
 8009d04:	1801b41e 	bne	r3,zero,800a3d8 <___vfiprintf_internal_r+0xbbc>
 8009d08:	80028126 	beq	r16,zero,800a710 <___vfiprintf_internal_r+0xef4>
 8009d0c:	10803fcc 	andi	r2,r2,255
 8009d10:	00c00044 	movi	r3,1
 8009d14:	10c1d126 	beq	r2,r3,800a45c <___vfiprintf_internal_r+0xc40>
 8009d18:	00c00084 	movi	r3,2
 8009d1c:	10c28626 	beq	r2,r3,800a738 <___vfiprintf_internal_r+0xf1c>
 8009d20:	d8c10a04 	addi	r3,sp,1064
 8009d24:	9808d0fa 	srli	r4,r19,3
 8009d28:	a80a977a 	slli	r5,r21,29
 8009d2c:	a82ad0fa 	srli	r21,r21,3
 8009d30:	9cc001cc 	andi	r19,r19,7
 8009d34:	98800c04 	addi	r2,r19,48
 8009d38:	18ffffc4 	addi	r3,r3,-1
 8009d3c:	2926b03a 	or	r19,r5,r4
 8009d40:	18800005 	stb	r2,0(r3)
 8009d44:	9d48b03a 	or	r4,r19,r21
 8009d48:	203ff61e 	bne	r4,zero,8009d24 <__alt_data_end+0xfc009d24>
 8009d4c:	9100004c 	andi	r4,r18,1
 8009d50:	d8c12215 	stw	r3,1160(sp)
 8009d54:	2002b31e 	bne	r4,zero,800a824 <___vfiprintf_internal_r+0x1008>
 8009d58:	d9411e17 	ldw	r5,1144(sp)
 8009d5c:	28e9c83a 	sub	r20,r5,r3
 8009d60:	a02b883a 	mov	r21,r20
 8009d64:	a400010e 	bge	r20,r16,8009d6c <___vfiprintf_internal_r+0x550>
 8009d68:	802b883a 	mov	r21,r16
 8009d6c:	b5803fcc 	andi	r22,r22,255
 8009d70:	b580201c 	xori	r22,r22,128
 8009d74:	b5bfe004 	addi	r22,r22,-128
 8009d78:	b0000126 	beq	r22,zero,8009d80 <___vfiprintf_internal_r+0x564>
 8009d7c:	ad400044 	addi	r21,r21,1
 8009d80:	9280008c 	andi	r10,r18,2
 8009d84:	50000126 	beq	r10,zero,8009d8c <___vfiprintf_internal_r+0x570>
 8009d88:	ad400084 	addi	r21,r21,2
 8009d8c:	9580210c 	andi	r22,r18,132
 8009d90:	b001751e 	bne	r22,zero,800a368 <___vfiprintf_internal_r+0xb4c>
 8009d94:	d9012417 	ldw	r4,1168(sp)
 8009d98:	2567c83a 	sub	r19,r4,r21
 8009d9c:	04c1720e 	bge	zero,r19,800a368 <___vfiprintf_internal_r+0xb4c>
 8009da0:	01c00404 	movi	r7,16
 8009da4:	d8c11c17 	ldw	r3,1136(sp)
 8009da8:	3cc36b0e 	bge	r7,r19,800ab58 <___vfiprintf_internal_r+0x133c>
 8009dac:	00820074 	movhi	r2,2049
 8009db0:	10873504 	addi	r2,r2,7380
 8009db4:	dc012915 	stw	r16,1188(sp)
 8009db8:	d9011b17 	ldw	r4,1132(sp)
 8009dbc:	9821883a 	mov	r16,r19
 8009dc0:	d8812615 	stw	r2,1176(sp)
 8009dc4:	030001c4 	movi	r12,7
 8009dc8:	5027883a 	mov	r19,r10
 8009dcc:	00000506 	br	8009de4 <___vfiprintf_internal_r+0x5c8>
 8009dd0:	21400084 	addi	r5,r4,2
 8009dd4:	42000204 	addi	r8,r8,8
 8009dd8:	1009883a 	mov	r4,r2
 8009ddc:	843ffc04 	addi	r16,r16,-16
 8009de0:	3c000d0e 	bge	r7,r16,8009e18 <___vfiprintf_internal_r+0x5fc>
 8009de4:	18c00404 	addi	r3,r3,16
 8009de8:	20800044 	addi	r2,r4,1
 8009dec:	47000015 	stw	fp,0(r8)
 8009df0:	41c00115 	stw	r7,4(r8)
 8009df4:	d8c11c15 	stw	r3,1136(sp)
 8009df8:	d8811b15 	stw	r2,1132(sp)
 8009dfc:	60bff40e 	bge	r12,r2,8009dd0 <__alt_data_end+0xfc009dd0>
 8009e00:	18014b1e 	bne	r3,zero,800a330 <___vfiprintf_internal_r+0xb14>
 8009e04:	843ffc04 	addi	r16,r16,-16
 8009e08:	0009883a 	mov	r4,zero
 8009e0c:	01400044 	movi	r5,1
 8009e10:	d811883a 	mov	r8,sp
 8009e14:	3c3ff316 	blt	r7,r16,8009de4 <__alt_data_end+0xfc009de4>
 8009e18:	9815883a 	mov	r10,r19
 8009e1c:	8027883a 	mov	r19,r16
 8009e20:	dc012917 	ldw	r16,1188(sp)
 8009e24:	d9012617 	ldw	r4,1176(sp)
 8009e28:	98c7883a 	add	r3,r19,r3
 8009e2c:	44c00115 	stw	r19,4(r8)
 8009e30:	41000015 	stw	r4,0(r8)
 8009e34:	d8c11c15 	stw	r3,1136(sp)
 8009e38:	d9411b15 	stw	r5,1132(sp)
 8009e3c:	008001c4 	movi	r2,7
 8009e40:	11425116 	blt	r2,r5,800a788 <___vfiprintf_internal_r+0xf6c>
 8009e44:	d9011d87 	ldb	r4,1142(sp)
 8009e48:	42000204 	addi	r8,r8,8
 8009e4c:	28800044 	addi	r2,r5,1
 8009e50:	20014a1e 	bne	r4,zero,800a37c <___vfiprintf_internal_r+0xb60>
 8009e54:	50000c26 	beq	r10,zero,8009e88 <___vfiprintf_internal_r+0x66c>
 8009e58:	d9011d04 	addi	r4,sp,1140
 8009e5c:	18c00084 	addi	r3,r3,2
 8009e60:	41000015 	stw	r4,0(r8)
 8009e64:	01000084 	movi	r4,2
 8009e68:	41000115 	stw	r4,4(r8)
 8009e6c:	d8c11c15 	stw	r3,1136(sp)
 8009e70:	d8811b15 	stw	r2,1132(sp)
 8009e74:	010001c4 	movi	r4,7
 8009e78:	20822016 	blt	r4,r2,800a6fc <___vfiprintf_internal_r+0xee0>
 8009e7c:	100b883a 	mov	r5,r2
 8009e80:	42000204 	addi	r8,r8,8
 8009e84:	10800044 	addi	r2,r2,1
 8009e88:	01002004 	movi	r4,128
 8009e8c:	b101de26 	beq	r22,r4,800a608 <___vfiprintf_internal_r+0xdec>
 8009e90:	8521c83a 	sub	r16,r16,r20
 8009e94:	0400230e 	bge	zero,r16,8009f24 <___vfiprintf_internal_r+0x708>
 8009e98:	04c00404 	movi	r19,16
 8009e9c:	9c030d0e 	bge	r19,r16,800aad4 <___vfiprintf_internal_r+0x12b8>
 8009ea0:	00820074 	movhi	r2,2049
 8009ea4:	10873104 	addi	r2,r2,7364
 8009ea8:	d8812615 	stw	r2,1176(sp)
 8009eac:	058001c4 	movi	r22,7
 8009eb0:	00000506 	br	8009ec8 <___vfiprintf_internal_r+0x6ac>
 8009eb4:	28800084 	addi	r2,r5,2
 8009eb8:	42000204 	addi	r8,r8,8
 8009ebc:	200b883a 	mov	r5,r4
 8009ec0:	843ffc04 	addi	r16,r16,-16
 8009ec4:	9c000d0e 	bge	r19,r16,8009efc <___vfiprintf_internal_r+0x6e0>
 8009ec8:	18c00404 	addi	r3,r3,16
 8009ecc:	29000044 	addi	r4,r5,1
 8009ed0:	44400015 	stw	r17,0(r8)
 8009ed4:	44c00115 	stw	r19,4(r8)
 8009ed8:	d8c11c15 	stw	r3,1136(sp)
 8009edc:	d9011b15 	stw	r4,1132(sp)
 8009ee0:	b13ff40e 	bge	r22,r4,8009eb4 <__alt_data_end+0xfc009eb4>
 8009ee4:	1801321e 	bne	r3,zero,800a3b0 <___vfiprintf_internal_r+0xb94>
 8009ee8:	843ffc04 	addi	r16,r16,-16
 8009eec:	000b883a 	mov	r5,zero
 8009ef0:	00800044 	movi	r2,1
 8009ef4:	d811883a 	mov	r8,sp
 8009ef8:	9c3ff316 	blt	r19,r16,8009ec8 <__alt_data_end+0xfc009ec8>
 8009efc:	d9012617 	ldw	r4,1176(sp)
 8009f00:	1c07883a 	add	r3,r3,r16
 8009f04:	44000115 	stw	r16,4(r8)
 8009f08:	41000015 	stw	r4,0(r8)
 8009f0c:	d8c11c15 	stw	r3,1136(sp)
 8009f10:	d8811b15 	stw	r2,1132(sp)
 8009f14:	010001c4 	movi	r4,7
 8009f18:	20816216 	blt	r4,r2,800a4a4 <___vfiprintf_internal_r+0xc88>
 8009f1c:	42000204 	addi	r8,r8,8
 8009f20:	10800044 	addi	r2,r2,1
 8009f24:	d9012217 	ldw	r4,1160(sp)
 8009f28:	1d07883a 	add	r3,r3,r20
 8009f2c:	45000115 	stw	r20,4(r8)
 8009f30:	41000015 	stw	r4,0(r8)
 8009f34:	d8c11c15 	stw	r3,1136(sp)
 8009f38:	d8811b15 	stw	r2,1132(sp)
 8009f3c:	010001c4 	movi	r4,7
 8009f40:	2081610e 	bge	r4,r2,800a4c8 <___vfiprintf_internal_r+0xcac>
 8009f44:	1802211e 	bne	r3,zero,800a7cc <___vfiprintf_internal_r+0xfb0>
 8009f48:	d8011b15 	stw	zero,1132(sp)
 8009f4c:	9480010c 	andi	r18,r18,4
 8009f50:	9002171e 	bne	r18,zero,800a7b0 <___vfiprintf_internal_r+0xf94>
 8009f54:	d9412417 	ldw	r5,1168(sp)
 8009f58:	a9433716 	blt	r21,r5,800ac38 <___vfiprintf_internal_r+0x141c>
 8009f5c:	d8812517 	ldw	r2,1172(sp)
 8009f60:	1545883a 	add	r2,r2,r21
 8009f64:	d8812515 	stw	r2,1172(sp)
 8009f68:	00019a06 	br	800a5d4 <___vfiprintf_internal_r+0xdb8>
 8009f6c:	d8c12317 	ldw	r3,1164(sp)
 8009f70:	05400044 	movi	r21,1
 8009f74:	9811883a 	mov	r8,r19
 8009f78:	18800017 	ldw	r2,0(r3)
 8009f7c:	18c00104 	addi	r3,r3,4
 8009f80:	d8c12315 	stw	r3,1164(sp)
 8009f84:	d8c10004 	addi	r3,sp,1024
 8009f88:	d8011d85 	stb	zero,1142(sp)
 8009f8c:	d8810005 	stb	r2,1024(sp)
 8009f90:	a829883a 	mov	r20,r21
 8009f94:	d8c12215 	stw	r3,1160(sp)
 8009f98:	0021883a 	mov	r16,zero
 8009f9c:	003f7806 	br	8009d80 <__alt_data_end+0xfc009d80>
 8009fa0:	94800414 	ori	r18,r18,16
 8009fa4:	9080080c 	andi	r2,r18,32
 8009fa8:	9811883a 	mov	r8,r19
 8009fac:	10009026 	beq	r2,zero,800a1f0 <___vfiprintf_internal_r+0x9d4>
 8009fb0:	d8812317 	ldw	r2,1164(sp)
 8009fb4:	d8c12317 	ldw	r3,1164(sp)
 8009fb8:	14c00017 	ldw	r19,0(r2)
 8009fbc:	15400117 	ldw	r21,4(r2)
 8009fc0:	18c00204 	addi	r3,r3,8
 8009fc4:	d8c12315 	stw	r3,1164(sp)
 8009fc8:	0005883a 	mov	r2,zero
 8009fcc:	9d46b03a 	or	r3,r19,r21
 8009fd0:	d8011d85 	stb	zero,1142(sp)
 8009fd4:	8029883a 	mov	r20,r16
 8009fd8:	002d883a 	mov	r22,zero
 8009fdc:	003f4606 	br	8009cf8 <__alt_data_end+0xfc009cf8>
 8009fe0:	94800414 	ori	r18,r18,16
 8009fe4:	9080080c 	andi	r2,r18,32
 8009fe8:	9811883a 	mov	r8,r19
 8009fec:	10006226 	beq	r2,zero,800a178 <___vfiprintf_internal_r+0x95c>
 8009ff0:	d9012317 	ldw	r4,1164(sp)
 8009ff4:	00800044 	movi	r2,1
 8009ff8:	24c00017 	ldw	r19,0(r4)
 8009ffc:	25400117 	ldw	r21,4(r4)
 800a000:	21000204 	addi	r4,r4,8
 800a004:	d9012315 	stw	r4,1164(sp)
 800a008:	9d46b03a 	or	r3,r19,r21
 800a00c:	003ff006 	br	8009fd0 <__alt_data_end+0xfc009fd0>
 800a010:	b9800007 	ldb	r6,0(r23)
 800a014:	00801b04 	movi	r2,108
 800a018:	3082b226 	beq	r6,r2,800aae4 <___vfiprintf_internal_r+0x12c8>
 800a01c:	94800414 	ori	r18,r18,16
 800a020:	003e5f06 	br	80099a0 <__alt_data_end+0xfc0099a0>
 800a024:	d8c12203 	ldbu	r3,1160(sp)
 800a028:	01020074 	movhi	r4,2049
 800a02c:	2106cb04 	addi	r4,r4,6956
 800a030:	d8c11d85 	stb	r3,1142(sp)
 800a034:	d9012715 	stw	r4,1180(sp)
 800a038:	90c0080c 	andi	r3,r18,32
 800a03c:	9811883a 	mov	r8,r19
 800a040:	d8812317 	ldw	r2,1164(sp)
 800a044:	18005f26 	beq	r3,zero,800a1c4 <___vfiprintf_internal_r+0x9a8>
 800a048:	d9012317 	ldw	r4,1164(sp)
 800a04c:	14c00017 	ldw	r19,0(r2)
 800a050:	15400117 	ldw	r21,4(r2)
 800a054:	21000204 	addi	r4,r4,8
 800a058:	d9012315 	stw	r4,1164(sp)
 800a05c:	9080004c 	andi	r2,r18,1
 800a060:	1001e226 	beq	r2,zero,800a7ec <___vfiprintf_internal_r+0xfd0>
 800a064:	9d46b03a 	or	r3,r19,r21
 800a068:	18024e26 	beq	r3,zero,800a9a4 <___vfiprintf_internal_r+0x1188>
 800a06c:	00800c04 	movi	r2,48
 800a070:	d8811d05 	stb	r2,1140(sp)
 800a074:	d9811d45 	stb	r6,1141(sp)
 800a078:	94800094 	ori	r18,r18,2
 800a07c:	00800084 	movi	r2,2
 800a080:	003fd306 	br	8009fd0 <__alt_data_end+0xfc009fd0>
 800a084:	d9012317 	ldw	r4,1164(sp)
 800a088:	d9412317 	ldw	r5,1164(sp)
 800a08c:	21000017 	ldw	r4,0(r4)
 800a090:	28800104 	addi	r2,r5,4
 800a094:	d9012415 	stw	r4,1168(sp)
 800a098:	203eeb16 	blt	r4,zero,8009c48 <__alt_data_end+0xfc009c48>
 800a09c:	d8812315 	stw	r2,1164(sp)
 800a0a0:	b9800007 	ldb	r6,0(r23)
 800a0a4:	003e3e06 	br	80099a0 <__alt_data_end+0xfc0099a0>
 800a0a8:	b9800007 	ldb	r6,0(r23)
 800a0ac:	01000a84 	movi	r4,42
 800a0b0:	b8800044 	addi	r2,r23,1
 800a0b4:	3102d226 	beq	r6,r4,800ac00 <___vfiprintf_internal_r+0x13e4>
 800a0b8:	35bff404 	addi	r22,r6,-48
 800a0bc:	102f883a 	mov	r23,r2
 800a0c0:	0021883a 	mov	r16,zero
 800a0c4:	adbe3736 	bltu	r21,r22,80099a4 <__alt_data_end+0xfc0099a4>
 800a0c8:	0009883a 	mov	r4,zero
 800a0cc:	01400284 	movi	r5,10
 800a0d0:	800c3380 	call	800c338 <__mulsi3>
 800a0d4:	b9800007 	ldb	r6,0(r23)
 800a0d8:	b089883a 	add	r4,r22,r2
 800a0dc:	bdc00044 	addi	r23,r23,1
 800a0e0:	35bff404 	addi	r22,r6,-48
 800a0e4:	adbff92e 	bgeu	r21,r22,800a0cc <__alt_data_end+0xfc00a0cc>
 800a0e8:	2021883a 	mov	r16,r4
 800a0ec:	203e2d0e 	bge	r4,zero,80099a4 <__alt_data_end+0xfc0099a4>
 800a0f0:	043fffc4 	movi	r16,-1
 800a0f4:	003e2b06 	br	80099a4 <__alt_data_end+0xfc0099a4>
 800a0f8:	94801014 	ori	r18,r18,64
 800a0fc:	b9800007 	ldb	r6,0(r23)
 800a100:	003e2706 	br	80099a0 <__alt_data_end+0xfc0099a0>
 800a104:	94800814 	ori	r18,r18,32
 800a108:	b9800007 	ldb	r6,0(r23)
 800a10c:	003e2406 	br	80099a0 <__alt_data_end+0xfc0099a0>
 800a110:	d9412317 	ldw	r5,1164(sp)
 800a114:	d8812317 	ldw	r2,1164(sp)
 800a118:	d8011d85 	stb	zero,1142(sp)
 800a11c:	29400017 	ldw	r5,0(r5)
 800a120:	9811883a 	mov	r8,r19
 800a124:	14c00104 	addi	r19,r2,4
 800a128:	d9412215 	stw	r5,1160(sp)
 800a12c:	28029026 	beq	r5,zero,800ab70 <___vfiprintf_internal_r+0x1354>
 800a130:	d9012217 	ldw	r4,1160(sp)
 800a134:	80027616 	blt	r16,zero,800ab10 <___vfiprintf_internal_r+0x12f4>
 800a138:	000b883a 	mov	r5,zero
 800a13c:	800d883a 	mov	r6,r16
 800a140:	da012a15 	stw	r8,1192(sp)
 800a144:	80079d80 	call	80079d8 <memchr>
 800a148:	da012a17 	ldw	r8,1192(sp)
 800a14c:	1002a026 	beq	r2,zero,800abd0 <___vfiprintf_internal_r+0x13b4>
 800a150:	d8c12217 	ldw	r3,1160(sp)
 800a154:	10e9c83a 	sub	r20,r2,r3
 800a158:	85023816 	blt	r16,r20,800aa3c <___vfiprintf_internal_r+0x1220>
 800a15c:	dd811d83 	ldbu	r22,1142(sp)
 800a160:	dcc12315 	stw	r19,1164(sp)
 800a164:	0021883a 	mov	r16,zero
 800a168:	003efd06 	br	8009d60 <__alt_data_end+0xfc009d60>
 800a16c:	9080080c 	andi	r2,r18,32
 800a170:	9811883a 	mov	r8,r19
 800a174:	103f9e1e 	bne	r2,zero,8009ff0 <__alt_data_end+0xfc009ff0>
 800a178:	9080040c 	andi	r2,r18,16
 800a17c:	10021726 	beq	r2,zero,800a9dc <___vfiprintf_internal_r+0x11c0>
 800a180:	d9412317 	ldw	r5,1164(sp)
 800a184:	002b883a 	mov	r21,zero
 800a188:	00800044 	movi	r2,1
 800a18c:	2cc00017 	ldw	r19,0(r5)
 800a190:	29400104 	addi	r5,r5,4
 800a194:	d9412315 	stw	r5,1164(sp)
 800a198:	9807883a 	mov	r3,r19
 800a19c:	003f8c06 	br	8009fd0 <__alt_data_end+0xfc009fd0>
 800a1a0:	d8c12203 	ldbu	r3,1160(sp)
 800a1a4:	01020074 	movhi	r4,2049
 800a1a8:	2106d004 	addi	r4,r4,6976
 800a1ac:	d8c11d85 	stb	r3,1142(sp)
 800a1b0:	d9012715 	stw	r4,1180(sp)
 800a1b4:	90c0080c 	andi	r3,r18,32
 800a1b8:	9811883a 	mov	r8,r19
 800a1bc:	d8812317 	ldw	r2,1164(sp)
 800a1c0:	183fa11e 	bne	r3,zero,800a048 <__alt_data_end+0xfc00a048>
 800a1c4:	90c0040c 	andi	r3,r18,16
 800a1c8:	1801e526 	beq	r3,zero,800a960 <___vfiprintf_internal_r+0x1144>
 800a1cc:	d9412317 	ldw	r5,1164(sp)
 800a1d0:	14c00017 	ldw	r19,0(r2)
 800a1d4:	002b883a 	mov	r21,zero
 800a1d8:	29400104 	addi	r5,r5,4
 800a1dc:	d9412315 	stw	r5,1164(sp)
 800a1e0:	003f9e06 	br	800a05c <__alt_data_end+0xfc00a05c>
 800a1e4:	9080080c 	andi	r2,r18,32
 800a1e8:	9811883a 	mov	r8,r19
 800a1ec:	103f701e 	bne	r2,zero,8009fb0 <__alt_data_end+0xfc009fb0>
 800a1f0:	9080040c 	andi	r2,r18,16
 800a1f4:	1001ef26 	beq	r2,zero,800a9b4 <___vfiprintf_internal_r+0x1198>
 800a1f8:	d9012317 	ldw	r4,1164(sp)
 800a1fc:	002b883a 	mov	r21,zero
 800a200:	0005883a 	mov	r2,zero
 800a204:	24c00017 	ldw	r19,0(r4)
 800a208:	21000104 	addi	r4,r4,4
 800a20c:	d9012315 	stw	r4,1164(sp)
 800a210:	9807883a 	mov	r3,r19
 800a214:	003f6e06 	br	8009fd0 <__alt_data_end+0xfc009fd0>
 800a218:	d8c12317 	ldw	r3,1164(sp)
 800a21c:	9811883a 	mov	r8,r19
 800a220:	00800c04 	movi	r2,48
 800a224:	1cc00017 	ldw	r19,0(r3)
 800a228:	01020074 	movhi	r4,2049
 800a22c:	18c00104 	addi	r3,r3,4
 800a230:	d8811d05 	stb	r2,1140(sp)
 800a234:	2106d004 	addi	r4,r4,6976
 800a238:	00801e04 	movi	r2,120
 800a23c:	d8811d45 	stb	r2,1141(sp)
 800a240:	d8c12315 	stw	r3,1164(sp)
 800a244:	002b883a 	mov	r21,zero
 800a248:	94800094 	ori	r18,r18,2
 800a24c:	d9012715 	stw	r4,1180(sp)
 800a250:	00800084 	movi	r2,2
 800a254:	9807883a 	mov	r3,r19
 800a258:	003f5d06 	br	8009fd0 <__alt_data_end+0xfc009fd0>
 800a25c:	d8c12203 	ldbu	r3,1160(sp)
 800a260:	9080080c 	andi	r2,r18,32
 800a264:	9811883a 	mov	r8,r19
 800a268:	d8c11d85 	stb	r3,1142(sp)
 800a26c:	1001b126 	beq	r2,zero,800a934 <___vfiprintf_internal_r+0x1118>
 800a270:	d9012317 	ldw	r4,1164(sp)
 800a274:	d9412517 	ldw	r5,1172(sp)
 800a278:	20800017 	ldw	r2,0(r4)
 800a27c:	2807d7fa 	srai	r3,r5,31
 800a280:	21000104 	addi	r4,r4,4
 800a284:	d9012315 	stw	r4,1164(sp)
 800a288:	11400015 	stw	r5,0(r2)
 800a28c:	10c00115 	stw	r3,4(r2)
 800a290:	003d9a06 	br	80098fc <__alt_data_end+0xfc0098fc>
 800a294:	d8812207 	ldb	r2,1160(sp)
 800a298:	1001c41e 	bne	r2,zero,800a9ac <___vfiprintf_internal_r+0x1190>
 800a29c:	00c00804 	movi	r3,32
 800a2a0:	d8c12205 	stb	r3,1160(sp)
 800a2a4:	b9800007 	ldb	r6,0(r23)
 800a2a8:	003dbd06 	br	80099a0 <__alt_data_end+0xfc0099a0>
 800a2ac:	00c00ac4 	movi	r3,43
 800a2b0:	d8c12205 	stb	r3,1160(sp)
 800a2b4:	b9800007 	ldb	r6,0(r23)
 800a2b8:	003db906 	br	80099a0 <__alt_data_end+0xfc0099a0>
 800a2bc:	d8c12203 	ldbu	r3,1160(sp)
 800a2c0:	9080080c 	andi	r2,r18,32
 800a2c4:	9811883a 	mov	r8,r19
 800a2c8:	d8c11d85 	stb	r3,1142(sp)
 800a2cc:	d8c12317 	ldw	r3,1164(sp)
 800a2d0:	103e7e1e 	bne	r2,zero,8009ccc <__alt_data_end+0xfc009ccc>
 800a2d4:	9080040c 	andi	r2,r18,16
 800a2d8:	1001a926 	beq	r2,zero,800a980 <___vfiprintf_internal_r+0x1164>
 800a2dc:	1cc00017 	ldw	r19,0(r3)
 800a2e0:	d9412317 	ldw	r5,1164(sp)
 800a2e4:	982bd7fa 	srai	r21,r19,31
 800a2e8:	29400104 	addi	r5,r5,4
 800a2ec:	d9412315 	stw	r5,1164(sp)
 800a2f0:	a805883a 	mov	r2,r21
 800a2f4:	003e7b06 	br	8009ce4 <__alt_data_end+0xfc009ce4>
 800a2f8:	94800054 	ori	r18,r18,1
 800a2fc:	b9800007 	ldb	r6,0(r23)
 800a300:	003da706 	br	80099a0 <__alt_data_end+0xfc0099a0>
 800a304:	d8c12203 	ldbu	r3,1160(sp)
 800a308:	9811883a 	mov	r8,r19
 800a30c:	d8c11d85 	stb	r3,1142(sp)
 800a310:	30005826 	beq	r6,zero,800a474 <___vfiprintf_internal_r+0xc58>
 800a314:	05400044 	movi	r21,1
 800a318:	d8c10004 	addi	r3,sp,1024
 800a31c:	d9810005 	stb	r6,1024(sp)
 800a320:	d8011d85 	stb	zero,1142(sp)
 800a324:	a829883a 	mov	r20,r21
 800a328:	d8c12215 	stw	r3,1160(sp)
 800a32c:	003f1a06 	br	8009f98 <__alt_data_end+0xfc009f98>
 800a330:	d9012117 	ldw	r4,1156(sp)
 800a334:	d9412017 	ldw	r5,1152(sp)
 800a338:	d9811a04 	addi	r6,sp,1128
 800a33c:	d9c12a15 	stw	r7,1192(sp)
 800a340:	db012b15 	stw	r12,1196(sp)
 800a344:	80097080 	call	8009708 <__sprint_r.part.0>
 800a348:	d9c12a17 	ldw	r7,1192(sp)
 800a34c:	db012b17 	ldw	r12,1196(sp)
 800a350:	10004e1e 	bne	r2,zero,800a48c <___vfiprintf_internal_r+0xc70>
 800a354:	d9011b17 	ldw	r4,1132(sp)
 800a358:	d8c11c17 	ldw	r3,1136(sp)
 800a35c:	d811883a 	mov	r8,sp
 800a360:	21400044 	addi	r5,r4,1
 800a364:	003e9d06 	br	8009ddc <__alt_data_end+0xfc009ddc>
 800a368:	d9411b17 	ldw	r5,1132(sp)
 800a36c:	d8c11c17 	ldw	r3,1136(sp)
 800a370:	28800044 	addi	r2,r5,1
 800a374:	d9011d87 	ldb	r4,1142(sp)
 800a378:	203eb626 	beq	r4,zero,8009e54 <__alt_data_end+0xfc009e54>
 800a37c:	01000044 	movi	r4,1
 800a380:	d9411d84 	addi	r5,sp,1142
 800a384:	1907883a 	add	r3,r3,r4
 800a388:	41400015 	stw	r5,0(r8)
 800a38c:	41000115 	stw	r4,4(r8)
 800a390:	d8c11c15 	stw	r3,1136(sp)
 800a394:	d8811b15 	stw	r2,1132(sp)
 800a398:	014001c4 	movi	r5,7
 800a39c:	2880ce16 	blt	r5,r2,800a6d8 <___vfiprintf_internal_r+0xebc>
 800a3a0:	100b883a 	mov	r5,r2
 800a3a4:	42000204 	addi	r8,r8,8
 800a3a8:	10800044 	addi	r2,r2,1
 800a3ac:	003ea906 	br	8009e54 <__alt_data_end+0xfc009e54>
 800a3b0:	d9012117 	ldw	r4,1156(sp)
 800a3b4:	d9412017 	ldw	r5,1152(sp)
 800a3b8:	d9811a04 	addi	r6,sp,1128
 800a3bc:	80097080 	call	8009708 <__sprint_r.part.0>
 800a3c0:	1000321e 	bne	r2,zero,800a48c <___vfiprintf_internal_r+0xc70>
 800a3c4:	d9411b17 	ldw	r5,1132(sp)
 800a3c8:	d8c11c17 	ldw	r3,1136(sp)
 800a3cc:	d811883a 	mov	r8,sp
 800a3d0:	28800044 	addi	r2,r5,1
 800a3d4:	003eba06 	br	8009ec0 <__alt_data_end+0xfc009ec0>
 800a3d8:	10803fcc 	andi	r2,r2,255
 800a3dc:	00c00044 	movi	r3,1
 800a3e0:	10fe4d1e 	bne	r2,r3,8009d18 <__alt_data_end+0xfc009d18>
 800a3e4:	a800021e 	bne	r21,zero,800a3f0 <___vfiprintf_internal_r+0xbd4>
 800a3e8:	00800244 	movi	r2,9
 800a3ec:	14c01b2e 	bgeu	r2,r19,800a45c <___vfiprintf_internal_r+0xc40>
 800a3f0:	dc012215 	stw	r16,1160(sp)
 800a3f4:	dd010a04 	addi	r20,sp,1064
 800a3f8:	a821883a 	mov	r16,r21
 800a3fc:	402b883a 	mov	r21,r8
 800a400:	9809883a 	mov	r4,r19
 800a404:	800b883a 	mov	r5,r16
 800a408:	01800284 	movi	r6,10
 800a40c:	000f883a 	mov	r7,zero
 800a410:	800bbf00 	call	800bbf0 <__umoddi3>
 800a414:	10800c04 	addi	r2,r2,48
 800a418:	a53fffc4 	addi	r20,r20,-1
 800a41c:	9809883a 	mov	r4,r19
 800a420:	800b883a 	mov	r5,r16
 800a424:	01800284 	movi	r6,10
 800a428:	000f883a 	mov	r7,zero
 800a42c:	a0800005 	stb	r2,0(r20)
 800a430:	800b5b00 	call	800b5b0 <__udivdi3>
 800a434:	1027883a 	mov	r19,r2
 800a438:	10c4b03a 	or	r2,r2,r3
 800a43c:	1821883a 	mov	r16,r3
 800a440:	103fef1e 	bne	r2,zero,800a400 <__alt_data_end+0xfc00a400>
 800a444:	d9011e17 	ldw	r4,1144(sp)
 800a448:	dc012217 	ldw	r16,1160(sp)
 800a44c:	a811883a 	mov	r8,r21
 800a450:	dd012215 	stw	r20,1160(sp)
 800a454:	2529c83a 	sub	r20,r4,r20
 800a458:	003e4106 	br	8009d60 <__alt_data_end+0xfc009d60>
 800a45c:	9cc00c04 	addi	r19,r19,48
 800a460:	d8c109c4 	addi	r3,sp,1063
 800a464:	dcc109c5 	stb	r19,1063(sp)
 800a468:	dd012817 	ldw	r20,1184(sp)
 800a46c:	d8c12215 	stw	r3,1160(sp)
 800a470:	003e3b06 	br	8009d60 <__alt_data_end+0xfc009d60>
 800a474:	d8811c17 	ldw	r2,1136(sp)
 800a478:	10000426 	beq	r2,zero,800a48c <___vfiprintf_internal_r+0xc70>
 800a47c:	d9012117 	ldw	r4,1156(sp)
 800a480:	d9412017 	ldw	r5,1152(sp)
 800a484:	d9811a04 	addi	r6,sp,1128
 800a488:	80097080 	call	8009708 <__sprint_r.part.0>
 800a48c:	d9412017 	ldw	r5,1152(sp)
 800a490:	2880030b 	ldhu	r2,12(r5)
 800a494:	1080100c 	andi	r2,r2,64
 800a498:	103ddc1e 	bne	r2,zero,8009c0c <__alt_data_end+0xfc009c0c>
 800a49c:	d8812517 	ldw	r2,1172(sp)
 800a4a0:	003ddb06 	br	8009c10 <__alt_data_end+0xfc009c10>
 800a4a4:	1801061e 	bne	r3,zero,800a8c0 <___vfiprintf_internal_r+0x10a4>
 800a4a8:	d8c12217 	ldw	r3,1160(sp)
 800a4ac:	00800044 	movi	r2,1
 800a4b0:	dd000115 	stw	r20,4(sp)
 800a4b4:	d8c00015 	stw	r3,0(sp)
 800a4b8:	dd011c15 	stw	r20,1136(sp)
 800a4bc:	d8811b15 	stw	r2,1132(sp)
 800a4c0:	a007883a 	mov	r3,r20
 800a4c4:	d811883a 	mov	r8,sp
 800a4c8:	42000204 	addi	r8,r8,8
 800a4cc:	9480010c 	andi	r18,r18,4
 800a4d0:	90003426 	beq	r18,zero,800a5a4 <___vfiprintf_internal_r+0xd88>
 800a4d4:	d9412417 	ldw	r5,1168(sp)
 800a4d8:	2d65c83a 	sub	r18,r5,r21
 800a4dc:	0480310e 	bge	zero,r18,800a5a4 <___vfiprintf_internal_r+0xd88>
 800a4e0:	04000404 	movi	r16,16
 800a4e4:	8481ad0e 	bge	r16,r18,800ab9c <___vfiprintf_internal_r+0x1380>
 800a4e8:	01420074 	movhi	r5,2049
 800a4ec:	29473504 	addi	r5,r5,7380
 800a4f0:	d9011b17 	ldw	r4,1132(sp)
 800a4f4:	d9412615 	stw	r5,1176(sp)
 800a4f8:	04c001c4 	movi	r19,7
 800a4fc:	dd012117 	ldw	r20,1156(sp)
 800a500:	dd812017 	ldw	r22,1152(sp)
 800a504:	00000506 	br	800a51c <___vfiprintf_internal_r+0xd00>
 800a508:	21400084 	addi	r5,r4,2
 800a50c:	42000204 	addi	r8,r8,8
 800a510:	1009883a 	mov	r4,r2
 800a514:	94bffc04 	addi	r18,r18,-16
 800a518:	84800d0e 	bge	r16,r18,800a550 <___vfiprintf_internal_r+0xd34>
 800a51c:	18c00404 	addi	r3,r3,16
 800a520:	20800044 	addi	r2,r4,1
 800a524:	47000015 	stw	fp,0(r8)
 800a528:	44000115 	stw	r16,4(r8)
 800a52c:	d8c11c15 	stw	r3,1136(sp)
 800a530:	d8811b15 	stw	r2,1132(sp)
 800a534:	98bff40e 	bge	r19,r2,800a508 <__alt_data_end+0xfc00a508>
 800a538:	1800291e 	bne	r3,zero,800a5e0 <___vfiprintf_internal_r+0xdc4>
 800a53c:	94bffc04 	addi	r18,r18,-16
 800a540:	0009883a 	mov	r4,zero
 800a544:	01400044 	movi	r5,1
 800a548:	d811883a 	mov	r8,sp
 800a54c:	84bff316 	blt	r16,r18,800a51c <__alt_data_end+0xfc00a51c>
 800a550:	d8812617 	ldw	r2,1176(sp)
 800a554:	1c87883a 	add	r3,r3,r18
 800a558:	44800115 	stw	r18,4(r8)
 800a55c:	40800015 	stw	r2,0(r8)
 800a560:	d8c11c15 	stw	r3,1136(sp)
 800a564:	d9411b15 	stw	r5,1132(sp)
 800a568:	008001c4 	movi	r2,7
 800a56c:	11400d0e 	bge	r2,r5,800a5a4 <___vfiprintf_internal_r+0xd88>
 800a570:	1800061e 	bne	r3,zero,800a58c <___vfiprintf_internal_r+0xd70>
 800a574:	d8c12417 	ldw	r3,1168(sp)
 800a578:	a8c12e16 	blt	r21,r3,800aa34 <___vfiprintf_internal_r+0x1218>
 800a57c:	d9012517 	ldw	r4,1172(sp)
 800a580:	2549883a 	add	r4,r4,r21
 800a584:	d9012515 	stw	r4,1172(sp)
 800a588:	00001206 	br	800a5d4 <___vfiprintf_internal_r+0xdb8>
 800a58c:	d9012117 	ldw	r4,1156(sp)
 800a590:	d9412017 	ldw	r5,1152(sp)
 800a594:	d9811a04 	addi	r6,sp,1128
 800a598:	80097080 	call	8009708 <__sprint_r.part.0>
 800a59c:	103fbb1e 	bne	r2,zero,800a48c <__alt_data_end+0xfc00a48c>
 800a5a0:	d8c11c17 	ldw	r3,1136(sp)
 800a5a4:	d8812417 	ldw	r2,1168(sp)
 800a5a8:	a880010e 	bge	r21,r2,800a5b0 <___vfiprintf_internal_r+0xd94>
 800a5ac:	102b883a 	mov	r21,r2
 800a5b0:	d9012517 	ldw	r4,1172(sp)
 800a5b4:	2549883a 	add	r4,r4,r21
 800a5b8:	d9012515 	stw	r4,1172(sp)
 800a5bc:	18000526 	beq	r3,zero,800a5d4 <___vfiprintf_internal_r+0xdb8>
 800a5c0:	d9012117 	ldw	r4,1156(sp)
 800a5c4:	d9412017 	ldw	r5,1152(sp)
 800a5c8:	d9811a04 	addi	r6,sp,1128
 800a5cc:	80097080 	call	8009708 <__sprint_r.part.0>
 800a5d0:	103fae1e 	bne	r2,zero,800a48c <__alt_data_end+0xfc00a48c>
 800a5d4:	d8011b15 	stw	zero,1132(sp)
 800a5d8:	d811883a 	mov	r8,sp
 800a5dc:	003cc706 	br	80098fc <__alt_data_end+0xfc0098fc>
 800a5e0:	a009883a 	mov	r4,r20
 800a5e4:	b00b883a 	mov	r5,r22
 800a5e8:	d9811a04 	addi	r6,sp,1128
 800a5ec:	80097080 	call	8009708 <__sprint_r.part.0>
 800a5f0:	103fa61e 	bne	r2,zero,800a48c <__alt_data_end+0xfc00a48c>
 800a5f4:	d9011b17 	ldw	r4,1132(sp)
 800a5f8:	d8c11c17 	ldw	r3,1136(sp)
 800a5fc:	d811883a 	mov	r8,sp
 800a600:	21400044 	addi	r5,r4,1
 800a604:	003fc306 	br	800a514 <__alt_data_end+0xfc00a514>
 800a608:	d9012417 	ldw	r4,1168(sp)
 800a60c:	256dc83a 	sub	r22,r4,r21
 800a610:	05be1f0e 	bge	zero,r22,8009e90 <__alt_data_end+0xfc009e90>
 800a614:	04c00404 	movi	r19,16
 800a618:	9d81720e 	bge	r19,r22,800abe4 <___vfiprintf_internal_r+0x13c8>
 800a61c:	00820074 	movhi	r2,2049
 800a620:	10873104 	addi	r2,r2,7364
 800a624:	d8812615 	stw	r2,1176(sp)
 800a628:	028001c4 	movi	r10,7
 800a62c:	00000506 	br	800a644 <___vfiprintf_internal_r+0xe28>
 800a630:	29000084 	addi	r4,r5,2
 800a634:	42000204 	addi	r8,r8,8
 800a638:	100b883a 	mov	r5,r2
 800a63c:	b5bffc04 	addi	r22,r22,-16
 800a640:	9d800d0e 	bge	r19,r22,800a678 <___vfiprintf_internal_r+0xe5c>
 800a644:	18c00404 	addi	r3,r3,16
 800a648:	28800044 	addi	r2,r5,1
 800a64c:	44400015 	stw	r17,0(r8)
 800a650:	44c00115 	stw	r19,4(r8)
 800a654:	d8c11c15 	stw	r3,1136(sp)
 800a658:	d8811b15 	stw	r2,1132(sp)
 800a65c:	50bff40e 	bge	r10,r2,800a630 <__alt_data_end+0xfc00a630>
 800a660:	1800111e 	bne	r3,zero,800a6a8 <___vfiprintf_internal_r+0xe8c>
 800a664:	b5bffc04 	addi	r22,r22,-16
 800a668:	000b883a 	mov	r5,zero
 800a66c:	01000044 	movi	r4,1
 800a670:	d811883a 	mov	r8,sp
 800a674:	9dbff316 	blt	r19,r22,800a644 <__alt_data_end+0xfc00a644>
 800a678:	d9412617 	ldw	r5,1176(sp)
 800a67c:	1d87883a 	add	r3,r3,r22
 800a680:	45800115 	stw	r22,4(r8)
 800a684:	41400015 	stw	r5,0(r8)
 800a688:	d8c11c15 	stw	r3,1136(sp)
 800a68c:	d9011b15 	stw	r4,1132(sp)
 800a690:	008001c4 	movi	r2,7
 800a694:	11008516 	blt	r2,r4,800a8ac <___vfiprintf_internal_r+0x1090>
 800a698:	42000204 	addi	r8,r8,8
 800a69c:	20800044 	addi	r2,r4,1
 800a6a0:	200b883a 	mov	r5,r4
 800a6a4:	003dfa06 	br	8009e90 <__alt_data_end+0xfc009e90>
 800a6a8:	d9012117 	ldw	r4,1156(sp)
 800a6ac:	d9412017 	ldw	r5,1152(sp)
 800a6b0:	d9811a04 	addi	r6,sp,1128
 800a6b4:	da812a15 	stw	r10,1192(sp)
 800a6b8:	80097080 	call	8009708 <__sprint_r.part.0>
 800a6bc:	da812a17 	ldw	r10,1192(sp)
 800a6c0:	103f721e 	bne	r2,zero,800a48c <__alt_data_end+0xfc00a48c>
 800a6c4:	d9411b17 	ldw	r5,1132(sp)
 800a6c8:	d8c11c17 	ldw	r3,1136(sp)
 800a6cc:	d811883a 	mov	r8,sp
 800a6d0:	29000044 	addi	r4,r5,1
 800a6d4:	003fd906 	br	800a63c <__alt_data_end+0xfc00a63c>
 800a6d8:	1800681e 	bne	r3,zero,800a87c <___vfiprintf_internal_r+0x1060>
 800a6dc:	50004d26 	beq	r10,zero,800a814 <___vfiprintf_internal_r+0xff8>
 800a6e0:	d8811d04 	addi	r2,sp,1140
 800a6e4:	00c00084 	movi	r3,2
 800a6e8:	d8800015 	stw	r2,0(sp)
 800a6ec:	d8c00115 	stw	r3,4(sp)
 800a6f0:	2005883a 	mov	r2,r4
 800a6f4:	d811883a 	mov	r8,sp
 800a6f8:	003de006 	br	8009e7c <__alt_data_end+0xfc009e7c>
 800a6fc:	1800551e 	bne	r3,zero,800a854 <___vfiprintf_internal_r+0x1038>
 800a700:	000b883a 	mov	r5,zero
 800a704:	00800044 	movi	r2,1
 800a708:	d811883a 	mov	r8,sp
 800a70c:	003dde06 	br	8009e88 <__alt_data_end+0xfc009e88>
 800a710:	10803fcc 	andi	r2,r2,255
 800a714:	1000191e 	bne	r2,zero,800a77c <___vfiprintf_internal_r+0xf60>
 800a718:	9080004c 	andi	r2,r18,1
 800a71c:	10001726 	beq	r2,zero,800a77c <___vfiprintf_internal_r+0xf60>
 800a720:	00800c04 	movi	r2,48
 800a724:	d8c109c4 	addi	r3,sp,1063
 800a728:	d88109c5 	stb	r2,1063(sp)
 800a72c:	dd012817 	ldw	r20,1184(sp)
 800a730:	d8c12215 	stw	r3,1160(sp)
 800a734:	003d8a06 	br	8009d60 <__alt_data_end+0xfc009d60>
 800a738:	d9012717 	ldw	r4,1180(sp)
 800a73c:	dd010a04 	addi	r20,sp,1064
 800a740:	988003cc 	andi	r2,r19,15
 800a744:	a806973a 	slli	r3,r21,28
 800a748:	2085883a 	add	r2,r4,r2
 800a74c:	9826d13a 	srli	r19,r19,4
 800a750:	10800003 	ldbu	r2,0(r2)
 800a754:	a82ad13a 	srli	r21,r21,4
 800a758:	a53fffc4 	addi	r20,r20,-1
 800a75c:	1ce6b03a 	or	r19,r3,r19
 800a760:	a0800005 	stb	r2,0(r20)
 800a764:	9d44b03a 	or	r2,r19,r21
 800a768:	103ff51e 	bne	r2,zero,800a740 <__alt_data_end+0xfc00a740>
 800a76c:	d9411e17 	ldw	r5,1144(sp)
 800a770:	dd012215 	stw	r20,1160(sp)
 800a774:	2d29c83a 	sub	r20,r5,r20
 800a778:	003d7906 	br	8009d60 <__alt_data_end+0xfc009d60>
 800a77c:	d8c10a04 	addi	r3,sp,1064
 800a780:	d8c12215 	stw	r3,1160(sp)
 800a784:	003d7606 	br	8009d60 <__alt_data_end+0xfc009d60>
 800a788:	18009e1e 	bne	r3,zero,800aa04 <___vfiprintf_internal_r+0x11e8>
 800a78c:	d8811d87 	ldb	r2,1142(sp)
 800a790:	10005f26 	beq	r2,zero,800a910 <___vfiprintf_internal_r+0x10f4>
 800a794:	00c00044 	movi	r3,1
 800a798:	d9011d84 	addi	r4,sp,1142
 800a79c:	1805883a 	mov	r2,r3
 800a7a0:	d9000015 	stw	r4,0(sp)
 800a7a4:	d8c00115 	stw	r3,4(sp)
 800a7a8:	d811883a 	mov	r8,sp
 800a7ac:	003efc06 	br	800a3a0 <__alt_data_end+0xfc00a3a0>
 800a7b0:	d9412417 	ldw	r5,1168(sp)
 800a7b4:	d811883a 	mov	r8,sp
 800a7b8:	2d65c83a 	sub	r18,r5,r21
 800a7bc:	04bf4816 	blt	zero,r18,800a4e0 <__alt_data_end+0xfc00a4e0>
 800a7c0:	003f6c06 	br	800a574 <__alt_data_end+0xfc00a574>
 800a7c4:	b829883a 	mov	r20,r23
 800a7c8:	003c6906 	br	8009970 <__alt_data_end+0xfc009970>
 800a7cc:	d9012117 	ldw	r4,1156(sp)
 800a7d0:	d9412017 	ldw	r5,1152(sp)
 800a7d4:	d9811a04 	addi	r6,sp,1128
 800a7d8:	80097080 	call	8009708 <__sprint_r.part.0>
 800a7dc:	103f2b1e 	bne	r2,zero,800a48c <__alt_data_end+0xfc00a48c>
 800a7e0:	d8c11c17 	ldw	r3,1136(sp)
 800a7e4:	d811883a 	mov	r8,sp
 800a7e8:	003f3806 	br	800a4cc <__alt_data_end+0xfc00a4cc>
 800a7ec:	00800084 	movi	r2,2
 800a7f0:	9d46b03a 	or	r3,r19,r21
 800a7f4:	003df606 	br	8009fd0 <__alt_data_end+0xfc009fd0>
 800a7f8:	d9012117 	ldw	r4,1156(sp)
 800a7fc:	d9412017 	ldw	r5,1152(sp)
 800a800:	d9811a04 	addi	r6,sp,1128
 800a804:	80097080 	call	8009708 <__sprint_r.part.0>
 800a808:	103f201e 	bne	r2,zero,800a48c <__alt_data_end+0xfc00a48c>
 800a80c:	d811883a 	mov	r8,sp
 800a810:	003cc606 	br	8009b2c <__alt_data_end+0xfc009b2c>
 800a814:	000b883a 	mov	r5,zero
 800a818:	2005883a 	mov	r2,r4
 800a81c:	d811883a 	mov	r8,sp
 800a820:	003d9906 	br	8009e88 <__alt_data_end+0xfc009e88>
 800a824:	10803fcc 	andi	r2,r2,255
 800a828:	1080201c 	xori	r2,r2,128
 800a82c:	10bfe004 	addi	r2,r2,-128
 800a830:	01000c04 	movi	r4,48
 800a834:	1100b226 	beq	r2,r4,800ab00 <___vfiprintf_internal_r+0x12e4>
 800a838:	d9412217 	ldw	r5,1160(sp)
 800a83c:	d8811e17 	ldw	r2,1144(sp)
 800a840:	193fffc5 	stb	r4,-1(r3)
 800a844:	297fffc4 	addi	r5,r5,-1
 800a848:	d9412215 	stw	r5,1160(sp)
 800a84c:	1169c83a 	sub	r20,r2,r5
 800a850:	003d4306 	br	8009d60 <__alt_data_end+0xfc009d60>
 800a854:	d9012117 	ldw	r4,1156(sp)
 800a858:	d9412017 	ldw	r5,1152(sp)
 800a85c:	d9811a04 	addi	r6,sp,1128
 800a860:	80097080 	call	8009708 <__sprint_r.part.0>
 800a864:	103f091e 	bne	r2,zero,800a48c <__alt_data_end+0xfc00a48c>
 800a868:	d9411b17 	ldw	r5,1132(sp)
 800a86c:	d8c11c17 	ldw	r3,1136(sp)
 800a870:	d811883a 	mov	r8,sp
 800a874:	28800044 	addi	r2,r5,1
 800a878:	003d8306 	br	8009e88 <__alt_data_end+0xfc009e88>
 800a87c:	d9012117 	ldw	r4,1156(sp)
 800a880:	d9412017 	ldw	r5,1152(sp)
 800a884:	d9811a04 	addi	r6,sp,1128
 800a888:	da812a15 	stw	r10,1192(sp)
 800a88c:	80097080 	call	8009708 <__sprint_r.part.0>
 800a890:	da812a17 	ldw	r10,1192(sp)
 800a894:	103efd1e 	bne	r2,zero,800a48c <__alt_data_end+0xfc00a48c>
 800a898:	d9411b17 	ldw	r5,1132(sp)
 800a89c:	d8c11c17 	ldw	r3,1136(sp)
 800a8a0:	d811883a 	mov	r8,sp
 800a8a4:	28800044 	addi	r2,r5,1
 800a8a8:	003d6a06 	br	8009e54 <__alt_data_end+0xfc009e54>
 800a8ac:	1800a01e 	bne	r3,zero,800ab30 <___vfiprintf_internal_r+0x1314>
 800a8b0:	000b883a 	mov	r5,zero
 800a8b4:	00800044 	movi	r2,1
 800a8b8:	d811883a 	mov	r8,sp
 800a8bc:	003d7406 	br	8009e90 <__alt_data_end+0xfc009e90>
 800a8c0:	d9012117 	ldw	r4,1156(sp)
 800a8c4:	d9412017 	ldw	r5,1152(sp)
 800a8c8:	d9811a04 	addi	r6,sp,1128
 800a8cc:	80097080 	call	8009708 <__sprint_r.part.0>
 800a8d0:	103eee1e 	bne	r2,zero,800a48c <__alt_data_end+0xfc00a48c>
 800a8d4:	d8811b17 	ldw	r2,1132(sp)
 800a8d8:	d8c11c17 	ldw	r3,1136(sp)
 800a8dc:	d811883a 	mov	r8,sp
 800a8e0:	10800044 	addi	r2,r2,1
 800a8e4:	003d8f06 	br	8009f24 <__alt_data_end+0xfc009f24>
 800a8e8:	04e7c83a 	sub	r19,zero,r19
 800a8ec:	9804c03a 	cmpne	r2,r19,zero
 800a8f0:	056bc83a 	sub	r21,zero,r21
 800a8f4:	a8abc83a 	sub	r21,r21,r2
 800a8f8:	05800b44 	movi	r22,45
 800a8fc:	dd811d85 	stb	r22,1142(sp)
 800a900:	8029883a 	mov	r20,r16
 800a904:	00800044 	movi	r2,1
 800a908:	9d46b03a 	or	r3,r19,r21
 800a90c:	003cfa06 	br	8009cf8 <__alt_data_end+0xfc009cf8>
 800a910:	000b883a 	mov	r5,zero
 800a914:	00800044 	movi	r2,1
 800a918:	d811883a 	mov	r8,sp
 800a91c:	503d5a26 	beq	r10,zero,8009e88 <__alt_data_end+0xfc009e88>
 800a920:	00c00084 	movi	r3,2
 800a924:	d9011d04 	addi	r4,sp,1140
 800a928:	d9000015 	stw	r4,0(sp)
 800a92c:	d8c00115 	stw	r3,4(sp)
 800a930:	003d5206 	br	8009e7c <__alt_data_end+0xfc009e7c>
 800a934:	9080040c 	andi	r2,r18,16
 800a938:	1000421e 	bne	r2,zero,800aa44 <___vfiprintf_internal_r+0x1228>
 800a93c:	9480100c 	andi	r18,r18,64
 800a940:	90009c26 	beq	r18,zero,800abb4 <___vfiprintf_internal_r+0x1398>
 800a944:	d9412317 	ldw	r5,1164(sp)
 800a948:	d8c12517 	ldw	r3,1172(sp)
 800a94c:	28800017 	ldw	r2,0(r5)
 800a950:	29400104 	addi	r5,r5,4
 800a954:	d9412315 	stw	r5,1164(sp)
 800a958:	10c0000d 	sth	r3,0(r2)
 800a95c:	003be706 	br	80098fc <__alt_data_end+0xfc0098fc>
 800a960:	90c0100c 	andi	r3,r18,64
 800a964:	18003e26 	beq	r3,zero,800aa60 <___vfiprintf_internal_r+0x1244>
 800a968:	d8c12317 	ldw	r3,1164(sp)
 800a96c:	14c0000b 	ldhu	r19,0(r2)
 800a970:	002b883a 	mov	r21,zero
 800a974:	18c00104 	addi	r3,r3,4
 800a978:	d8c12315 	stw	r3,1164(sp)
 800a97c:	003db706 	br	800a05c <__alt_data_end+0xfc00a05c>
 800a980:	9080100c 	andi	r2,r18,64
 800a984:	10004c26 	beq	r2,zero,800aab8 <___vfiprintf_internal_r+0x129c>
 800a988:	1cc0000f 	ldh	r19,0(r3)
 800a98c:	d8812317 	ldw	r2,1164(sp)
 800a990:	982bd7fa 	srai	r21,r19,31
 800a994:	10800104 	addi	r2,r2,4
 800a998:	d8812315 	stw	r2,1164(sp)
 800a99c:	a805883a 	mov	r2,r21
 800a9a0:	003cd006 	br	8009ce4 <__alt_data_end+0xfc009ce4>
 800a9a4:	00800084 	movi	r2,2
 800a9a8:	003d8906 	br	8009fd0 <__alt_data_end+0xfc009fd0>
 800a9ac:	b9800007 	ldb	r6,0(r23)
 800a9b0:	003bfb06 	br	80099a0 <__alt_data_end+0xfc0099a0>
 800a9b4:	9080100c 	andi	r2,r18,64
 800a9b8:	10003726 	beq	r2,zero,800aa98 <___vfiprintf_internal_r+0x127c>
 800a9bc:	d9412317 	ldw	r5,1164(sp)
 800a9c0:	002b883a 	mov	r21,zero
 800a9c4:	0005883a 	mov	r2,zero
 800a9c8:	2cc0000b 	ldhu	r19,0(r5)
 800a9cc:	29400104 	addi	r5,r5,4
 800a9d0:	d9412315 	stw	r5,1164(sp)
 800a9d4:	9807883a 	mov	r3,r19
 800a9d8:	003d7d06 	br	8009fd0 <__alt_data_end+0xfc009fd0>
 800a9dc:	9080100c 	andi	r2,r18,64
 800a9e0:	10002526 	beq	r2,zero,800aa78 <___vfiprintf_internal_r+0x125c>
 800a9e4:	d8812317 	ldw	r2,1164(sp)
 800a9e8:	002b883a 	mov	r21,zero
 800a9ec:	14c0000b 	ldhu	r19,0(r2)
 800a9f0:	10800104 	addi	r2,r2,4
 800a9f4:	d8812315 	stw	r2,1164(sp)
 800a9f8:	9807883a 	mov	r3,r19
 800a9fc:	00800044 	movi	r2,1
 800aa00:	003d7306 	br	8009fd0 <__alt_data_end+0xfc009fd0>
 800aa04:	d9012117 	ldw	r4,1156(sp)
 800aa08:	d9412017 	ldw	r5,1152(sp)
 800aa0c:	d9811a04 	addi	r6,sp,1128
 800aa10:	da812a15 	stw	r10,1192(sp)
 800aa14:	80097080 	call	8009708 <__sprint_r.part.0>
 800aa18:	da812a17 	ldw	r10,1192(sp)
 800aa1c:	103e9b1e 	bne	r2,zero,800a48c <__alt_data_end+0xfc00a48c>
 800aa20:	d9411b17 	ldw	r5,1132(sp)
 800aa24:	d8c11c17 	ldw	r3,1136(sp)
 800aa28:	d811883a 	mov	r8,sp
 800aa2c:	28800044 	addi	r2,r5,1
 800aa30:	003e5006 	br	800a374 <__alt_data_end+0xfc00a374>
 800aa34:	182b883a 	mov	r21,r3
 800aa38:	003ed006 	br	800a57c <__alt_data_end+0xfc00a57c>
 800aa3c:	8029883a 	mov	r20,r16
 800aa40:	003dc606 	br	800a15c <__alt_data_end+0xfc00a15c>
 800aa44:	d8c12317 	ldw	r3,1164(sp)
 800aa48:	d9012517 	ldw	r4,1172(sp)
 800aa4c:	18800017 	ldw	r2,0(r3)
 800aa50:	18c00104 	addi	r3,r3,4
 800aa54:	d8c12315 	stw	r3,1164(sp)
 800aa58:	11000015 	stw	r4,0(r2)
 800aa5c:	003ba706 	br	80098fc <__alt_data_end+0xfc0098fc>
 800aa60:	d9012317 	ldw	r4,1164(sp)
 800aa64:	14c00017 	ldw	r19,0(r2)
 800aa68:	002b883a 	mov	r21,zero
 800aa6c:	21000104 	addi	r4,r4,4
 800aa70:	d9012315 	stw	r4,1164(sp)
 800aa74:	003d7906 	br	800a05c <__alt_data_end+0xfc00a05c>
 800aa78:	d8c12317 	ldw	r3,1164(sp)
 800aa7c:	002b883a 	mov	r21,zero
 800aa80:	00800044 	movi	r2,1
 800aa84:	1cc00017 	ldw	r19,0(r3)
 800aa88:	18c00104 	addi	r3,r3,4
 800aa8c:	d8c12315 	stw	r3,1164(sp)
 800aa90:	9807883a 	mov	r3,r19
 800aa94:	003d4e06 	br	8009fd0 <__alt_data_end+0xfc009fd0>
 800aa98:	d8812317 	ldw	r2,1164(sp)
 800aa9c:	002b883a 	mov	r21,zero
 800aaa0:	14c00017 	ldw	r19,0(r2)
 800aaa4:	10800104 	addi	r2,r2,4
 800aaa8:	d8812315 	stw	r2,1164(sp)
 800aaac:	9807883a 	mov	r3,r19
 800aab0:	0005883a 	mov	r2,zero
 800aab4:	003d4606 	br	8009fd0 <__alt_data_end+0xfc009fd0>
 800aab8:	1cc00017 	ldw	r19,0(r3)
 800aabc:	d8c12317 	ldw	r3,1164(sp)
 800aac0:	982bd7fa 	srai	r21,r19,31
 800aac4:	18c00104 	addi	r3,r3,4
 800aac8:	d8c12315 	stw	r3,1164(sp)
 800aacc:	a805883a 	mov	r2,r21
 800aad0:	003c8406 	br	8009ce4 <__alt_data_end+0xfc009ce4>
 800aad4:	01020074 	movhi	r4,2049
 800aad8:	21073104 	addi	r4,r4,7364
 800aadc:	d9012615 	stw	r4,1176(sp)
 800aae0:	003d0606 	br	8009efc <__alt_data_end+0xfc009efc>
 800aae4:	b9800043 	ldbu	r6,1(r23)
 800aae8:	94800814 	ori	r18,r18,32
 800aaec:	bdc00044 	addi	r23,r23,1
 800aaf0:	31803fcc 	andi	r6,r6,255
 800aaf4:	3180201c 	xori	r6,r6,128
 800aaf8:	31bfe004 	addi	r6,r6,-128
 800aafc:	003ba806 	br	80099a0 <__alt_data_end+0xfc0099a0>
 800ab00:	d8811e17 	ldw	r2,1144(sp)
 800ab04:	d8c12217 	ldw	r3,1160(sp)
 800ab08:	10e9c83a 	sub	r20,r2,r3
 800ab0c:	003c9406 	br	8009d60 <__alt_data_end+0xfc009d60>
 800ab10:	da012a15 	stw	r8,1192(sp)
 800ab14:	800232c0 	call	800232c <strlen>
 800ab18:	1029883a 	mov	r20,r2
 800ab1c:	dd811d83 	ldbu	r22,1142(sp)
 800ab20:	dcc12315 	stw	r19,1164(sp)
 800ab24:	0021883a 	mov	r16,zero
 800ab28:	da012a17 	ldw	r8,1192(sp)
 800ab2c:	003c8c06 	br	8009d60 <__alt_data_end+0xfc009d60>
 800ab30:	d9012117 	ldw	r4,1156(sp)
 800ab34:	d9412017 	ldw	r5,1152(sp)
 800ab38:	d9811a04 	addi	r6,sp,1128
 800ab3c:	80097080 	call	8009708 <__sprint_r.part.0>
 800ab40:	103e521e 	bne	r2,zero,800a48c <__alt_data_end+0xfc00a48c>
 800ab44:	d9411b17 	ldw	r5,1132(sp)
 800ab48:	d8c11c17 	ldw	r3,1136(sp)
 800ab4c:	d811883a 	mov	r8,sp
 800ab50:	28800044 	addi	r2,r5,1
 800ab54:	003cce06 	br	8009e90 <__alt_data_end+0xfc009e90>
 800ab58:	01420074 	movhi	r5,2049
 800ab5c:	29473504 	addi	r5,r5,7380
 800ab60:	d9412615 	stw	r5,1176(sp)
 800ab64:	d9411b17 	ldw	r5,1132(sp)
 800ab68:	29400044 	addi	r5,r5,1
 800ab6c:	003cad06 	br	8009e24 <__alt_data_end+0xfc009e24>
 800ab70:	00800184 	movi	r2,6
 800ab74:	1400012e 	bgeu	r2,r16,800ab7c <___vfiprintf_internal_r+0x1360>
 800ab78:	1021883a 	mov	r16,r2
 800ab7c:	8029883a 	mov	r20,r16
 800ab80:	802b883a 	mov	r21,r16
 800ab84:	80001c16 	blt	r16,zero,800abf8 <___vfiprintf_internal_r+0x13dc>
 800ab88:	00c20074 	movhi	r3,2049
 800ab8c:	18c6d504 	addi	r3,r3,6996
 800ab90:	dcc12315 	stw	r19,1164(sp)
 800ab94:	d8c12215 	stw	r3,1160(sp)
 800ab98:	003cff06 	br	8009f98 <__alt_data_end+0xfc009f98>
 800ab9c:	d9411b17 	ldw	r5,1132(sp)
 800aba0:	00820074 	movhi	r2,2049
 800aba4:	10873504 	addi	r2,r2,7380
 800aba8:	d8812615 	stw	r2,1176(sp)
 800abac:	29400044 	addi	r5,r5,1
 800abb0:	003e6706 	br	800a550 <__alt_data_end+0xfc00a550>
 800abb4:	d9012317 	ldw	r4,1164(sp)
 800abb8:	d9412517 	ldw	r5,1172(sp)
 800abbc:	20800017 	ldw	r2,0(r4)
 800abc0:	21000104 	addi	r4,r4,4
 800abc4:	d9012315 	stw	r4,1164(sp)
 800abc8:	11400015 	stw	r5,0(r2)
 800abcc:	003b4b06 	br	80098fc <__alt_data_end+0xfc0098fc>
 800abd0:	8029883a 	mov	r20,r16
 800abd4:	dd811d83 	ldbu	r22,1142(sp)
 800abd8:	dcc12315 	stw	r19,1164(sp)
 800abdc:	0021883a 	mov	r16,zero
 800abe0:	003c5f06 	br	8009d60 <__alt_data_end+0xfc009d60>
 800abe4:	01020074 	movhi	r4,2049
 800abe8:	21073104 	addi	r4,r4,7364
 800abec:	d9012615 	stw	r4,1176(sp)
 800abf0:	1009883a 	mov	r4,r2
 800abf4:	003ea006 	br	800a678 <__alt_data_end+0xfc00a678>
 800abf8:	002b883a 	mov	r21,zero
 800abfc:	003fe206 	br	800ab88 <__alt_data_end+0xfc00ab88>
 800ac00:	d9412317 	ldw	r5,1164(sp)
 800ac04:	b807883a 	mov	r3,r23
 800ac08:	102f883a 	mov	r23,r2
 800ac0c:	2c000017 	ldw	r16,0(r5)
 800ac10:	29000104 	addi	r4,r5,4
 800ac14:	d9012315 	stw	r4,1164(sp)
 800ac18:	80000416 	blt	r16,zero,800ac2c <___vfiprintf_internal_r+0x1410>
 800ac1c:	19800047 	ldb	r6,1(r3)
 800ac20:	003b5f06 	br	80099a0 <__alt_data_end+0xfc0099a0>
 800ac24:	043fffc4 	movi	r16,-1
 800ac28:	003bef06 	br	8009be8 <__alt_data_end+0xfc009be8>
 800ac2c:	043fffc4 	movi	r16,-1
 800ac30:	19800047 	ldb	r6,1(r3)
 800ac34:	003b5a06 	br	80099a0 <__alt_data_end+0xfc0099a0>
 800ac38:	282b883a 	mov	r21,r5
 800ac3c:	003cc706 	br	8009f5c <__alt_data_end+0xfc009f5c>

0800ac40 <__vfiprintf_internal>:
 800ac40:	2007883a 	mov	r3,r4
 800ac44:	01020074 	movhi	r4,2049
 800ac48:	210e3204 	addi	r4,r4,14536
 800ac4c:	21000017 	ldw	r4,0(r4)
 800ac50:	2805883a 	mov	r2,r5
 800ac54:	300f883a 	mov	r7,r6
 800ac58:	180b883a 	mov	r5,r3
 800ac5c:	100d883a 	mov	r6,r2
 800ac60:	800981c1 	jmpi	800981c <___vfiprintf_internal_r>

0800ac64 <_write_r>:
 800ac64:	defffd04 	addi	sp,sp,-12
 800ac68:	dc000015 	stw	r16,0(sp)
 800ac6c:	04020074 	movhi	r16,2049
 800ac70:	dc400115 	stw	r17,4(sp)
 800ac74:	84150304 	addi	r16,r16,21516
 800ac78:	2023883a 	mov	r17,r4
 800ac7c:	2809883a 	mov	r4,r5
 800ac80:	300b883a 	mov	r5,r6
 800ac84:	380d883a 	mov	r6,r7
 800ac88:	dfc00215 	stw	ra,8(sp)
 800ac8c:	80000015 	stw	zero,0(r16)
 800ac90:	800f4800 	call	800f480 <write>
 800ac94:	00ffffc4 	movi	r3,-1
 800ac98:	10c00526 	beq	r2,r3,800acb0 <_write_r+0x4c>
 800ac9c:	dfc00217 	ldw	ra,8(sp)
 800aca0:	dc400117 	ldw	r17,4(sp)
 800aca4:	dc000017 	ldw	r16,0(sp)
 800aca8:	dec00304 	addi	sp,sp,12
 800acac:	f800283a 	ret
 800acb0:	80c00017 	ldw	r3,0(r16)
 800acb4:	183ff926 	beq	r3,zero,800ac9c <__alt_data_end+0xfc00ac9c>
 800acb8:	88c00015 	stw	r3,0(r17)
 800acbc:	003ff706 	br	800ac9c <__alt_data_end+0xfc00ac9c>

0800acc0 <_close_r>:
 800acc0:	defffd04 	addi	sp,sp,-12
 800acc4:	dc000015 	stw	r16,0(sp)
 800acc8:	04020074 	movhi	r16,2049
 800accc:	dc400115 	stw	r17,4(sp)
 800acd0:	84150304 	addi	r16,r16,21516
 800acd4:	2023883a 	mov	r17,r4
 800acd8:	2809883a 	mov	r4,r5
 800acdc:	dfc00215 	stw	ra,8(sp)
 800ace0:	80000015 	stw	zero,0(r16)
 800ace4:	800ebac0 	call	800ebac <close>
 800ace8:	00ffffc4 	movi	r3,-1
 800acec:	10c00526 	beq	r2,r3,800ad04 <_close_r+0x44>
 800acf0:	dfc00217 	ldw	ra,8(sp)
 800acf4:	dc400117 	ldw	r17,4(sp)
 800acf8:	dc000017 	ldw	r16,0(sp)
 800acfc:	dec00304 	addi	sp,sp,12
 800ad00:	f800283a 	ret
 800ad04:	80c00017 	ldw	r3,0(r16)
 800ad08:	183ff926 	beq	r3,zero,800acf0 <__alt_data_end+0xfc00acf0>
 800ad0c:	88c00015 	stw	r3,0(r17)
 800ad10:	003ff706 	br	800acf0 <__alt_data_end+0xfc00acf0>

0800ad14 <_calloc_r>:
 800ad14:	defffe04 	addi	sp,sp,-8
 800ad18:	dc000015 	stw	r16,0(sp)
 800ad1c:	2021883a 	mov	r16,r4
 800ad20:	2809883a 	mov	r4,r5
 800ad24:	300b883a 	mov	r5,r6
 800ad28:	dfc00115 	stw	ra,4(sp)
 800ad2c:	800c3380 	call	800c338 <__mulsi3>
 800ad30:	8009883a 	mov	r4,r16
 800ad34:	100b883a 	mov	r5,r2
 800ad38:	80072300 	call	8007230 <_malloc_r>
 800ad3c:	1021883a 	mov	r16,r2
 800ad40:	10002826 	beq	r2,zero,800ade4 <_calloc_r+0xd0>
 800ad44:	11bfff17 	ldw	r6,-4(r2)
 800ad48:	00bfff04 	movi	r2,-4
 800ad4c:	00c00904 	movi	r3,36
 800ad50:	308c703a 	and	r6,r6,r2
 800ad54:	308d883a 	add	r6,r6,r2
 800ad58:	19801436 	bltu	r3,r6,800adac <_calloc_r+0x98>
 800ad5c:	008004c4 	movi	r2,19
 800ad60:	11800936 	bltu	r2,r6,800ad88 <_calloc_r+0x74>
 800ad64:	8005883a 	mov	r2,r16
 800ad68:	10000015 	stw	zero,0(r2)
 800ad6c:	10000115 	stw	zero,4(r2)
 800ad70:	10000215 	stw	zero,8(r2)
 800ad74:	8005883a 	mov	r2,r16
 800ad78:	dfc00117 	ldw	ra,4(sp)
 800ad7c:	dc000017 	ldw	r16,0(sp)
 800ad80:	dec00204 	addi	sp,sp,8
 800ad84:	f800283a 	ret
 800ad88:	80000015 	stw	zero,0(r16)
 800ad8c:	80000115 	stw	zero,4(r16)
 800ad90:	008006c4 	movi	r2,27
 800ad94:	11800d2e 	bgeu	r2,r6,800adcc <_calloc_r+0xb8>
 800ad98:	80000215 	stw	zero,8(r16)
 800ad9c:	80000315 	stw	zero,12(r16)
 800ada0:	30c00c26 	beq	r6,r3,800add4 <_calloc_r+0xc0>
 800ada4:	80800404 	addi	r2,r16,16
 800ada8:	003fef06 	br	800ad68 <__alt_data_end+0xfc00ad68>
 800adac:	8009883a 	mov	r4,r16
 800adb0:	000b883a 	mov	r5,zero
 800adb4:	8007d540 	call	8007d54 <memset>
 800adb8:	8005883a 	mov	r2,r16
 800adbc:	dfc00117 	ldw	ra,4(sp)
 800adc0:	dc000017 	ldw	r16,0(sp)
 800adc4:	dec00204 	addi	sp,sp,8
 800adc8:	f800283a 	ret
 800adcc:	80800204 	addi	r2,r16,8
 800add0:	003fe506 	br	800ad68 <__alt_data_end+0xfc00ad68>
 800add4:	80000415 	stw	zero,16(r16)
 800add8:	80800604 	addi	r2,r16,24
 800addc:	80000515 	stw	zero,20(r16)
 800ade0:	003fe106 	br	800ad68 <__alt_data_end+0xfc00ad68>
 800ade4:	0005883a 	mov	r2,zero
 800ade8:	003fe306 	br	800ad78 <__alt_data_end+0xfc00ad78>

0800adec <_fclose_r>:
 800adec:	28003226 	beq	r5,zero,800aeb8 <_fclose_r+0xcc>
 800adf0:	defffc04 	addi	sp,sp,-16
 800adf4:	dc400115 	stw	r17,4(sp)
 800adf8:	2023883a 	mov	r17,r4
 800adfc:	dc000015 	stw	r16,0(sp)
 800ae00:	dfc00315 	stw	ra,12(sp)
 800ae04:	dc800215 	stw	r18,8(sp)
 800ae08:	2821883a 	mov	r16,r5
 800ae0c:	80065300 	call	8006530 <__sfp_lock_acquire>
 800ae10:	88000226 	beq	r17,zero,800ae1c <_fclose_r+0x30>
 800ae14:	88800e17 	ldw	r2,56(r17)
 800ae18:	10002926 	beq	r2,zero,800aec0 <_fclose_r+0xd4>
 800ae1c:	8080030f 	ldh	r2,12(r16)
 800ae20:	10002226 	beq	r2,zero,800aeac <_fclose_r+0xc0>
 800ae24:	8809883a 	mov	r4,r17
 800ae28:	800b883a 	mov	r5,r16
 800ae2c:	8005f640 	call	8005f64 <_fflush_r>
 800ae30:	1025883a 	mov	r18,r2
 800ae34:	80800b17 	ldw	r2,44(r16)
 800ae38:	10000426 	beq	r2,zero,800ae4c <_fclose_r+0x60>
 800ae3c:	81400717 	ldw	r5,28(r16)
 800ae40:	8809883a 	mov	r4,r17
 800ae44:	103ee83a 	callr	r2
 800ae48:	10002616 	blt	r2,zero,800aee4 <_fclose_r+0xf8>
 800ae4c:	8080030b 	ldhu	r2,12(r16)
 800ae50:	1080200c 	andi	r2,r2,128
 800ae54:	10001f1e 	bne	r2,zero,800aed4 <_fclose_r+0xe8>
 800ae58:	81400c17 	ldw	r5,48(r16)
 800ae5c:	28000526 	beq	r5,zero,800ae74 <_fclose_r+0x88>
 800ae60:	80801004 	addi	r2,r16,64
 800ae64:	28800226 	beq	r5,r2,800ae70 <_fclose_r+0x84>
 800ae68:	8809883a 	mov	r4,r17
 800ae6c:	80066940 	call	8006694 <_free_r>
 800ae70:	80000c15 	stw	zero,48(r16)
 800ae74:	81401117 	ldw	r5,68(r16)
 800ae78:	28000326 	beq	r5,zero,800ae88 <_fclose_r+0x9c>
 800ae7c:	8809883a 	mov	r4,r17
 800ae80:	80066940 	call	8006694 <_free_r>
 800ae84:	80001115 	stw	zero,68(r16)
 800ae88:	8000030d 	sth	zero,12(r16)
 800ae8c:	80065340 	call	8006534 <__sfp_lock_release>
 800ae90:	9005883a 	mov	r2,r18
 800ae94:	dfc00317 	ldw	ra,12(sp)
 800ae98:	dc800217 	ldw	r18,8(sp)
 800ae9c:	dc400117 	ldw	r17,4(sp)
 800aea0:	dc000017 	ldw	r16,0(sp)
 800aea4:	dec00404 	addi	sp,sp,16
 800aea8:	f800283a 	ret
 800aeac:	80065340 	call	8006534 <__sfp_lock_release>
 800aeb0:	0005883a 	mov	r2,zero
 800aeb4:	003ff706 	br	800ae94 <__alt_data_end+0xfc00ae94>
 800aeb8:	0005883a 	mov	r2,zero
 800aebc:	f800283a 	ret
 800aec0:	8809883a 	mov	r4,r17
 800aec4:	80065200 	call	8006520 <__sinit>
 800aec8:	8080030f 	ldh	r2,12(r16)
 800aecc:	103fd51e 	bne	r2,zero,800ae24 <__alt_data_end+0xfc00ae24>
 800aed0:	003ff606 	br	800aeac <__alt_data_end+0xfc00aeac>
 800aed4:	81400417 	ldw	r5,16(r16)
 800aed8:	8809883a 	mov	r4,r17
 800aedc:	80066940 	call	8006694 <_free_r>
 800aee0:	003fdd06 	br	800ae58 <__alt_data_end+0xfc00ae58>
 800aee4:	04bfffc4 	movi	r18,-1
 800aee8:	003fd806 	br	800ae4c <__alt_data_end+0xfc00ae4c>

0800aeec <fclose>:
 800aeec:	00820074 	movhi	r2,2049
 800aef0:	108e3204 	addi	r2,r2,14536
 800aef4:	200b883a 	mov	r5,r4
 800aef8:	11000017 	ldw	r4,0(r2)
 800aefc:	800adec1 	jmpi	800adec <_fclose_r>

0800af00 <_fputwc_r>:
 800af00:	3080030b 	ldhu	r2,12(r6)
 800af04:	defff804 	addi	sp,sp,-32
 800af08:	dcc00415 	stw	r19,16(sp)
 800af0c:	dc800315 	stw	r18,12(sp)
 800af10:	dc000115 	stw	r16,4(sp)
 800af14:	dfc00715 	stw	ra,28(sp)
 800af18:	dd400615 	stw	r21,24(sp)
 800af1c:	dd000515 	stw	r20,20(sp)
 800af20:	dc400215 	stw	r17,8(sp)
 800af24:	10c8000c 	andi	r3,r2,8192
 800af28:	3021883a 	mov	r16,r6
 800af2c:	2027883a 	mov	r19,r4
 800af30:	2825883a 	mov	r18,r5
 800af34:	1800051e 	bne	r3,zero,800af4c <_fputwc_r+0x4c>
 800af38:	30c01917 	ldw	r3,100(r6)
 800af3c:	10880014 	ori	r2,r2,8192
 800af40:	3080030d 	sth	r2,12(r6)
 800af44:	18880014 	ori	r2,r3,8192
 800af48:	30801915 	stw	r2,100(r6)
 800af4c:	80070200 	call	8007020 <__locale_mb_cur_max>
 800af50:	00c00044 	movi	r3,1
 800af54:	10c03e26 	beq	r2,r3,800b050 <_fputwc_r+0x150>
 800af58:	9809883a 	mov	r4,r19
 800af5c:	d80b883a 	mov	r5,sp
 800af60:	900d883a 	mov	r6,r18
 800af64:	81c01704 	addi	r7,r16,92
 800af68:	800b3b00 	call	800b3b0 <_wcrtomb_r>
 800af6c:	1029883a 	mov	r20,r2
 800af70:	00bfffc4 	movi	r2,-1
 800af74:	a0802026 	beq	r20,r2,800aff8 <_fputwc_r+0xf8>
 800af78:	d9400003 	ldbu	r5,0(sp)
 800af7c:	a0001c26 	beq	r20,zero,800aff0 <_fputwc_r+0xf0>
 800af80:	0023883a 	mov	r17,zero
 800af84:	05400284 	movi	r21,10
 800af88:	00000906 	br	800afb0 <_fputwc_r+0xb0>
 800af8c:	80800017 	ldw	r2,0(r16)
 800af90:	11400005 	stb	r5,0(r2)
 800af94:	80c00017 	ldw	r3,0(r16)
 800af98:	18c00044 	addi	r3,r3,1
 800af9c:	80c00015 	stw	r3,0(r16)
 800afa0:	8c400044 	addi	r17,r17,1
 800afa4:	dc45883a 	add	r2,sp,r17
 800afa8:	8d00112e 	bgeu	r17,r20,800aff0 <_fputwc_r+0xf0>
 800afac:	11400003 	ldbu	r5,0(r2)
 800afb0:	80c00217 	ldw	r3,8(r16)
 800afb4:	18ffffc4 	addi	r3,r3,-1
 800afb8:	80c00215 	stw	r3,8(r16)
 800afbc:	183ff30e 	bge	r3,zero,800af8c <__alt_data_end+0xfc00af8c>
 800afc0:	80800617 	ldw	r2,24(r16)
 800afc4:	18801916 	blt	r3,r2,800b02c <_fputwc_r+0x12c>
 800afc8:	80800017 	ldw	r2,0(r16)
 800afcc:	11400005 	stb	r5,0(r2)
 800afd0:	80800017 	ldw	r2,0(r16)
 800afd4:	10c00003 	ldbu	r3,0(r2)
 800afd8:	10800044 	addi	r2,r2,1
 800afdc:	1d402326 	beq	r3,r21,800b06c <_fputwc_r+0x16c>
 800afe0:	80800015 	stw	r2,0(r16)
 800afe4:	8c400044 	addi	r17,r17,1
 800afe8:	dc45883a 	add	r2,sp,r17
 800afec:	8d3fef36 	bltu	r17,r20,800afac <__alt_data_end+0xfc00afac>
 800aff0:	9005883a 	mov	r2,r18
 800aff4:	00000406 	br	800b008 <_fputwc_r+0x108>
 800aff8:	80c0030b 	ldhu	r3,12(r16)
 800affc:	a005883a 	mov	r2,r20
 800b000:	18c01014 	ori	r3,r3,64
 800b004:	80c0030d 	sth	r3,12(r16)
 800b008:	dfc00717 	ldw	ra,28(sp)
 800b00c:	dd400617 	ldw	r21,24(sp)
 800b010:	dd000517 	ldw	r20,20(sp)
 800b014:	dcc00417 	ldw	r19,16(sp)
 800b018:	dc800317 	ldw	r18,12(sp)
 800b01c:	dc400217 	ldw	r17,8(sp)
 800b020:	dc000117 	ldw	r16,4(sp)
 800b024:	dec00804 	addi	sp,sp,32
 800b028:	f800283a 	ret
 800b02c:	9809883a 	mov	r4,r19
 800b030:	29403fcc 	andi	r5,r5,255
 800b034:	800d883a 	mov	r6,r16
 800b038:	800b2400 	call	800b240 <__swbuf_r>
 800b03c:	10bfffe0 	cmpeqi	r2,r2,-1
 800b040:	10803fcc 	andi	r2,r2,255
 800b044:	103fd626 	beq	r2,zero,800afa0 <__alt_data_end+0xfc00afa0>
 800b048:	00bfffc4 	movi	r2,-1
 800b04c:	003fee06 	br	800b008 <__alt_data_end+0xfc00b008>
 800b050:	90ffffc4 	addi	r3,r18,-1
 800b054:	01003f84 	movi	r4,254
 800b058:	20ffbf36 	bltu	r4,r3,800af58 <__alt_data_end+0xfc00af58>
 800b05c:	900b883a 	mov	r5,r18
 800b060:	dc800005 	stb	r18,0(sp)
 800b064:	1029883a 	mov	r20,r2
 800b068:	003fc506 	br	800af80 <__alt_data_end+0xfc00af80>
 800b06c:	9809883a 	mov	r4,r19
 800b070:	a80b883a 	mov	r5,r21
 800b074:	800d883a 	mov	r6,r16
 800b078:	800b2400 	call	800b240 <__swbuf_r>
 800b07c:	10bfffe0 	cmpeqi	r2,r2,-1
 800b080:	003fef06 	br	800b040 <__alt_data_end+0xfc00b040>

0800b084 <fputwc>:
 800b084:	defffc04 	addi	sp,sp,-16
 800b088:	dc000115 	stw	r16,4(sp)
 800b08c:	04020074 	movhi	r16,2049
 800b090:	840e3204 	addi	r16,r16,14536
 800b094:	dc400215 	stw	r17,8(sp)
 800b098:	2023883a 	mov	r17,r4
 800b09c:	81000017 	ldw	r4,0(r16)
 800b0a0:	dfc00315 	stw	ra,12(sp)
 800b0a4:	280d883a 	mov	r6,r5
 800b0a8:	20000626 	beq	r4,zero,800b0c4 <fputwc+0x40>
 800b0ac:	20800e17 	ldw	r2,56(r4)
 800b0b0:	1000041e 	bne	r2,zero,800b0c4 <fputwc+0x40>
 800b0b4:	d9400015 	stw	r5,0(sp)
 800b0b8:	80065200 	call	8006520 <__sinit>
 800b0bc:	81000017 	ldw	r4,0(r16)
 800b0c0:	d9800017 	ldw	r6,0(sp)
 800b0c4:	880b883a 	mov	r5,r17
 800b0c8:	dfc00317 	ldw	ra,12(sp)
 800b0cc:	dc400217 	ldw	r17,8(sp)
 800b0d0:	dc000117 	ldw	r16,4(sp)
 800b0d4:	dec00404 	addi	sp,sp,16
 800b0d8:	800af001 	jmpi	800af00 <_fputwc_r>

0800b0dc <_fstat_r>:
 800b0dc:	defffd04 	addi	sp,sp,-12
 800b0e0:	dc000015 	stw	r16,0(sp)
 800b0e4:	04020074 	movhi	r16,2049
 800b0e8:	dc400115 	stw	r17,4(sp)
 800b0ec:	84150304 	addi	r16,r16,21516
 800b0f0:	2023883a 	mov	r17,r4
 800b0f4:	2809883a 	mov	r4,r5
 800b0f8:	300b883a 	mov	r5,r6
 800b0fc:	dfc00215 	stw	ra,8(sp)
 800b100:	80000015 	stw	zero,0(r16)
 800b104:	800ed000 	call	800ed00 <fstat>
 800b108:	00ffffc4 	movi	r3,-1
 800b10c:	10c00526 	beq	r2,r3,800b124 <_fstat_r+0x48>
 800b110:	dfc00217 	ldw	ra,8(sp)
 800b114:	dc400117 	ldw	r17,4(sp)
 800b118:	dc000017 	ldw	r16,0(sp)
 800b11c:	dec00304 	addi	sp,sp,12
 800b120:	f800283a 	ret
 800b124:	80c00017 	ldw	r3,0(r16)
 800b128:	183ff926 	beq	r3,zero,800b110 <__alt_data_end+0xfc00b110>
 800b12c:	88c00015 	stw	r3,0(r17)
 800b130:	003ff706 	br	800b110 <__alt_data_end+0xfc00b110>

0800b134 <_isatty_r>:
 800b134:	defffd04 	addi	sp,sp,-12
 800b138:	dc000015 	stw	r16,0(sp)
 800b13c:	04020074 	movhi	r16,2049
 800b140:	dc400115 	stw	r17,4(sp)
 800b144:	84150304 	addi	r16,r16,21516
 800b148:	2023883a 	mov	r17,r4
 800b14c:	2809883a 	mov	r4,r5
 800b150:	dfc00215 	stw	ra,8(sp)
 800b154:	80000015 	stw	zero,0(r16)
 800b158:	800ee080 	call	800ee08 <isatty>
 800b15c:	00ffffc4 	movi	r3,-1
 800b160:	10c00526 	beq	r2,r3,800b178 <_isatty_r+0x44>
 800b164:	dfc00217 	ldw	ra,8(sp)
 800b168:	dc400117 	ldw	r17,4(sp)
 800b16c:	dc000017 	ldw	r16,0(sp)
 800b170:	dec00304 	addi	sp,sp,12
 800b174:	f800283a 	ret
 800b178:	80c00017 	ldw	r3,0(r16)
 800b17c:	183ff926 	beq	r3,zero,800b164 <__alt_data_end+0xfc00b164>
 800b180:	88c00015 	stw	r3,0(r17)
 800b184:	003ff706 	br	800b164 <__alt_data_end+0xfc00b164>

0800b188 <_lseek_r>:
 800b188:	defffd04 	addi	sp,sp,-12
 800b18c:	dc000015 	stw	r16,0(sp)
 800b190:	04020074 	movhi	r16,2049
 800b194:	dc400115 	stw	r17,4(sp)
 800b198:	84150304 	addi	r16,r16,21516
 800b19c:	2023883a 	mov	r17,r4
 800b1a0:	2809883a 	mov	r4,r5
 800b1a4:	300b883a 	mov	r5,r6
 800b1a8:	380d883a 	mov	r6,r7
 800b1ac:	dfc00215 	stw	ra,8(sp)
 800b1b0:	80000015 	stw	zero,0(r16)
 800b1b4:	800efe80 	call	800efe8 <lseek>
 800b1b8:	00ffffc4 	movi	r3,-1
 800b1bc:	10c00526 	beq	r2,r3,800b1d4 <_lseek_r+0x4c>
 800b1c0:	dfc00217 	ldw	ra,8(sp)
 800b1c4:	dc400117 	ldw	r17,4(sp)
 800b1c8:	dc000017 	ldw	r16,0(sp)
 800b1cc:	dec00304 	addi	sp,sp,12
 800b1d0:	f800283a 	ret
 800b1d4:	80c00017 	ldw	r3,0(r16)
 800b1d8:	183ff926 	beq	r3,zero,800b1c0 <__alt_data_end+0xfc00b1c0>
 800b1dc:	88c00015 	stw	r3,0(r17)
 800b1e0:	003ff706 	br	800b1c0 <__alt_data_end+0xfc00b1c0>

0800b1e4 <_read_r>:
 800b1e4:	defffd04 	addi	sp,sp,-12
 800b1e8:	dc000015 	stw	r16,0(sp)
 800b1ec:	04020074 	movhi	r16,2049
 800b1f0:	dc400115 	stw	r17,4(sp)
 800b1f4:	84150304 	addi	r16,r16,21516
 800b1f8:	2023883a 	mov	r17,r4
 800b1fc:	2809883a 	mov	r4,r5
 800b200:	300b883a 	mov	r5,r6
 800b204:	380d883a 	mov	r6,r7
 800b208:	dfc00215 	stw	ra,8(sp)
 800b20c:	80000015 	stw	zero,0(r16)
 800b210:	800f1cc0 	call	800f1cc <read>
 800b214:	00ffffc4 	movi	r3,-1
 800b218:	10c00526 	beq	r2,r3,800b230 <_read_r+0x4c>
 800b21c:	dfc00217 	ldw	ra,8(sp)
 800b220:	dc400117 	ldw	r17,4(sp)
 800b224:	dc000017 	ldw	r16,0(sp)
 800b228:	dec00304 	addi	sp,sp,12
 800b22c:	f800283a 	ret
 800b230:	80c00017 	ldw	r3,0(r16)
 800b234:	183ff926 	beq	r3,zero,800b21c <__alt_data_end+0xfc00b21c>
 800b238:	88c00015 	stw	r3,0(r17)
 800b23c:	003ff706 	br	800b21c <__alt_data_end+0xfc00b21c>

0800b240 <__swbuf_r>:
 800b240:	defffc04 	addi	sp,sp,-16
 800b244:	dc800215 	stw	r18,8(sp)
 800b248:	dc400115 	stw	r17,4(sp)
 800b24c:	dc000015 	stw	r16,0(sp)
 800b250:	dfc00315 	stw	ra,12(sp)
 800b254:	2025883a 	mov	r18,r4
 800b258:	2823883a 	mov	r17,r5
 800b25c:	3021883a 	mov	r16,r6
 800b260:	20000226 	beq	r4,zero,800b26c <__swbuf_r+0x2c>
 800b264:	20800e17 	ldw	r2,56(r4)
 800b268:	10004126 	beq	r2,zero,800b370 <__swbuf_r+0x130>
 800b26c:	80c00617 	ldw	r3,24(r16)
 800b270:	8180030b 	ldhu	r6,12(r16)
 800b274:	80c00215 	stw	r3,8(r16)
 800b278:	30c0020c 	andi	r3,r6,8
 800b27c:	18003526 	beq	r3,zero,800b354 <__swbuf_r+0x114>
 800b280:	80c00417 	ldw	r3,16(r16)
 800b284:	18003326 	beq	r3,zero,800b354 <__swbuf_r+0x114>
 800b288:	3088000c 	andi	r2,r6,8192
 800b28c:	8c403fcc 	andi	r17,r17,255
 800b290:	10001726 	beq	r2,zero,800b2f0 <__swbuf_r+0xb0>
 800b294:	80800017 	ldw	r2,0(r16)
 800b298:	81000517 	ldw	r4,20(r16)
 800b29c:	10c7c83a 	sub	r3,r2,r3
 800b2a0:	19001d0e 	bge	r3,r4,800b318 <__swbuf_r+0xd8>
 800b2a4:	18c00044 	addi	r3,r3,1
 800b2a8:	81400217 	ldw	r5,8(r16)
 800b2ac:	11000044 	addi	r4,r2,1
 800b2b0:	81000015 	stw	r4,0(r16)
 800b2b4:	297fffc4 	addi	r5,r5,-1
 800b2b8:	81400215 	stw	r5,8(r16)
 800b2bc:	14400005 	stb	r17,0(r2)
 800b2c0:	80800517 	ldw	r2,20(r16)
 800b2c4:	10c01d26 	beq	r2,r3,800b33c <__swbuf_r+0xfc>
 800b2c8:	8080030b 	ldhu	r2,12(r16)
 800b2cc:	1080004c 	andi	r2,r2,1
 800b2d0:	1000181e 	bne	r2,zero,800b334 <__swbuf_r+0xf4>
 800b2d4:	8805883a 	mov	r2,r17
 800b2d8:	dfc00317 	ldw	ra,12(sp)
 800b2dc:	dc800217 	ldw	r18,8(sp)
 800b2e0:	dc400117 	ldw	r17,4(sp)
 800b2e4:	dc000017 	ldw	r16,0(sp)
 800b2e8:	dec00404 	addi	sp,sp,16
 800b2ec:	f800283a 	ret
 800b2f0:	81001917 	ldw	r4,100(r16)
 800b2f4:	00b7ffc4 	movi	r2,-8193
 800b2f8:	31880014 	ori	r6,r6,8192
 800b2fc:	2084703a 	and	r2,r4,r2
 800b300:	80801915 	stw	r2,100(r16)
 800b304:	80800017 	ldw	r2,0(r16)
 800b308:	81000517 	ldw	r4,20(r16)
 800b30c:	8180030d 	sth	r6,12(r16)
 800b310:	10c7c83a 	sub	r3,r2,r3
 800b314:	193fe316 	blt	r3,r4,800b2a4 <__alt_data_end+0xfc00b2a4>
 800b318:	9009883a 	mov	r4,r18
 800b31c:	800b883a 	mov	r5,r16
 800b320:	8005f640 	call	8005f64 <_fflush_r>
 800b324:	1000091e 	bne	r2,zero,800b34c <__swbuf_r+0x10c>
 800b328:	80800017 	ldw	r2,0(r16)
 800b32c:	00c00044 	movi	r3,1
 800b330:	003fdd06 	br	800b2a8 <__alt_data_end+0xfc00b2a8>
 800b334:	00800284 	movi	r2,10
 800b338:	88bfe61e 	bne	r17,r2,800b2d4 <__alt_data_end+0xfc00b2d4>
 800b33c:	9009883a 	mov	r4,r18
 800b340:	800b883a 	mov	r5,r16
 800b344:	8005f640 	call	8005f64 <_fflush_r>
 800b348:	103fe226 	beq	r2,zero,800b2d4 <__alt_data_end+0xfc00b2d4>
 800b34c:	00bfffc4 	movi	r2,-1
 800b350:	003fe106 	br	800b2d8 <__alt_data_end+0xfc00b2d8>
 800b354:	9009883a 	mov	r4,r18
 800b358:	800b883a 	mov	r5,r16
 800b35c:	80044e40 	call	80044e4 <__swsetup_r>
 800b360:	1000051e 	bne	r2,zero,800b378 <__swbuf_r+0x138>
 800b364:	8180030b 	ldhu	r6,12(r16)
 800b368:	80c00417 	ldw	r3,16(r16)
 800b36c:	003fc606 	br	800b288 <__alt_data_end+0xfc00b288>
 800b370:	80065200 	call	8006520 <__sinit>
 800b374:	003fbd06 	br	800b26c <__alt_data_end+0xfc00b26c>
 800b378:	80c0030b 	ldhu	r3,12(r16)
 800b37c:	00bfffc4 	movi	r2,-1
 800b380:	18c01014 	ori	r3,r3,64
 800b384:	80c0030d 	sth	r3,12(r16)
 800b388:	00c00244 	movi	r3,9
 800b38c:	90c00015 	stw	r3,0(r18)
 800b390:	003fd106 	br	800b2d8 <__alt_data_end+0xfc00b2d8>

0800b394 <__swbuf>:
 800b394:	00c20074 	movhi	r3,2049
 800b398:	18ce3204 	addi	r3,r3,14536
 800b39c:	2005883a 	mov	r2,r4
 800b3a0:	19000017 	ldw	r4,0(r3)
 800b3a4:	280d883a 	mov	r6,r5
 800b3a8:	100b883a 	mov	r5,r2
 800b3ac:	800b2401 	jmpi	800b240 <__swbuf_r>

0800b3b0 <_wcrtomb_r>:
 800b3b0:	defff604 	addi	sp,sp,-40
 800b3b4:	00820074 	movhi	r2,2049
 800b3b8:	dc800815 	stw	r18,32(sp)
 800b3bc:	dc400715 	stw	r17,28(sp)
 800b3c0:	dc000615 	stw	r16,24(sp)
 800b3c4:	108e3604 	addi	r2,r2,14552
 800b3c8:	dfc00915 	stw	ra,36(sp)
 800b3cc:	2021883a 	mov	r16,r4
 800b3d0:	3823883a 	mov	r17,r7
 800b3d4:	14800017 	ldw	r18,0(r2)
 800b3d8:	28001426 	beq	r5,zero,800b42c <_wcrtomb_r+0x7c>
 800b3dc:	d9400415 	stw	r5,16(sp)
 800b3e0:	d9800515 	stw	r6,20(sp)
 800b3e4:	80070140 	call	8007014 <__locale_charset>
 800b3e8:	d9400417 	ldw	r5,16(sp)
 800b3ec:	d9800517 	ldw	r6,20(sp)
 800b3f0:	8009883a 	mov	r4,r16
 800b3f4:	dc400015 	stw	r17,0(sp)
 800b3f8:	100f883a 	mov	r7,r2
 800b3fc:	903ee83a 	callr	r18
 800b400:	00ffffc4 	movi	r3,-1
 800b404:	10c0031e 	bne	r2,r3,800b414 <_wcrtomb_r+0x64>
 800b408:	88000015 	stw	zero,0(r17)
 800b40c:	00c02284 	movi	r3,138
 800b410:	80c00015 	stw	r3,0(r16)
 800b414:	dfc00917 	ldw	ra,36(sp)
 800b418:	dc800817 	ldw	r18,32(sp)
 800b41c:	dc400717 	ldw	r17,28(sp)
 800b420:	dc000617 	ldw	r16,24(sp)
 800b424:	dec00a04 	addi	sp,sp,40
 800b428:	f800283a 	ret
 800b42c:	80070140 	call	8007014 <__locale_charset>
 800b430:	8009883a 	mov	r4,r16
 800b434:	dc400015 	stw	r17,0(sp)
 800b438:	d9400104 	addi	r5,sp,4
 800b43c:	000d883a 	mov	r6,zero
 800b440:	100f883a 	mov	r7,r2
 800b444:	903ee83a 	callr	r18
 800b448:	003fed06 	br	800b400 <__alt_data_end+0xfc00b400>

0800b44c <wcrtomb>:
 800b44c:	defff504 	addi	sp,sp,-44
 800b450:	dc400515 	stw	r17,20(sp)
 800b454:	dc000415 	stw	r16,16(sp)
 800b458:	dfc00a15 	stw	ra,40(sp)
 800b45c:	dd400915 	stw	r21,36(sp)
 800b460:	dd000815 	stw	r20,32(sp)
 800b464:	dcc00715 	stw	r19,28(sp)
 800b468:	dc800615 	stw	r18,24(sp)
 800b46c:	2021883a 	mov	r16,r4
 800b470:	3023883a 	mov	r17,r6
 800b474:	20001d26 	beq	r4,zero,800b4ec <wcrtomb+0xa0>
 800b478:	04820074 	movhi	r18,2049
 800b47c:	948e3204 	addi	r18,r18,14536
 800b480:	00820074 	movhi	r2,2049
 800b484:	95400017 	ldw	r21,0(r18)
 800b488:	108e3604 	addi	r2,r2,14552
 800b48c:	15000017 	ldw	r20,0(r2)
 800b490:	2827883a 	mov	r19,r5
 800b494:	80070140 	call	8007014 <__locale_charset>
 800b498:	a809883a 	mov	r4,r21
 800b49c:	dc400015 	stw	r17,0(sp)
 800b4a0:	800b883a 	mov	r5,r16
 800b4a4:	980d883a 	mov	r6,r19
 800b4a8:	100f883a 	mov	r7,r2
 800b4ac:	a03ee83a 	callr	r20
 800b4b0:	00ffffc4 	movi	r3,-1
 800b4b4:	10c0041e 	bne	r2,r3,800b4c8 <wcrtomb+0x7c>
 800b4b8:	90c00017 	ldw	r3,0(r18)
 800b4bc:	01002284 	movi	r4,138
 800b4c0:	88000015 	stw	zero,0(r17)
 800b4c4:	19000015 	stw	r4,0(r3)
 800b4c8:	dfc00a17 	ldw	ra,40(sp)
 800b4cc:	dd400917 	ldw	r21,36(sp)
 800b4d0:	dd000817 	ldw	r20,32(sp)
 800b4d4:	dcc00717 	ldw	r19,28(sp)
 800b4d8:	dc800617 	ldw	r18,24(sp)
 800b4dc:	dc400517 	ldw	r17,20(sp)
 800b4e0:	dc000417 	ldw	r16,16(sp)
 800b4e4:	dec00b04 	addi	sp,sp,44
 800b4e8:	f800283a 	ret
 800b4ec:	04820074 	movhi	r18,2049
 800b4f0:	948e3204 	addi	r18,r18,14536
 800b4f4:	00820074 	movhi	r2,2049
 800b4f8:	94c00017 	ldw	r19,0(r18)
 800b4fc:	108e3604 	addi	r2,r2,14552
 800b500:	14000017 	ldw	r16,0(r2)
 800b504:	80070140 	call	8007014 <__locale_charset>
 800b508:	9809883a 	mov	r4,r19
 800b50c:	dc400015 	stw	r17,0(sp)
 800b510:	d9400104 	addi	r5,sp,4
 800b514:	000d883a 	mov	r6,zero
 800b518:	100f883a 	mov	r7,r2
 800b51c:	803ee83a 	callr	r16
 800b520:	003fe306 	br	800b4b0 <__alt_data_end+0xfc00b4b0>

0800b524 <__ascii_wctomb>:
 800b524:	28000526 	beq	r5,zero,800b53c <__ascii_wctomb+0x18>
 800b528:	00803fc4 	movi	r2,255
 800b52c:	11800536 	bltu	r2,r6,800b544 <__ascii_wctomb+0x20>
 800b530:	29800005 	stb	r6,0(r5)
 800b534:	00800044 	movi	r2,1
 800b538:	f800283a 	ret
 800b53c:	0005883a 	mov	r2,zero
 800b540:	f800283a 	ret
 800b544:	00802284 	movi	r2,138
 800b548:	20800015 	stw	r2,0(r4)
 800b54c:	00bfffc4 	movi	r2,-1
 800b550:	f800283a 	ret

0800b554 <_wctomb_r>:
 800b554:	00820074 	movhi	r2,2049
 800b558:	defff904 	addi	sp,sp,-28
 800b55c:	108e3604 	addi	r2,r2,14552
 800b560:	dfc00615 	stw	ra,24(sp)
 800b564:	dc400515 	stw	r17,20(sp)
 800b568:	dc000415 	stw	r16,16(sp)
 800b56c:	3823883a 	mov	r17,r7
 800b570:	14000017 	ldw	r16,0(r2)
 800b574:	d9000115 	stw	r4,4(sp)
 800b578:	d9400215 	stw	r5,8(sp)
 800b57c:	d9800315 	stw	r6,12(sp)
 800b580:	80070140 	call	8007014 <__locale_charset>
 800b584:	d9000117 	ldw	r4,4(sp)
 800b588:	d9400217 	ldw	r5,8(sp)
 800b58c:	d9800317 	ldw	r6,12(sp)
 800b590:	dc400015 	stw	r17,0(sp)
 800b594:	100f883a 	mov	r7,r2
 800b598:	803ee83a 	callr	r16
 800b59c:	dfc00617 	ldw	ra,24(sp)
 800b5a0:	dc400517 	ldw	r17,20(sp)
 800b5a4:	dc000417 	ldw	r16,16(sp)
 800b5a8:	dec00704 	addi	sp,sp,28
 800b5ac:	f800283a 	ret

0800b5b0 <__udivdi3>:
 800b5b0:	defff504 	addi	sp,sp,-44
 800b5b4:	dcc00415 	stw	r19,16(sp)
 800b5b8:	dc000115 	stw	r16,4(sp)
 800b5bc:	dfc00a15 	stw	ra,40(sp)
 800b5c0:	df000915 	stw	fp,36(sp)
 800b5c4:	ddc00815 	stw	r23,32(sp)
 800b5c8:	dd800715 	stw	r22,28(sp)
 800b5cc:	dd400615 	stw	r21,24(sp)
 800b5d0:	dd000515 	stw	r20,20(sp)
 800b5d4:	dc800315 	stw	r18,12(sp)
 800b5d8:	dc400215 	stw	r17,8(sp)
 800b5dc:	2027883a 	mov	r19,r4
 800b5e0:	2821883a 	mov	r16,r5
 800b5e4:	3800471e 	bne	r7,zero,800b704 <__udivdi3+0x154>
 800b5e8:	3025883a 	mov	r18,r6
 800b5ec:	2023883a 	mov	r17,r4
 800b5f0:	2980592e 	bgeu	r5,r6,800b758 <__udivdi3+0x1a8>
 800b5f4:	00bfffd4 	movui	r2,65535
 800b5f8:	2829883a 	mov	r20,r5
 800b5fc:	1180b236 	bltu	r2,r6,800b8c8 <__udivdi3+0x318>
 800b600:	00803fc4 	movi	r2,255
 800b604:	1181622e 	bgeu	r2,r6,800bb90 <__udivdi3+0x5e0>
 800b608:	00800204 	movi	r2,8
 800b60c:	1007883a 	mov	r3,r2
 800b610:	3084d83a 	srl	r2,r6,r2
 800b614:	01020074 	movhi	r4,2049
 800b618:	21073904 	addi	r4,r4,7396
 800b61c:	2085883a 	add	r2,r4,r2
 800b620:	11000003 	ldbu	r4,0(r2)
 800b624:	20c9883a 	add	r4,r4,r3
 800b628:	00c00804 	movi	r3,32
 800b62c:	1907c83a 	sub	r3,r3,r4
 800b630:	18000526 	beq	r3,zero,800b648 <__udivdi3+0x98>
 800b634:	80e0983a 	sll	r16,r16,r3
 800b638:	9908d83a 	srl	r4,r19,r4
 800b63c:	30e4983a 	sll	r18,r6,r3
 800b640:	98e2983a 	sll	r17,r19,r3
 800b644:	8128b03a 	or	r20,r16,r4
 800b648:	902ad43a 	srli	r21,r18,16
 800b64c:	a009883a 	mov	r4,r20
 800b650:	95bfffcc 	andi	r22,r18,65535
 800b654:	a80b883a 	mov	r5,r21
 800b658:	800c3300 	call	800c330 <__umodsi3>
 800b65c:	a009883a 	mov	r4,r20
 800b660:	a80b883a 	mov	r5,r21
 800b664:	102f883a 	mov	r23,r2
 800b668:	800c3280 	call	800c328 <__udivsi3>
 800b66c:	1009883a 	mov	r4,r2
 800b670:	b00b883a 	mov	r5,r22
 800b674:	1021883a 	mov	r16,r2
 800b678:	800c3380 	call	800c338 <__mulsi3>
 800b67c:	b82e943a 	slli	r23,r23,16
 800b680:	8808d43a 	srli	r4,r17,16
 800b684:	b906b03a 	or	r3,r23,r4
 800b688:	1880052e 	bgeu	r3,r2,800b6a0 <__udivdi3+0xf0>
 800b68c:	1c87883a 	add	r3,r3,r18
 800b690:	813fffc4 	addi	r4,r16,-1
 800b694:	1c800136 	bltu	r3,r18,800b69c <__udivdi3+0xec>
 800b698:	18815236 	bltu	r3,r2,800bbe4 <__udivdi3+0x634>
 800b69c:	2021883a 	mov	r16,r4
 800b6a0:	18a7c83a 	sub	r19,r3,r2
 800b6a4:	9809883a 	mov	r4,r19
 800b6a8:	a80b883a 	mov	r5,r21
 800b6ac:	800c3300 	call	800c330 <__umodsi3>
 800b6b0:	1029883a 	mov	r20,r2
 800b6b4:	9809883a 	mov	r4,r19
 800b6b8:	a80b883a 	mov	r5,r21
 800b6bc:	a028943a 	slli	r20,r20,16
 800b6c0:	800c3280 	call	800c328 <__udivsi3>
 800b6c4:	1009883a 	mov	r4,r2
 800b6c8:	b00b883a 	mov	r5,r22
 800b6cc:	8c7fffcc 	andi	r17,r17,65535
 800b6d0:	1027883a 	mov	r19,r2
 800b6d4:	a462b03a 	or	r17,r20,r17
 800b6d8:	800c3380 	call	800c338 <__mulsi3>
 800b6dc:	8880052e 	bgeu	r17,r2,800b6f4 <__udivdi3+0x144>
 800b6e0:	8ca3883a 	add	r17,r17,r18
 800b6e4:	98ffffc4 	addi	r3,r19,-1
 800b6e8:	8c811036 	bltu	r17,r18,800bb2c <__udivdi3+0x57c>
 800b6ec:	88810f2e 	bgeu	r17,r2,800bb2c <__udivdi3+0x57c>
 800b6f0:	9cffff84 	addi	r19,r19,-2
 800b6f4:	8020943a 	slli	r16,r16,16
 800b6f8:	0007883a 	mov	r3,zero
 800b6fc:	9c04b03a 	or	r2,r19,r16
 800b700:	00006006 	br	800b884 <__udivdi3+0x2d4>
 800b704:	29c05d36 	bltu	r5,r7,800b87c <__udivdi3+0x2cc>
 800b708:	00bfffd4 	movui	r2,65535
 800b70c:	11c0692e 	bgeu	r2,r7,800b8b4 <__udivdi3+0x304>
 800b710:	00804034 	movhi	r2,256
 800b714:	10bfffc4 	addi	r2,r2,-1
 800b718:	11c10e2e 	bgeu	r2,r7,800bb54 <__udivdi3+0x5a4>
 800b71c:	01400604 	movi	r5,24
 800b720:	2811883a 	mov	r8,r5
 800b724:	394ad83a 	srl	r5,r7,r5
 800b728:	00820074 	movhi	r2,2049
 800b72c:	10873904 	addi	r2,r2,7396
 800b730:	114b883a 	add	r5,r2,r5
 800b734:	29400003 	ldbu	r5,0(r5)
 800b738:	00c00804 	movi	r3,32
 800b73c:	2a0b883a 	add	r5,r5,r8
 800b740:	196fc83a 	sub	r23,r3,r5
 800b744:	b8006b1e 	bne	r23,zero,800b8f4 <__udivdi3+0x344>
 800b748:	3c011436 	bltu	r7,r16,800bb9c <__udivdi3+0x5ec>
 800b74c:	9985403a 	cmpgeu	r2,r19,r6
 800b750:	0007883a 	mov	r3,zero
 800b754:	00004b06 	br	800b884 <__udivdi3+0x2d4>
 800b758:	3000041e 	bne	r6,zero,800b76c <__udivdi3+0x1bc>
 800b75c:	01000044 	movi	r4,1
 800b760:	000b883a 	mov	r5,zero
 800b764:	800c3280 	call	800c328 <__udivsi3>
 800b768:	1025883a 	mov	r18,r2
 800b76c:	00bfffd4 	movui	r2,65535
 800b770:	14805b2e 	bgeu	r2,r18,800b8e0 <__udivdi3+0x330>
 800b774:	00804034 	movhi	r2,256
 800b778:	10bfffc4 	addi	r2,r2,-1
 800b77c:	1480fe2e 	bgeu	r2,r18,800bb78 <__udivdi3+0x5c8>
 800b780:	00800604 	movi	r2,24
 800b784:	1007883a 	mov	r3,r2
 800b788:	9084d83a 	srl	r2,r18,r2
 800b78c:	01020074 	movhi	r4,2049
 800b790:	21073904 	addi	r4,r4,7396
 800b794:	2085883a 	add	r2,r4,r2
 800b798:	11800003 	ldbu	r6,0(r2)
 800b79c:	01c00804 	movi	r7,32
 800b7a0:	30c7883a 	add	r3,r6,r3
 800b7a4:	38cfc83a 	sub	r7,r7,r3
 800b7a8:	3800a71e 	bne	r7,zero,800ba48 <__udivdi3+0x498>
 800b7ac:	9028d43a 	srli	r20,r18,16
 800b7b0:	84a1c83a 	sub	r16,r16,r18
 800b7b4:	957fffcc 	andi	r21,r18,65535
 800b7b8:	00c00044 	movi	r3,1
 800b7bc:	8009883a 	mov	r4,r16
 800b7c0:	a00b883a 	mov	r5,r20
 800b7c4:	d8c00015 	stw	r3,0(sp)
 800b7c8:	800c3300 	call	800c330 <__umodsi3>
 800b7cc:	8009883a 	mov	r4,r16
 800b7d0:	a00b883a 	mov	r5,r20
 800b7d4:	102d883a 	mov	r22,r2
 800b7d8:	800c3280 	call	800c328 <__udivsi3>
 800b7dc:	1009883a 	mov	r4,r2
 800b7e0:	a80b883a 	mov	r5,r21
 800b7e4:	1021883a 	mov	r16,r2
 800b7e8:	800c3380 	call	800c338 <__mulsi3>
 800b7ec:	b02c943a 	slli	r22,r22,16
 800b7f0:	880ed43a 	srli	r7,r17,16
 800b7f4:	d8c00017 	ldw	r3,0(sp)
 800b7f8:	b1ccb03a 	or	r6,r22,r7
 800b7fc:	3080052e 	bgeu	r6,r2,800b814 <__udivdi3+0x264>
 800b800:	348d883a 	add	r6,r6,r18
 800b804:	813fffc4 	addi	r4,r16,-1
 800b808:	34800136 	bltu	r6,r18,800b810 <__udivdi3+0x260>
 800b80c:	3080f236 	bltu	r6,r2,800bbd8 <__udivdi3+0x628>
 800b810:	2021883a 	mov	r16,r4
 800b814:	30a7c83a 	sub	r19,r6,r2
 800b818:	9809883a 	mov	r4,r19
 800b81c:	a00b883a 	mov	r5,r20
 800b820:	d8c00015 	stw	r3,0(sp)
 800b824:	800c3300 	call	800c330 <__umodsi3>
 800b828:	102d883a 	mov	r22,r2
 800b82c:	9809883a 	mov	r4,r19
 800b830:	a00b883a 	mov	r5,r20
 800b834:	b02c943a 	slli	r22,r22,16
 800b838:	800c3280 	call	800c328 <__udivsi3>
 800b83c:	1009883a 	mov	r4,r2
 800b840:	a80b883a 	mov	r5,r21
 800b844:	8c7fffcc 	andi	r17,r17,65535
 800b848:	1027883a 	mov	r19,r2
 800b84c:	b462b03a 	or	r17,r22,r17
 800b850:	800c3380 	call	800c338 <__mulsi3>
 800b854:	d8c00017 	ldw	r3,0(sp)
 800b858:	8880052e 	bgeu	r17,r2,800b870 <__udivdi3+0x2c0>
 800b85c:	8ca3883a 	add	r17,r17,r18
 800b860:	993fffc4 	addi	r4,r19,-1
 800b864:	8c80af36 	bltu	r17,r18,800bb24 <__udivdi3+0x574>
 800b868:	8880ae2e 	bgeu	r17,r2,800bb24 <__udivdi3+0x574>
 800b86c:	9cffff84 	addi	r19,r19,-2
 800b870:	8020943a 	slli	r16,r16,16
 800b874:	9c04b03a 	or	r2,r19,r16
 800b878:	00000206 	br	800b884 <__udivdi3+0x2d4>
 800b87c:	0007883a 	mov	r3,zero
 800b880:	0005883a 	mov	r2,zero
 800b884:	dfc00a17 	ldw	ra,40(sp)
 800b888:	df000917 	ldw	fp,36(sp)
 800b88c:	ddc00817 	ldw	r23,32(sp)
 800b890:	dd800717 	ldw	r22,28(sp)
 800b894:	dd400617 	ldw	r21,24(sp)
 800b898:	dd000517 	ldw	r20,20(sp)
 800b89c:	dcc00417 	ldw	r19,16(sp)
 800b8a0:	dc800317 	ldw	r18,12(sp)
 800b8a4:	dc400217 	ldw	r17,8(sp)
 800b8a8:	dc000117 	ldw	r16,4(sp)
 800b8ac:	dec00b04 	addi	sp,sp,44
 800b8b0:	f800283a 	ret
 800b8b4:	00803fc4 	movi	r2,255
 800b8b8:	11c0a92e 	bgeu	r2,r7,800bb60 <__udivdi3+0x5b0>
 800b8bc:	01400204 	movi	r5,8
 800b8c0:	2811883a 	mov	r8,r5
 800b8c4:	003f9706 	br	800b724 <__alt_data_end+0xfc00b724>
 800b8c8:	00804034 	movhi	r2,256
 800b8cc:	10bfffc4 	addi	r2,r2,-1
 800b8d0:	1180a62e 	bgeu	r2,r6,800bb6c <__udivdi3+0x5bc>
 800b8d4:	00800604 	movi	r2,24
 800b8d8:	1007883a 	mov	r3,r2
 800b8dc:	003f4c06 	br	800b610 <__alt_data_end+0xfc00b610>
 800b8e0:	00803fc4 	movi	r2,255
 800b8e4:	1480a72e 	bgeu	r2,r18,800bb84 <__udivdi3+0x5d4>
 800b8e8:	00800204 	movi	r2,8
 800b8ec:	1007883a 	mov	r3,r2
 800b8f0:	003fa506 	br	800b788 <__alt_data_end+0xfc00b788>
 800b8f4:	3178d83a 	srl	fp,r6,r5
 800b8f8:	3dce983a 	sll	r7,r7,r23
 800b8fc:	8168d83a 	srl	r20,r16,r5
 800b900:	9950d83a 	srl	r8,r19,r5
 800b904:	3f38b03a 	or	fp,r7,fp
 800b908:	e024d43a 	srli	r18,fp,16
 800b90c:	85e0983a 	sll	r16,r16,r23
 800b910:	a009883a 	mov	r4,r20
 800b914:	900b883a 	mov	r5,r18
 800b918:	8220b03a 	or	r16,r16,r8
 800b91c:	35ea983a 	sll	r21,r6,r23
 800b920:	800c3300 	call	800c330 <__umodsi3>
 800b924:	a009883a 	mov	r4,r20
 800b928:	900b883a 	mov	r5,r18
 800b92c:	1023883a 	mov	r17,r2
 800b930:	e5bfffcc 	andi	r22,fp,65535
 800b934:	800c3280 	call	800c328 <__udivsi3>
 800b938:	1009883a 	mov	r4,r2
 800b93c:	b00b883a 	mov	r5,r22
 800b940:	1029883a 	mov	r20,r2
 800b944:	800c3380 	call	800c338 <__mulsi3>
 800b948:	8806943a 	slli	r3,r17,16
 800b94c:	8014d43a 	srli	r10,r16,16
 800b950:	1a92b03a 	or	r9,r3,r10
 800b954:	4880042e 	bgeu	r9,r2,800b968 <__udivdi3+0x3b8>
 800b958:	4f13883a 	add	r9,r9,fp
 800b95c:	a0ffffc4 	addi	r3,r20,-1
 800b960:	4f00952e 	bgeu	r9,fp,800bbb8 <__udivdi3+0x608>
 800b964:	1829883a 	mov	r20,r3
 800b968:	48a3c83a 	sub	r17,r9,r2
 800b96c:	8809883a 	mov	r4,r17
 800b970:	900b883a 	mov	r5,r18
 800b974:	800c3300 	call	800c330 <__umodsi3>
 800b978:	8809883a 	mov	r4,r17
 800b97c:	900b883a 	mov	r5,r18
 800b980:	d8800015 	stw	r2,0(sp)
 800b984:	800c3280 	call	800c328 <__udivsi3>
 800b988:	1009883a 	mov	r4,r2
 800b98c:	b00b883a 	mov	r5,r22
 800b990:	1023883a 	mov	r17,r2
 800b994:	800c3380 	call	800c338 <__mulsi3>
 800b998:	d8c00017 	ldw	r3,0(sp)
 800b99c:	823fffcc 	andi	r8,r16,65535
 800b9a0:	1806943a 	slli	r3,r3,16
 800b9a4:	1a20b03a 	or	r16,r3,r8
 800b9a8:	8080042e 	bgeu	r16,r2,800b9bc <__udivdi3+0x40c>
 800b9ac:	8721883a 	add	r16,r16,fp
 800b9b0:	88ffffc4 	addi	r3,r17,-1
 800b9b4:	87007c2e 	bgeu	r16,fp,800bba8 <__udivdi3+0x5f8>
 800b9b8:	1823883a 	mov	r17,r3
 800b9bc:	a028943a 	slli	r20,r20,16
 800b9c0:	acbfffcc 	andi	r18,r21,65535
 800b9c4:	900b883a 	mov	r5,r18
 800b9c8:	8d28b03a 	or	r20,r17,r20
 800b9cc:	a022d43a 	srli	r17,r20,16
 800b9d0:	a5bfffcc 	andi	r22,r20,65535
 800b9d4:	b009883a 	mov	r4,r22
 800b9d8:	a82ad43a 	srli	r21,r21,16
 800b9dc:	80a1c83a 	sub	r16,r16,r2
 800b9e0:	800c3380 	call	800c338 <__mulsi3>
 800b9e4:	8809883a 	mov	r4,r17
 800b9e8:	900b883a 	mov	r5,r18
 800b9ec:	1039883a 	mov	fp,r2
 800b9f0:	800c3380 	call	800c338 <__mulsi3>
 800b9f4:	8809883a 	mov	r4,r17
 800b9f8:	a80b883a 	mov	r5,r21
 800b9fc:	1025883a 	mov	r18,r2
 800ba00:	800c3380 	call	800c338 <__mulsi3>
 800ba04:	b009883a 	mov	r4,r22
 800ba08:	a80b883a 	mov	r5,r21
 800ba0c:	1023883a 	mov	r17,r2
 800ba10:	800c3380 	call	800c338 <__mulsi3>
 800ba14:	e006d43a 	srli	r3,fp,16
 800ba18:	9085883a 	add	r2,r18,r2
 800ba1c:	10c7883a 	add	r3,r2,r3
 800ba20:	1c80022e 	bgeu	r3,r18,800ba2c <__udivdi3+0x47c>
 800ba24:	00800074 	movhi	r2,1
 800ba28:	88a3883a 	add	r17,r17,r2
 800ba2c:	1808d43a 	srli	r4,r3,16
 800ba30:	8909883a 	add	r4,r17,r4
 800ba34:	81004436 	bltu	r16,r4,800bb48 <__udivdi3+0x598>
 800ba38:	81003e26 	beq	r16,r4,800bb34 <__udivdi3+0x584>
 800ba3c:	a005883a 	mov	r2,r20
 800ba40:	0007883a 	mov	r3,zero
 800ba44:	003f8f06 	br	800b884 <__alt_data_end+0xfc00b884>
 800ba48:	91e4983a 	sll	r18,r18,r7
 800ba4c:	80eed83a 	srl	r23,r16,r3
 800ba50:	81cc983a 	sll	r6,r16,r7
 800ba54:	9028d43a 	srli	r20,r18,16
 800ba58:	98c6d83a 	srl	r3,r19,r3
 800ba5c:	b809883a 	mov	r4,r23
 800ba60:	a00b883a 	mov	r5,r20
 800ba64:	30ecb03a 	or	r22,r6,r3
 800ba68:	99e2983a 	sll	r17,r19,r7
 800ba6c:	800c3300 	call	800c330 <__umodsi3>
 800ba70:	b809883a 	mov	r4,r23
 800ba74:	a00b883a 	mov	r5,r20
 800ba78:	1021883a 	mov	r16,r2
 800ba7c:	957fffcc 	andi	r21,r18,65535
 800ba80:	800c3280 	call	800c328 <__udivsi3>
 800ba84:	a80b883a 	mov	r5,r21
 800ba88:	1009883a 	mov	r4,r2
 800ba8c:	102f883a 	mov	r23,r2
 800ba90:	800c3380 	call	800c338 <__mulsi3>
 800ba94:	8020943a 	slli	r16,r16,16
 800ba98:	b00ad43a 	srli	r5,r22,16
 800ba9c:	814cb03a 	or	r6,r16,r5
 800baa0:	3080062e 	bgeu	r6,r2,800babc <__udivdi3+0x50c>
 800baa4:	348d883a 	add	r6,r6,r18
 800baa8:	b8ffffc4 	addi	r3,r23,-1
 800baac:	34804836 	bltu	r6,r18,800bbd0 <__udivdi3+0x620>
 800bab0:	3080472e 	bgeu	r6,r2,800bbd0 <__udivdi3+0x620>
 800bab4:	bdffff84 	addi	r23,r23,-2
 800bab8:	348d883a 	add	r6,r6,r18
 800babc:	30a7c83a 	sub	r19,r6,r2
 800bac0:	9809883a 	mov	r4,r19
 800bac4:	a00b883a 	mov	r5,r20
 800bac8:	800c3300 	call	800c330 <__umodsi3>
 800bacc:	9809883a 	mov	r4,r19
 800bad0:	a00b883a 	mov	r5,r20
 800bad4:	1039883a 	mov	fp,r2
 800bad8:	800c3280 	call	800c328 <__udivsi3>
 800badc:	1009883a 	mov	r4,r2
 800bae0:	a80b883a 	mov	r5,r21
 800bae4:	e038943a 	slli	fp,fp,16
 800bae8:	1027883a 	mov	r19,r2
 800baec:	800c3380 	call	800c338 <__mulsi3>
 800baf0:	b1bfffcc 	andi	r6,r22,65535
 800baf4:	e18cb03a 	or	r6,fp,r6
 800baf8:	3080062e 	bgeu	r6,r2,800bb14 <__udivdi3+0x564>
 800bafc:	348d883a 	add	r6,r6,r18
 800bb00:	98ffffc4 	addi	r3,r19,-1
 800bb04:	34803036 	bltu	r6,r18,800bbc8 <__udivdi3+0x618>
 800bb08:	30802f2e 	bgeu	r6,r2,800bbc8 <__udivdi3+0x618>
 800bb0c:	9cffff84 	addi	r19,r19,-2
 800bb10:	348d883a 	add	r6,r6,r18
 800bb14:	b82e943a 	slli	r23,r23,16
 800bb18:	30a1c83a 	sub	r16,r6,r2
 800bb1c:	9dc6b03a 	or	r3,r19,r23
 800bb20:	003f2606 	br	800b7bc <__alt_data_end+0xfc00b7bc>
 800bb24:	2027883a 	mov	r19,r4
 800bb28:	003f5106 	br	800b870 <__alt_data_end+0xfc00b870>
 800bb2c:	1827883a 	mov	r19,r3
 800bb30:	003ef006 	br	800b6f4 <__alt_data_end+0xfc00b6f4>
 800bb34:	1808943a 	slli	r4,r3,16
 800bb38:	9dc6983a 	sll	r3,r19,r23
 800bb3c:	e73fffcc 	andi	fp,fp,65535
 800bb40:	2709883a 	add	r4,r4,fp
 800bb44:	193fbd2e 	bgeu	r3,r4,800ba3c <__alt_data_end+0xfc00ba3c>
 800bb48:	a0bfffc4 	addi	r2,r20,-1
 800bb4c:	0007883a 	mov	r3,zero
 800bb50:	003f4c06 	br	800b884 <__alt_data_end+0xfc00b884>
 800bb54:	01400404 	movi	r5,16
 800bb58:	2811883a 	mov	r8,r5
 800bb5c:	003ef106 	br	800b724 <__alt_data_end+0xfc00b724>
 800bb60:	000b883a 	mov	r5,zero
 800bb64:	0011883a 	mov	r8,zero
 800bb68:	003eee06 	br	800b724 <__alt_data_end+0xfc00b724>
 800bb6c:	00800404 	movi	r2,16
 800bb70:	1007883a 	mov	r3,r2
 800bb74:	003ea606 	br	800b610 <__alt_data_end+0xfc00b610>
 800bb78:	00800404 	movi	r2,16
 800bb7c:	1007883a 	mov	r3,r2
 800bb80:	003f0106 	br	800b788 <__alt_data_end+0xfc00b788>
 800bb84:	0005883a 	mov	r2,zero
 800bb88:	0007883a 	mov	r3,zero
 800bb8c:	003efe06 	br	800b788 <__alt_data_end+0xfc00b788>
 800bb90:	0005883a 	mov	r2,zero
 800bb94:	0007883a 	mov	r3,zero
 800bb98:	003e9d06 	br	800b610 <__alt_data_end+0xfc00b610>
 800bb9c:	0007883a 	mov	r3,zero
 800bba0:	00800044 	movi	r2,1
 800bba4:	003f3706 	br	800b884 <__alt_data_end+0xfc00b884>
 800bba8:	80bf832e 	bgeu	r16,r2,800b9b8 <__alt_data_end+0xfc00b9b8>
 800bbac:	8c7fff84 	addi	r17,r17,-2
 800bbb0:	8721883a 	add	r16,r16,fp
 800bbb4:	003f8106 	br	800b9bc <__alt_data_end+0xfc00b9bc>
 800bbb8:	48bf6a2e 	bgeu	r9,r2,800b964 <__alt_data_end+0xfc00b964>
 800bbbc:	a53fff84 	addi	r20,r20,-2
 800bbc0:	4f13883a 	add	r9,r9,fp
 800bbc4:	003f6806 	br	800b968 <__alt_data_end+0xfc00b968>
 800bbc8:	1827883a 	mov	r19,r3
 800bbcc:	003fd106 	br	800bb14 <__alt_data_end+0xfc00bb14>
 800bbd0:	182f883a 	mov	r23,r3
 800bbd4:	003fb906 	br	800babc <__alt_data_end+0xfc00babc>
 800bbd8:	843fff84 	addi	r16,r16,-2
 800bbdc:	348d883a 	add	r6,r6,r18
 800bbe0:	003f0c06 	br	800b814 <__alt_data_end+0xfc00b814>
 800bbe4:	843fff84 	addi	r16,r16,-2
 800bbe8:	1c87883a 	add	r3,r3,r18
 800bbec:	003eac06 	br	800b6a0 <__alt_data_end+0xfc00b6a0>

0800bbf0 <__umoddi3>:
 800bbf0:	defff404 	addi	sp,sp,-48
 800bbf4:	dd800815 	stw	r22,32(sp)
 800bbf8:	dc400315 	stw	r17,12(sp)
 800bbfc:	dc000215 	stw	r16,8(sp)
 800bc00:	dfc00b15 	stw	ra,44(sp)
 800bc04:	df000a15 	stw	fp,40(sp)
 800bc08:	ddc00915 	stw	r23,36(sp)
 800bc0c:	dd400715 	stw	r21,28(sp)
 800bc10:	dd000615 	stw	r20,24(sp)
 800bc14:	dcc00515 	stw	r19,20(sp)
 800bc18:	dc800415 	stw	r18,16(sp)
 800bc1c:	2021883a 	mov	r16,r4
 800bc20:	2823883a 	mov	r17,r5
 800bc24:	282d883a 	mov	r22,r5
 800bc28:	38003c1e 	bne	r7,zero,800bd1c <__umoddi3+0x12c>
 800bc2c:	3027883a 	mov	r19,r6
 800bc30:	2029883a 	mov	r20,r4
 800bc34:	2980522e 	bgeu	r5,r6,800bd80 <__umoddi3+0x190>
 800bc38:	00bfffd4 	movui	r2,65535
 800bc3c:	1180a436 	bltu	r2,r6,800bed0 <__umoddi3+0x2e0>
 800bc40:	00803fc4 	movi	r2,255
 800bc44:	11815e2e 	bgeu	r2,r6,800c1c0 <__umoddi3+0x5d0>
 800bc48:	01400204 	movi	r5,8
 800bc4c:	2805883a 	mov	r2,r5
 800bc50:	314ad83a 	srl	r5,r6,r5
 800bc54:	00c20074 	movhi	r3,2049
 800bc58:	18c73904 	addi	r3,r3,7396
 800bc5c:	194b883a 	add	r5,r3,r5
 800bc60:	29000003 	ldbu	r4,0(r5)
 800bc64:	2089883a 	add	r4,r4,r2
 800bc68:	00800804 	movi	r2,32
 800bc6c:	1105c83a 	sub	r2,r2,r4
 800bc70:	10010c26 	beq	r2,zero,800c0a4 <__umoddi3+0x4b4>
 800bc74:	88a2983a 	sll	r17,r17,r2
 800bc78:	8108d83a 	srl	r4,r16,r4
 800bc7c:	30a6983a 	sll	r19,r6,r2
 800bc80:	80a8983a 	sll	r20,r16,r2
 800bc84:	1025883a 	mov	r18,r2
 800bc88:	892cb03a 	or	r22,r17,r4
 800bc8c:	9822d43a 	srli	r17,r19,16
 800bc90:	b009883a 	mov	r4,r22
 800bc94:	9d7fffcc 	andi	r21,r19,65535
 800bc98:	880b883a 	mov	r5,r17
 800bc9c:	800c3300 	call	800c330 <__umodsi3>
 800bca0:	b009883a 	mov	r4,r22
 800bca4:	880b883a 	mov	r5,r17
 800bca8:	102f883a 	mov	r23,r2
 800bcac:	800c3280 	call	800c328 <__udivsi3>
 800bcb0:	1009883a 	mov	r4,r2
 800bcb4:	a80b883a 	mov	r5,r21
 800bcb8:	800c3380 	call	800c338 <__mulsi3>
 800bcbc:	b82e943a 	slli	r23,r23,16
 800bcc0:	a008d43a 	srli	r4,r20,16
 800bcc4:	b906b03a 	or	r3,r23,r4
 800bcc8:	1880042e 	bgeu	r3,r2,800bcdc <__umoddi3+0xec>
 800bccc:	1cc7883a 	add	r3,r3,r19
 800bcd0:	1cc00236 	bltu	r3,r19,800bcdc <__umoddi3+0xec>
 800bcd4:	1880012e 	bgeu	r3,r2,800bcdc <__umoddi3+0xec>
 800bcd8:	1cc7883a 	add	r3,r3,r19
 800bcdc:	18a1c83a 	sub	r16,r3,r2
 800bce0:	8009883a 	mov	r4,r16
 800bce4:	880b883a 	mov	r5,r17
 800bce8:	800c3300 	call	800c330 <__umodsi3>
 800bcec:	8009883a 	mov	r4,r16
 800bcf0:	880b883a 	mov	r5,r17
 800bcf4:	102d883a 	mov	r22,r2
 800bcf8:	800c3280 	call	800c328 <__udivsi3>
 800bcfc:	1009883a 	mov	r4,r2
 800bd00:	a80b883a 	mov	r5,r21
 800bd04:	b02c943a 	slli	r22,r22,16
 800bd08:	800c3380 	call	800c338 <__mulsi3>
 800bd0c:	a13fffcc 	andi	r4,r20,65535
 800bd10:	b106b03a 	or	r3,r22,r4
 800bd14:	1880572e 	bgeu	r3,r2,800be74 <__umoddi3+0x284>
 800bd18:	00005206 	br	800be64 <__umoddi3+0x274>
 800bd1c:	29c05936 	bltu	r5,r7,800be84 <__umoddi3+0x294>
 800bd20:	00bfffd4 	movui	r2,65535
 800bd24:	11c0652e 	bgeu	r2,r7,800bebc <__umoddi3+0x2cc>
 800bd28:	00804034 	movhi	r2,256
 800bd2c:	10bfffc4 	addi	r2,r2,-1
 800bd30:	11c1172e 	bgeu	r2,r7,800c190 <__umoddi3+0x5a0>
 800bd34:	01400604 	movi	r5,24
 800bd38:	282b883a 	mov	r21,r5
 800bd3c:	394ad83a 	srl	r5,r7,r5
 800bd40:	00c20074 	movhi	r3,2049
 800bd44:	18c73904 	addi	r3,r3,7396
 800bd48:	194b883a 	add	r5,r3,r5
 800bd4c:	28800003 	ldbu	r2,0(r5)
 800bd50:	00c00804 	movi	r3,32
 800bd54:	156b883a 	add	r21,r2,r21
 800bd58:	1d69c83a 	sub	r20,r3,r21
 800bd5c:	a000671e 	bne	r20,zero,800befc <__umoddi3+0x30c>
 800bd60:	3c400136 	bltu	r7,r17,800bd68 <__umoddi3+0x178>
 800bd64:	81812336 	bltu	r16,r6,800c1f4 <__umoddi3+0x604>
 800bd68:	8185c83a 	sub	r2,r16,r6
 800bd6c:	89e3c83a 	sub	r17,r17,r7
 800bd70:	8087803a 	cmpltu	r3,r16,r2
 800bd74:	88edc83a 	sub	r22,r17,r3
 800bd78:	b007883a 	mov	r3,r22
 800bd7c:	00004306 	br	800be8c <__umoddi3+0x29c>
 800bd80:	3000041e 	bne	r6,zero,800bd94 <__umoddi3+0x1a4>
 800bd84:	01000044 	movi	r4,1
 800bd88:	000b883a 	mov	r5,zero
 800bd8c:	800c3280 	call	800c328 <__udivsi3>
 800bd90:	1027883a 	mov	r19,r2
 800bd94:	00bfffd4 	movui	r2,65535
 800bd98:	14c0532e 	bgeu	r2,r19,800bee8 <__umoddi3+0x2f8>
 800bd9c:	00804034 	movhi	r2,256
 800bda0:	10bfffc4 	addi	r2,r2,-1
 800bda4:	14c1032e 	bgeu	r2,r19,800c1b4 <__umoddi3+0x5c4>
 800bda8:	00800604 	movi	r2,24
 800bdac:	1007883a 	mov	r3,r2
 800bdb0:	9884d83a 	srl	r2,r19,r2
 800bdb4:	01020074 	movhi	r4,2049
 800bdb8:	21073904 	addi	r4,r4,7396
 800bdbc:	2085883a 	add	r2,r4,r2
 800bdc0:	11000003 	ldbu	r4,0(r2)
 800bdc4:	00800804 	movi	r2,32
 800bdc8:	20c7883a 	add	r3,r4,r3
 800bdcc:	10c5c83a 	sub	r2,r2,r3
 800bdd0:	1000b61e 	bne	r2,zero,800c0ac <__umoddi3+0x4bc>
 800bdd4:	982ad43a 	srli	r21,r19,16
 800bdd8:	8ce3c83a 	sub	r17,r17,r19
 800bddc:	9dbfffcc 	andi	r22,r19,65535
 800bde0:	0025883a 	mov	r18,zero
 800bde4:	8809883a 	mov	r4,r17
 800bde8:	a80b883a 	mov	r5,r21
 800bdec:	800c3300 	call	800c330 <__umodsi3>
 800bdf0:	8809883a 	mov	r4,r17
 800bdf4:	a80b883a 	mov	r5,r21
 800bdf8:	102f883a 	mov	r23,r2
 800bdfc:	800c3280 	call	800c328 <__udivsi3>
 800be00:	1009883a 	mov	r4,r2
 800be04:	b00b883a 	mov	r5,r22
 800be08:	800c3380 	call	800c338 <__mulsi3>
 800be0c:	b82e943a 	slli	r23,r23,16
 800be10:	a008d43a 	srli	r4,r20,16
 800be14:	b906b03a 	or	r3,r23,r4
 800be18:	1880032e 	bgeu	r3,r2,800be28 <__umoddi3+0x238>
 800be1c:	1cc7883a 	add	r3,r3,r19
 800be20:	1cc00136 	bltu	r3,r19,800be28 <__umoddi3+0x238>
 800be24:	1880f136 	bltu	r3,r2,800c1ec <__umoddi3+0x5fc>
 800be28:	18a1c83a 	sub	r16,r3,r2
 800be2c:	8009883a 	mov	r4,r16
 800be30:	a80b883a 	mov	r5,r21
 800be34:	800c3300 	call	800c330 <__umodsi3>
 800be38:	8009883a 	mov	r4,r16
 800be3c:	a80b883a 	mov	r5,r21
 800be40:	1023883a 	mov	r17,r2
 800be44:	800c3280 	call	800c328 <__udivsi3>
 800be48:	1009883a 	mov	r4,r2
 800be4c:	b00b883a 	mov	r5,r22
 800be50:	8822943a 	slli	r17,r17,16
 800be54:	800c3380 	call	800c338 <__mulsi3>
 800be58:	a13fffcc 	andi	r4,r20,65535
 800be5c:	8906b03a 	or	r3,r17,r4
 800be60:	1880042e 	bgeu	r3,r2,800be74 <__umoddi3+0x284>
 800be64:	1cc7883a 	add	r3,r3,r19
 800be68:	1cc00236 	bltu	r3,r19,800be74 <__umoddi3+0x284>
 800be6c:	1880012e 	bgeu	r3,r2,800be74 <__umoddi3+0x284>
 800be70:	1cc7883a 	add	r3,r3,r19
 800be74:	1887c83a 	sub	r3,r3,r2
 800be78:	1c84d83a 	srl	r2,r3,r18
 800be7c:	0007883a 	mov	r3,zero
 800be80:	00000206 	br	800be8c <__umoddi3+0x29c>
 800be84:	2005883a 	mov	r2,r4
 800be88:	2807883a 	mov	r3,r5
 800be8c:	dfc00b17 	ldw	ra,44(sp)
 800be90:	df000a17 	ldw	fp,40(sp)
 800be94:	ddc00917 	ldw	r23,36(sp)
 800be98:	dd800817 	ldw	r22,32(sp)
 800be9c:	dd400717 	ldw	r21,28(sp)
 800bea0:	dd000617 	ldw	r20,24(sp)
 800bea4:	dcc00517 	ldw	r19,20(sp)
 800bea8:	dc800417 	ldw	r18,16(sp)
 800beac:	dc400317 	ldw	r17,12(sp)
 800beb0:	dc000217 	ldw	r16,8(sp)
 800beb4:	dec00c04 	addi	sp,sp,48
 800beb8:	f800283a 	ret
 800bebc:	00803fc4 	movi	r2,255
 800bec0:	11c0b02e 	bgeu	r2,r7,800c184 <__umoddi3+0x594>
 800bec4:	01400204 	movi	r5,8
 800bec8:	282b883a 	mov	r21,r5
 800becc:	003f9b06 	br	800bd3c <__alt_data_end+0xfc00bd3c>
 800bed0:	00804034 	movhi	r2,256
 800bed4:	10bfffc4 	addi	r2,r2,-1
 800bed8:	1180b02e 	bgeu	r2,r6,800c19c <__umoddi3+0x5ac>
 800bedc:	01400604 	movi	r5,24
 800bee0:	2805883a 	mov	r2,r5
 800bee4:	003f5a06 	br	800bc50 <__alt_data_end+0xfc00bc50>
 800bee8:	00803fc4 	movi	r2,255
 800beec:	14c0ae2e 	bgeu	r2,r19,800c1a8 <__umoddi3+0x5b8>
 800bef0:	00800204 	movi	r2,8
 800bef4:	1007883a 	mov	r3,r2
 800bef8:	003fad06 	br	800bdb0 <__alt_data_end+0xfc00bdb0>
 800befc:	3d0a983a 	sll	r5,r7,r20
 800bf00:	356cd83a 	srl	r22,r6,r21
 800bf04:	8d78d83a 	srl	fp,r17,r21
 800bf08:	8d10983a 	sll	r8,r17,r20
 800bf0c:	2dacb03a 	or	r22,r5,r22
 800bf10:	b02ed43a 	srli	r23,r22,16
 800bf14:	8564d83a 	srl	r18,r16,r21
 800bf18:	e009883a 	mov	r4,fp
 800bf1c:	b80b883a 	mov	r5,r23
 800bf20:	44a4b03a 	or	r18,r8,r18
 800bf24:	3526983a 	sll	r19,r6,r20
 800bf28:	800c3300 	call	800c330 <__umodsi3>
 800bf2c:	e009883a 	mov	r4,fp
 800bf30:	b80b883a 	mov	r5,r23
 800bf34:	b47fffcc 	andi	r17,r22,65535
 800bf38:	d8800015 	stw	r2,0(sp)
 800bf3c:	800c3280 	call	800c328 <__udivsi3>
 800bf40:	1009883a 	mov	r4,r2
 800bf44:	880b883a 	mov	r5,r17
 800bf48:	1039883a 	mov	fp,r2
 800bf4c:	800c3380 	call	800c338 <__mulsi3>
 800bf50:	d9800017 	ldw	r6,0(sp)
 800bf54:	9008d43a 	srli	r4,r18,16
 800bf58:	8520983a 	sll	r16,r16,r20
 800bf5c:	300c943a 	slli	r6,r6,16
 800bf60:	3106b03a 	or	r3,r6,r4
 800bf64:	1880042e 	bgeu	r3,r2,800bf78 <__umoddi3+0x388>
 800bf68:	1d87883a 	add	r3,r3,r22
 800bf6c:	e13fffc4 	addi	r4,fp,-1
 800bf70:	1d809a2e 	bgeu	r3,r22,800c1dc <__umoddi3+0x5ec>
 800bf74:	2039883a 	mov	fp,r4
 800bf78:	1887c83a 	sub	r3,r3,r2
 800bf7c:	1809883a 	mov	r4,r3
 800bf80:	b80b883a 	mov	r5,r23
 800bf84:	d8c00115 	stw	r3,4(sp)
 800bf88:	800c3300 	call	800c330 <__umodsi3>
 800bf8c:	d8c00117 	ldw	r3,4(sp)
 800bf90:	b80b883a 	mov	r5,r23
 800bf94:	d8800015 	stw	r2,0(sp)
 800bf98:	1809883a 	mov	r4,r3
 800bf9c:	800c3280 	call	800c328 <__udivsi3>
 800bfa0:	880b883a 	mov	r5,r17
 800bfa4:	1009883a 	mov	r4,r2
 800bfa8:	102f883a 	mov	r23,r2
 800bfac:	800c3380 	call	800c338 <__mulsi3>
 800bfb0:	d9800017 	ldw	r6,0(sp)
 800bfb4:	947fffcc 	andi	r17,r18,65535
 800bfb8:	300c943a 	slli	r6,r6,16
 800bfbc:	3464b03a 	or	r18,r6,r17
 800bfc0:	9080042e 	bgeu	r18,r2,800bfd4 <__umoddi3+0x3e4>
 800bfc4:	95a5883a 	add	r18,r18,r22
 800bfc8:	b8ffffc4 	addi	r3,r23,-1
 800bfcc:	95807f2e 	bgeu	r18,r22,800c1cc <__umoddi3+0x5dc>
 800bfd0:	182f883a 	mov	r23,r3
 800bfd4:	e038943a 	slli	fp,fp,16
 800bfd8:	980cd43a 	srli	r6,r19,16
 800bfdc:	98ffffcc 	andi	r3,r19,65535
 800bfe0:	bf38b03a 	or	fp,r23,fp
 800bfe4:	e02ed43a 	srli	r23,fp,16
 800bfe8:	e73fffcc 	andi	fp,fp,65535
 800bfec:	180b883a 	mov	r5,r3
 800bff0:	e009883a 	mov	r4,fp
 800bff4:	d9800015 	stw	r6,0(sp)
 800bff8:	d8c00115 	stw	r3,4(sp)
 800bffc:	90a5c83a 	sub	r18,r18,r2
 800c000:	800c3380 	call	800c338 <__mulsi3>
 800c004:	d8c00117 	ldw	r3,4(sp)
 800c008:	b809883a 	mov	r4,r23
 800c00c:	1023883a 	mov	r17,r2
 800c010:	180b883a 	mov	r5,r3
 800c014:	800c3380 	call	800c338 <__mulsi3>
 800c018:	d9800017 	ldw	r6,0(sp)
 800c01c:	b809883a 	mov	r4,r23
 800c020:	d8800115 	stw	r2,4(sp)
 800c024:	300b883a 	mov	r5,r6
 800c028:	302f883a 	mov	r23,r6
 800c02c:	800c3380 	call	800c338 <__mulsi3>
 800c030:	e009883a 	mov	r4,fp
 800c034:	b80b883a 	mov	r5,r23
 800c038:	d8800015 	stw	r2,0(sp)
 800c03c:	800c3380 	call	800c338 <__mulsi3>
 800c040:	d8c00117 	ldw	r3,4(sp)
 800c044:	880cd43a 	srli	r6,r17,16
 800c048:	d9c00017 	ldw	r7,0(sp)
 800c04c:	1885883a 	add	r2,r3,r2
 800c050:	118d883a 	add	r6,r2,r6
 800c054:	30c0022e 	bgeu	r6,r3,800c060 <__umoddi3+0x470>
 800c058:	00800074 	movhi	r2,1
 800c05c:	388f883a 	add	r7,r7,r2
 800c060:	3006d43a 	srli	r3,r6,16
 800c064:	300c943a 	slli	r6,r6,16
 800c068:	8c7fffcc 	andi	r17,r17,65535
 800c06c:	38c7883a 	add	r3,r7,r3
 800c070:	3463883a 	add	r17,r6,r17
 800c074:	90c03d36 	bltu	r18,r3,800c16c <__umoddi3+0x57c>
 800c078:	90c06026 	beq	r18,r3,800c1fc <__umoddi3+0x60c>
 800c07c:	90c9c83a 	sub	r4,r18,r3
 800c080:	880f883a 	mov	r7,r17
 800c084:	81cfc83a 	sub	r7,r16,r7
 800c088:	81c7803a 	cmpltu	r3,r16,r7
 800c08c:	20c7c83a 	sub	r3,r4,r3
 800c090:	1d44983a 	sll	r2,r3,r21
 800c094:	3d0ed83a 	srl	r7,r7,r20
 800c098:	1d06d83a 	srl	r3,r3,r20
 800c09c:	11c4b03a 	or	r2,r2,r7
 800c0a0:	003f7a06 	br	800be8c <__alt_data_end+0xfc00be8c>
 800c0a4:	0025883a 	mov	r18,zero
 800c0a8:	003ef806 	br	800bc8c <__alt_data_end+0xfc00bc8c>
 800c0ac:	98a6983a 	sll	r19,r19,r2
 800c0b0:	88e8d83a 	srl	r20,r17,r3
 800c0b4:	80c6d83a 	srl	r3,r16,r3
 800c0b8:	982ad43a 	srli	r21,r19,16
 800c0bc:	88a2983a 	sll	r17,r17,r2
 800c0c0:	a009883a 	mov	r4,r20
 800c0c4:	a80b883a 	mov	r5,r21
 800c0c8:	88eeb03a 	or	r23,r17,r3
 800c0cc:	1025883a 	mov	r18,r2
 800c0d0:	800c3300 	call	800c330 <__umodsi3>
 800c0d4:	a009883a 	mov	r4,r20
 800c0d8:	a80b883a 	mov	r5,r21
 800c0dc:	1023883a 	mov	r17,r2
 800c0e0:	9dbfffcc 	andi	r22,r19,65535
 800c0e4:	800c3280 	call	800c328 <__udivsi3>
 800c0e8:	1009883a 	mov	r4,r2
 800c0ec:	b00b883a 	mov	r5,r22
 800c0f0:	800c3380 	call	800c338 <__mulsi3>
 800c0f4:	8822943a 	slli	r17,r17,16
 800c0f8:	b808d43a 	srli	r4,r23,16
 800c0fc:	84a8983a 	sll	r20,r16,r18
 800c100:	8906b03a 	or	r3,r17,r4
 800c104:	1880042e 	bgeu	r3,r2,800c118 <__umoddi3+0x528>
 800c108:	1cc7883a 	add	r3,r3,r19
 800c10c:	1cc00236 	bltu	r3,r19,800c118 <__umoddi3+0x528>
 800c110:	1880012e 	bgeu	r3,r2,800c118 <__umoddi3+0x528>
 800c114:	1cc7883a 	add	r3,r3,r19
 800c118:	18a1c83a 	sub	r16,r3,r2
 800c11c:	8009883a 	mov	r4,r16
 800c120:	a80b883a 	mov	r5,r21
 800c124:	800c3300 	call	800c330 <__umodsi3>
 800c128:	8009883a 	mov	r4,r16
 800c12c:	a80b883a 	mov	r5,r21
 800c130:	1039883a 	mov	fp,r2
 800c134:	800c3280 	call	800c328 <__udivsi3>
 800c138:	1009883a 	mov	r4,r2
 800c13c:	b00b883a 	mov	r5,r22
 800c140:	800c3380 	call	800c338 <__mulsi3>
 800c144:	e006943a 	slli	r3,fp,16
 800c148:	b93fffcc 	andi	r4,r23,65535
 800c14c:	1906b03a 	or	r3,r3,r4
 800c150:	1880042e 	bgeu	r3,r2,800c164 <__umoddi3+0x574>
 800c154:	1cc7883a 	add	r3,r3,r19
 800c158:	1cc00236 	bltu	r3,r19,800c164 <__umoddi3+0x574>
 800c15c:	1880012e 	bgeu	r3,r2,800c164 <__umoddi3+0x574>
 800c160:	1cc7883a 	add	r3,r3,r19
 800c164:	18a3c83a 	sub	r17,r3,r2
 800c168:	003f1e06 	br	800bde4 <__alt_data_end+0xfc00bde4>
 800c16c:	8ccfc83a 	sub	r7,r17,r19
 800c170:	1d89c83a 	sub	r4,r3,r22
 800c174:	89e3803a 	cmpltu	r17,r17,r7
 800c178:	2463c83a 	sub	r17,r4,r17
 800c17c:	9449c83a 	sub	r4,r18,r17
 800c180:	003fc006 	br	800c084 <__alt_data_end+0xfc00c084>
 800c184:	000b883a 	mov	r5,zero
 800c188:	002b883a 	mov	r21,zero
 800c18c:	003eeb06 	br	800bd3c <__alt_data_end+0xfc00bd3c>
 800c190:	01400404 	movi	r5,16
 800c194:	282b883a 	mov	r21,r5
 800c198:	003ee806 	br	800bd3c <__alt_data_end+0xfc00bd3c>
 800c19c:	01400404 	movi	r5,16
 800c1a0:	2805883a 	mov	r2,r5
 800c1a4:	003eaa06 	br	800bc50 <__alt_data_end+0xfc00bc50>
 800c1a8:	0005883a 	mov	r2,zero
 800c1ac:	0007883a 	mov	r3,zero
 800c1b0:	003eff06 	br	800bdb0 <__alt_data_end+0xfc00bdb0>
 800c1b4:	00800404 	movi	r2,16
 800c1b8:	1007883a 	mov	r3,r2
 800c1bc:	003efc06 	br	800bdb0 <__alt_data_end+0xfc00bdb0>
 800c1c0:	000b883a 	mov	r5,zero
 800c1c4:	0005883a 	mov	r2,zero
 800c1c8:	003ea106 	br	800bc50 <__alt_data_end+0xfc00bc50>
 800c1cc:	90bf802e 	bgeu	r18,r2,800bfd0 <__alt_data_end+0xfc00bfd0>
 800c1d0:	bdffff84 	addi	r23,r23,-2
 800c1d4:	95a5883a 	add	r18,r18,r22
 800c1d8:	003f7e06 	br	800bfd4 <__alt_data_end+0xfc00bfd4>
 800c1dc:	18bf652e 	bgeu	r3,r2,800bf74 <__alt_data_end+0xfc00bf74>
 800c1e0:	e73fff84 	addi	fp,fp,-2
 800c1e4:	1d87883a 	add	r3,r3,r22
 800c1e8:	003f6306 	br	800bf78 <__alt_data_end+0xfc00bf78>
 800c1ec:	1cc7883a 	add	r3,r3,r19
 800c1f0:	003f0d06 	br	800be28 <__alt_data_end+0xfc00be28>
 800c1f4:	8005883a 	mov	r2,r16
 800c1f8:	003edf06 	br	800bd78 <__alt_data_end+0xfc00bd78>
 800c1fc:	847fdb36 	bltu	r16,r17,800c16c <__alt_data_end+0xfc00c16c>
 800c200:	880f883a 	mov	r7,r17
 800c204:	0009883a 	mov	r4,zero
 800c208:	003f9e06 	br	800c084 <__alt_data_end+0xfc00c084>

0800c20c <udivmodsi4>:
 800c20c:	2900182e 	bgeu	r5,r4,800c270 <udivmodsi4+0x64>
 800c210:	28001716 	blt	r5,zero,800c270 <udivmodsi4+0x64>
 800c214:	00800804 	movi	r2,32
 800c218:	00c00044 	movi	r3,1
 800c21c:	00000206 	br	800c228 <udivmodsi4+0x1c>
 800c220:	10001126 	beq	r2,zero,800c268 <udivmodsi4+0x5c>
 800c224:	28000516 	blt	r5,zero,800c23c <udivmodsi4+0x30>
 800c228:	294b883a 	add	r5,r5,r5
 800c22c:	10bfffc4 	addi	r2,r2,-1
 800c230:	18c7883a 	add	r3,r3,r3
 800c234:	293ffa36 	bltu	r5,r4,800c220 <__alt_data_end+0xfc00c220>
 800c238:	18000b26 	beq	r3,zero,800c268 <udivmodsi4+0x5c>
 800c23c:	0005883a 	mov	r2,zero
 800c240:	21400236 	bltu	r4,r5,800c24c <udivmodsi4+0x40>
 800c244:	2149c83a 	sub	r4,r4,r5
 800c248:	10c4b03a 	or	r2,r2,r3
 800c24c:	1806d07a 	srli	r3,r3,1
 800c250:	280ad07a 	srli	r5,r5,1
 800c254:	183ffa1e 	bne	r3,zero,800c240 <__alt_data_end+0xfc00c240>
 800c258:	3000011e 	bne	r6,zero,800c260 <udivmodsi4+0x54>
 800c25c:	f800283a 	ret
 800c260:	2005883a 	mov	r2,r4
 800c264:	f800283a 	ret
 800c268:	0005883a 	mov	r2,zero
 800c26c:	003ffa06 	br	800c258 <__alt_data_end+0xfc00c258>
 800c270:	00c00044 	movi	r3,1
 800c274:	003ff106 	br	800c23c <__alt_data_end+0xfc00c23c>

0800c278 <__divsi3>:
 800c278:	defffe04 	addi	sp,sp,-8
 800c27c:	dfc00115 	stw	ra,4(sp)
 800c280:	dc000015 	stw	r16,0(sp)
 800c284:	20000b16 	blt	r4,zero,800c2b4 <__divsi3+0x3c>
 800c288:	0021883a 	mov	r16,zero
 800c28c:	28000c16 	blt	r5,zero,800c2c0 <__divsi3+0x48>
 800c290:	000d883a 	mov	r6,zero
 800c294:	800c20c0 	call	800c20c <udivmodsi4>
 800c298:	0407c83a 	sub	r3,zero,r16
 800c29c:	1884f03a 	xor	r2,r3,r2
 800c2a0:	1405883a 	add	r2,r2,r16
 800c2a4:	dfc00117 	ldw	ra,4(sp)
 800c2a8:	dc000017 	ldw	r16,0(sp)
 800c2ac:	dec00204 	addi	sp,sp,8
 800c2b0:	f800283a 	ret
 800c2b4:	0109c83a 	sub	r4,zero,r4
 800c2b8:	04000044 	movi	r16,1
 800c2bc:	283ff40e 	bge	r5,zero,800c290 <__alt_data_end+0xfc00c290>
 800c2c0:	014bc83a 	sub	r5,zero,r5
 800c2c4:	8400005c 	xori	r16,r16,1
 800c2c8:	003ff106 	br	800c290 <__alt_data_end+0xfc00c290>

0800c2cc <__modsi3>:
 800c2cc:	defffd04 	addi	sp,sp,-12
 800c2d0:	dfc00215 	stw	ra,8(sp)
 800c2d4:	dc400115 	stw	r17,4(sp)
 800c2d8:	dc000015 	stw	r16,0(sp)
 800c2dc:	20000c16 	blt	r4,zero,800c310 <__modsi3+0x44>
 800c2e0:	0023883a 	mov	r17,zero
 800c2e4:	0021883a 	mov	r16,zero
 800c2e8:	28000d16 	blt	r5,zero,800c320 <__modsi3+0x54>
 800c2ec:	01800044 	movi	r6,1
 800c2f0:	800c20c0 	call	800c20c <udivmodsi4>
 800c2f4:	1404f03a 	xor	r2,r2,r16
 800c2f8:	8885883a 	add	r2,r17,r2
 800c2fc:	dfc00217 	ldw	ra,8(sp)
 800c300:	dc400117 	ldw	r17,4(sp)
 800c304:	dc000017 	ldw	r16,0(sp)
 800c308:	dec00304 	addi	sp,sp,12
 800c30c:	f800283a 	ret
 800c310:	0109c83a 	sub	r4,zero,r4
 800c314:	04400044 	movi	r17,1
 800c318:	043fffc4 	movi	r16,-1
 800c31c:	283ff30e 	bge	r5,zero,800c2ec <__alt_data_end+0xfc00c2ec>
 800c320:	014bc83a 	sub	r5,zero,r5
 800c324:	003ff106 	br	800c2ec <__alt_data_end+0xfc00c2ec>

0800c328 <__udivsi3>:
 800c328:	000d883a 	mov	r6,zero
 800c32c:	800c20c1 	jmpi	800c20c <udivmodsi4>

0800c330 <__umodsi3>:
 800c330:	01800044 	movi	r6,1
 800c334:	800c20c1 	jmpi	800c20c <udivmodsi4>

0800c338 <__mulsi3>:
 800c338:	0005883a 	mov	r2,zero
 800c33c:	20000726 	beq	r4,zero,800c35c <__mulsi3+0x24>
 800c340:	20c0004c 	andi	r3,r4,1
 800c344:	2008d07a 	srli	r4,r4,1
 800c348:	18000126 	beq	r3,zero,800c350 <__mulsi3+0x18>
 800c34c:	1145883a 	add	r2,r2,r5
 800c350:	294b883a 	add	r5,r5,r5
 800c354:	203ffa1e 	bne	r4,zero,800c340 <__alt_data_end+0xfc00c340>
 800c358:	f800283a 	ret
 800c35c:	f800283a 	ret

0800c360 <__adddf3>:
 800c360:	02000434 	movhi	r8,16
 800c364:	423fffc4 	addi	r8,r8,-1
 800c368:	defffb04 	addi	sp,sp,-20
 800c36c:	2a12703a 	and	r9,r5,r8
 800c370:	2806d7fa 	srli	r3,r5,31
 800c374:	3a10703a 	and	r8,r7,r8
 800c378:	3804d53a 	srli	r2,r7,20
 800c37c:	3014d77a 	srli	r10,r6,29
 800c380:	dc000015 	stw	r16,0(sp)
 800c384:	481290fa 	slli	r9,r9,3
 800c388:	2820d53a 	srli	r16,r5,20
 800c38c:	401090fa 	slli	r8,r8,3
 800c390:	200ad77a 	srli	r5,r4,29
 800c394:	380ed7fa 	srli	r7,r7,31
 800c398:	dc800215 	stw	r18,8(sp)
 800c39c:	dc400115 	stw	r17,4(sp)
 800c3a0:	dfc00415 	stw	ra,16(sp)
 800c3a4:	dcc00315 	stw	r19,12(sp)
 800c3a8:	1c803fcc 	andi	r18,r3,255
 800c3ac:	8401ffcc 	andi	r16,r16,2047
 800c3b0:	494ab03a 	or	r5,r9,r5
 800c3b4:	202290fa 	slli	r17,r4,3
 800c3b8:	1081ffcc 	andi	r2,r2,2047
 800c3bc:	4290b03a 	or	r8,r8,r10
 800c3c0:	300c90fa 	slli	r6,r6,3
 800c3c4:	91c07026 	beq	r18,r7,800c588 <__adddf3+0x228>
 800c3c8:	8087c83a 	sub	r3,r16,r2
 800c3cc:	00c0b30e 	bge	zero,r3,800c69c <__adddf3+0x33c>
 800c3d0:	10002a1e 	bne	r2,zero,800c47c <__adddf3+0x11c>
 800c3d4:	4184b03a 	or	r2,r8,r6
 800c3d8:	1000991e 	bne	r2,zero,800c640 <__adddf3+0x2e0>
 800c3dc:	888001cc 	andi	r2,r17,7
 800c3e0:	10005b26 	beq	r2,zero,800c550 <__adddf3+0x1f0>
 800c3e4:	88c003cc 	andi	r3,r17,15
 800c3e8:	00800104 	movi	r2,4
 800c3ec:	18805826 	beq	r3,r2,800c550 <__adddf3+0x1f0>
 800c3f0:	89800104 	addi	r6,r17,4
 800c3f4:	3463803a 	cmpltu	r17,r6,r17
 800c3f8:	2c4b883a 	add	r5,r5,r17
 800c3fc:	2880202c 	andhi	r2,r5,128
 800c400:	9007883a 	mov	r3,r18
 800c404:	3023883a 	mov	r17,r6
 800c408:	10005426 	beq	r2,zero,800c55c <__adddf3+0x1fc>
 800c40c:	84000044 	addi	r16,r16,1
 800c410:	0081ffc4 	movi	r2,2047
 800c414:	8080c126 	beq	r16,r2,800c71c <__adddf3+0x3bc>
 800c418:	013fe034 	movhi	r4,65408
 800c41c:	213fffc4 	addi	r4,r4,-1
 800c420:	290a703a 	and	r5,r5,r4
 800c424:	2804977a 	slli	r2,r5,29
 800c428:	280a927a 	slli	r5,r5,9
 800c42c:	8822d0fa 	srli	r17,r17,3
 800c430:	8401ffcc 	andi	r16,r16,2047
 800c434:	2808d33a 	srli	r4,r5,12
 800c438:	1444b03a 	or	r2,r2,r17
 800c43c:	8401ffcc 	andi	r16,r16,2047
 800c440:	800a953a 	slli	r5,r16,20
 800c444:	18c03fcc 	andi	r3,r3,255
 800c448:	04000434 	movhi	r16,16
 800c44c:	180697fa 	slli	r3,r3,31
 800c450:	843fffc4 	addi	r16,r16,-1
 800c454:	2420703a 	and	r16,r4,r16
 800c458:	8160b03a 	or	r16,r16,r5
 800c45c:	80c6b03a 	or	r3,r16,r3
 800c460:	dfc00417 	ldw	ra,16(sp)
 800c464:	dcc00317 	ldw	r19,12(sp)
 800c468:	dc800217 	ldw	r18,8(sp)
 800c46c:	dc400117 	ldw	r17,4(sp)
 800c470:	dc000017 	ldw	r16,0(sp)
 800c474:	dec00504 	addi	sp,sp,20
 800c478:	f800283a 	ret
 800c47c:	0081ffc4 	movi	r2,2047
 800c480:	80bfd626 	beq	r16,r2,800c3dc <__alt_data_end+0xfc00c3dc>
 800c484:	42002034 	orhi	r8,r8,128
 800c488:	00800e04 	movi	r2,56
 800c48c:	10c0a616 	blt	r2,r3,800c728 <__adddf3+0x3c8>
 800c490:	008007c4 	movi	r2,31
 800c494:	10c0c916 	blt	r2,r3,800c7bc <__adddf3+0x45c>
 800c498:	00800804 	movi	r2,32
 800c49c:	10c5c83a 	sub	r2,r2,r3
 800c4a0:	408e983a 	sll	r7,r8,r2
 800c4a4:	30c8d83a 	srl	r4,r6,r3
 800c4a8:	3084983a 	sll	r2,r6,r2
 800c4ac:	40c6d83a 	srl	r3,r8,r3
 800c4b0:	390cb03a 	or	r6,r7,r4
 800c4b4:	1004c03a 	cmpne	r2,r2,zero
 800c4b8:	308cb03a 	or	r6,r6,r2
 800c4bc:	898dc83a 	sub	r6,r17,r6
 800c4c0:	89a3803a 	cmpltu	r17,r17,r6
 800c4c4:	28cbc83a 	sub	r5,r5,r3
 800c4c8:	2c4bc83a 	sub	r5,r5,r17
 800c4cc:	3023883a 	mov	r17,r6
 800c4d0:	2880202c 	andhi	r2,r5,128
 800c4d4:	10006d26 	beq	r2,zero,800c68c <__adddf3+0x32c>
 800c4d8:	04c02034 	movhi	r19,128
 800c4dc:	9cffffc4 	addi	r19,r19,-1
 800c4e0:	2ce6703a 	and	r19,r5,r19
 800c4e4:	98007e26 	beq	r19,zero,800c6e0 <__adddf3+0x380>
 800c4e8:	9809883a 	mov	r4,r19
 800c4ec:	800eaf80 	call	800eaf8 <__clzsi2>
 800c4f0:	10fffe04 	addi	r3,r2,-8
 800c4f4:	010007c4 	movi	r4,31
 800c4f8:	20c07f16 	blt	r4,r3,800c6f8 <__adddf3+0x398>
 800c4fc:	01400a04 	movi	r5,40
 800c500:	2885c83a 	sub	r2,r5,r2
 800c504:	888ad83a 	srl	r5,r17,r2
 800c508:	98e6983a 	sll	r19,r19,r3
 800c50c:	88e2983a 	sll	r17,r17,r3
 800c510:	2ce6b03a 	or	r19,r5,r19
 800c514:	1c007c16 	blt	r3,r16,800c708 <__adddf3+0x3a8>
 800c518:	1c21c83a 	sub	r16,r3,r16
 800c51c:	81400044 	addi	r5,r16,1
 800c520:	00c007c4 	movi	r3,31
 800c524:	19409816 	blt	r3,r5,800c788 <__adddf3+0x428>
 800c528:	1c21c83a 	sub	r16,r3,r16
 800c52c:	8c08983a 	sll	r4,r17,r16
 800c530:	8946d83a 	srl	r3,r17,r5
 800c534:	9c20983a 	sll	r16,r19,r16
 800c538:	2008c03a 	cmpne	r4,r4,zero
 800c53c:	994ad83a 	srl	r5,r19,r5
 800c540:	1c06b03a 	or	r3,r3,r16
 800c544:	1922b03a 	or	r17,r3,r4
 800c548:	0021883a 	mov	r16,zero
 800c54c:	003fa306 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800c550:	2880202c 	andhi	r2,r5,128
 800c554:	9007883a 	mov	r3,r18
 800c558:	103fac1e 	bne	r2,zero,800c40c <__alt_data_end+0xfc00c40c>
 800c55c:	2804977a 	slli	r2,r5,29
 800c560:	8822d0fa 	srli	r17,r17,3
 800c564:	0101ffc4 	movi	r4,2047
 800c568:	280ad0fa 	srli	r5,r5,3
 800c56c:	1444b03a 	or	r2,r2,r17
 800c570:	81002c26 	beq	r16,r4,800c624 <__adddf3+0x2c4>
 800c574:	8120703a 	and	r16,r16,r4
 800c578:	01000434 	movhi	r4,16
 800c57c:	213fffc4 	addi	r4,r4,-1
 800c580:	2908703a 	and	r4,r5,r4
 800c584:	003fad06 	br	800c43c <__alt_data_end+0xfc00c43c>
 800c588:	8089c83a 	sub	r4,r16,r2
 800c58c:	01006a0e 	bge	zero,r4,800c738 <__adddf3+0x3d8>
 800c590:	10003326 	beq	r2,zero,800c660 <__adddf3+0x300>
 800c594:	0081ffc4 	movi	r2,2047
 800c598:	80bf9026 	beq	r16,r2,800c3dc <__alt_data_end+0xfc00c3dc>
 800c59c:	42002034 	orhi	r8,r8,128
 800c5a0:	00800e04 	movi	r2,56
 800c5a4:	1100b116 	blt	r2,r4,800c86c <__adddf3+0x50c>
 800c5a8:	008007c4 	movi	r2,31
 800c5ac:	1100e216 	blt	r2,r4,800c938 <__adddf3+0x5d8>
 800c5b0:	00800804 	movi	r2,32
 800c5b4:	1105c83a 	sub	r2,r2,r4
 800c5b8:	4092983a 	sll	r9,r8,r2
 800c5bc:	310ed83a 	srl	r7,r6,r4
 800c5c0:	3084983a 	sll	r2,r6,r2
 800c5c4:	4110d83a 	srl	r8,r8,r4
 800c5c8:	49ccb03a 	or	r6,r9,r7
 800c5cc:	1004c03a 	cmpne	r2,r2,zero
 800c5d0:	308cb03a 	or	r6,r6,r2
 800c5d4:	344d883a 	add	r6,r6,r17
 800c5d8:	3463803a 	cmpltu	r17,r6,r17
 800c5dc:	414b883a 	add	r5,r8,r5
 800c5e0:	2c4b883a 	add	r5,r5,r17
 800c5e4:	3023883a 	mov	r17,r6
 800c5e8:	2880202c 	andhi	r2,r5,128
 800c5ec:	10002726 	beq	r2,zero,800c68c <__adddf3+0x32c>
 800c5f0:	84000044 	addi	r16,r16,1
 800c5f4:	0081ffc4 	movi	r2,2047
 800c5f8:	8080ae26 	beq	r16,r2,800c8b4 <__adddf3+0x554>
 800c5fc:	00bfe034 	movhi	r2,65408
 800c600:	10bfffc4 	addi	r2,r2,-1
 800c604:	288a703a 	and	r5,r5,r2
 800c608:	880cd07a 	srli	r6,r17,1
 800c60c:	280897fa 	slli	r4,r5,31
 800c610:	88c0004c 	andi	r3,r17,1
 800c614:	30e2b03a 	or	r17,r6,r3
 800c618:	280ad07a 	srli	r5,r5,1
 800c61c:	8922b03a 	or	r17,r17,r4
 800c620:	003f6e06 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800c624:	1148b03a 	or	r4,r2,r5
 800c628:	20003c26 	beq	r4,zero,800c71c <__adddf3+0x3bc>
 800c62c:	29000234 	orhi	r4,r5,8
 800c630:	01400434 	movhi	r5,16
 800c634:	297fffc4 	addi	r5,r5,-1
 800c638:	2148703a 	and	r4,r4,r5
 800c63c:	003f7f06 	br	800c43c <__alt_data_end+0xfc00c43c>
 800c640:	18ffffc4 	addi	r3,r3,-1
 800c644:	18004d1e 	bne	r3,zero,800c77c <__adddf3+0x41c>
 800c648:	898dc83a 	sub	r6,r17,r6
 800c64c:	89a3803a 	cmpltu	r17,r17,r6
 800c650:	2a0bc83a 	sub	r5,r5,r8
 800c654:	2c4bc83a 	sub	r5,r5,r17
 800c658:	3023883a 	mov	r17,r6
 800c65c:	003f9c06 	br	800c4d0 <__alt_data_end+0xfc00c4d0>
 800c660:	4184b03a 	or	r2,r8,r6
 800c664:	103f5d26 	beq	r2,zero,800c3dc <__alt_data_end+0xfc00c3dc>
 800c668:	213fffc4 	addi	r4,r4,-1
 800c66c:	203fd926 	beq	r4,zero,800c5d4 <__alt_data_end+0xfc00c5d4>
 800c670:	0081ffc4 	movi	r2,2047
 800c674:	80bfca1e 	bne	r16,r2,800c5a0 <__alt_data_end+0xfc00c5a0>
 800c678:	003f5806 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800c67c:	10c8b03a 	or	r4,r2,r3
 800c680:	20008b26 	beq	r4,zero,800c8b0 <__adddf3+0x550>
 800c684:	100b883a 	mov	r5,r2
 800c688:	1823883a 	mov	r17,r3
 800c68c:	888001cc 	andi	r2,r17,7
 800c690:	103f541e 	bne	r2,zero,800c3e4 <__alt_data_end+0xfc00c3e4>
 800c694:	9007883a 	mov	r3,r18
 800c698:	003fb006 	br	800c55c <__alt_data_end+0xfc00c55c>
 800c69c:	1800531e 	bne	r3,zero,800c7ec <__adddf3+0x48c>
 800c6a0:	80800044 	addi	r2,r16,1
 800c6a4:	1081ffcc 	andi	r2,r2,2047
 800c6a8:	00c00044 	movi	r3,1
 800c6ac:	1880990e 	bge	r3,r2,800c914 <__adddf3+0x5b4>
 800c6b0:	8985c83a 	sub	r2,r17,r6
 800c6b4:	8887803a 	cmpltu	r3,r17,r2
 800c6b8:	2a27c83a 	sub	r19,r5,r8
 800c6bc:	98e7c83a 	sub	r19,r19,r3
 800c6c0:	98c0202c 	andhi	r3,r19,128
 800c6c4:	18006226 	beq	r3,zero,800c850 <__adddf3+0x4f0>
 800c6c8:	3463c83a 	sub	r17,r6,r17
 800c6cc:	4151c83a 	sub	r8,r8,r5
 800c6d0:	344d803a 	cmpltu	r6,r6,r17
 800c6d4:	41a7c83a 	sub	r19,r8,r6
 800c6d8:	3825883a 	mov	r18,r7
 800c6dc:	983f821e 	bne	r19,zero,800c4e8 <__alt_data_end+0xfc00c4e8>
 800c6e0:	8809883a 	mov	r4,r17
 800c6e4:	800eaf80 	call	800eaf8 <__clzsi2>
 800c6e8:	10800804 	addi	r2,r2,32
 800c6ec:	10fffe04 	addi	r3,r2,-8
 800c6f0:	010007c4 	movi	r4,31
 800c6f4:	20ff810e 	bge	r4,r3,800c4fc <__alt_data_end+0xfc00c4fc>
 800c6f8:	14fff604 	addi	r19,r2,-40
 800c6fc:	8ce6983a 	sll	r19,r17,r19
 800c700:	0023883a 	mov	r17,zero
 800c704:	1c3f840e 	bge	r3,r16,800c518 <__alt_data_end+0xfc00c518>
 800c708:	017fe034 	movhi	r5,65408
 800c70c:	297fffc4 	addi	r5,r5,-1
 800c710:	80e1c83a 	sub	r16,r16,r3
 800c714:	994a703a 	and	r5,r19,r5
 800c718:	003f3006 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800c71c:	0009883a 	mov	r4,zero
 800c720:	0005883a 	mov	r2,zero
 800c724:	003f4506 	br	800c43c <__alt_data_end+0xfc00c43c>
 800c728:	418cb03a 	or	r6,r8,r6
 800c72c:	300cc03a 	cmpne	r6,r6,zero
 800c730:	0007883a 	mov	r3,zero
 800c734:	003f6106 	br	800c4bc <__alt_data_end+0xfc00c4bc>
 800c738:	2000921e 	bne	r4,zero,800c984 <__adddf3+0x624>
 800c73c:	80800044 	addi	r2,r16,1
 800c740:	11c1ffcc 	andi	r7,r2,2047
 800c744:	01000044 	movi	r4,1
 800c748:	21c0610e 	bge	r4,r7,800c8d0 <__adddf3+0x570>
 800c74c:	0101ffc4 	movi	r4,2047
 800c750:	1100a326 	beq	r2,r4,800c9e0 <__adddf3+0x680>
 800c754:	344d883a 	add	r6,r6,r17
 800c758:	3463803a 	cmpltu	r17,r6,r17
 800c75c:	414b883a 	add	r5,r8,r5
 800c760:	2c4b883a 	add	r5,r5,r17
 800c764:	282297fa 	slli	r17,r5,31
 800c768:	300cd07a 	srli	r6,r6,1
 800c76c:	280ad07a 	srli	r5,r5,1
 800c770:	1021883a 	mov	r16,r2
 800c774:	89a2b03a 	or	r17,r17,r6
 800c778:	003f1806 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800c77c:	0081ffc4 	movi	r2,2047
 800c780:	80bf411e 	bne	r16,r2,800c488 <__alt_data_end+0xfc00c488>
 800c784:	003f1506 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800c788:	80bff844 	addi	r2,r16,-31
 800c78c:	00c00804 	movi	r3,32
 800c790:	9884d83a 	srl	r2,r19,r2
 800c794:	28c04a26 	beq	r5,r3,800c8c0 <__adddf3+0x560>
 800c798:	00c00fc4 	movi	r3,63
 800c79c:	1c21c83a 	sub	r16,r3,r16
 800c7a0:	9c26983a 	sll	r19,r19,r16
 800c7a4:	9c62b03a 	or	r17,r19,r17
 800c7a8:	8822c03a 	cmpne	r17,r17,zero
 800c7ac:	88a2b03a 	or	r17,r17,r2
 800c7b0:	000b883a 	mov	r5,zero
 800c7b4:	0021883a 	mov	r16,zero
 800c7b8:	003fb406 	br	800c68c <__alt_data_end+0xfc00c68c>
 800c7bc:	18bff804 	addi	r2,r3,-32
 800c7c0:	01000804 	movi	r4,32
 800c7c4:	4084d83a 	srl	r2,r8,r2
 800c7c8:	19003f26 	beq	r3,r4,800c8c8 <__adddf3+0x568>
 800c7cc:	01001004 	movi	r4,64
 800c7d0:	20c7c83a 	sub	r3,r4,r3
 800c7d4:	40d0983a 	sll	r8,r8,r3
 800c7d8:	418cb03a 	or	r6,r8,r6
 800c7dc:	300cc03a 	cmpne	r6,r6,zero
 800c7e0:	308cb03a 	or	r6,r6,r2
 800c7e4:	0007883a 	mov	r3,zero
 800c7e8:	003f3406 	br	800c4bc <__alt_data_end+0xfc00c4bc>
 800c7ec:	80002326 	beq	r16,zero,800c87c <__adddf3+0x51c>
 800c7f0:	0101ffc4 	movi	r4,2047
 800c7f4:	11005e26 	beq	r2,r4,800c970 <__adddf3+0x610>
 800c7f8:	00c7c83a 	sub	r3,zero,r3
 800c7fc:	29402034 	orhi	r5,r5,128
 800c800:	01000e04 	movi	r4,56
 800c804:	20c07216 	blt	r4,r3,800c9d0 <__adddf3+0x670>
 800c808:	010007c4 	movi	r4,31
 800c80c:	20c0ce16 	blt	r4,r3,800cb48 <__adddf3+0x7e8>
 800c810:	01000804 	movi	r4,32
 800c814:	20c9c83a 	sub	r4,r4,r3
 800c818:	2914983a 	sll	r10,r5,r4
 800c81c:	88d2d83a 	srl	r9,r17,r3
 800c820:	8908983a 	sll	r4,r17,r4
 800c824:	28c6d83a 	srl	r3,r5,r3
 800c828:	5262b03a 	or	r17,r10,r9
 800c82c:	2008c03a 	cmpne	r4,r4,zero
 800c830:	8922b03a 	or	r17,r17,r4
 800c834:	3463c83a 	sub	r17,r6,r17
 800c838:	40c7c83a 	sub	r3,r8,r3
 800c83c:	344d803a 	cmpltu	r6,r6,r17
 800c840:	198bc83a 	sub	r5,r3,r6
 800c844:	1021883a 	mov	r16,r2
 800c848:	3825883a 	mov	r18,r7
 800c84c:	003f2006 	br	800c4d0 <__alt_data_end+0xfc00c4d0>
 800c850:	9886b03a 	or	r3,r19,r2
 800c854:	1800141e 	bne	r3,zero,800c8a8 <__adddf3+0x548>
 800c858:	0007883a 	mov	r3,zero
 800c85c:	000b883a 	mov	r5,zero
 800c860:	0023883a 	mov	r17,zero
 800c864:	0021883a 	mov	r16,zero
 800c868:	003f3c06 	br	800c55c <__alt_data_end+0xfc00c55c>
 800c86c:	418cb03a 	or	r6,r8,r6
 800c870:	300cc03a 	cmpne	r6,r6,zero
 800c874:	0011883a 	mov	r8,zero
 800c878:	003f5606 	br	800c5d4 <__alt_data_end+0xfc00c5d4>
 800c87c:	2c48b03a 	or	r4,r5,r17
 800c880:	20003b26 	beq	r4,zero,800c970 <__adddf3+0x610>
 800c884:	00c6303a 	nor	r3,zero,r3
 800c888:	1800371e 	bne	r3,zero,800c968 <__adddf3+0x608>
 800c88c:	3463c83a 	sub	r17,r6,r17
 800c890:	414bc83a 	sub	r5,r8,r5
 800c894:	344d803a 	cmpltu	r6,r6,r17
 800c898:	298bc83a 	sub	r5,r5,r6
 800c89c:	1021883a 	mov	r16,r2
 800c8a0:	3825883a 	mov	r18,r7
 800c8a4:	003f0a06 	br	800c4d0 <__alt_data_end+0xfc00c4d0>
 800c8a8:	1023883a 	mov	r17,r2
 800c8ac:	003f0d06 	br	800c4e4 <__alt_data_end+0xfc00c4e4>
 800c8b0:	0007883a 	mov	r3,zero
 800c8b4:	000b883a 	mov	r5,zero
 800c8b8:	0023883a 	mov	r17,zero
 800c8bc:	003f2706 	br	800c55c <__alt_data_end+0xfc00c55c>
 800c8c0:	0027883a 	mov	r19,zero
 800c8c4:	003fb706 	br	800c7a4 <__alt_data_end+0xfc00c7a4>
 800c8c8:	0011883a 	mov	r8,zero
 800c8cc:	003fc206 	br	800c7d8 <__alt_data_end+0xfc00c7d8>
 800c8d0:	2c44b03a 	or	r2,r5,r17
 800c8d4:	8000871e 	bne	r16,zero,800caf4 <__adddf3+0x794>
 800c8d8:	1000b126 	beq	r2,zero,800cba0 <__adddf3+0x840>
 800c8dc:	4184b03a 	or	r2,r8,r6
 800c8e0:	103ebe26 	beq	r2,zero,800c3dc <__alt_data_end+0xfc00c3dc>
 800c8e4:	3445883a 	add	r2,r6,r17
 800c8e8:	1463803a 	cmpltu	r17,r2,r17
 800c8ec:	414b883a 	add	r5,r8,r5
 800c8f0:	2c4b883a 	add	r5,r5,r17
 800c8f4:	28c0202c 	andhi	r3,r5,128
 800c8f8:	1023883a 	mov	r17,r2
 800c8fc:	183f6326 	beq	r3,zero,800c68c <__alt_data_end+0xfc00c68c>
 800c900:	00bfe034 	movhi	r2,65408
 800c904:	10bfffc4 	addi	r2,r2,-1
 800c908:	2021883a 	mov	r16,r4
 800c90c:	288a703a 	and	r5,r5,r2
 800c910:	003eb206 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800c914:	2c44b03a 	or	r2,r5,r17
 800c918:	8000251e 	bne	r16,zero,800c9b0 <__adddf3+0x650>
 800c91c:	10004b1e 	bne	r2,zero,800ca4c <__adddf3+0x6ec>
 800c920:	4184b03a 	or	r2,r8,r6
 800c924:	103fe226 	beq	r2,zero,800c8b0 <__alt_data_end+0xfc00c8b0>
 800c928:	400b883a 	mov	r5,r8
 800c92c:	3023883a 	mov	r17,r6
 800c930:	3825883a 	mov	r18,r7
 800c934:	003ea906 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800c938:	20bff804 	addi	r2,r4,-32
 800c93c:	01c00804 	movi	r7,32
 800c940:	4084d83a 	srl	r2,r8,r2
 800c944:	21c07e26 	beq	r4,r7,800cb40 <__adddf3+0x7e0>
 800c948:	01c01004 	movi	r7,64
 800c94c:	3909c83a 	sub	r4,r7,r4
 800c950:	4110983a 	sll	r8,r8,r4
 800c954:	418cb03a 	or	r6,r8,r6
 800c958:	300cc03a 	cmpne	r6,r6,zero
 800c95c:	308cb03a 	or	r6,r6,r2
 800c960:	0011883a 	mov	r8,zero
 800c964:	003f1b06 	br	800c5d4 <__alt_data_end+0xfc00c5d4>
 800c968:	0101ffc4 	movi	r4,2047
 800c96c:	113fa41e 	bne	r2,r4,800c800 <__alt_data_end+0xfc00c800>
 800c970:	400b883a 	mov	r5,r8
 800c974:	3023883a 	mov	r17,r6
 800c978:	1021883a 	mov	r16,r2
 800c97c:	3825883a 	mov	r18,r7
 800c980:	003e9606 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800c984:	80001a1e 	bne	r16,zero,800c9f0 <__adddf3+0x690>
 800c988:	2c4eb03a 	or	r7,r5,r17
 800c98c:	38005526 	beq	r7,zero,800cae4 <__adddf3+0x784>
 800c990:	0108303a 	nor	r4,zero,r4
 800c994:	2000511e 	bne	r4,zero,800cadc <__adddf3+0x77c>
 800c998:	89a3883a 	add	r17,r17,r6
 800c99c:	414b883a 	add	r5,r8,r5
 800c9a0:	898d803a 	cmpltu	r6,r17,r6
 800c9a4:	298b883a 	add	r5,r5,r6
 800c9a8:	1021883a 	mov	r16,r2
 800c9ac:	003f0e06 	br	800c5e8 <__alt_data_end+0xfc00c5e8>
 800c9b0:	1000341e 	bne	r2,zero,800ca84 <__adddf3+0x724>
 800c9b4:	4184b03a 	or	r2,r8,r6
 800c9b8:	10006f26 	beq	r2,zero,800cb78 <__adddf3+0x818>
 800c9bc:	400b883a 	mov	r5,r8
 800c9c0:	3023883a 	mov	r17,r6
 800c9c4:	3825883a 	mov	r18,r7
 800c9c8:	0401ffc4 	movi	r16,2047
 800c9cc:	003e8306 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800c9d0:	2c62b03a 	or	r17,r5,r17
 800c9d4:	8822c03a 	cmpne	r17,r17,zero
 800c9d8:	0007883a 	mov	r3,zero
 800c9dc:	003f9506 	br	800c834 <__alt_data_end+0xfc00c834>
 800c9e0:	1021883a 	mov	r16,r2
 800c9e4:	000b883a 	mov	r5,zero
 800c9e8:	0023883a 	mov	r17,zero
 800c9ec:	003edb06 	br	800c55c <__alt_data_end+0xfc00c55c>
 800c9f0:	01c1ffc4 	movi	r7,2047
 800c9f4:	11c03b26 	beq	r2,r7,800cae4 <__adddf3+0x784>
 800c9f8:	0109c83a 	sub	r4,zero,r4
 800c9fc:	29402034 	orhi	r5,r5,128
 800ca00:	01c00e04 	movi	r7,56
 800ca04:	39006216 	blt	r7,r4,800cb90 <__adddf3+0x830>
 800ca08:	01c007c4 	movi	r7,31
 800ca0c:	39006b16 	blt	r7,r4,800cbbc <__adddf3+0x85c>
 800ca10:	01c00804 	movi	r7,32
 800ca14:	390fc83a 	sub	r7,r7,r4
 800ca18:	29d4983a 	sll	r10,r5,r7
 800ca1c:	8912d83a 	srl	r9,r17,r4
 800ca20:	89ce983a 	sll	r7,r17,r7
 800ca24:	2908d83a 	srl	r4,r5,r4
 800ca28:	5262b03a 	or	r17,r10,r9
 800ca2c:	380ac03a 	cmpne	r5,r7,zero
 800ca30:	8962b03a 	or	r17,r17,r5
 800ca34:	89a3883a 	add	r17,r17,r6
 800ca38:	2211883a 	add	r8,r4,r8
 800ca3c:	898d803a 	cmpltu	r6,r17,r6
 800ca40:	418b883a 	add	r5,r8,r6
 800ca44:	1021883a 	mov	r16,r2
 800ca48:	003ee706 	br	800c5e8 <__alt_data_end+0xfc00c5e8>
 800ca4c:	4184b03a 	or	r2,r8,r6
 800ca50:	103e6226 	beq	r2,zero,800c3dc <__alt_data_end+0xfc00c3dc>
 800ca54:	8987c83a 	sub	r3,r17,r6
 800ca58:	88c9803a 	cmpltu	r4,r17,r3
 800ca5c:	2a05c83a 	sub	r2,r5,r8
 800ca60:	1105c83a 	sub	r2,r2,r4
 800ca64:	1100202c 	andhi	r4,r2,128
 800ca68:	203f0426 	beq	r4,zero,800c67c <__alt_data_end+0xfc00c67c>
 800ca6c:	3463c83a 	sub	r17,r6,r17
 800ca70:	414bc83a 	sub	r5,r8,r5
 800ca74:	344d803a 	cmpltu	r6,r6,r17
 800ca78:	298bc83a 	sub	r5,r5,r6
 800ca7c:	3825883a 	mov	r18,r7
 800ca80:	003e5606 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800ca84:	4184b03a 	or	r2,r8,r6
 800ca88:	10002b26 	beq	r2,zero,800cb38 <__adddf3+0x7d8>
 800ca8c:	2804d0fa 	srli	r2,r5,3
 800ca90:	8822d0fa 	srli	r17,r17,3
 800ca94:	280a977a 	slli	r5,r5,29
 800ca98:	10c0022c 	andhi	r3,r2,8
 800ca9c:	2c62b03a 	or	r17,r5,r17
 800caa0:	18000826 	beq	r3,zero,800cac4 <__adddf3+0x764>
 800caa4:	4008d0fa 	srli	r4,r8,3
 800caa8:	20c0022c 	andhi	r3,r4,8
 800caac:	1800051e 	bne	r3,zero,800cac4 <__adddf3+0x764>
 800cab0:	300cd0fa 	srli	r6,r6,3
 800cab4:	4010977a 	slli	r8,r8,29
 800cab8:	2005883a 	mov	r2,r4
 800cabc:	3825883a 	mov	r18,r7
 800cac0:	41a2b03a 	or	r17,r8,r6
 800cac4:	880ad77a 	srli	r5,r17,29
 800cac8:	100490fa 	slli	r2,r2,3
 800cacc:	882290fa 	slli	r17,r17,3
 800cad0:	0401ffc4 	movi	r16,2047
 800cad4:	288ab03a 	or	r5,r5,r2
 800cad8:	003e4006 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800cadc:	01c1ffc4 	movi	r7,2047
 800cae0:	11ffc71e 	bne	r2,r7,800ca00 <__alt_data_end+0xfc00ca00>
 800cae4:	400b883a 	mov	r5,r8
 800cae8:	3023883a 	mov	r17,r6
 800caec:	1021883a 	mov	r16,r2
 800caf0:	003e3a06 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800caf4:	10002d26 	beq	r2,zero,800cbac <__adddf3+0x84c>
 800caf8:	4184b03a 	or	r2,r8,r6
 800cafc:	10000e26 	beq	r2,zero,800cb38 <__adddf3+0x7d8>
 800cb00:	2804d0fa 	srli	r2,r5,3
 800cb04:	8822d0fa 	srli	r17,r17,3
 800cb08:	280a977a 	slli	r5,r5,29
 800cb0c:	10c0022c 	andhi	r3,r2,8
 800cb10:	2c62b03a 	or	r17,r5,r17
 800cb14:	183feb26 	beq	r3,zero,800cac4 <__alt_data_end+0xfc00cac4>
 800cb18:	4008d0fa 	srli	r4,r8,3
 800cb1c:	20c0022c 	andhi	r3,r4,8
 800cb20:	183fe81e 	bne	r3,zero,800cac4 <__alt_data_end+0xfc00cac4>
 800cb24:	300cd0fa 	srli	r6,r6,3
 800cb28:	4010977a 	slli	r8,r8,29
 800cb2c:	2005883a 	mov	r2,r4
 800cb30:	41a2b03a 	or	r17,r8,r6
 800cb34:	003fe306 	br	800cac4 <__alt_data_end+0xfc00cac4>
 800cb38:	0401ffc4 	movi	r16,2047
 800cb3c:	003e2706 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800cb40:	0011883a 	mov	r8,zero
 800cb44:	003f8306 	br	800c954 <__alt_data_end+0xfc00c954>
 800cb48:	193ff804 	addi	r4,r3,-32
 800cb4c:	02400804 	movi	r9,32
 800cb50:	2908d83a 	srl	r4,r5,r4
 800cb54:	1a402526 	beq	r3,r9,800cbec <__adddf3+0x88c>
 800cb58:	02401004 	movi	r9,64
 800cb5c:	48c7c83a 	sub	r3,r9,r3
 800cb60:	28ca983a 	sll	r5,r5,r3
 800cb64:	2c62b03a 	or	r17,r5,r17
 800cb68:	8822c03a 	cmpne	r17,r17,zero
 800cb6c:	8922b03a 	or	r17,r17,r4
 800cb70:	0007883a 	mov	r3,zero
 800cb74:	003f2f06 	br	800c834 <__alt_data_end+0xfc00c834>
 800cb78:	01402034 	movhi	r5,128
 800cb7c:	0007883a 	mov	r3,zero
 800cb80:	297fffc4 	addi	r5,r5,-1
 800cb84:	047ffe04 	movi	r17,-8
 800cb88:	0401ffc4 	movi	r16,2047
 800cb8c:	003e7306 	br	800c55c <__alt_data_end+0xfc00c55c>
 800cb90:	2c62b03a 	or	r17,r5,r17
 800cb94:	8822c03a 	cmpne	r17,r17,zero
 800cb98:	0009883a 	mov	r4,zero
 800cb9c:	003fa506 	br	800ca34 <__alt_data_end+0xfc00ca34>
 800cba0:	400b883a 	mov	r5,r8
 800cba4:	3023883a 	mov	r17,r6
 800cba8:	003e0c06 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800cbac:	400b883a 	mov	r5,r8
 800cbb0:	3023883a 	mov	r17,r6
 800cbb4:	0401ffc4 	movi	r16,2047
 800cbb8:	003e0806 	br	800c3dc <__alt_data_end+0xfc00c3dc>
 800cbbc:	21fff804 	addi	r7,r4,-32
 800cbc0:	02400804 	movi	r9,32
 800cbc4:	29ced83a 	srl	r7,r5,r7
 800cbc8:	22400a26 	beq	r4,r9,800cbf4 <__adddf3+0x894>
 800cbcc:	02401004 	movi	r9,64
 800cbd0:	4909c83a 	sub	r4,r9,r4
 800cbd4:	290a983a 	sll	r5,r5,r4
 800cbd8:	2c62b03a 	or	r17,r5,r17
 800cbdc:	8822c03a 	cmpne	r17,r17,zero
 800cbe0:	89e2b03a 	or	r17,r17,r7
 800cbe4:	0009883a 	mov	r4,zero
 800cbe8:	003f9206 	br	800ca34 <__alt_data_end+0xfc00ca34>
 800cbec:	000b883a 	mov	r5,zero
 800cbf0:	003fdc06 	br	800cb64 <__alt_data_end+0xfc00cb64>
 800cbf4:	000b883a 	mov	r5,zero
 800cbf8:	003ff706 	br	800cbd8 <__alt_data_end+0xfc00cbd8>

0800cbfc <__divdf3>:
 800cbfc:	defff004 	addi	sp,sp,-64
 800cc00:	dc800815 	stw	r18,32(sp)
 800cc04:	2824d53a 	srli	r18,r5,20
 800cc08:	dd800c15 	stw	r22,48(sp)
 800cc0c:	282cd7fa 	srli	r22,r5,31
 800cc10:	dc000615 	stw	r16,24(sp)
 800cc14:	04000434 	movhi	r16,16
 800cc18:	df000e15 	stw	fp,56(sp)
 800cc1c:	dd000a15 	stw	r20,40(sp)
 800cc20:	dcc00915 	stw	r19,36(sp)
 800cc24:	dc400715 	stw	r17,28(sp)
 800cc28:	843fffc4 	addi	r16,r16,-1
 800cc2c:	dfc00f15 	stw	ra,60(sp)
 800cc30:	ddc00d15 	stw	r23,52(sp)
 800cc34:	dd400b15 	stw	r21,44(sp)
 800cc38:	9481ffcc 	andi	r18,r18,2047
 800cc3c:	2029883a 	mov	r20,r4
 800cc40:	2027883a 	mov	r19,r4
 800cc44:	2c22703a 	and	r17,r5,r16
 800cc48:	b7003fcc 	andi	fp,r22,255
 800cc4c:	90005e26 	beq	r18,zero,800cdc8 <__divdf3+0x1cc>
 800cc50:	0081ffc4 	movi	r2,2047
 800cc54:	90803526 	beq	r18,r2,800cd2c <__divdf3+0x130>
 800cc58:	8c000434 	orhi	r16,r17,16
 800cc5c:	2004d77a 	srli	r2,r4,29
 800cc60:	802090fa 	slli	r16,r16,3
 800cc64:	202690fa 	slli	r19,r4,3
 800cc68:	94bf0044 	addi	r18,r18,-1023
 800cc6c:	80a2b03a 	or	r17,r16,r2
 800cc70:	0029883a 	mov	r20,zero
 800cc74:	0011883a 	mov	r8,zero
 800cc78:	380ad53a 	srli	r5,r7,20
 800cc7c:	382ed7fa 	srli	r23,r7,31
 800cc80:	04000434 	movhi	r16,16
 800cc84:	843fffc4 	addi	r16,r16,-1
 800cc88:	2941ffcc 	andi	r5,r5,2047
 800cc8c:	302b883a 	mov	r21,r6
 800cc90:	3c20703a 	and	r16,r7,r16
 800cc94:	ba403fcc 	andi	r9,r23,255
 800cc98:	28006726 	beq	r5,zero,800ce38 <__divdf3+0x23c>
 800cc9c:	0081ffc4 	movi	r2,2047
 800cca0:	28805f26 	beq	r5,r2,800ce20 <__divdf3+0x224>
 800cca4:	84000434 	orhi	r16,r16,16
 800cca8:	3004d77a 	srli	r2,r6,29
 800ccac:	802090fa 	slli	r16,r16,3
 800ccb0:	302a90fa 	slli	r21,r6,3
 800ccb4:	297f0044 	addi	r5,r5,-1023
 800ccb8:	80a0b03a 	or	r16,r16,r2
 800ccbc:	000f883a 	mov	r7,zero
 800ccc0:	3d06b03a 	or	r3,r7,r20
 800ccc4:	180690ba 	slli	r3,r3,2
 800ccc8:	00820074 	movhi	r2,2049
 800cccc:	10b33b04 	addi	r2,r2,-13076
 800ccd0:	1885883a 	add	r2,r3,r2
 800ccd4:	10800017 	ldw	r2,0(r2)
 800ccd8:	b5c8f03a 	xor	r4,r22,r23
 800ccdc:	200d883a 	mov	r6,r4
 800cce0:	25003fcc 	andi	r20,r4,255
 800cce4:	9165c83a 	sub	r18,r18,r5
 800cce8:	1000683a 	jmp	r2
 800ccec:	0800cf34 	orhi	zero,at,828
 800ccf0:	0800cd64 	muli	zero,at,821
 800ccf4:	0800cef8 	rdprs	zero,at,827
 800ccf8:	0800cd48 	cmpgei	zero,at,821
 800ccfc:	0800cef8 	rdprs	zero,at,827
 800cd00:	0800cecc 	andi	zero,at,827
 800cd04:	0800cef8 	rdprs	zero,at,827
 800cd08:	0800cd48 	cmpgei	zero,at,821
 800cd0c:	0800cd64 	muli	zero,at,821
 800cd10:	0800cd64 	muli	zero,at,821
 800cd14:	0800cecc 	andi	zero,at,827
 800cd18:	0800cd48 	cmpgei	zero,at,821
 800cd1c:	0800cd58 	cmpnei	zero,at,821
 800cd20:	0800cd58 	cmpnei	zero,at,821
 800cd24:	0800cd58 	cmpnei	zero,at,821
 800cd28:	0800cf08 	cmpgei	zero,at,828
 800cd2c:	8904b03a 	or	r2,r17,r4
 800cd30:	1000631e 	bne	r2,zero,800cec0 <__divdf3+0x2c4>
 800cd34:	05000204 	movi	r20,8
 800cd38:	0023883a 	mov	r17,zero
 800cd3c:	0027883a 	mov	r19,zero
 800cd40:	02000084 	movi	r8,2
 800cd44:	003fcc06 	br	800cc78 <__alt_data_end+0xfc00cc78>
 800cd48:	8023883a 	mov	r17,r16
 800cd4c:	a827883a 	mov	r19,r21
 800cd50:	4839883a 	mov	fp,r9
 800cd54:	3811883a 	mov	r8,r7
 800cd58:	00800084 	movi	r2,2
 800cd5c:	4081531e 	bne	r8,r2,800d2ac <__divdf3+0x6b0>
 800cd60:	e029883a 	mov	r20,fp
 800cd64:	a180004c 	andi	r6,r20,1
 800cd68:	0201ffc4 	movi	r8,2047
 800cd6c:	000b883a 	mov	r5,zero
 800cd70:	0027883a 	mov	r19,zero
 800cd74:	4010953a 	slli	r8,r8,20
 800cd78:	30c03fcc 	andi	r3,r6,255
 800cd7c:	04000434 	movhi	r16,16
 800cd80:	180697fa 	slli	r3,r3,31
 800cd84:	843fffc4 	addi	r16,r16,-1
 800cd88:	2c20703a 	and	r16,r5,r16
 800cd8c:	8220b03a 	or	r16,r16,r8
 800cd90:	80c6b03a 	or	r3,r16,r3
 800cd94:	9805883a 	mov	r2,r19
 800cd98:	dfc00f17 	ldw	ra,60(sp)
 800cd9c:	df000e17 	ldw	fp,56(sp)
 800cda0:	ddc00d17 	ldw	r23,52(sp)
 800cda4:	dd800c17 	ldw	r22,48(sp)
 800cda8:	dd400b17 	ldw	r21,44(sp)
 800cdac:	dd000a17 	ldw	r20,40(sp)
 800cdb0:	dcc00917 	ldw	r19,36(sp)
 800cdb4:	dc800817 	ldw	r18,32(sp)
 800cdb8:	dc400717 	ldw	r17,28(sp)
 800cdbc:	dc000617 	ldw	r16,24(sp)
 800cdc0:	dec01004 	addi	sp,sp,64
 800cdc4:	f800283a 	ret
 800cdc8:	8904b03a 	or	r2,r17,r4
 800cdcc:	10003726 	beq	r2,zero,800ceac <__divdf3+0x2b0>
 800cdd0:	88014d26 	beq	r17,zero,800d308 <__divdf3+0x70c>
 800cdd4:	8809883a 	mov	r4,r17
 800cdd8:	d9800215 	stw	r6,8(sp)
 800cddc:	d9c00515 	stw	r7,20(sp)
 800cde0:	800eaf80 	call	800eaf8 <__clzsi2>
 800cde4:	d9800217 	ldw	r6,8(sp)
 800cde8:	d9c00517 	ldw	r7,20(sp)
 800cdec:	1007883a 	mov	r3,r2
 800cdf0:	01000a04 	movi	r4,40
 800cdf4:	1cfffe04 	addi	r19,r3,-8
 800cdf8:	20c9c83a 	sub	r4,r4,r3
 800cdfc:	8cca983a 	sll	r5,r17,r19
 800ce00:	a108d83a 	srl	r4,r20,r4
 800ce04:	a4e6983a 	sll	r19,r20,r19
 800ce08:	2162b03a 	or	r17,r4,r5
 800ce0c:	04bf0344 	movi	r18,-1011
 800ce10:	90e5c83a 	sub	r18,r18,r3
 800ce14:	0029883a 	mov	r20,zero
 800ce18:	0011883a 	mov	r8,zero
 800ce1c:	003f9606 	br	800cc78 <__alt_data_end+0xfc00cc78>
 800ce20:	8184b03a 	or	r2,r16,r6
 800ce24:	10001f1e 	bne	r2,zero,800cea4 <__divdf3+0x2a8>
 800ce28:	0021883a 	mov	r16,zero
 800ce2c:	002b883a 	mov	r21,zero
 800ce30:	01c00084 	movi	r7,2
 800ce34:	003fa206 	br	800ccc0 <__alt_data_end+0xfc00ccc0>
 800ce38:	8184b03a 	or	r2,r16,r6
 800ce3c:	10001526 	beq	r2,zero,800ce94 <__divdf3+0x298>
 800ce40:	80013d26 	beq	r16,zero,800d338 <__divdf3+0x73c>
 800ce44:	8009883a 	mov	r4,r16
 800ce48:	d9800215 	stw	r6,8(sp)
 800ce4c:	da000315 	stw	r8,12(sp)
 800ce50:	da400415 	stw	r9,16(sp)
 800ce54:	800eaf80 	call	800eaf8 <__clzsi2>
 800ce58:	d9800217 	ldw	r6,8(sp)
 800ce5c:	da000317 	ldw	r8,12(sp)
 800ce60:	da400417 	ldw	r9,16(sp)
 800ce64:	1007883a 	mov	r3,r2
 800ce68:	01000a04 	movi	r4,40
 800ce6c:	1d7ffe04 	addi	r21,r3,-8
 800ce70:	20c9c83a 	sub	r4,r4,r3
 800ce74:	8560983a 	sll	r16,r16,r21
 800ce78:	3108d83a 	srl	r4,r6,r4
 800ce7c:	356a983a 	sll	r21,r6,r21
 800ce80:	2420b03a 	or	r16,r4,r16
 800ce84:	017f0344 	movi	r5,-1011
 800ce88:	28cbc83a 	sub	r5,r5,r3
 800ce8c:	000f883a 	mov	r7,zero
 800ce90:	003f8b06 	br	800ccc0 <__alt_data_end+0xfc00ccc0>
 800ce94:	0021883a 	mov	r16,zero
 800ce98:	002b883a 	mov	r21,zero
 800ce9c:	01c00044 	movi	r7,1
 800cea0:	003f8706 	br	800ccc0 <__alt_data_end+0xfc00ccc0>
 800cea4:	01c000c4 	movi	r7,3
 800cea8:	003f8506 	br	800ccc0 <__alt_data_end+0xfc00ccc0>
 800ceac:	05000104 	movi	r20,4
 800ceb0:	0023883a 	mov	r17,zero
 800ceb4:	0027883a 	mov	r19,zero
 800ceb8:	02000044 	movi	r8,1
 800cebc:	003f6e06 	br	800cc78 <__alt_data_end+0xfc00cc78>
 800cec0:	05000304 	movi	r20,12
 800cec4:	020000c4 	movi	r8,3
 800cec8:	003f6b06 	br	800cc78 <__alt_data_end+0xfc00cc78>
 800cecc:	01400434 	movhi	r5,16
 800ced0:	000d883a 	mov	r6,zero
 800ced4:	297fffc4 	addi	r5,r5,-1
 800ced8:	04ffffc4 	movi	r19,-1
 800cedc:	0201ffc4 	movi	r8,2047
 800cee0:	003fa406 	br	800cd74 <__alt_data_end+0xfc00cd74>
 800cee4:	043f0084 	movi	r16,-1022
 800cee8:	84a1c83a 	sub	r16,r16,r18
 800ceec:	00800e04 	movi	r2,56
 800cef0:	14014d0e 	bge	r2,r16,800d428 <__divdf3+0x82c>
 800cef4:	a180004c 	andi	r6,r20,1
 800cef8:	0011883a 	mov	r8,zero
 800cefc:	000b883a 	mov	r5,zero
 800cf00:	0027883a 	mov	r19,zero
 800cf04:	003f9b06 	br	800cd74 <__alt_data_end+0xfc00cd74>
 800cf08:	8880022c 	andhi	r2,r17,8
 800cf0c:	1000f026 	beq	r2,zero,800d2d0 <__divdf3+0x6d4>
 800cf10:	8080022c 	andhi	r2,r16,8
 800cf14:	1000ee1e 	bne	r2,zero,800d2d0 <__divdf3+0x6d4>
 800cf18:	00800434 	movhi	r2,16
 800cf1c:	81400234 	orhi	r5,r16,8
 800cf20:	10bfffc4 	addi	r2,r2,-1
 800cf24:	b80d883a 	mov	r6,r23
 800cf28:	288a703a 	and	r5,r5,r2
 800cf2c:	a827883a 	mov	r19,r21
 800cf30:	003fea06 	br	800cedc <__alt_data_end+0xfc00cedc>
 800cf34:	84411c36 	bltu	r16,r17,800d3a8 <__divdf3+0x7ac>
 800cf38:	8c011a26 	beq	r17,r16,800d3a4 <__divdf3+0x7a8>
 800cf3c:	94bfffc4 	addi	r18,r18,-1
 800cf40:	dcc00015 	stw	r19,0(sp)
 800cf44:	8811883a 	mov	r8,r17
 800cf48:	002d883a 	mov	r22,zero
 800cf4c:	a80cd63a 	srli	r6,r21,24
 800cf50:	8020923a 	slli	r16,r16,8
 800cf54:	a82a923a 	slli	r21,r21,8
 800cf58:	4009883a 	mov	r4,r8
 800cf5c:	342eb03a 	or	r23,r6,r16
 800cf60:	dd400115 	stw	r21,4(sp)
 800cf64:	b82ad43a 	srli	r21,r23,16
 800cf68:	da000315 	stw	r8,12(sp)
 800cf6c:	bcffffcc 	andi	r19,r23,65535
 800cf70:	a80b883a 	mov	r5,r21
 800cf74:	800c3280 	call	800c328 <__udivsi3>
 800cf78:	1009883a 	mov	r4,r2
 800cf7c:	980b883a 	mov	r5,r19
 800cf80:	1023883a 	mov	r17,r2
 800cf84:	800c3380 	call	800c338 <__mulsi3>
 800cf88:	da000317 	ldw	r8,12(sp)
 800cf8c:	a80b883a 	mov	r5,r21
 800cf90:	1039883a 	mov	fp,r2
 800cf94:	4009883a 	mov	r4,r8
 800cf98:	800c3300 	call	800c330 <__umodsi3>
 800cf9c:	d8c00017 	ldw	r3,0(sp)
 800cfa0:	1004943a 	slli	r2,r2,16
 800cfa4:	1810d43a 	srli	r8,r3,16
 800cfa8:	120eb03a 	or	r7,r2,r8
 800cfac:	3f00062e 	bgeu	r7,fp,800cfc8 <__divdf3+0x3cc>
 800cfb0:	3dcf883a 	add	r7,r7,r23
 800cfb4:	88bfffc4 	addi	r2,r17,-1
 800cfb8:	3dc10a36 	bltu	r7,r23,800d3e4 <__divdf3+0x7e8>
 800cfbc:	3f01092e 	bgeu	r7,fp,800d3e4 <__divdf3+0x7e8>
 800cfc0:	8c7fff84 	addi	r17,r17,-2
 800cfc4:	3dcf883a 	add	r7,r7,r23
 800cfc8:	3f39c83a 	sub	fp,r7,fp
 800cfcc:	e009883a 	mov	r4,fp
 800cfd0:	a80b883a 	mov	r5,r21
 800cfd4:	800c3280 	call	800c328 <__udivsi3>
 800cfd8:	1009883a 	mov	r4,r2
 800cfdc:	980b883a 	mov	r5,r19
 800cfe0:	1021883a 	mov	r16,r2
 800cfe4:	800c3380 	call	800c338 <__mulsi3>
 800cfe8:	e009883a 	mov	r4,fp
 800cfec:	a80b883a 	mov	r5,r21
 800cff0:	d8800315 	stw	r2,12(sp)
 800cff4:	800c3300 	call	800c330 <__umodsi3>
 800cff8:	d9000017 	ldw	r4,0(sp)
 800cffc:	1004943a 	slli	r2,r2,16
 800d000:	da000317 	ldw	r8,12(sp)
 800d004:	20ffffcc 	andi	r3,r4,65535
 800d008:	10ceb03a 	or	r7,r2,r3
 800d00c:	3a00062e 	bgeu	r7,r8,800d028 <__divdf3+0x42c>
 800d010:	3dcf883a 	add	r7,r7,r23
 800d014:	80bfffc4 	addi	r2,r16,-1
 800d018:	3dc0f036 	bltu	r7,r23,800d3dc <__divdf3+0x7e0>
 800d01c:	3a00ef2e 	bgeu	r7,r8,800d3dc <__divdf3+0x7e0>
 800d020:	843fff84 	addi	r16,r16,-2
 800d024:	3dcf883a 	add	r7,r7,r23
 800d028:	d8c00117 	ldw	r3,4(sp)
 800d02c:	8822943a 	slli	r17,r17,16
 800d030:	3a0fc83a 	sub	r7,r7,r8
 800d034:	1806d43a 	srli	r3,r3,16
 800d038:	8462b03a 	or	r17,r16,r17
 800d03c:	8affffcc 	andi	r11,r17,65535
 800d040:	d8c00015 	stw	r3,0(sp)
 800d044:	d8c00117 	ldw	r3,4(sp)
 800d048:	8820d43a 	srli	r16,r17,16
 800d04c:	5809883a 	mov	r4,r11
 800d050:	1f3fffcc 	andi	fp,r3,65535
 800d054:	e00b883a 	mov	r5,fp
 800d058:	d9c00515 	stw	r7,20(sp)
 800d05c:	dac00215 	stw	r11,8(sp)
 800d060:	800c3380 	call	800c338 <__mulsi3>
 800d064:	8009883a 	mov	r4,r16
 800d068:	e00b883a 	mov	r5,fp
 800d06c:	d8800415 	stw	r2,16(sp)
 800d070:	800c3380 	call	800c338 <__mulsi3>
 800d074:	d9400017 	ldw	r5,0(sp)
 800d078:	8009883a 	mov	r4,r16
 800d07c:	d8800315 	stw	r2,12(sp)
 800d080:	800c3380 	call	800c338 <__mulsi3>
 800d084:	dac00217 	ldw	r11,8(sp)
 800d088:	d9400017 	ldw	r5,0(sp)
 800d08c:	d8800215 	stw	r2,8(sp)
 800d090:	5809883a 	mov	r4,r11
 800d094:	800c3380 	call	800c338 <__mulsi3>
 800d098:	da400417 	ldw	r9,16(sp)
 800d09c:	da800317 	ldw	r10,12(sp)
 800d0a0:	d9c00517 	ldw	r7,20(sp)
 800d0a4:	480ad43a 	srli	r5,r9,16
 800d0a8:	5085883a 	add	r2,r10,r2
 800d0ac:	db000217 	ldw	r12,8(sp)
 800d0b0:	1151883a 	add	r8,r2,r5
 800d0b4:	4280022e 	bgeu	r8,r10,800d0c0 <__divdf3+0x4c4>
 800d0b8:	00800074 	movhi	r2,1
 800d0bc:	6099883a 	add	r12,r12,r2
 800d0c0:	400ad43a 	srli	r5,r8,16
 800d0c4:	4010943a 	slli	r8,r8,16
 800d0c8:	4c3fffcc 	andi	r16,r9,65535
 800d0cc:	6149883a 	add	r4,r12,r5
 800d0d0:	4411883a 	add	r8,r8,r16
 800d0d4:	3900a736 	bltu	r7,r4,800d374 <__divdf3+0x778>
 800d0d8:	3900c426 	beq	r7,r4,800d3ec <__divdf3+0x7f0>
 800d0dc:	3909c83a 	sub	r4,r7,r4
 800d0e0:	b221c83a 	sub	r16,r22,r8
 800d0e4:	b42d803a 	cmpltu	r22,r22,r16
 800d0e8:	25adc83a 	sub	r22,r4,r22
 800d0ec:	b5c0c626 	beq	r22,r23,800d408 <__divdf3+0x80c>
 800d0f0:	b009883a 	mov	r4,r22
 800d0f4:	a80b883a 	mov	r5,r21
 800d0f8:	800c3280 	call	800c328 <__udivsi3>
 800d0fc:	1009883a 	mov	r4,r2
 800d100:	980b883a 	mov	r5,r19
 800d104:	d8800315 	stw	r2,12(sp)
 800d108:	800c3380 	call	800c338 <__mulsi3>
 800d10c:	a80b883a 	mov	r5,r21
 800d110:	b009883a 	mov	r4,r22
 800d114:	d8800415 	stw	r2,16(sp)
 800d118:	800c3300 	call	800c330 <__umodsi3>
 800d11c:	1004943a 	slli	r2,r2,16
 800d120:	800ed43a 	srli	r7,r16,16
 800d124:	da400417 	ldw	r9,16(sp)
 800d128:	da000317 	ldw	r8,12(sp)
 800d12c:	11cab03a 	or	r5,r2,r7
 800d130:	2a40062e 	bgeu	r5,r9,800d14c <__divdf3+0x550>
 800d134:	2dcb883a 	add	r5,r5,r23
 800d138:	40bfffc4 	addi	r2,r8,-1
 800d13c:	2dc0b436 	bltu	r5,r23,800d410 <__divdf3+0x814>
 800d140:	2a40b32e 	bgeu	r5,r9,800d410 <__divdf3+0x814>
 800d144:	423fff84 	addi	r8,r8,-2
 800d148:	2dcb883a 	add	r5,r5,r23
 800d14c:	2a6dc83a 	sub	r22,r5,r9
 800d150:	b009883a 	mov	r4,r22
 800d154:	a80b883a 	mov	r5,r21
 800d158:	da000315 	stw	r8,12(sp)
 800d15c:	800c3280 	call	800c328 <__udivsi3>
 800d160:	980b883a 	mov	r5,r19
 800d164:	1009883a 	mov	r4,r2
 800d168:	d8800415 	stw	r2,16(sp)
 800d16c:	800c3380 	call	800c338 <__mulsi3>
 800d170:	b009883a 	mov	r4,r22
 800d174:	a80b883a 	mov	r5,r21
 800d178:	1027883a 	mov	r19,r2
 800d17c:	800c3300 	call	800c330 <__umodsi3>
 800d180:	1004943a 	slli	r2,r2,16
 800d184:	843fffcc 	andi	r16,r16,65535
 800d188:	da000317 	ldw	r8,12(sp)
 800d18c:	140eb03a 	or	r7,r2,r16
 800d190:	da400417 	ldw	r9,16(sp)
 800d194:	3cc0062e 	bgeu	r7,r19,800d1b0 <__divdf3+0x5b4>
 800d198:	3dcf883a 	add	r7,r7,r23
 800d19c:	48bfffc4 	addi	r2,r9,-1
 800d1a0:	3dc09d36 	bltu	r7,r23,800d418 <__divdf3+0x81c>
 800d1a4:	3cc09c2e 	bgeu	r7,r19,800d418 <__divdf3+0x81c>
 800d1a8:	4a7fff84 	addi	r9,r9,-2
 800d1ac:	3dcf883a 	add	r7,r7,r23
 800d1b0:	4010943a 	slli	r8,r8,16
 800d1b4:	3cebc83a 	sub	r21,r7,r19
 800d1b8:	e00b883a 	mov	r5,fp
 800d1bc:	4a26b03a 	or	r19,r9,r8
 800d1c0:	99ffffcc 	andi	r7,r19,65535
 800d1c4:	9820d43a 	srli	r16,r19,16
 800d1c8:	3809883a 	mov	r4,r7
 800d1cc:	d9c00515 	stw	r7,20(sp)
 800d1d0:	800c3380 	call	800c338 <__mulsi3>
 800d1d4:	8009883a 	mov	r4,r16
 800d1d8:	e00b883a 	mov	r5,fp
 800d1dc:	102d883a 	mov	r22,r2
 800d1e0:	800c3380 	call	800c338 <__mulsi3>
 800d1e4:	d9400017 	ldw	r5,0(sp)
 800d1e8:	8009883a 	mov	r4,r16
 800d1ec:	1039883a 	mov	fp,r2
 800d1f0:	800c3380 	call	800c338 <__mulsi3>
 800d1f4:	d9c00517 	ldw	r7,20(sp)
 800d1f8:	d9400017 	ldw	r5,0(sp)
 800d1fc:	1021883a 	mov	r16,r2
 800d200:	3809883a 	mov	r4,r7
 800d204:	800c3380 	call	800c338 <__mulsi3>
 800d208:	b008d43a 	srli	r4,r22,16
 800d20c:	e085883a 	add	r2,fp,r2
 800d210:	1109883a 	add	r4,r2,r4
 800d214:	2700022e 	bgeu	r4,fp,800d220 <__divdf3+0x624>
 800d218:	00800074 	movhi	r2,1
 800d21c:	80a1883a 	add	r16,r16,r2
 800d220:	200ad43a 	srli	r5,r4,16
 800d224:	2008943a 	slli	r4,r4,16
 800d228:	b5bfffcc 	andi	r22,r22,65535
 800d22c:	8145883a 	add	r2,r16,r5
 800d230:	2589883a 	add	r4,r4,r22
 800d234:	a8802c36 	bltu	r21,r2,800d2e8 <__divdf3+0x6ec>
 800d238:	a880a426 	beq	r21,r2,800d4cc <__divdf3+0x8d0>
 800d23c:	9cc00054 	ori	r19,r19,1
 800d240:	9200ffc4 	addi	r8,r18,1023
 800d244:	023f270e 	bge	zero,r8,800cee4 <__alt_data_end+0xfc00cee4>
 800d248:	988001cc 	andi	r2,r19,7
 800d24c:	10000726 	beq	r2,zero,800d26c <__divdf3+0x670>
 800d250:	990003cc 	andi	r4,r19,15
 800d254:	00800104 	movi	r2,4
 800d258:	20800426 	beq	r4,r2,800d26c <__divdf3+0x670>
 800d25c:	9885883a 	add	r2,r19,r2
 800d260:	14e7803a 	cmpltu	r19,r2,r19
 800d264:	8ce3883a 	add	r17,r17,r19
 800d268:	1027883a 	mov	r19,r2
 800d26c:	8880402c 	andhi	r2,r17,256
 800d270:	10000426 	beq	r2,zero,800d284 <__divdf3+0x688>
 800d274:	00bfc034 	movhi	r2,65280
 800d278:	10bfffc4 	addi	r2,r2,-1
 800d27c:	92010004 	addi	r8,r18,1024
 800d280:	88a2703a 	and	r17,r17,r2
 800d284:	0081ff84 	movi	r2,2046
 800d288:	123eb616 	blt	r2,r8,800cd64 <__alt_data_end+0xfc00cd64>
 800d28c:	9826d0fa 	srli	r19,r19,3
 800d290:	8804977a 	slli	r2,r17,29
 800d294:	8820927a 	slli	r16,r17,9
 800d298:	4201ffcc 	andi	r8,r8,2047
 800d29c:	14e6b03a 	or	r19,r2,r19
 800d2a0:	800ad33a 	srli	r5,r16,12
 800d2a4:	a180004c 	andi	r6,r20,1
 800d2a8:	003eb206 	br	800cd74 <__alt_data_end+0xfc00cd74>
 800d2ac:	008000c4 	movi	r2,3
 800d2b0:	4080ac26 	beq	r8,r2,800d564 <__divdf3+0x968>
 800d2b4:	00800044 	movi	r2,1
 800d2b8:	4080591e 	bne	r8,r2,800d420 <__divdf3+0x824>
 800d2bc:	e00d883a 	mov	r6,fp
 800d2c0:	0011883a 	mov	r8,zero
 800d2c4:	000b883a 	mov	r5,zero
 800d2c8:	0027883a 	mov	r19,zero
 800d2cc:	003ea906 	br	800cd74 <__alt_data_end+0xfc00cd74>
 800d2d0:	00800434 	movhi	r2,16
 800d2d4:	89400234 	orhi	r5,r17,8
 800d2d8:	10bfffc4 	addi	r2,r2,-1
 800d2dc:	b00d883a 	mov	r6,r22
 800d2e0:	288a703a 	and	r5,r5,r2
 800d2e4:	003efd06 	br	800cedc <__alt_data_end+0xfc00cedc>
 800d2e8:	adcf883a 	add	r7,r21,r23
 800d2ec:	997fffc4 	addi	r5,r19,-1
 800d2f0:	3dc0412e 	bgeu	r7,r23,800d3f8 <__divdf3+0x7fc>
 800d2f4:	2827883a 	mov	r19,r5
 800d2f8:	38bfd01e 	bne	r7,r2,800d23c <__alt_data_end+0xfc00d23c>
 800d2fc:	d8c00117 	ldw	r3,4(sp)
 800d300:	193fce1e 	bne	r3,r4,800d23c <__alt_data_end+0xfc00d23c>
 800d304:	003fce06 	br	800d240 <__alt_data_end+0xfc00d240>
 800d308:	d9800215 	stw	r6,8(sp)
 800d30c:	d9c00515 	stw	r7,20(sp)
 800d310:	800eaf80 	call	800eaf8 <__clzsi2>
 800d314:	10c00804 	addi	r3,r2,32
 800d318:	010009c4 	movi	r4,39
 800d31c:	d9800217 	ldw	r6,8(sp)
 800d320:	d9c00517 	ldw	r7,20(sp)
 800d324:	20feb20e 	bge	r4,r3,800cdf0 <__alt_data_end+0xfc00cdf0>
 800d328:	117ffe04 	addi	r5,r2,-8
 800d32c:	a162983a 	sll	r17,r20,r5
 800d330:	0027883a 	mov	r19,zero
 800d334:	003eb506 	br	800ce0c <__alt_data_end+0xfc00ce0c>
 800d338:	3009883a 	mov	r4,r6
 800d33c:	d9800215 	stw	r6,8(sp)
 800d340:	da000315 	stw	r8,12(sp)
 800d344:	da400415 	stw	r9,16(sp)
 800d348:	800eaf80 	call	800eaf8 <__clzsi2>
 800d34c:	10c00804 	addi	r3,r2,32
 800d350:	010009c4 	movi	r4,39
 800d354:	d9800217 	ldw	r6,8(sp)
 800d358:	da000317 	ldw	r8,12(sp)
 800d35c:	da400417 	ldw	r9,16(sp)
 800d360:	20fec10e 	bge	r4,r3,800ce68 <__alt_data_end+0xfc00ce68>
 800d364:	10bffe04 	addi	r2,r2,-8
 800d368:	a8a0983a 	sll	r16,r21,r2
 800d36c:	002b883a 	mov	r21,zero
 800d370:	003ec406 	br	800ce84 <__alt_data_end+0xfc00ce84>
 800d374:	d8c00117 	ldw	r3,4(sp)
 800d378:	b0ed883a 	add	r22,r22,r3
 800d37c:	b0c5803a 	cmpltu	r2,r22,r3
 800d380:	15c5883a 	add	r2,r2,r23
 800d384:	11cf883a 	add	r7,r2,r7
 800d388:	88bfffc4 	addi	r2,r17,-1
 800d38c:	b9c00d2e 	bgeu	r23,r7,800d3c4 <__divdf3+0x7c8>
 800d390:	39003f36 	bltu	r7,r4,800d490 <__divdf3+0x894>
 800d394:	21c06a26 	beq	r4,r7,800d540 <__divdf3+0x944>
 800d398:	3909c83a 	sub	r4,r7,r4
 800d39c:	1023883a 	mov	r17,r2
 800d3a0:	003f4f06 	br	800d0e0 <__alt_data_end+0xfc00d0e0>
 800d3a4:	9d7ee536 	bltu	r19,r21,800cf3c <__alt_data_end+0xfc00cf3c>
 800d3a8:	982ed07a 	srli	r23,r19,1
 800d3ac:	880497fa 	slli	r2,r17,31
 800d3b0:	8810d07a 	srli	r8,r17,1
 800d3b4:	982c97fa 	slli	r22,r19,31
 800d3b8:	b884b03a 	or	r2,r23,r2
 800d3bc:	d8800015 	stw	r2,0(sp)
 800d3c0:	003ee206 	br	800cf4c <__alt_data_end+0xfc00cf4c>
 800d3c4:	3dfff41e 	bne	r7,r23,800d398 <__alt_data_end+0xfc00d398>
 800d3c8:	d8c00117 	ldw	r3,4(sp)
 800d3cc:	b0fff02e 	bgeu	r22,r3,800d390 <__alt_data_end+0xfc00d390>
 800d3d0:	b909c83a 	sub	r4,r23,r4
 800d3d4:	1023883a 	mov	r17,r2
 800d3d8:	003f4106 	br	800d0e0 <__alt_data_end+0xfc00d0e0>
 800d3dc:	1021883a 	mov	r16,r2
 800d3e0:	003f1106 	br	800d028 <__alt_data_end+0xfc00d028>
 800d3e4:	1023883a 	mov	r17,r2
 800d3e8:	003ef706 	br	800cfc8 <__alt_data_end+0xfc00cfc8>
 800d3ec:	b23fe136 	bltu	r22,r8,800d374 <__alt_data_end+0xfc00d374>
 800d3f0:	0009883a 	mov	r4,zero
 800d3f4:	003f3a06 	br	800d0e0 <__alt_data_end+0xfc00d0e0>
 800d3f8:	38802c36 	bltu	r7,r2,800d4ac <__divdf3+0x8b0>
 800d3fc:	11c05326 	beq	r2,r7,800d54c <__divdf3+0x950>
 800d400:	2827883a 	mov	r19,r5
 800d404:	003f8d06 	br	800d23c <__alt_data_end+0xfc00d23c>
 800d408:	04ffffc4 	movi	r19,-1
 800d40c:	003f8c06 	br	800d240 <__alt_data_end+0xfc00d240>
 800d410:	1011883a 	mov	r8,r2
 800d414:	003f4d06 	br	800d14c <__alt_data_end+0xfc00d14c>
 800d418:	1013883a 	mov	r9,r2
 800d41c:	003f6406 	br	800d1b0 <__alt_data_end+0xfc00d1b0>
 800d420:	e029883a 	mov	r20,fp
 800d424:	003f8606 	br	800d240 <__alt_data_end+0xfc00d240>
 800d428:	008007c4 	movi	r2,31
 800d42c:	14002a16 	blt	r2,r16,800d4d8 <__divdf3+0x8dc>
 800d430:	91410784 	addi	r5,r18,1054
 800d434:	9c0cd83a 	srl	r6,r19,r16
 800d438:	8948983a 	sll	r4,r17,r5
 800d43c:	9944983a 	sll	r2,r19,r5
 800d440:	8c20d83a 	srl	r16,r17,r16
 800d444:	3108b03a 	or	r4,r6,r4
 800d448:	1004c03a 	cmpne	r2,r2,zero
 800d44c:	2084b03a 	or	r2,r4,r2
 800d450:	110001cc 	andi	r4,r2,7
 800d454:	20000726 	beq	r4,zero,800d474 <__divdf3+0x878>
 800d458:	114003cc 	andi	r5,r2,15
 800d45c:	01000104 	movi	r4,4
 800d460:	29000426 	beq	r5,r4,800d474 <__divdf3+0x878>
 800d464:	11000104 	addi	r4,r2,4
 800d468:	2085803a 	cmpltu	r2,r4,r2
 800d46c:	80a1883a 	add	r16,r16,r2
 800d470:	2005883a 	mov	r2,r4
 800d474:	8100202c 	andhi	r4,r16,128
 800d478:	20002d26 	beq	r4,zero,800d530 <__divdf3+0x934>
 800d47c:	a180004c 	andi	r6,r20,1
 800d480:	02000044 	movi	r8,1
 800d484:	000b883a 	mov	r5,zero
 800d488:	0027883a 	mov	r19,zero
 800d48c:	003e3906 	br	800cd74 <__alt_data_end+0xfc00cd74>
 800d490:	d8c00117 	ldw	r3,4(sp)
 800d494:	8c7fff84 	addi	r17,r17,-2
 800d498:	b0ed883a 	add	r22,r22,r3
 800d49c:	b0c5803a 	cmpltu	r2,r22,r3
 800d4a0:	15c5883a 	add	r2,r2,r23
 800d4a4:	11cf883a 	add	r7,r2,r7
 800d4a8:	003f0c06 	br	800d0dc <__alt_data_end+0xfc00d0dc>
 800d4ac:	d8c00117 	ldw	r3,4(sp)
 800d4b0:	997fff84 	addi	r5,r19,-2
 800d4b4:	18d1883a 	add	r8,r3,r3
 800d4b8:	40c7803a 	cmpltu	r3,r8,r3
 800d4bc:	1dcd883a 	add	r6,r3,r23
 800d4c0:	398f883a 	add	r7,r7,r6
 800d4c4:	da000115 	stw	r8,4(sp)
 800d4c8:	003f8a06 	br	800d2f4 <__alt_data_end+0xfc00d2f4>
 800d4cc:	203f861e 	bne	r4,zero,800d2e8 <__alt_data_end+0xfc00d2e8>
 800d4d0:	d8000115 	stw	zero,4(sp)
 800d4d4:	003f8906 	br	800d2fc <__alt_data_end+0xfc00d2fc>
 800d4d8:	00bef884 	movi	r2,-1054
 800d4dc:	1485c83a 	sub	r2,r2,r18
 800d4e0:	01000804 	movi	r4,32
 800d4e4:	8884d83a 	srl	r2,r17,r2
 800d4e8:	81001c26 	beq	r16,r4,800d55c <__divdf3+0x960>
 800d4ec:	91010f84 	addi	r4,r18,1086
 800d4f0:	8908983a 	sll	r4,r17,r4
 800d4f4:	24c8b03a 	or	r4,r4,r19
 800d4f8:	2008c03a 	cmpne	r4,r4,zero
 800d4fc:	2084b03a 	or	r2,r4,r2
 800d500:	140001cc 	andi	r16,r2,7
 800d504:	8000061e 	bne	r16,zero,800d520 <__divdf3+0x924>
 800d508:	000b883a 	mov	r5,zero
 800d50c:	1004d0fa 	srli	r2,r2,3
 800d510:	a180004c 	andi	r6,r20,1
 800d514:	0011883a 	mov	r8,zero
 800d518:	1426b03a 	or	r19,r2,r16
 800d51c:	003e1506 	br	800cd74 <__alt_data_end+0xfc00cd74>
 800d520:	114003cc 	andi	r5,r2,15
 800d524:	01000104 	movi	r4,4
 800d528:	0021883a 	mov	r16,zero
 800d52c:	293fcd1e 	bne	r5,r4,800d464 <__alt_data_end+0xfc00d464>
 800d530:	800a927a 	slli	r5,r16,9
 800d534:	8020977a 	slli	r16,r16,29
 800d538:	280ad33a 	srli	r5,r5,12
 800d53c:	003ff306 	br	800d50c <__alt_data_end+0xfc00d50c>
 800d540:	b23fd336 	bltu	r22,r8,800d490 <__alt_data_end+0xfc00d490>
 800d544:	1023883a 	mov	r17,r2
 800d548:	003fa906 	br	800d3f0 <__alt_data_end+0xfc00d3f0>
 800d54c:	d8c00117 	ldw	r3,4(sp)
 800d550:	193fd636 	bltu	r3,r4,800d4ac <__alt_data_end+0xfc00d4ac>
 800d554:	2827883a 	mov	r19,r5
 800d558:	003f6806 	br	800d2fc <__alt_data_end+0xfc00d2fc>
 800d55c:	0009883a 	mov	r4,zero
 800d560:	003fe406 	br	800d4f4 <__alt_data_end+0xfc00d4f4>
 800d564:	00800434 	movhi	r2,16
 800d568:	89400234 	orhi	r5,r17,8
 800d56c:	10bfffc4 	addi	r2,r2,-1
 800d570:	e00d883a 	mov	r6,fp
 800d574:	288a703a 	and	r5,r5,r2
 800d578:	003e5806 	br	800cedc <__alt_data_end+0xfc00cedc>

0800d57c <__eqdf2>:
 800d57c:	2804d53a 	srli	r2,r5,20
 800d580:	3806d53a 	srli	r3,r7,20
 800d584:	02000434 	movhi	r8,16
 800d588:	423fffc4 	addi	r8,r8,-1
 800d58c:	1081ffcc 	andi	r2,r2,2047
 800d590:	0241ffc4 	movi	r9,2047
 800d594:	2a14703a 	and	r10,r5,r8
 800d598:	18c1ffcc 	andi	r3,r3,2047
 800d59c:	3a10703a 	and	r8,r7,r8
 800d5a0:	280ad7fa 	srli	r5,r5,31
 800d5a4:	380ed7fa 	srli	r7,r7,31
 800d5a8:	12400f26 	beq	r2,r9,800d5e8 <__eqdf2+0x6c>
 800d5ac:	0241ffc4 	movi	r9,2047
 800d5b0:	1a400326 	beq	r3,r9,800d5c0 <__eqdf2+0x44>
 800d5b4:	10c00526 	beq	r2,r3,800d5cc <__eqdf2+0x50>
 800d5b8:	00800044 	movi	r2,1
 800d5bc:	f800283a 	ret
 800d5c0:	4192b03a 	or	r9,r8,r6
 800d5c4:	483ffc1e 	bne	r9,zero,800d5b8 <__alt_data_end+0xfc00d5b8>
 800d5c8:	10fffb1e 	bne	r2,r3,800d5b8 <__alt_data_end+0xfc00d5b8>
 800d5cc:	523ffa1e 	bne	r10,r8,800d5b8 <__alt_data_end+0xfc00d5b8>
 800d5d0:	21bff91e 	bne	r4,r6,800d5b8 <__alt_data_end+0xfc00d5b8>
 800d5d4:	29c00826 	beq	r5,r7,800d5f8 <__eqdf2+0x7c>
 800d5d8:	103ff71e 	bne	r2,zero,800d5b8 <__alt_data_end+0xfc00d5b8>
 800d5dc:	5104b03a 	or	r2,r10,r4
 800d5e0:	1004c03a 	cmpne	r2,r2,zero
 800d5e4:	f800283a 	ret
 800d5e8:	5112b03a 	or	r9,r10,r4
 800d5ec:	483fef26 	beq	r9,zero,800d5ac <__alt_data_end+0xfc00d5ac>
 800d5f0:	00800044 	movi	r2,1
 800d5f4:	f800283a 	ret
 800d5f8:	0005883a 	mov	r2,zero
 800d5fc:	f800283a 	ret

0800d600 <__gedf2>:
 800d600:	2804d53a 	srli	r2,r5,20
 800d604:	3806d53a 	srli	r3,r7,20
 800d608:	02000434 	movhi	r8,16
 800d60c:	423fffc4 	addi	r8,r8,-1
 800d610:	0241ffc4 	movi	r9,2047
 800d614:	1081ffcc 	andi	r2,r2,2047
 800d618:	2a14703a 	and	r10,r5,r8
 800d61c:	1a46703a 	and	r3,r3,r9
 800d620:	3a10703a 	and	r8,r7,r8
 800d624:	280ad7fa 	srli	r5,r5,31
 800d628:	380ed7fa 	srli	r7,r7,31
 800d62c:	12400b26 	beq	r2,r9,800d65c <__gedf2+0x5c>
 800d630:	1a401626 	beq	r3,r9,800d68c <__gedf2+0x8c>
 800d634:	10000c1e 	bne	r2,zero,800d668 <__gedf2+0x68>
 800d638:	5112b03a 	or	r9,r10,r4
 800d63c:	4813003a 	cmpeq	r9,r9,zero
 800d640:	4817883a 	mov	r11,r9
 800d644:	18000c1e 	bne	r3,zero,800d678 <__gedf2+0x78>
 800d648:	4198b03a 	or	r12,r8,r6
 800d64c:	60000a1e 	bne	r12,zero,800d678 <__gedf2+0x78>
 800d650:	48001326 	beq	r9,zero,800d6a0 <__gedf2+0xa0>
 800d654:	0005883a 	mov	r2,zero
 800d658:	f800283a 	ret
 800d65c:	5112b03a 	or	r9,r10,r4
 800d660:	4800191e 	bne	r9,zero,800d6c8 <__gedf2+0xc8>
 800d664:	18800926 	beq	r3,r2,800d68c <__gedf2+0x8c>
 800d668:	18000b1e 	bne	r3,zero,800d698 <__gedf2+0x98>
 800d66c:	4192b03a 	or	r9,r8,r6
 800d670:	0017883a 	mov	r11,zero
 800d674:	48000a26 	beq	r9,zero,800d6a0 <__gedf2+0xa0>
 800d678:	39c03fcc 	andi	r7,r7,255
 800d67c:	58000726 	beq	r11,zero,800d69c <__gedf2+0x9c>
 800d680:	3800081e 	bne	r7,zero,800d6a4 <__gedf2+0xa4>
 800d684:	00bfffc4 	movi	r2,-1
 800d688:	f800283a 	ret
 800d68c:	4192b03a 	or	r9,r8,r6
 800d690:	48000d1e 	bne	r9,zero,800d6c8 <__gedf2+0xc8>
 800d694:	103fe826 	beq	r2,zero,800d638 <__alt_data_end+0xfc00d638>
 800d698:	39c03fcc 	andi	r7,r7,255
 800d69c:	29c00326 	beq	r5,r7,800d6ac <__gedf2+0xac>
 800d6a0:	283ff81e 	bne	r5,zero,800d684 <__alt_data_end+0xfc00d684>
 800d6a4:	00800044 	movi	r2,1
 800d6a8:	f800283a 	ret
 800d6ac:	18bffc16 	blt	r3,r2,800d6a0 <__alt_data_end+0xfc00d6a0>
 800d6b0:	10c00316 	blt	r2,r3,800d6c0 <__gedf2+0xc0>
 800d6b4:	42bffa36 	bltu	r8,r10,800d6a0 <__alt_data_end+0xfc00d6a0>
 800d6b8:	52000526 	beq	r10,r8,800d6d0 <__gedf2+0xd0>
 800d6bc:	523fe52e 	bgeu	r10,r8,800d654 <__alt_data_end+0xfc00d654>
 800d6c0:	283ff026 	beq	r5,zero,800d684 <__alt_data_end+0xfc00d684>
 800d6c4:	003ff706 	br	800d6a4 <__alt_data_end+0xfc00d6a4>
 800d6c8:	00bfff84 	movi	r2,-2
 800d6cc:	f800283a 	ret
 800d6d0:	313ff336 	bltu	r6,r4,800d6a0 <__alt_data_end+0xfc00d6a0>
 800d6d4:	21bfdf2e 	bgeu	r4,r6,800d654 <__alt_data_end+0xfc00d654>
 800d6d8:	283fea26 	beq	r5,zero,800d684 <__alt_data_end+0xfc00d684>
 800d6dc:	003ff106 	br	800d6a4 <__alt_data_end+0xfc00d6a4>

0800d6e0 <__ledf2>:
 800d6e0:	2804d53a 	srli	r2,r5,20
 800d6e4:	3810d53a 	srli	r8,r7,20
 800d6e8:	00c00434 	movhi	r3,16
 800d6ec:	18ffffc4 	addi	r3,r3,-1
 800d6f0:	0241ffc4 	movi	r9,2047
 800d6f4:	1081ffcc 	andi	r2,r2,2047
 800d6f8:	28d4703a 	and	r10,r5,r3
 800d6fc:	4250703a 	and	r8,r8,r9
 800d700:	38c6703a 	and	r3,r7,r3
 800d704:	280ad7fa 	srli	r5,r5,31
 800d708:	380ed7fa 	srli	r7,r7,31
 800d70c:	12400b26 	beq	r2,r9,800d73c <__ledf2+0x5c>
 800d710:	42401926 	beq	r8,r9,800d778 <__ledf2+0x98>
 800d714:	10000c1e 	bne	r2,zero,800d748 <__ledf2+0x68>
 800d718:	5112b03a 	or	r9,r10,r4
 800d71c:	4813003a 	cmpeq	r9,r9,zero
 800d720:	4817883a 	mov	r11,r9
 800d724:	40000f26 	beq	r8,zero,800d764 <__ledf2+0x84>
 800d728:	39c03fcc 	andi	r7,r7,255
 800d72c:	58001826 	beq	r11,zero,800d790 <__ledf2+0xb0>
 800d730:	38000a1e 	bne	r7,zero,800d75c <__ledf2+0x7c>
 800d734:	00bfffc4 	movi	r2,-1
 800d738:	f800283a 	ret
 800d73c:	5112b03a 	or	r9,r10,r4
 800d740:	48000f1e 	bne	r9,zero,800d780 <__ledf2+0xa0>
 800d744:	40800c26 	beq	r8,r2,800d778 <__ledf2+0x98>
 800d748:	4000101e 	bne	r8,zero,800d78c <__ledf2+0xac>
 800d74c:	1992b03a 	or	r9,r3,r6
 800d750:	0017883a 	mov	r11,zero
 800d754:	483ff41e 	bne	r9,zero,800d728 <__alt_data_end+0xfc00d728>
 800d758:	283ff61e 	bne	r5,zero,800d734 <__alt_data_end+0xfc00d734>
 800d75c:	00800044 	movi	r2,1
 800d760:	f800283a 	ret
 800d764:	1998b03a 	or	r12,r3,r6
 800d768:	603fef1e 	bne	r12,zero,800d728 <__alt_data_end+0xfc00d728>
 800d76c:	483ffa26 	beq	r9,zero,800d758 <__alt_data_end+0xfc00d758>
 800d770:	0005883a 	mov	r2,zero
 800d774:	f800283a 	ret
 800d778:	1992b03a 	or	r9,r3,r6
 800d77c:	48000226 	beq	r9,zero,800d788 <__ledf2+0xa8>
 800d780:	00800084 	movi	r2,2
 800d784:	f800283a 	ret
 800d788:	103fe326 	beq	r2,zero,800d718 <__alt_data_end+0xfc00d718>
 800d78c:	39c03fcc 	andi	r7,r7,255
 800d790:	29fff11e 	bne	r5,r7,800d758 <__alt_data_end+0xfc00d758>
 800d794:	40bff016 	blt	r8,r2,800d758 <__alt_data_end+0xfc00d758>
 800d798:	12000316 	blt	r2,r8,800d7a8 <__ledf2+0xc8>
 800d79c:	1abfee36 	bltu	r3,r10,800d758 <__alt_data_end+0xfc00d758>
 800d7a0:	50c00326 	beq	r10,r3,800d7b0 <__ledf2+0xd0>
 800d7a4:	50fff22e 	bgeu	r10,r3,800d770 <__alt_data_end+0xfc00d770>
 800d7a8:	283fe226 	beq	r5,zero,800d734 <__alt_data_end+0xfc00d734>
 800d7ac:	003feb06 	br	800d75c <__alt_data_end+0xfc00d75c>
 800d7b0:	313fe936 	bltu	r6,r4,800d758 <__alt_data_end+0xfc00d758>
 800d7b4:	21bfee2e 	bgeu	r4,r6,800d770 <__alt_data_end+0xfc00d770>
 800d7b8:	283fde26 	beq	r5,zero,800d734 <__alt_data_end+0xfc00d734>
 800d7bc:	003fe706 	br	800d75c <__alt_data_end+0xfc00d75c>

0800d7c0 <__muldf3>:
 800d7c0:	deffee04 	addi	sp,sp,-72
 800d7c4:	dd000c15 	stw	r20,48(sp)
 800d7c8:	2828d53a 	srli	r20,r5,20
 800d7cc:	dd400d15 	stw	r21,52(sp)
 800d7d0:	282ad7fa 	srli	r21,r5,31
 800d7d4:	dc000815 	stw	r16,32(sp)
 800d7d8:	04000434 	movhi	r16,16
 800d7dc:	ddc00f15 	stw	r23,60(sp)
 800d7e0:	dcc00b15 	stw	r19,44(sp)
 800d7e4:	dc800a15 	stw	r18,40(sp)
 800d7e8:	843fffc4 	addi	r16,r16,-1
 800d7ec:	dfc01115 	stw	ra,68(sp)
 800d7f0:	df001015 	stw	fp,64(sp)
 800d7f4:	dd800e15 	stw	r22,56(sp)
 800d7f8:	dc400915 	stw	r17,36(sp)
 800d7fc:	a501ffcc 	andi	r20,r20,2047
 800d800:	2025883a 	mov	r18,r4
 800d804:	202f883a 	mov	r23,r4
 800d808:	2c20703a 	and	r16,r5,r16
 800d80c:	a827883a 	mov	r19,r21
 800d810:	aa403fcc 	andi	r9,r21,255
 800d814:	a0005926 	beq	r20,zero,800d97c <__muldf3+0x1bc>
 800d818:	0081ffc4 	movi	r2,2047
 800d81c:	a0803426 	beq	r20,r2,800d8f0 <__muldf3+0x130>
 800d820:	84000434 	orhi	r16,r16,16
 800d824:	2004d77a 	srli	r2,r4,29
 800d828:	802090fa 	slli	r16,r16,3
 800d82c:	202e90fa 	slli	r23,r4,3
 800d830:	a53f0044 	addi	r20,r20,-1023
 800d834:	80a0b03a 	or	r16,r16,r2
 800d838:	000b883a 	mov	r5,zero
 800d83c:	0039883a 	mov	fp,zero
 800d840:	3806d53a 	srli	r3,r7,20
 800d844:	382cd7fa 	srli	r22,r7,31
 800d848:	00800434 	movhi	r2,16
 800d84c:	10bfffc4 	addi	r2,r2,-1
 800d850:	18c1ffcc 	andi	r3,r3,2047
 800d854:	3025883a 	mov	r18,r6
 800d858:	38a2703a 	and	r17,r7,r2
 800d85c:	b2803fcc 	andi	r10,r22,255
 800d860:	18006426 	beq	r3,zero,800d9f4 <__muldf3+0x234>
 800d864:	0081ffc4 	movi	r2,2047
 800d868:	18805c26 	beq	r3,r2,800d9dc <__muldf3+0x21c>
 800d86c:	8c400434 	orhi	r17,r17,16
 800d870:	3004d77a 	srli	r2,r6,29
 800d874:	882290fa 	slli	r17,r17,3
 800d878:	302490fa 	slli	r18,r6,3
 800d87c:	18ff0044 	addi	r3,r3,-1023
 800d880:	88a2b03a 	or	r17,r17,r2
 800d884:	000f883a 	mov	r7,zero
 800d888:	394ab03a 	or	r5,r7,r5
 800d88c:	280a90ba 	slli	r5,r5,2
 800d890:	00820074 	movhi	r2,2049
 800d894:	10b62c04 	addi	r2,r2,-10064
 800d898:	288b883a 	add	r5,r5,r2
 800d89c:	28800017 	ldw	r2,0(r5)
 800d8a0:	a0c7883a 	add	r3,r20,r3
 800d8a4:	b54cf03a 	xor	r6,r22,r21
 800d8a8:	1a000044 	addi	r8,r3,1
 800d8ac:	1000683a 	jmp	r2
 800d8b0:	0800daf4 	orhi	zero,at,875
 800d8b4:	0800dae0 	cmpeqi	zero,at,875
 800d8b8:	0800dae0 	cmpeqi	zero,at,875
 800d8bc:	0800dacc 	andi	zero,at,875
 800d8c0:	0800d90c 	andi	zero,at,868
 800d8c4:	0800d90c 	andi	zero,at,868
 800d8c8:	0800dab4 	orhi	zero,at,874
 800d8cc:	0800dacc 	andi	zero,at,875
 800d8d0:	0800d90c 	andi	zero,at,868
 800d8d4:	0800dab4 	orhi	zero,at,874
 800d8d8:	0800d90c 	andi	zero,at,868
 800d8dc:	0800dacc 	andi	zero,at,875
 800d8e0:	0800d910 	cmplti	zero,at,868
 800d8e4:	0800d910 	cmplti	zero,at,868
 800d8e8:	0800d910 	cmplti	zero,at,868
 800d8ec:	0800de30 	cmpltui	zero,at,888
 800d8f0:	8104b03a 	or	r2,r16,r4
 800d8f4:	10006c1e 	bne	r2,zero,800daa8 <__muldf3+0x2e8>
 800d8f8:	01400204 	movi	r5,8
 800d8fc:	0021883a 	mov	r16,zero
 800d900:	002f883a 	mov	r23,zero
 800d904:	07000084 	movi	fp,2
 800d908:	003fcd06 	br	800d840 <__alt_data_end+0xfc00d840>
 800d90c:	3013883a 	mov	r9,r6
 800d910:	00800084 	movi	r2,2
 800d914:	e080501e 	bne	fp,r2,800da58 <__muldf3+0x298>
 800d918:	4cc0004c 	andi	r19,r9,1
 800d91c:	0101ffc4 	movi	r4,2047
 800d920:	0021883a 	mov	r16,zero
 800d924:	002f883a 	mov	r23,zero
 800d928:	2008953a 	slli	r4,r4,20
 800d92c:	98c03fcc 	andi	r3,r19,255
 800d930:	04400434 	movhi	r17,16
 800d934:	8c7fffc4 	addi	r17,r17,-1
 800d938:	180697fa 	slli	r3,r3,31
 800d93c:	8460703a 	and	r16,r16,r17
 800d940:	8120b03a 	or	r16,r16,r4
 800d944:	80c6b03a 	or	r3,r16,r3
 800d948:	b805883a 	mov	r2,r23
 800d94c:	dfc01117 	ldw	ra,68(sp)
 800d950:	df001017 	ldw	fp,64(sp)
 800d954:	ddc00f17 	ldw	r23,60(sp)
 800d958:	dd800e17 	ldw	r22,56(sp)
 800d95c:	dd400d17 	ldw	r21,52(sp)
 800d960:	dd000c17 	ldw	r20,48(sp)
 800d964:	dcc00b17 	ldw	r19,44(sp)
 800d968:	dc800a17 	ldw	r18,40(sp)
 800d96c:	dc400917 	ldw	r17,36(sp)
 800d970:	dc000817 	ldw	r16,32(sp)
 800d974:	dec01204 	addi	sp,sp,72
 800d978:	f800283a 	ret
 800d97c:	8104b03a 	or	r2,r16,r4
 800d980:	10004426 	beq	r2,zero,800da94 <__muldf3+0x2d4>
 800d984:	80014b26 	beq	r16,zero,800deb4 <__muldf3+0x6f4>
 800d988:	8009883a 	mov	r4,r16
 800d98c:	d9800715 	stw	r6,28(sp)
 800d990:	d9c00215 	stw	r7,8(sp)
 800d994:	da400415 	stw	r9,16(sp)
 800d998:	800eaf80 	call	800eaf8 <__clzsi2>
 800d99c:	d9800717 	ldw	r6,28(sp)
 800d9a0:	d9c00217 	ldw	r7,8(sp)
 800d9a4:	da400417 	ldw	r9,16(sp)
 800d9a8:	1007883a 	mov	r3,r2
 800d9ac:	01000a04 	movi	r4,40
 800d9b0:	1dfffe04 	addi	r23,r3,-8
 800d9b4:	20c9c83a 	sub	r4,r4,r3
 800d9b8:	85e0983a 	sll	r16,r16,r23
 800d9bc:	9108d83a 	srl	r4,r18,r4
 800d9c0:	95ee983a 	sll	r23,r18,r23
 800d9c4:	2420b03a 	or	r16,r4,r16
 800d9c8:	053f0344 	movi	r20,-1011
 800d9cc:	a0e9c83a 	sub	r20,r20,r3
 800d9d0:	000b883a 	mov	r5,zero
 800d9d4:	0039883a 	mov	fp,zero
 800d9d8:	003f9906 	br	800d840 <__alt_data_end+0xfc00d840>
 800d9dc:	8984b03a 	or	r2,r17,r6
 800d9e0:	10002a1e 	bne	r2,zero,800da8c <__muldf3+0x2cc>
 800d9e4:	0023883a 	mov	r17,zero
 800d9e8:	0025883a 	mov	r18,zero
 800d9ec:	01c00084 	movi	r7,2
 800d9f0:	003fa506 	br	800d888 <__alt_data_end+0xfc00d888>
 800d9f4:	8984b03a 	or	r2,r17,r6
 800d9f8:	10002026 	beq	r2,zero,800da7c <__muldf3+0x2bc>
 800d9fc:	88011c26 	beq	r17,zero,800de70 <__muldf3+0x6b0>
 800da00:	8809883a 	mov	r4,r17
 800da04:	d9400215 	stw	r5,8(sp)
 800da08:	d9800715 	stw	r6,28(sp)
 800da0c:	da400415 	stw	r9,16(sp)
 800da10:	da800315 	stw	r10,12(sp)
 800da14:	800eaf80 	call	800eaf8 <__clzsi2>
 800da18:	d9400217 	ldw	r5,8(sp)
 800da1c:	d9800717 	ldw	r6,28(sp)
 800da20:	da400417 	ldw	r9,16(sp)
 800da24:	da800317 	ldw	r10,12(sp)
 800da28:	1007883a 	mov	r3,r2
 800da2c:	01000a04 	movi	r4,40
 800da30:	1cbffe04 	addi	r18,r3,-8
 800da34:	20c9c83a 	sub	r4,r4,r3
 800da38:	8ca2983a 	sll	r17,r17,r18
 800da3c:	3108d83a 	srl	r4,r6,r4
 800da40:	34a4983a 	sll	r18,r6,r18
 800da44:	2462b03a 	or	r17,r4,r17
 800da48:	00bf0344 	movi	r2,-1011
 800da4c:	10c7c83a 	sub	r3,r2,r3
 800da50:	000f883a 	mov	r7,zero
 800da54:	003f8c06 	br	800d888 <__alt_data_end+0xfc00d888>
 800da58:	008000c4 	movi	r2,3
 800da5c:	e0816d26 	beq	fp,r2,800e014 <__muldf3+0x854>
 800da60:	00800044 	movi	r2,1
 800da64:	e081321e 	bne	fp,r2,800df30 <__muldf3+0x770>
 800da68:	48a6703a 	and	r19,r9,r2
 800da6c:	0009883a 	mov	r4,zero
 800da70:	0021883a 	mov	r16,zero
 800da74:	002f883a 	mov	r23,zero
 800da78:	003fab06 	br	800d928 <__alt_data_end+0xfc00d928>
 800da7c:	0023883a 	mov	r17,zero
 800da80:	0025883a 	mov	r18,zero
 800da84:	01c00044 	movi	r7,1
 800da88:	003f7f06 	br	800d888 <__alt_data_end+0xfc00d888>
 800da8c:	01c000c4 	movi	r7,3
 800da90:	003f7d06 	br	800d888 <__alt_data_end+0xfc00d888>
 800da94:	01400104 	movi	r5,4
 800da98:	0021883a 	mov	r16,zero
 800da9c:	002f883a 	mov	r23,zero
 800daa0:	07000044 	movi	fp,1
 800daa4:	003f6606 	br	800d840 <__alt_data_end+0xfc00d840>
 800daa8:	01400304 	movi	r5,12
 800daac:	070000c4 	movi	fp,3
 800dab0:	003f6306 	br	800d840 <__alt_data_end+0xfc00d840>
 800dab4:	04000434 	movhi	r16,16
 800dab8:	0027883a 	mov	r19,zero
 800dabc:	843fffc4 	addi	r16,r16,-1
 800dac0:	05ffffc4 	movi	r23,-1
 800dac4:	0101ffc4 	movi	r4,2047
 800dac8:	003f9706 	br	800d928 <__alt_data_end+0xfc00d928>
 800dacc:	8821883a 	mov	r16,r17
 800dad0:	902f883a 	mov	r23,r18
 800dad4:	5013883a 	mov	r9,r10
 800dad8:	3839883a 	mov	fp,r7
 800dadc:	003f8c06 	br	800d910 <__alt_data_end+0xfc00d910>
 800dae0:	8821883a 	mov	r16,r17
 800dae4:	902f883a 	mov	r23,r18
 800dae8:	3013883a 	mov	r9,r6
 800daec:	3839883a 	mov	fp,r7
 800daf0:	003f8706 	br	800d910 <__alt_data_end+0xfc00d910>
 800daf4:	b82ad43a 	srli	r21,r23,16
 800daf8:	9038d43a 	srli	fp,r18,16
 800dafc:	bdffffcc 	andi	r23,r23,65535
 800db00:	94bfffcc 	andi	r18,r18,65535
 800db04:	9009883a 	mov	r4,r18
 800db08:	b80b883a 	mov	r5,r23
 800db0c:	d8c00515 	stw	r3,20(sp)
 800db10:	d9800715 	stw	r6,28(sp)
 800db14:	da000615 	stw	r8,24(sp)
 800db18:	800c3380 	call	800c338 <__mulsi3>
 800db1c:	9009883a 	mov	r4,r18
 800db20:	a80b883a 	mov	r5,r21
 800db24:	1029883a 	mov	r20,r2
 800db28:	800c3380 	call	800c338 <__mulsi3>
 800db2c:	e009883a 	mov	r4,fp
 800db30:	a80b883a 	mov	r5,r21
 800db34:	102d883a 	mov	r22,r2
 800db38:	800c3380 	call	800c338 <__mulsi3>
 800db3c:	e009883a 	mov	r4,fp
 800db40:	b80b883a 	mov	r5,r23
 800db44:	1027883a 	mov	r19,r2
 800db48:	800c3380 	call	800c338 <__mulsi3>
 800db4c:	a008d43a 	srli	r4,r20,16
 800db50:	b085883a 	add	r2,r22,r2
 800db54:	d8c00517 	ldw	r3,20(sp)
 800db58:	110f883a 	add	r7,r2,r4
 800db5c:	d9800717 	ldw	r6,28(sp)
 800db60:	da000617 	ldw	r8,24(sp)
 800db64:	3d80022e 	bgeu	r7,r22,800db70 <__muldf3+0x3b0>
 800db68:	00800074 	movhi	r2,1
 800db6c:	98a7883a 	add	r19,r19,r2
 800db70:	3804943a 	slli	r2,r7,16
 800db74:	380ed43a 	srli	r7,r7,16
 800db78:	882cd43a 	srli	r22,r17,16
 800db7c:	a53fffcc 	andi	r20,r20,65535
 800db80:	8c7fffcc 	andi	r17,r17,65535
 800db84:	1529883a 	add	r20,r2,r20
 800db88:	8809883a 	mov	r4,r17
 800db8c:	b80b883a 	mov	r5,r23
 800db90:	d8c00515 	stw	r3,20(sp)
 800db94:	d9800715 	stw	r6,28(sp)
 800db98:	da000615 	stw	r8,24(sp)
 800db9c:	d9c00015 	stw	r7,0(sp)
 800dba0:	dd000115 	stw	r20,4(sp)
 800dba4:	800c3380 	call	800c338 <__mulsi3>
 800dba8:	a80b883a 	mov	r5,r21
 800dbac:	8809883a 	mov	r4,r17
 800dbb0:	d8800415 	stw	r2,16(sp)
 800dbb4:	800c3380 	call	800c338 <__mulsi3>
 800dbb8:	a80b883a 	mov	r5,r21
 800dbbc:	b009883a 	mov	r4,r22
 800dbc0:	1029883a 	mov	r20,r2
 800dbc4:	800c3380 	call	800c338 <__mulsi3>
 800dbc8:	b009883a 	mov	r4,r22
 800dbcc:	b80b883a 	mov	r5,r23
 800dbd0:	102b883a 	mov	r21,r2
 800dbd4:	800c3380 	call	800c338 <__mulsi3>
 800dbd8:	da400417 	ldw	r9,16(sp)
 800dbdc:	a085883a 	add	r2,r20,r2
 800dbe0:	d8c00517 	ldw	r3,20(sp)
 800dbe4:	4808d43a 	srli	r4,r9,16
 800dbe8:	d9800717 	ldw	r6,28(sp)
 800dbec:	da000617 	ldw	r8,24(sp)
 800dbf0:	1109883a 	add	r4,r2,r4
 800dbf4:	2500022e 	bgeu	r4,r20,800dc00 <__muldf3+0x440>
 800dbf8:	00800074 	movhi	r2,1
 800dbfc:	a8ab883a 	add	r21,r21,r2
 800dc00:	200e943a 	slli	r7,r4,16
 800dc04:	2004d43a 	srli	r2,r4,16
 800dc08:	802ed43a 	srli	r23,r16,16
 800dc0c:	843fffcc 	andi	r16,r16,65535
 800dc10:	4d3fffcc 	andi	r20,r9,65535
 800dc14:	9009883a 	mov	r4,r18
 800dc18:	800b883a 	mov	r5,r16
 800dc1c:	3d29883a 	add	r20,r7,r20
 800dc20:	d8c00515 	stw	r3,20(sp)
 800dc24:	d9800715 	stw	r6,28(sp)
 800dc28:	da000615 	stw	r8,24(sp)
 800dc2c:	a8ab883a 	add	r21,r21,r2
 800dc30:	800c3380 	call	800c338 <__mulsi3>
 800dc34:	9009883a 	mov	r4,r18
 800dc38:	b80b883a 	mov	r5,r23
 800dc3c:	d8800315 	stw	r2,12(sp)
 800dc40:	800c3380 	call	800c338 <__mulsi3>
 800dc44:	e009883a 	mov	r4,fp
 800dc48:	b80b883a 	mov	r5,r23
 800dc4c:	1025883a 	mov	r18,r2
 800dc50:	800c3380 	call	800c338 <__mulsi3>
 800dc54:	e009883a 	mov	r4,fp
 800dc58:	800b883a 	mov	r5,r16
 800dc5c:	d8800215 	stw	r2,8(sp)
 800dc60:	800c3380 	call	800c338 <__mulsi3>
 800dc64:	da800317 	ldw	r10,12(sp)
 800dc68:	d9400017 	ldw	r5,0(sp)
 800dc6c:	9085883a 	add	r2,r18,r2
 800dc70:	5008d43a 	srli	r4,r10,16
 800dc74:	a153883a 	add	r9,r20,r5
 800dc78:	d8c00517 	ldw	r3,20(sp)
 800dc7c:	1109883a 	add	r4,r2,r4
 800dc80:	d9800717 	ldw	r6,28(sp)
 800dc84:	da000617 	ldw	r8,24(sp)
 800dc88:	dac00217 	ldw	r11,8(sp)
 800dc8c:	2480022e 	bgeu	r4,r18,800dc98 <__muldf3+0x4d8>
 800dc90:	00800074 	movhi	r2,1
 800dc94:	5897883a 	add	r11,r11,r2
 800dc98:	200e943a 	slli	r7,r4,16
 800dc9c:	2038d43a 	srli	fp,r4,16
 800dca0:	52bfffcc 	andi	r10,r10,65535
 800dca4:	3a8f883a 	add	r7,r7,r10
 800dca8:	8809883a 	mov	r4,r17
 800dcac:	800b883a 	mov	r5,r16
 800dcb0:	d8c00515 	stw	r3,20(sp)
 800dcb4:	d9800715 	stw	r6,28(sp)
 800dcb8:	d9c00215 	stw	r7,8(sp)
 800dcbc:	da000615 	stw	r8,24(sp)
 800dcc0:	da400415 	stw	r9,16(sp)
 800dcc4:	5f39883a 	add	fp,r11,fp
 800dcc8:	800c3380 	call	800c338 <__mulsi3>
 800dccc:	8809883a 	mov	r4,r17
 800dcd0:	b80b883a 	mov	r5,r23
 800dcd4:	1025883a 	mov	r18,r2
 800dcd8:	800c3380 	call	800c338 <__mulsi3>
 800dcdc:	b009883a 	mov	r4,r22
 800dce0:	b80b883a 	mov	r5,r23
 800dce4:	d8800315 	stw	r2,12(sp)
 800dce8:	800c3380 	call	800c338 <__mulsi3>
 800dcec:	b009883a 	mov	r4,r22
 800dcf0:	800b883a 	mov	r5,r16
 800dcf4:	1023883a 	mov	r17,r2
 800dcf8:	800c3380 	call	800c338 <__mulsi3>
 800dcfc:	da800317 	ldw	r10,12(sp)
 800dd00:	9008d43a 	srli	r4,r18,16
 800dd04:	d8c00517 	ldw	r3,20(sp)
 800dd08:	5085883a 	add	r2,r10,r2
 800dd0c:	1109883a 	add	r4,r2,r4
 800dd10:	d9800717 	ldw	r6,28(sp)
 800dd14:	d9c00217 	ldw	r7,8(sp)
 800dd18:	da000617 	ldw	r8,24(sp)
 800dd1c:	da400417 	ldw	r9,16(sp)
 800dd20:	2280022e 	bgeu	r4,r10,800dd2c <__muldf3+0x56c>
 800dd24:	00800074 	movhi	r2,1
 800dd28:	88a3883a 	add	r17,r17,r2
 800dd2c:	2004943a 	slli	r2,r4,16
 800dd30:	94bfffcc 	andi	r18,r18,65535
 800dd34:	4ce7883a 	add	r19,r9,r19
 800dd38:	14a5883a 	add	r18,r2,r18
 800dd3c:	9d29803a 	cmpltu	r20,r19,r20
 800dd40:	9565883a 	add	r18,r18,r21
 800dd44:	9505883a 	add	r2,r18,r20
 800dd48:	99e7883a 	add	r19,r19,r7
 800dd4c:	99cf803a 	cmpltu	r7,r19,r7
 800dd50:	e08b883a 	add	r5,fp,r2
 800dd54:	2008d43a 	srli	r4,r4,16
 800dd58:	29ef883a 	add	r23,r5,r7
 800dd5c:	1529803a 	cmpltu	r20,r2,r20
 800dd60:	956b803a 	cmpltu	r21,r18,r21
 800dd64:	b9cf803a 	cmpltu	r7,r23,r7
 800dd68:	a564b03a 	or	r18,r20,r21
 800dd6c:	2f39803a 	cmpltu	fp,r5,fp
 800dd70:	9125883a 	add	r18,r18,r4
 800dd74:	3f38b03a 	or	fp,r7,fp
 800dd78:	9725883a 	add	r18,r18,fp
 800dd7c:	9804927a 	slli	r2,r19,9
 800dd80:	9463883a 	add	r17,r18,r17
 800dd84:	d9000117 	ldw	r4,4(sp)
 800dd88:	b820d5fa 	srli	r16,r23,23
 800dd8c:	8822927a 	slli	r17,r17,9
 800dd90:	9826d5fa 	srli	r19,r19,23
 800dd94:	1104b03a 	or	r2,r2,r4
 800dd98:	b82e927a 	slli	r23,r23,9
 800dd9c:	1004c03a 	cmpne	r2,r2,zero
 800dda0:	8c20b03a 	or	r16,r17,r16
 800dda4:	14e6b03a 	or	r19,r2,r19
 800dda8:	8080402c 	andhi	r2,r16,256
 800ddac:	9deeb03a 	or	r23,r19,r23
 800ddb0:	10000726 	beq	r2,zero,800ddd0 <__muldf3+0x610>
 800ddb4:	b804d07a 	srli	r2,r23,1
 800ddb8:	800697fa 	slli	r3,r16,31
 800ddbc:	bdc0004c 	andi	r23,r23,1
 800ddc0:	8020d07a 	srli	r16,r16,1
 800ddc4:	b8aeb03a 	or	r23,r23,r2
 800ddc8:	b8eeb03a 	or	r23,r23,r3
 800ddcc:	4007883a 	mov	r3,r8
 800ddd0:	1900ffc4 	addi	r4,r3,1023
 800ddd4:	01004d0e 	bge	zero,r4,800df0c <__muldf3+0x74c>
 800ddd8:	b88001cc 	andi	r2,r23,7
 800dddc:	10000726 	beq	r2,zero,800ddfc <__muldf3+0x63c>
 800dde0:	b94003cc 	andi	r5,r23,15
 800dde4:	00800104 	movi	r2,4
 800dde8:	28800426 	beq	r5,r2,800ddfc <__muldf3+0x63c>
 800ddec:	b885883a 	add	r2,r23,r2
 800ddf0:	15ef803a 	cmpltu	r23,r2,r23
 800ddf4:	85e1883a 	add	r16,r16,r23
 800ddf8:	102f883a 	mov	r23,r2
 800ddfc:	8080402c 	andhi	r2,r16,256
 800de00:	10000426 	beq	r2,zero,800de14 <__muldf3+0x654>
 800de04:	00bfc034 	movhi	r2,65280
 800de08:	10bfffc4 	addi	r2,r2,-1
 800de0c:	19010004 	addi	r4,r3,1024
 800de10:	80a0703a 	and	r16,r16,r2
 800de14:	0081ff84 	movi	r2,2046
 800de18:	1100340e 	bge	r2,r4,800deec <__muldf3+0x72c>
 800de1c:	34c0004c 	andi	r19,r6,1
 800de20:	0101ffc4 	movi	r4,2047
 800de24:	0021883a 	mov	r16,zero
 800de28:	002f883a 	mov	r23,zero
 800de2c:	003ebe06 	br	800d928 <__alt_data_end+0xfc00d928>
 800de30:	8080022c 	andhi	r2,r16,8
 800de34:	10000926 	beq	r2,zero,800de5c <__muldf3+0x69c>
 800de38:	8880022c 	andhi	r2,r17,8
 800de3c:	1000071e 	bne	r2,zero,800de5c <__muldf3+0x69c>
 800de40:	00800434 	movhi	r2,16
 800de44:	8c000234 	orhi	r16,r17,8
 800de48:	10bfffc4 	addi	r2,r2,-1
 800de4c:	b027883a 	mov	r19,r22
 800de50:	80a0703a 	and	r16,r16,r2
 800de54:	902f883a 	mov	r23,r18
 800de58:	003f1a06 	br	800dac4 <__alt_data_end+0xfc00dac4>
 800de5c:	00800434 	movhi	r2,16
 800de60:	84000234 	orhi	r16,r16,8
 800de64:	10bfffc4 	addi	r2,r2,-1
 800de68:	80a0703a 	and	r16,r16,r2
 800de6c:	003f1506 	br	800dac4 <__alt_data_end+0xfc00dac4>
 800de70:	3009883a 	mov	r4,r6
 800de74:	d9400215 	stw	r5,8(sp)
 800de78:	d9800715 	stw	r6,28(sp)
 800de7c:	da400415 	stw	r9,16(sp)
 800de80:	da800315 	stw	r10,12(sp)
 800de84:	800eaf80 	call	800eaf8 <__clzsi2>
 800de88:	10c00804 	addi	r3,r2,32
 800de8c:	010009c4 	movi	r4,39
 800de90:	d9400217 	ldw	r5,8(sp)
 800de94:	d9800717 	ldw	r6,28(sp)
 800de98:	da400417 	ldw	r9,16(sp)
 800de9c:	da800317 	ldw	r10,12(sp)
 800dea0:	20fee20e 	bge	r4,r3,800da2c <__alt_data_end+0xfc00da2c>
 800dea4:	147ffe04 	addi	r17,r2,-8
 800dea8:	9462983a 	sll	r17,r18,r17
 800deac:	0025883a 	mov	r18,zero
 800deb0:	003ee506 	br	800da48 <__alt_data_end+0xfc00da48>
 800deb4:	d9800715 	stw	r6,28(sp)
 800deb8:	d9c00215 	stw	r7,8(sp)
 800debc:	da400415 	stw	r9,16(sp)
 800dec0:	800eaf80 	call	800eaf8 <__clzsi2>
 800dec4:	10c00804 	addi	r3,r2,32
 800dec8:	010009c4 	movi	r4,39
 800decc:	d9800717 	ldw	r6,28(sp)
 800ded0:	d9c00217 	ldw	r7,8(sp)
 800ded4:	da400417 	ldw	r9,16(sp)
 800ded8:	20feb40e 	bge	r4,r3,800d9ac <__alt_data_end+0xfc00d9ac>
 800dedc:	143ffe04 	addi	r16,r2,-8
 800dee0:	9420983a 	sll	r16,r18,r16
 800dee4:	002f883a 	mov	r23,zero
 800dee8:	003eb706 	br	800d9c8 <__alt_data_end+0xfc00d9c8>
 800deec:	8004977a 	slli	r2,r16,29
 800def0:	b82ed0fa 	srli	r23,r23,3
 800def4:	8020927a 	slli	r16,r16,9
 800def8:	2101ffcc 	andi	r4,r4,2047
 800defc:	15eeb03a 	or	r23,r2,r23
 800df00:	8020d33a 	srli	r16,r16,12
 800df04:	34c0004c 	andi	r19,r6,1
 800df08:	003e8706 	br	800d928 <__alt_data_end+0xfc00d928>
 800df0c:	00bf0084 	movi	r2,-1022
 800df10:	10c5c83a 	sub	r2,r2,r3
 800df14:	01000e04 	movi	r4,56
 800df18:	2080080e 	bge	r4,r2,800df3c <__muldf3+0x77c>
 800df1c:	34c0004c 	andi	r19,r6,1
 800df20:	0009883a 	mov	r4,zero
 800df24:	0021883a 	mov	r16,zero
 800df28:	002f883a 	mov	r23,zero
 800df2c:	003e7e06 	br	800d928 <__alt_data_end+0xfc00d928>
 800df30:	4007883a 	mov	r3,r8
 800df34:	480d883a 	mov	r6,r9
 800df38:	003fa506 	br	800ddd0 <__alt_data_end+0xfc00ddd0>
 800df3c:	010007c4 	movi	r4,31
 800df40:	20801816 	blt	r4,r2,800dfa4 <__muldf3+0x7e4>
 800df44:	18c10784 	addi	r3,r3,1054
 800df48:	80c8983a 	sll	r4,r16,r3
 800df4c:	b88ad83a 	srl	r5,r23,r2
 800df50:	b8c6983a 	sll	r3,r23,r3
 800df54:	80a0d83a 	srl	r16,r16,r2
 800df58:	2908b03a 	or	r4,r5,r4
 800df5c:	1804c03a 	cmpne	r2,r3,zero
 800df60:	2088b03a 	or	r4,r4,r2
 800df64:	208001cc 	andi	r2,r4,7
 800df68:	10000726 	beq	r2,zero,800df88 <__muldf3+0x7c8>
 800df6c:	20c003cc 	andi	r3,r4,15
 800df70:	00800104 	movi	r2,4
 800df74:	18800426 	beq	r3,r2,800df88 <__muldf3+0x7c8>
 800df78:	20c00104 	addi	r3,r4,4
 800df7c:	1905803a 	cmpltu	r2,r3,r4
 800df80:	80a1883a 	add	r16,r16,r2
 800df84:	1809883a 	mov	r4,r3
 800df88:	8080202c 	andhi	r2,r16,128
 800df8c:	10001b26 	beq	r2,zero,800dffc <__muldf3+0x83c>
 800df90:	34c0004c 	andi	r19,r6,1
 800df94:	01000044 	movi	r4,1
 800df98:	0021883a 	mov	r16,zero
 800df9c:	002f883a 	mov	r23,zero
 800dfa0:	003e6106 	br	800d928 <__alt_data_end+0xfc00d928>
 800dfa4:	013ef884 	movi	r4,-1054
 800dfa8:	20c9c83a 	sub	r4,r4,r3
 800dfac:	01400804 	movi	r5,32
 800dfb0:	8108d83a 	srl	r4,r16,r4
 800dfb4:	11401526 	beq	r2,r5,800e00c <__muldf3+0x84c>
 800dfb8:	18c10f84 	addi	r3,r3,1086
 800dfbc:	80e0983a 	sll	r16,r16,r3
 800dfc0:	85eeb03a 	or	r23,r16,r23
 800dfc4:	b804c03a 	cmpne	r2,r23,zero
 800dfc8:	1108b03a 	or	r4,r2,r4
 800dfcc:	20c001cc 	andi	r3,r4,7
 800dfd0:	1800061e 	bne	r3,zero,800dfec <__muldf3+0x82c>
 800dfd4:	0021883a 	mov	r16,zero
 800dfd8:	202ed0fa 	srli	r23,r4,3
 800dfdc:	34c0004c 	andi	r19,r6,1
 800dfe0:	0009883a 	mov	r4,zero
 800dfe4:	b8eeb03a 	or	r23,r23,r3
 800dfe8:	003e4f06 	br	800d928 <__alt_data_end+0xfc00d928>
 800dfec:	20c003cc 	andi	r3,r4,15
 800dff0:	00800104 	movi	r2,4
 800dff4:	0021883a 	mov	r16,zero
 800dff8:	18bfdf1e 	bne	r3,r2,800df78 <__alt_data_end+0xfc00df78>
 800dffc:	8004927a 	slli	r2,r16,9
 800e000:	8006977a 	slli	r3,r16,29
 800e004:	1020d33a 	srli	r16,r2,12
 800e008:	003ff306 	br	800dfd8 <__alt_data_end+0xfc00dfd8>
 800e00c:	0021883a 	mov	r16,zero
 800e010:	003feb06 	br	800dfc0 <__alt_data_end+0xfc00dfc0>
 800e014:	00800434 	movhi	r2,16
 800e018:	84000234 	orhi	r16,r16,8
 800e01c:	10bfffc4 	addi	r2,r2,-1
 800e020:	4cc0004c 	andi	r19,r9,1
 800e024:	80a0703a 	and	r16,r16,r2
 800e028:	003ea606 	br	800dac4 <__alt_data_end+0xfc00dac4>

0800e02c <__subdf3>:
 800e02c:	00c00434 	movhi	r3,16
 800e030:	18ffffc4 	addi	r3,r3,-1
 800e034:	defffb04 	addi	sp,sp,-20
 800e038:	28d2703a 	and	r9,r5,r3
 800e03c:	3814d53a 	srli	r10,r7,20
 800e040:	38c6703a 	and	r3,r7,r3
 800e044:	3004d77a 	srli	r2,r6,29
 800e048:	dc800215 	stw	r18,8(sp)
 800e04c:	dc000015 	stw	r16,0(sp)
 800e050:	2824d7fa 	srli	r18,r5,31
 800e054:	2820d53a 	srli	r16,r5,20
 800e058:	481290fa 	slli	r9,r9,3
 800e05c:	200ad77a 	srli	r5,r4,29
 800e060:	180690fa 	slli	r3,r3,3
 800e064:	dc400115 	stw	r17,4(sp)
 800e068:	dfc00415 	stw	ra,16(sp)
 800e06c:	202290fa 	slli	r17,r4,3
 800e070:	dcc00315 	stw	r19,12(sp)
 800e074:	5281ffcc 	andi	r10,r10,2047
 800e078:	0101ffc4 	movi	r4,2047
 800e07c:	9011883a 	mov	r8,r18
 800e080:	8401ffcc 	andi	r16,r16,2047
 800e084:	94803fcc 	andi	r18,r18,255
 800e088:	494ab03a 	or	r5,r9,r5
 800e08c:	380ed7fa 	srli	r7,r7,31
 800e090:	1886b03a 	or	r3,r3,r2
 800e094:	300c90fa 	slli	r6,r6,3
 800e098:	51009026 	beq	r10,r4,800e2dc <__subdf3+0x2b0>
 800e09c:	39c0005c 	xori	r7,r7,1
 800e0a0:	8285c83a 	sub	r2,r16,r10
 800e0a4:	91c06f26 	beq	r18,r7,800e264 <__subdf3+0x238>
 800e0a8:	0080b10e 	bge	zero,r2,800e370 <__subdf3+0x344>
 800e0ac:	50002a1e 	bne	r10,zero,800e158 <__subdf3+0x12c>
 800e0b0:	1988b03a 	or	r4,r3,r6
 800e0b4:	2000941e 	bne	r4,zero,800e308 <__subdf3+0x2dc>
 800e0b8:	888001cc 	andi	r2,r17,7
 800e0bc:	10005b26 	beq	r2,zero,800e22c <__subdf3+0x200>
 800e0c0:	88c003cc 	andi	r3,r17,15
 800e0c4:	00800104 	movi	r2,4
 800e0c8:	18805826 	beq	r3,r2,800e22c <__subdf3+0x200>
 800e0cc:	88c00104 	addi	r3,r17,4
 800e0d0:	1c63803a 	cmpltu	r17,r3,r17
 800e0d4:	2c4b883a 	add	r5,r5,r17
 800e0d8:	2880202c 	andhi	r2,r5,128
 800e0dc:	9200004c 	andi	r8,r18,1
 800e0e0:	1823883a 	mov	r17,r3
 800e0e4:	10005426 	beq	r2,zero,800e238 <__subdf3+0x20c>
 800e0e8:	84000044 	addi	r16,r16,1
 800e0ec:	0081ffc4 	movi	r2,2047
 800e0f0:	8080bf26 	beq	r16,r2,800e3f0 <__subdf3+0x3c4>
 800e0f4:	013fe034 	movhi	r4,65408
 800e0f8:	213fffc4 	addi	r4,r4,-1
 800e0fc:	290a703a 	and	r5,r5,r4
 800e100:	2804977a 	slli	r2,r5,29
 800e104:	280a927a 	slli	r5,r5,9
 800e108:	8822d0fa 	srli	r17,r17,3
 800e10c:	8401ffcc 	andi	r16,r16,2047
 800e110:	2808d33a 	srli	r4,r5,12
 800e114:	1444b03a 	or	r2,r2,r17
 800e118:	8401ffcc 	andi	r16,r16,2047
 800e11c:	800a953a 	slli	r5,r16,20
 800e120:	40c03fcc 	andi	r3,r8,255
 800e124:	04000434 	movhi	r16,16
 800e128:	180697fa 	slli	r3,r3,31
 800e12c:	843fffc4 	addi	r16,r16,-1
 800e130:	2420703a 	and	r16,r4,r16
 800e134:	8160b03a 	or	r16,r16,r5
 800e138:	80c6b03a 	or	r3,r16,r3
 800e13c:	dfc00417 	ldw	ra,16(sp)
 800e140:	dcc00317 	ldw	r19,12(sp)
 800e144:	dc800217 	ldw	r18,8(sp)
 800e148:	dc400117 	ldw	r17,4(sp)
 800e14c:	dc000017 	ldw	r16,0(sp)
 800e150:	dec00504 	addi	sp,sp,20
 800e154:	f800283a 	ret
 800e158:	0101ffc4 	movi	r4,2047
 800e15c:	813fd626 	beq	r16,r4,800e0b8 <__alt_data_end+0xfc00e0b8>
 800e160:	18c02034 	orhi	r3,r3,128
 800e164:	01000e04 	movi	r4,56
 800e168:	2080a416 	blt	r4,r2,800e3fc <__subdf3+0x3d0>
 800e16c:	010007c4 	movi	r4,31
 800e170:	2080c716 	blt	r4,r2,800e490 <__subdf3+0x464>
 800e174:	01000804 	movi	r4,32
 800e178:	2089c83a 	sub	r4,r4,r2
 800e17c:	1910983a 	sll	r8,r3,r4
 800e180:	308ed83a 	srl	r7,r6,r2
 800e184:	3108983a 	sll	r4,r6,r4
 800e188:	1884d83a 	srl	r2,r3,r2
 800e18c:	41ccb03a 	or	r6,r8,r7
 800e190:	2008c03a 	cmpne	r4,r4,zero
 800e194:	310cb03a 	or	r6,r6,r4
 800e198:	898dc83a 	sub	r6,r17,r6
 800e19c:	89a3803a 	cmpltu	r17,r17,r6
 800e1a0:	288bc83a 	sub	r5,r5,r2
 800e1a4:	2c4bc83a 	sub	r5,r5,r17
 800e1a8:	3023883a 	mov	r17,r6
 800e1ac:	2880202c 	andhi	r2,r5,128
 800e1b0:	10006b26 	beq	r2,zero,800e360 <__subdf3+0x334>
 800e1b4:	04c02034 	movhi	r19,128
 800e1b8:	9cffffc4 	addi	r19,r19,-1
 800e1bc:	2ce6703a 	and	r19,r5,r19
 800e1c0:	98007c26 	beq	r19,zero,800e3b4 <__subdf3+0x388>
 800e1c4:	9809883a 	mov	r4,r19
 800e1c8:	800eaf80 	call	800eaf8 <__clzsi2>
 800e1cc:	10fffe04 	addi	r3,r2,-8
 800e1d0:	010007c4 	movi	r4,31
 800e1d4:	20c07d16 	blt	r4,r3,800e3cc <__subdf3+0x3a0>
 800e1d8:	01400a04 	movi	r5,40
 800e1dc:	2885c83a 	sub	r2,r5,r2
 800e1e0:	888ad83a 	srl	r5,r17,r2
 800e1e4:	98e6983a 	sll	r19,r19,r3
 800e1e8:	88e2983a 	sll	r17,r17,r3
 800e1ec:	2ce6b03a 	or	r19,r5,r19
 800e1f0:	1c007a16 	blt	r3,r16,800e3dc <__subdf3+0x3b0>
 800e1f4:	1c21c83a 	sub	r16,r3,r16
 800e1f8:	81400044 	addi	r5,r16,1
 800e1fc:	00c007c4 	movi	r3,31
 800e200:	19409616 	blt	r3,r5,800e45c <__subdf3+0x430>
 800e204:	1c21c83a 	sub	r16,r3,r16
 800e208:	8c08983a 	sll	r4,r17,r16
 800e20c:	8946d83a 	srl	r3,r17,r5
 800e210:	9c20983a 	sll	r16,r19,r16
 800e214:	2008c03a 	cmpne	r4,r4,zero
 800e218:	994ad83a 	srl	r5,r19,r5
 800e21c:	1c06b03a 	or	r3,r3,r16
 800e220:	1922b03a 	or	r17,r3,r4
 800e224:	0021883a 	mov	r16,zero
 800e228:	003fa306 	br	800e0b8 <__alt_data_end+0xfc00e0b8>
 800e22c:	2880202c 	andhi	r2,r5,128
 800e230:	9200004c 	andi	r8,r18,1
 800e234:	103fac1e 	bne	r2,zero,800e0e8 <__alt_data_end+0xfc00e0e8>
 800e238:	2804977a 	slli	r2,r5,29
 800e23c:	8822d0fa 	srli	r17,r17,3
 800e240:	00c1ffc4 	movi	r3,2047
 800e244:	280ad0fa 	srli	r5,r5,3
 800e248:	1444b03a 	or	r2,r2,r17
 800e24c:	80c02726 	beq	r16,r3,800e2ec <__subdf3+0x2c0>
 800e250:	01000434 	movhi	r4,16
 800e254:	213fffc4 	addi	r4,r4,-1
 800e258:	80e0703a 	and	r16,r16,r3
 800e25c:	2908703a 	and	r4,r5,r4
 800e260:	003fad06 	br	800e118 <__alt_data_end+0xfc00e118>
 800e264:	0080690e 	bge	zero,r2,800e40c <__subdf3+0x3e0>
 800e268:	50002f26 	beq	r10,zero,800e328 <__subdf3+0x2fc>
 800e26c:	0101ffc4 	movi	r4,2047
 800e270:	813f9126 	beq	r16,r4,800e0b8 <__alt_data_end+0xfc00e0b8>
 800e274:	18c02034 	orhi	r3,r3,128
 800e278:	01000e04 	movi	r4,56
 800e27c:	2080b00e 	bge	r4,r2,800e540 <__subdf3+0x514>
 800e280:	198cb03a 	or	r6,r3,r6
 800e284:	300ec03a 	cmpne	r7,r6,zero
 800e288:	0005883a 	mov	r2,zero
 800e28c:	3c4f883a 	add	r7,r7,r17
 800e290:	3c63803a 	cmpltu	r17,r7,r17
 800e294:	114b883a 	add	r5,r2,r5
 800e298:	2c4b883a 	add	r5,r5,r17
 800e29c:	3823883a 	mov	r17,r7
 800e2a0:	2880202c 	andhi	r2,r5,128
 800e2a4:	10002e26 	beq	r2,zero,800e360 <__subdf3+0x334>
 800e2a8:	84000044 	addi	r16,r16,1
 800e2ac:	0081ffc4 	movi	r2,2047
 800e2b0:	8080de26 	beq	r16,r2,800e62c <__subdf3+0x600>
 800e2b4:	00bfe034 	movhi	r2,65408
 800e2b8:	10bfffc4 	addi	r2,r2,-1
 800e2bc:	288a703a 	and	r5,r5,r2
 800e2c0:	880cd07a 	srli	r6,r17,1
 800e2c4:	280897fa 	slli	r4,r5,31
 800e2c8:	88c0004c 	andi	r3,r17,1
 800e2cc:	30e2b03a 	or	r17,r6,r3
 800e2d0:	280ad07a 	srli	r5,r5,1
 800e2d4:	8922b03a 	or	r17,r17,r4
 800e2d8:	003f7706 	br	800e0b8 <__alt_data_end+0xfc00e0b8>
 800e2dc:	1984b03a 	or	r2,r3,r6
 800e2e0:	103f6e26 	beq	r2,zero,800e09c <__alt_data_end+0xfc00e09c>
 800e2e4:	39c03fcc 	andi	r7,r7,255
 800e2e8:	003f6d06 	br	800e0a0 <__alt_data_end+0xfc00e0a0>
 800e2ec:	1146b03a 	or	r3,r2,r5
 800e2f0:	18003f26 	beq	r3,zero,800e3f0 <__subdf3+0x3c4>
 800e2f4:	00c00434 	movhi	r3,16
 800e2f8:	29000234 	orhi	r4,r5,8
 800e2fc:	18ffffc4 	addi	r3,r3,-1
 800e300:	20c8703a 	and	r4,r4,r3
 800e304:	003f8406 	br	800e118 <__alt_data_end+0xfc00e118>
 800e308:	10bfffc4 	addi	r2,r2,-1
 800e30c:	1000501e 	bne	r2,zero,800e450 <__subdf3+0x424>
 800e310:	898fc83a 	sub	r7,r17,r6
 800e314:	89e3803a 	cmpltu	r17,r17,r7
 800e318:	28cbc83a 	sub	r5,r5,r3
 800e31c:	2c4bc83a 	sub	r5,r5,r17
 800e320:	3823883a 	mov	r17,r7
 800e324:	003fa106 	br	800e1ac <__alt_data_end+0xfc00e1ac>
 800e328:	1988b03a 	or	r4,r3,r6
 800e32c:	203f6226 	beq	r4,zero,800e0b8 <__alt_data_end+0xfc00e0b8>
 800e330:	10bfffc4 	addi	r2,r2,-1
 800e334:	10009b1e 	bne	r2,zero,800e5a4 <__subdf3+0x578>
 800e338:	344d883a 	add	r6,r6,r17
 800e33c:	3463803a 	cmpltu	r17,r6,r17
 800e340:	194b883a 	add	r5,r3,r5
 800e344:	2c4b883a 	add	r5,r5,r17
 800e348:	3023883a 	mov	r17,r6
 800e34c:	003fd406 	br	800e2a0 <__alt_data_end+0xfc00e2a0>
 800e350:	1106b03a 	or	r3,r2,r4
 800e354:	1800b426 	beq	r3,zero,800e628 <__subdf3+0x5fc>
 800e358:	100b883a 	mov	r5,r2
 800e35c:	2023883a 	mov	r17,r4
 800e360:	888001cc 	andi	r2,r17,7
 800e364:	103f561e 	bne	r2,zero,800e0c0 <__alt_data_end+0xfc00e0c0>
 800e368:	9200004c 	andi	r8,r18,1
 800e36c:	003fb206 	br	800e238 <__alt_data_end+0xfc00e238>
 800e370:	1000531e 	bne	r2,zero,800e4c0 <__subdf3+0x494>
 800e374:	80800044 	addi	r2,r16,1
 800e378:	1081ffcc 	andi	r2,r2,2047
 800e37c:	01000044 	movi	r4,1
 800e380:	2080a00e 	bge	r4,r2,800e604 <__subdf3+0x5d8>
 800e384:	8985c83a 	sub	r2,r17,r6
 800e388:	8889803a 	cmpltu	r4,r17,r2
 800e38c:	28e7c83a 	sub	r19,r5,r3
 800e390:	9927c83a 	sub	r19,r19,r4
 800e394:	9900202c 	andhi	r4,r19,128
 800e398:	20006226 	beq	r4,zero,800e524 <__subdf3+0x4f8>
 800e39c:	3463c83a 	sub	r17,r6,r17
 800e3a0:	194bc83a 	sub	r5,r3,r5
 800e3a4:	344d803a 	cmpltu	r6,r6,r17
 800e3a8:	29a7c83a 	sub	r19,r5,r6
 800e3ac:	3825883a 	mov	r18,r7
 800e3b0:	983f841e 	bne	r19,zero,800e1c4 <__alt_data_end+0xfc00e1c4>
 800e3b4:	8809883a 	mov	r4,r17
 800e3b8:	800eaf80 	call	800eaf8 <__clzsi2>
 800e3bc:	10800804 	addi	r2,r2,32
 800e3c0:	10fffe04 	addi	r3,r2,-8
 800e3c4:	010007c4 	movi	r4,31
 800e3c8:	20ff830e 	bge	r4,r3,800e1d8 <__alt_data_end+0xfc00e1d8>
 800e3cc:	14fff604 	addi	r19,r2,-40
 800e3d0:	8ce6983a 	sll	r19,r17,r19
 800e3d4:	0023883a 	mov	r17,zero
 800e3d8:	1c3f860e 	bge	r3,r16,800e1f4 <__alt_data_end+0xfc00e1f4>
 800e3dc:	017fe034 	movhi	r5,65408
 800e3e0:	297fffc4 	addi	r5,r5,-1
 800e3e4:	80e1c83a 	sub	r16,r16,r3
 800e3e8:	994a703a 	and	r5,r19,r5
 800e3ec:	003f3206 	br	800e0b8 <__alt_data_end+0xfc00e0b8>
 800e3f0:	0009883a 	mov	r4,zero
 800e3f4:	0005883a 	mov	r2,zero
 800e3f8:	003f4706 	br	800e118 <__alt_data_end+0xfc00e118>
 800e3fc:	198cb03a 	or	r6,r3,r6
 800e400:	300cc03a 	cmpne	r6,r6,zero
 800e404:	0005883a 	mov	r2,zero
 800e408:	003f6306 	br	800e198 <__alt_data_end+0xfc00e198>
 800e40c:	10009d1e 	bne	r2,zero,800e684 <__subdf3+0x658>
 800e410:	81c00044 	addi	r7,r16,1
 800e414:	3881ffcc 	andi	r2,r7,2047
 800e418:	02400044 	movi	r9,1
 800e41c:	4880680e 	bge	r9,r2,800e5c0 <__subdf3+0x594>
 800e420:	0081ffc4 	movi	r2,2047
 800e424:	3880ae26 	beq	r7,r2,800e6e0 <__subdf3+0x6b4>
 800e428:	344d883a 	add	r6,r6,r17
 800e42c:	3463803a 	cmpltu	r17,r6,r17
 800e430:	194b883a 	add	r5,r3,r5
 800e434:	2c4b883a 	add	r5,r5,r17
 800e438:	282297fa 	slli	r17,r5,31
 800e43c:	300cd07a 	srli	r6,r6,1
 800e440:	280ad07a 	srli	r5,r5,1
 800e444:	3821883a 	mov	r16,r7
 800e448:	89a2b03a 	or	r17,r17,r6
 800e44c:	003f1a06 	br	800e0b8 <__alt_data_end+0xfc00e0b8>
 800e450:	0101ffc4 	movi	r4,2047
 800e454:	813f431e 	bne	r16,r4,800e164 <__alt_data_end+0xfc00e164>
 800e458:	003f1706 	br	800e0b8 <__alt_data_end+0xfc00e0b8>
 800e45c:	80bff844 	addi	r2,r16,-31
 800e460:	00c00804 	movi	r3,32
 800e464:	9884d83a 	srl	r2,r19,r2
 800e468:	28c05126 	beq	r5,r3,800e5b0 <__subdf3+0x584>
 800e46c:	00c00fc4 	movi	r3,63
 800e470:	1c21c83a 	sub	r16,r3,r16
 800e474:	9c26983a 	sll	r19,r19,r16
 800e478:	9c62b03a 	or	r17,r19,r17
 800e47c:	8822c03a 	cmpne	r17,r17,zero
 800e480:	88a2b03a 	or	r17,r17,r2
 800e484:	000b883a 	mov	r5,zero
 800e488:	0021883a 	mov	r16,zero
 800e48c:	003fb406 	br	800e360 <__alt_data_end+0xfc00e360>
 800e490:	113ff804 	addi	r4,r2,-32
 800e494:	01c00804 	movi	r7,32
 800e498:	1908d83a 	srl	r4,r3,r4
 800e49c:	11c04626 	beq	r2,r7,800e5b8 <__subdf3+0x58c>
 800e4a0:	01c01004 	movi	r7,64
 800e4a4:	3885c83a 	sub	r2,r7,r2
 800e4a8:	1884983a 	sll	r2,r3,r2
 800e4ac:	118cb03a 	or	r6,r2,r6
 800e4b0:	300cc03a 	cmpne	r6,r6,zero
 800e4b4:	310cb03a 	or	r6,r6,r4
 800e4b8:	0005883a 	mov	r2,zero
 800e4bc:	003f3606 	br	800e198 <__alt_data_end+0xfc00e198>
 800e4c0:	80002b26 	beq	r16,zero,800e570 <__subdf3+0x544>
 800e4c4:	0101ffc4 	movi	r4,2047
 800e4c8:	51006926 	beq	r10,r4,800e670 <__subdf3+0x644>
 800e4cc:	0085c83a 	sub	r2,zero,r2
 800e4d0:	29402034 	orhi	r5,r5,128
 800e4d4:	01000e04 	movi	r4,56
 800e4d8:	20807d16 	blt	r4,r2,800e6d0 <__subdf3+0x6a4>
 800e4dc:	010007c4 	movi	r4,31
 800e4e0:	2080d916 	blt	r4,r2,800e848 <__subdf3+0x81c>
 800e4e4:	01000804 	movi	r4,32
 800e4e8:	2089c83a 	sub	r4,r4,r2
 800e4ec:	2912983a 	sll	r9,r5,r4
 800e4f0:	8890d83a 	srl	r8,r17,r2
 800e4f4:	8908983a 	sll	r4,r17,r4
 800e4f8:	2884d83a 	srl	r2,r5,r2
 800e4fc:	4a22b03a 	or	r17,r9,r8
 800e500:	2008c03a 	cmpne	r4,r4,zero
 800e504:	8922b03a 	or	r17,r17,r4
 800e508:	3463c83a 	sub	r17,r6,r17
 800e50c:	1885c83a 	sub	r2,r3,r2
 800e510:	344d803a 	cmpltu	r6,r6,r17
 800e514:	118bc83a 	sub	r5,r2,r6
 800e518:	5021883a 	mov	r16,r10
 800e51c:	3825883a 	mov	r18,r7
 800e520:	003f2206 	br	800e1ac <__alt_data_end+0xfc00e1ac>
 800e524:	9886b03a 	or	r3,r19,r2
 800e528:	18001c1e 	bne	r3,zero,800e59c <__subdf3+0x570>
 800e52c:	0011883a 	mov	r8,zero
 800e530:	000b883a 	mov	r5,zero
 800e534:	0023883a 	mov	r17,zero
 800e538:	0021883a 	mov	r16,zero
 800e53c:	003f3e06 	br	800e238 <__alt_data_end+0xfc00e238>
 800e540:	010007c4 	movi	r4,31
 800e544:	20803c16 	blt	r4,r2,800e638 <__subdf3+0x60c>
 800e548:	01000804 	movi	r4,32
 800e54c:	2089c83a 	sub	r4,r4,r2
 800e550:	1912983a 	sll	r9,r3,r4
 800e554:	308ed83a 	srl	r7,r6,r2
 800e558:	3108983a 	sll	r4,r6,r4
 800e55c:	1884d83a 	srl	r2,r3,r2
 800e560:	49ceb03a 	or	r7,r9,r7
 800e564:	2008c03a 	cmpne	r4,r4,zero
 800e568:	390eb03a 	or	r7,r7,r4
 800e56c:	003f4706 	br	800e28c <__alt_data_end+0xfc00e28c>
 800e570:	2c48b03a 	or	r4,r5,r17
 800e574:	20003e26 	beq	r4,zero,800e670 <__subdf3+0x644>
 800e578:	0084303a 	nor	r2,zero,r2
 800e57c:	10003a1e 	bne	r2,zero,800e668 <__subdf3+0x63c>
 800e580:	3463c83a 	sub	r17,r6,r17
 800e584:	194bc83a 	sub	r5,r3,r5
 800e588:	344d803a 	cmpltu	r6,r6,r17
 800e58c:	298bc83a 	sub	r5,r5,r6
 800e590:	5021883a 	mov	r16,r10
 800e594:	3825883a 	mov	r18,r7
 800e598:	003f0406 	br	800e1ac <__alt_data_end+0xfc00e1ac>
 800e59c:	1023883a 	mov	r17,r2
 800e5a0:	003f0706 	br	800e1c0 <__alt_data_end+0xfc00e1c0>
 800e5a4:	0101ffc4 	movi	r4,2047
 800e5a8:	813f331e 	bne	r16,r4,800e278 <__alt_data_end+0xfc00e278>
 800e5ac:	003ec206 	br	800e0b8 <__alt_data_end+0xfc00e0b8>
 800e5b0:	0027883a 	mov	r19,zero
 800e5b4:	003fb006 	br	800e478 <__alt_data_end+0xfc00e478>
 800e5b8:	0005883a 	mov	r2,zero
 800e5bc:	003fbb06 	br	800e4ac <__alt_data_end+0xfc00e4ac>
 800e5c0:	2c44b03a 	or	r2,r5,r17
 800e5c4:	80008b1e 	bne	r16,zero,800e7f4 <__subdf3+0x7c8>
 800e5c8:	1000b526 	beq	r2,zero,800e8a0 <__subdf3+0x874>
 800e5cc:	1984b03a 	or	r2,r3,r6
 800e5d0:	103eb926 	beq	r2,zero,800e0b8 <__alt_data_end+0xfc00e0b8>
 800e5d4:	3449883a 	add	r4,r6,r17
 800e5d8:	2463803a 	cmpltu	r17,r4,r17
 800e5dc:	194b883a 	add	r5,r3,r5
 800e5e0:	2c4b883a 	add	r5,r5,r17
 800e5e4:	2880202c 	andhi	r2,r5,128
 800e5e8:	2023883a 	mov	r17,r4
 800e5ec:	103f5c26 	beq	r2,zero,800e360 <__alt_data_end+0xfc00e360>
 800e5f0:	00bfe034 	movhi	r2,65408
 800e5f4:	10bfffc4 	addi	r2,r2,-1
 800e5f8:	4821883a 	mov	r16,r9
 800e5fc:	288a703a 	and	r5,r5,r2
 800e600:	003ead06 	br	800e0b8 <__alt_data_end+0xfc00e0b8>
 800e604:	2c44b03a 	or	r2,r5,r17
 800e608:	8000291e 	bne	r16,zero,800e6b0 <__subdf3+0x684>
 800e60c:	10004f1e 	bne	r2,zero,800e74c <__subdf3+0x720>
 800e610:	1984b03a 	or	r2,r3,r6
 800e614:	10000426 	beq	r2,zero,800e628 <__subdf3+0x5fc>
 800e618:	180b883a 	mov	r5,r3
 800e61c:	3023883a 	mov	r17,r6
 800e620:	3825883a 	mov	r18,r7
 800e624:	003ea406 	br	800e0b8 <__alt_data_end+0xfc00e0b8>
 800e628:	0011883a 	mov	r8,zero
 800e62c:	000b883a 	mov	r5,zero
 800e630:	0023883a 	mov	r17,zero
 800e634:	003f0006 	br	800e238 <__alt_data_end+0xfc00e238>
 800e638:	11fff804 	addi	r7,r2,-32
 800e63c:	19c8d83a 	srl	r4,r3,r7
 800e640:	01c00804 	movi	r7,32
 800e644:	11c07e26 	beq	r2,r7,800e840 <__subdf3+0x814>
 800e648:	01c01004 	movi	r7,64
 800e64c:	3885c83a 	sub	r2,r7,r2
 800e650:	1884983a 	sll	r2,r3,r2
 800e654:	118cb03a 	or	r6,r2,r6
 800e658:	300ec03a 	cmpne	r7,r6,zero
 800e65c:	390eb03a 	or	r7,r7,r4
 800e660:	0005883a 	mov	r2,zero
 800e664:	003f0906 	br	800e28c <__alt_data_end+0xfc00e28c>
 800e668:	0101ffc4 	movi	r4,2047
 800e66c:	513f991e 	bne	r10,r4,800e4d4 <__alt_data_end+0xfc00e4d4>
 800e670:	180b883a 	mov	r5,r3
 800e674:	3023883a 	mov	r17,r6
 800e678:	5021883a 	mov	r16,r10
 800e67c:	3825883a 	mov	r18,r7
 800e680:	003e8d06 	br	800e0b8 <__alt_data_end+0xfc00e0b8>
 800e684:	80001a1e 	bne	r16,zero,800e6f0 <__subdf3+0x6c4>
 800e688:	2c48b03a 	or	r4,r5,r17
 800e68c:	20005526 	beq	r4,zero,800e7e4 <__subdf3+0x7b8>
 800e690:	0084303a 	nor	r2,zero,r2
 800e694:	1000511e 	bne	r2,zero,800e7dc <__subdf3+0x7b0>
 800e698:	89a3883a 	add	r17,r17,r6
 800e69c:	194b883a 	add	r5,r3,r5
 800e6a0:	898d803a 	cmpltu	r6,r17,r6
 800e6a4:	298b883a 	add	r5,r5,r6
 800e6a8:	5021883a 	mov	r16,r10
 800e6ac:	003efc06 	br	800e2a0 <__alt_data_end+0xfc00e2a0>
 800e6b0:	1000341e 	bne	r2,zero,800e784 <__subdf3+0x758>
 800e6b4:	1984b03a 	or	r2,r3,r6
 800e6b8:	10006f26 	beq	r2,zero,800e878 <__subdf3+0x84c>
 800e6bc:	180b883a 	mov	r5,r3
 800e6c0:	3023883a 	mov	r17,r6
 800e6c4:	3825883a 	mov	r18,r7
 800e6c8:	0401ffc4 	movi	r16,2047
 800e6cc:	003e7a06 	br	800e0b8 <__alt_data_end+0xfc00e0b8>
 800e6d0:	2c62b03a 	or	r17,r5,r17
 800e6d4:	8822c03a 	cmpne	r17,r17,zero
 800e6d8:	0005883a 	mov	r2,zero
 800e6dc:	003f8a06 	br	800e508 <__alt_data_end+0xfc00e508>
 800e6e0:	3821883a 	mov	r16,r7
 800e6e4:	000b883a 	mov	r5,zero
 800e6e8:	0023883a 	mov	r17,zero
 800e6ec:	003ed206 	br	800e238 <__alt_data_end+0xfc00e238>
 800e6f0:	0101ffc4 	movi	r4,2047
 800e6f4:	51003b26 	beq	r10,r4,800e7e4 <__subdf3+0x7b8>
 800e6f8:	0085c83a 	sub	r2,zero,r2
 800e6fc:	29402034 	orhi	r5,r5,128
 800e700:	01000e04 	movi	r4,56
 800e704:	20806216 	blt	r4,r2,800e890 <__subdf3+0x864>
 800e708:	010007c4 	movi	r4,31
 800e70c:	20806b16 	blt	r4,r2,800e8bc <__subdf3+0x890>
 800e710:	01000804 	movi	r4,32
 800e714:	2089c83a 	sub	r4,r4,r2
 800e718:	2912983a 	sll	r9,r5,r4
 800e71c:	888ed83a 	srl	r7,r17,r2
 800e720:	8908983a 	sll	r4,r17,r4
 800e724:	2884d83a 	srl	r2,r5,r2
 800e728:	49e2b03a 	or	r17,r9,r7
 800e72c:	2008c03a 	cmpne	r4,r4,zero
 800e730:	8922b03a 	or	r17,r17,r4
 800e734:	89a3883a 	add	r17,r17,r6
 800e738:	10c5883a 	add	r2,r2,r3
 800e73c:	898d803a 	cmpltu	r6,r17,r6
 800e740:	118b883a 	add	r5,r2,r6
 800e744:	5021883a 	mov	r16,r10
 800e748:	003ed506 	br	800e2a0 <__alt_data_end+0xfc00e2a0>
 800e74c:	1984b03a 	or	r2,r3,r6
 800e750:	103e5926 	beq	r2,zero,800e0b8 <__alt_data_end+0xfc00e0b8>
 800e754:	8989c83a 	sub	r4,r17,r6
 800e758:	8911803a 	cmpltu	r8,r17,r4
 800e75c:	28c5c83a 	sub	r2,r5,r3
 800e760:	1205c83a 	sub	r2,r2,r8
 800e764:	1200202c 	andhi	r8,r2,128
 800e768:	403ef926 	beq	r8,zero,800e350 <__alt_data_end+0xfc00e350>
 800e76c:	3463c83a 	sub	r17,r6,r17
 800e770:	194bc83a 	sub	r5,r3,r5
 800e774:	344d803a 	cmpltu	r6,r6,r17
 800e778:	298bc83a 	sub	r5,r5,r6
 800e77c:	3825883a 	mov	r18,r7
 800e780:	003e4d06 	br	800e0b8 <__alt_data_end+0xfc00e0b8>
 800e784:	1984b03a 	or	r2,r3,r6
 800e788:	10002b26 	beq	r2,zero,800e838 <__subdf3+0x80c>
 800e78c:	2808d0fa 	srli	r4,r5,3
 800e790:	8822d0fa 	srli	r17,r17,3
 800e794:	280a977a 	slli	r5,r5,29
 800e798:	2080022c 	andhi	r2,r4,8
 800e79c:	2c62b03a 	or	r17,r5,r17
 800e7a0:	10000826 	beq	r2,zero,800e7c4 <__subdf3+0x798>
 800e7a4:	1810d0fa 	srli	r8,r3,3
 800e7a8:	4080022c 	andhi	r2,r8,8
 800e7ac:	1000051e 	bne	r2,zero,800e7c4 <__subdf3+0x798>
 800e7b0:	300cd0fa 	srli	r6,r6,3
 800e7b4:	1804977a 	slli	r2,r3,29
 800e7b8:	4009883a 	mov	r4,r8
 800e7bc:	3825883a 	mov	r18,r7
 800e7c0:	11a2b03a 	or	r17,r2,r6
 800e7c4:	880ad77a 	srli	r5,r17,29
 800e7c8:	200890fa 	slli	r4,r4,3
 800e7cc:	882290fa 	slli	r17,r17,3
 800e7d0:	0401ffc4 	movi	r16,2047
 800e7d4:	290ab03a 	or	r5,r5,r4
 800e7d8:	003e3706 	br	800e0b8 <__alt_data_end+0xfc00e0b8>
 800e7dc:	0101ffc4 	movi	r4,2047
 800e7e0:	513fc71e 	bne	r10,r4,800e700 <__alt_data_end+0xfc00e700>
 800e7e4:	180b883a 	mov	r5,r3
 800e7e8:	3023883a 	mov	r17,r6
 800e7ec:	5021883a 	mov	r16,r10
 800e7f0:	003e3106 	br	800e0b8 <__alt_data_end+0xfc00e0b8>
 800e7f4:	10002d26 	beq	r2,zero,800e8ac <__subdf3+0x880>
 800e7f8:	1984b03a 	or	r2,r3,r6
 800e7fc:	10000e26 	beq	r2,zero,800e838 <__subdf3+0x80c>
 800e800:	2808d0fa 	srli	r4,r5,3
 800e804:	8822d0fa 	srli	r17,r17,3
 800e808:	280a977a 	slli	r5,r5,29
 800e80c:	2080022c 	andhi	r2,r4,8
 800e810:	2c62b03a 	or	r17,r5,r17
 800e814:	103feb26 	beq	r2,zero,800e7c4 <__alt_data_end+0xfc00e7c4>
 800e818:	180ed0fa 	srli	r7,r3,3
 800e81c:	3880022c 	andhi	r2,r7,8
 800e820:	103fe81e 	bne	r2,zero,800e7c4 <__alt_data_end+0xfc00e7c4>
 800e824:	300cd0fa 	srli	r6,r6,3
 800e828:	1804977a 	slli	r2,r3,29
 800e82c:	3809883a 	mov	r4,r7
 800e830:	11a2b03a 	or	r17,r2,r6
 800e834:	003fe306 	br	800e7c4 <__alt_data_end+0xfc00e7c4>
 800e838:	0401ffc4 	movi	r16,2047
 800e83c:	003e1e06 	br	800e0b8 <__alt_data_end+0xfc00e0b8>
 800e840:	0005883a 	mov	r2,zero
 800e844:	003f8306 	br	800e654 <__alt_data_end+0xfc00e654>
 800e848:	113ff804 	addi	r4,r2,-32
 800e84c:	02000804 	movi	r8,32
 800e850:	2908d83a 	srl	r4,r5,r4
 800e854:	12002526 	beq	r2,r8,800e8ec <__subdf3+0x8c0>
 800e858:	02001004 	movi	r8,64
 800e85c:	4085c83a 	sub	r2,r8,r2
 800e860:	288a983a 	sll	r5,r5,r2
 800e864:	2c62b03a 	or	r17,r5,r17
 800e868:	8822c03a 	cmpne	r17,r17,zero
 800e86c:	8922b03a 	or	r17,r17,r4
 800e870:	0005883a 	mov	r2,zero
 800e874:	003f2406 	br	800e508 <__alt_data_end+0xfc00e508>
 800e878:	01402034 	movhi	r5,128
 800e87c:	0011883a 	mov	r8,zero
 800e880:	297fffc4 	addi	r5,r5,-1
 800e884:	047ffe04 	movi	r17,-8
 800e888:	0401ffc4 	movi	r16,2047
 800e88c:	003e6a06 	br	800e238 <__alt_data_end+0xfc00e238>
 800e890:	2c62b03a 	or	r17,r5,r17
 800e894:	8822c03a 	cmpne	r17,r17,zero
 800e898:	0005883a 	mov	r2,zero
 800e89c:	003fa506 	br	800e734 <__alt_data_end+0xfc00e734>
 800e8a0:	180b883a 	mov	r5,r3
 800e8a4:	3023883a 	mov	r17,r6
 800e8a8:	003e0306 	br	800e0b8 <__alt_data_end+0xfc00e0b8>
 800e8ac:	180b883a 	mov	r5,r3
 800e8b0:	3023883a 	mov	r17,r6
 800e8b4:	0401ffc4 	movi	r16,2047
 800e8b8:	003dff06 	br	800e0b8 <__alt_data_end+0xfc00e0b8>
 800e8bc:	113ff804 	addi	r4,r2,-32
 800e8c0:	01c00804 	movi	r7,32
 800e8c4:	2908d83a 	srl	r4,r5,r4
 800e8c8:	11c00a26 	beq	r2,r7,800e8f4 <__subdf3+0x8c8>
 800e8cc:	01c01004 	movi	r7,64
 800e8d0:	3885c83a 	sub	r2,r7,r2
 800e8d4:	288a983a 	sll	r5,r5,r2
 800e8d8:	2c62b03a 	or	r17,r5,r17
 800e8dc:	8822c03a 	cmpne	r17,r17,zero
 800e8e0:	8922b03a 	or	r17,r17,r4
 800e8e4:	0005883a 	mov	r2,zero
 800e8e8:	003f9206 	br	800e734 <__alt_data_end+0xfc00e734>
 800e8ec:	000b883a 	mov	r5,zero
 800e8f0:	003fdc06 	br	800e864 <__alt_data_end+0xfc00e864>
 800e8f4:	000b883a 	mov	r5,zero
 800e8f8:	003ff706 	br	800e8d8 <__alt_data_end+0xfc00e8d8>

0800e8fc <__fixdfsi>:
 800e8fc:	2806d53a 	srli	r3,r5,20
 800e900:	00800434 	movhi	r2,16
 800e904:	10bfffc4 	addi	r2,r2,-1
 800e908:	18c1ffcc 	andi	r3,r3,2047
 800e90c:	0180ff84 	movi	r6,1022
 800e910:	2884703a 	and	r2,r5,r2
 800e914:	280ad7fa 	srli	r5,r5,31
 800e918:	30c0130e 	bge	r6,r3,800e968 <__fixdfsi+0x6c>
 800e91c:	01810744 	movi	r6,1053
 800e920:	30c00d16 	blt	r6,r3,800e958 <__fixdfsi+0x5c>
 800e924:	01810cc4 	movi	r6,1075
 800e928:	30cdc83a 	sub	r6,r6,r3
 800e92c:	01c007c4 	movi	r7,31
 800e930:	10800434 	orhi	r2,r2,16
 800e934:	39800e0e 	bge	r7,r6,800e970 <__fixdfsi+0x74>
 800e938:	010104c4 	movi	r4,1043
 800e93c:	20c7c83a 	sub	r3,r4,r3
 800e940:	10c6d83a 	srl	r3,r2,r3
 800e944:	29403fcc 	andi	r5,r5,255
 800e948:	0145c83a 	sub	r2,zero,r5
 800e94c:	1884f03a 	xor	r2,r3,r2
 800e950:	1145883a 	add	r2,r2,r5
 800e954:	f800283a 	ret
 800e958:	00a00034 	movhi	r2,32768
 800e95c:	10bfffc4 	addi	r2,r2,-1
 800e960:	2885883a 	add	r2,r5,r2
 800e964:	f800283a 	ret
 800e968:	0005883a 	mov	r2,zero
 800e96c:	f800283a 	ret
 800e970:	18fefb44 	addi	r3,r3,-1043
 800e974:	2188d83a 	srl	r4,r4,r6
 800e978:	10c6983a 	sll	r3,r2,r3
 800e97c:	20c6b03a 	or	r3,r4,r3
 800e980:	003ff006 	br	800e944 <__alt_data_end+0xfc00e944>

0800e984 <__floatsidf>:
 800e984:	defffd04 	addi	sp,sp,-12
 800e988:	dc400115 	stw	r17,4(sp)
 800e98c:	dfc00215 	stw	ra,8(sp)
 800e990:	dc000015 	stw	r16,0(sp)
 800e994:	2023883a 	mov	r17,r4
 800e998:	20001426 	beq	r4,zero,800e9ec <__floatsidf+0x68>
 800e99c:	2020d7fa 	srli	r16,r4,31
 800e9a0:	80000126 	beq	r16,zero,800e9a8 <__floatsidf+0x24>
 800e9a4:	0123c83a 	sub	r17,zero,r4
 800e9a8:	8809883a 	mov	r4,r17
 800e9ac:	800eaf80 	call	800eaf8 <__clzsi2>
 800e9b0:	01410784 	movi	r5,1054
 800e9b4:	00c00284 	movi	r3,10
 800e9b8:	288bc83a 	sub	r5,r5,r2
 800e9bc:	18801c16 	blt	r3,r2,800ea30 <__floatsidf+0xac>
 800e9c0:	00c002c4 	movi	r3,11
 800e9c4:	1887c83a 	sub	r3,r3,r2
 800e9c8:	88c8d83a 	srl	r4,r17,r3
 800e9cc:	00c00434 	movhi	r3,16
 800e9d0:	18ffffc4 	addi	r3,r3,-1
 800e9d4:	10800544 	addi	r2,r2,21
 800e9d8:	20c8703a 	and	r4,r4,r3
 800e9dc:	8884983a 	sll	r2,r17,r2
 800e9e0:	28c1ffcc 	andi	r3,r5,2047
 800e9e4:	800d883a 	mov	r6,r16
 800e9e8:	00000406 	br	800e9fc <__floatsidf+0x78>
 800e9ec:	000d883a 	mov	r6,zero
 800e9f0:	0007883a 	mov	r3,zero
 800e9f4:	0009883a 	mov	r4,zero
 800e9f8:	0005883a 	mov	r2,zero
 800e9fc:	180a953a 	slli	r5,r3,20
 800ea00:	31803fcc 	andi	r6,r6,255
 800ea04:	00c00434 	movhi	r3,16
 800ea08:	300c97fa 	slli	r6,r6,31
 800ea0c:	18ffffc4 	addi	r3,r3,-1
 800ea10:	20c6703a 	and	r3,r4,r3
 800ea14:	1946b03a 	or	r3,r3,r5
 800ea18:	1986b03a 	or	r3,r3,r6
 800ea1c:	dfc00217 	ldw	ra,8(sp)
 800ea20:	dc400117 	ldw	r17,4(sp)
 800ea24:	dc000017 	ldw	r16,0(sp)
 800ea28:	dec00304 	addi	sp,sp,12
 800ea2c:	f800283a 	ret
 800ea30:	10fffd44 	addi	r3,r2,-11
 800ea34:	88c8983a 	sll	r4,r17,r3
 800ea38:	00800434 	movhi	r2,16
 800ea3c:	10bfffc4 	addi	r2,r2,-1
 800ea40:	2088703a 	and	r4,r4,r2
 800ea44:	28c1ffcc 	andi	r3,r5,2047
 800ea48:	800d883a 	mov	r6,r16
 800ea4c:	0005883a 	mov	r2,zero
 800ea50:	003fea06 	br	800e9fc <__alt_data_end+0xfc00e9fc>

0800ea54 <__floatunsidf>:
 800ea54:	defffe04 	addi	sp,sp,-8
 800ea58:	dc000015 	stw	r16,0(sp)
 800ea5c:	dfc00115 	stw	ra,4(sp)
 800ea60:	2021883a 	mov	r16,r4
 800ea64:	20001026 	beq	r4,zero,800eaa8 <__floatunsidf+0x54>
 800ea68:	800eaf80 	call	800eaf8 <__clzsi2>
 800ea6c:	01410784 	movi	r5,1054
 800ea70:	100d883a 	mov	r6,r2
 800ea74:	288bc83a 	sub	r5,r5,r2
 800ea78:	00800284 	movi	r2,10
 800ea7c:	11801616 	blt	r2,r6,800ead8 <__floatunsidf+0x84>
 800ea80:	008002c4 	movi	r2,11
 800ea84:	1185c83a 	sub	r2,r2,r6
 800ea88:	8084d83a 	srl	r2,r16,r2
 800ea8c:	00c00434 	movhi	r3,16
 800ea90:	31c00544 	addi	r7,r6,21
 800ea94:	18ffffc4 	addi	r3,r3,-1
 800ea98:	81e0983a 	sll	r16,r16,r7
 800ea9c:	10cc703a 	and	r6,r2,r3
 800eaa0:	2941ffcc 	andi	r5,r5,2047
 800eaa4:	00000206 	br	800eab0 <__floatunsidf+0x5c>
 800eaa8:	000b883a 	mov	r5,zero
 800eaac:	000d883a 	mov	r6,zero
 800eab0:	280a953a 	slli	r5,r5,20
 800eab4:	00c00434 	movhi	r3,16
 800eab8:	18ffffc4 	addi	r3,r3,-1
 800eabc:	30c6703a 	and	r3,r6,r3
 800eac0:	8005883a 	mov	r2,r16
 800eac4:	1946b03a 	or	r3,r3,r5
 800eac8:	dfc00117 	ldw	ra,4(sp)
 800eacc:	dc000017 	ldw	r16,0(sp)
 800ead0:	dec00204 	addi	sp,sp,8
 800ead4:	f800283a 	ret
 800ead8:	31bffd44 	addi	r6,r6,-11
 800eadc:	818c983a 	sll	r6,r16,r6
 800eae0:	00800434 	movhi	r2,16
 800eae4:	10bfffc4 	addi	r2,r2,-1
 800eae8:	2941ffcc 	andi	r5,r5,2047
 800eaec:	0021883a 	mov	r16,zero
 800eaf0:	308c703a 	and	r6,r6,r2
 800eaf4:	003fee06 	br	800eab0 <__alt_data_end+0xfc00eab0>

0800eaf8 <__clzsi2>:
 800eaf8:	00bfffd4 	movui	r2,65535
 800eafc:	11000b36 	bltu	r2,r4,800eb2c <__clzsi2+0x34>
 800eb00:	00803fc4 	movi	r2,255
 800eb04:	1100122e 	bgeu	r2,r4,800eb50 <__clzsi2+0x58>
 800eb08:	00c00204 	movi	r3,8
 800eb0c:	01400604 	movi	r5,24
 800eb10:	20c8d83a 	srl	r4,r4,r3
 800eb14:	00820074 	movhi	r2,2049
 800eb18:	10873904 	addi	r2,r2,7396
 800eb1c:	1109883a 	add	r4,r2,r4
 800eb20:	20800003 	ldbu	r2,0(r4)
 800eb24:	2885c83a 	sub	r2,r5,r2
 800eb28:	f800283a 	ret
 800eb2c:	00804034 	movhi	r2,256
 800eb30:	10bfffc4 	addi	r2,r2,-1
 800eb34:	11000336 	bltu	r2,r4,800eb44 <__clzsi2+0x4c>
 800eb38:	00c00404 	movi	r3,16
 800eb3c:	180b883a 	mov	r5,r3
 800eb40:	003ff306 	br	800eb10 <__alt_data_end+0xfc00eb10>
 800eb44:	00c00604 	movi	r3,24
 800eb48:	01400204 	movi	r5,8
 800eb4c:	003ff006 	br	800eb10 <__alt_data_end+0xfc00eb10>
 800eb50:	0007883a 	mov	r3,zero
 800eb54:	01400804 	movi	r5,32
 800eb58:	003fed06 	br	800eb10 <__alt_data_end+0xfc00eb10>

0800eb5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800eb5c:	defffe04 	addi	sp,sp,-8
 800eb60:	dfc00115 	stw	ra,4(sp)
 800eb64:	df000015 	stw	fp,0(sp)
 800eb68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800eb6c:	00820074 	movhi	r2,2049
 800eb70:	108e3c04 	addi	r2,r2,14576
 800eb74:	10800017 	ldw	r2,0(r2)
 800eb78:	10000526 	beq	r2,zero,800eb90 <alt_get_errno+0x34>
 800eb7c:	00820074 	movhi	r2,2049
 800eb80:	108e3c04 	addi	r2,r2,14576
 800eb84:	10800017 	ldw	r2,0(r2)
 800eb88:	103ee83a 	callr	r2
 800eb8c:	00000206 	br	800eb98 <alt_get_errno+0x3c>
 800eb90:	00820074 	movhi	r2,2049
 800eb94:	10950304 	addi	r2,r2,21516
}
 800eb98:	e037883a 	mov	sp,fp
 800eb9c:	dfc00117 	ldw	ra,4(sp)
 800eba0:	df000017 	ldw	fp,0(sp)
 800eba4:	dec00204 	addi	sp,sp,8
 800eba8:	f800283a 	ret

0800ebac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800ebac:	defffb04 	addi	sp,sp,-20
 800ebb0:	dfc00415 	stw	ra,16(sp)
 800ebb4:	df000315 	stw	fp,12(sp)
 800ebb8:	df000304 	addi	fp,sp,12
 800ebbc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800ebc0:	e0bfff17 	ldw	r2,-4(fp)
 800ebc4:	10000816 	blt	r2,zero,800ebe8 <close+0x3c>
 800ebc8:	e13fff17 	ldw	r4,-4(fp)
 800ebcc:	01400304 	movi	r5,12
 800ebd0:	800c3380 	call	800c338 <__mulsi3>
 800ebd4:	1007883a 	mov	r3,r2
 800ebd8:	00820074 	movhi	r2,2049
 800ebdc:	1089b904 	addi	r2,r2,9956
 800ebe0:	1885883a 	add	r2,r3,r2
 800ebe4:	00000106 	br	800ebec <close+0x40>
 800ebe8:	0005883a 	mov	r2,zero
 800ebec:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800ebf0:	e0bffd17 	ldw	r2,-12(fp)
 800ebf4:	10001926 	beq	r2,zero,800ec5c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800ebf8:	e0bffd17 	ldw	r2,-12(fp)
 800ebfc:	10800017 	ldw	r2,0(r2)
 800ec00:	10800417 	ldw	r2,16(r2)
 800ec04:	10000626 	beq	r2,zero,800ec20 <close+0x74>
 800ec08:	e0bffd17 	ldw	r2,-12(fp)
 800ec0c:	10800017 	ldw	r2,0(r2)
 800ec10:	10800417 	ldw	r2,16(r2)
 800ec14:	e13ffd17 	ldw	r4,-12(fp)
 800ec18:	103ee83a 	callr	r2
 800ec1c:	00000106 	br	800ec24 <close+0x78>
 800ec20:	0005883a 	mov	r2,zero
 800ec24:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800ec28:	e13fff17 	ldw	r4,-4(fp)
 800ec2c:	800f2d00 	call	800f2d0 <alt_release_fd>
    if (rval < 0)
 800ec30:	e0bffe17 	ldw	r2,-8(fp)
 800ec34:	1000070e 	bge	r2,zero,800ec54 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800ec38:	800eb5c0 	call	800eb5c <alt_get_errno>
 800ec3c:	1007883a 	mov	r3,r2
 800ec40:	e0bffe17 	ldw	r2,-8(fp)
 800ec44:	0085c83a 	sub	r2,zero,r2
 800ec48:	18800015 	stw	r2,0(r3)
      return -1;
 800ec4c:	00bfffc4 	movi	r2,-1
 800ec50:	00000706 	br	800ec70 <close+0xc4>
    }
    return 0;
 800ec54:	0005883a 	mov	r2,zero
 800ec58:	00000506 	br	800ec70 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ec5c:	800eb5c0 	call	800eb5c <alt_get_errno>
 800ec60:	1007883a 	mov	r3,r2
 800ec64:	00801444 	movi	r2,81
 800ec68:	18800015 	stw	r2,0(r3)
    return -1;
 800ec6c:	00bfffc4 	movi	r2,-1
  }
}
 800ec70:	e037883a 	mov	sp,fp
 800ec74:	dfc00117 	ldw	ra,4(sp)
 800ec78:	df000017 	ldw	fp,0(sp)
 800ec7c:	dec00204 	addi	sp,sp,8
 800ec80:	f800283a 	ret

0800ec84 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800ec84:	defffc04 	addi	sp,sp,-16
 800ec88:	df000315 	stw	fp,12(sp)
 800ec8c:	df000304 	addi	fp,sp,12
 800ec90:	e13ffd15 	stw	r4,-12(fp)
 800ec94:	e17ffe15 	stw	r5,-8(fp)
 800ec98:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800ec9c:	e0bfff17 	ldw	r2,-4(fp)
}
 800eca0:	e037883a 	mov	sp,fp
 800eca4:	df000017 	ldw	fp,0(sp)
 800eca8:	dec00104 	addi	sp,sp,4
 800ecac:	f800283a 	ret

0800ecb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ecb0:	defffe04 	addi	sp,sp,-8
 800ecb4:	dfc00115 	stw	ra,4(sp)
 800ecb8:	df000015 	stw	fp,0(sp)
 800ecbc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ecc0:	00820074 	movhi	r2,2049
 800ecc4:	108e3c04 	addi	r2,r2,14576
 800ecc8:	10800017 	ldw	r2,0(r2)
 800eccc:	10000526 	beq	r2,zero,800ece4 <alt_get_errno+0x34>
 800ecd0:	00820074 	movhi	r2,2049
 800ecd4:	108e3c04 	addi	r2,r2,14576
 800ecd8:	10800017 	ldw	r2,0(r2)
 800ecdc:	103ee83a 	callr	r2
 800ece0:	00000206 	br	800ecec <alt_get_errno+0x3c>
 800ece4:	00820074 	movhi	r2,2049
 800ece8:	10950304 	addi	r2,r2,21516
}
 800ecec:	e037883a 	mov	sp,fp
 800ecf0:	dfc00117 	ldw	ra,4(sp)
 800ecf4:	df000017 	ldw	fp,0(sp)
 800ecf8:	dec00204 	addi	sp,sp,8
 800ecfc:	f800283a 	ret

0800ed00 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800ed00:	defffb04 	addi	sp,sp,-20
 800ed04:	dfc00415 	stw	ra,16(sp)
 800ed08:	df000315 	stw	fp,12(sp)
 800ed0c:	df000304 	addi	fp,sp,12
 800ed10:	e13ffe15 	stw	r4,-8(fp)
 800ed14:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ed18:	e0bffe17 	ldw	r2,-8(fp)
 800ed1c:	10000816 	blt	r2,zero,800ed40 <fstat+0x40>
 800ed20:	e13ffe17 	ldw	r4,-8(fp)
 800ed24:	01400304 	movi	r5,12
 800ed28:	800c3380 	call	800c338 <__mulsi3>
 800ed2c:	1007883a 	mov	r3,r2
 800ed30:	00820074 	movhi	r2,2049
 800ed34:	1089b904 	addi	r2,r2,9956
 800ed38:	1885883a 	add	r2,r3,r2
 800ed3c:	00000106 	br	800ed44 <fstat+0x44>
 800ed40:	0005883a 	mov	r2,zero
 800ed44:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800ed48:	e0bffd17 	ldw	r2,-12(fp)
 800ed4c:	10001026 	beq	r2,zero,800ed90 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800ed50:	e0bffd17 	ldw	r2,-12(fp)
 800ed54:	10800017 	ldw	r2,0(r2)
 800ed58:	10800817 	ldw	r2,32(r2)
 800ed5c:	10000726 	beq	r2,zero,800ed7c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 800ed60:	e0bffd17 	ldw	r2,-12(fp)
 800ed64:	10800017 	ldw	r2,0(r2)
 800ed68:	10800817 	ldw	r2,32(r2)
 800ed6c:	e13ffd17 	ldw	r4,-12(fp)
 800ed70:	e17fff17 	ldw	r5,-4(fp)
 800ed74:	103ee83a 	callr	r2
 800ed78:	00000a06 	br	800eda4 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800ed7c:	e0bfff17 	ldw	r2,-4(fp)
 800ed80:	00c80004 	movi	r3,8192
 800ed84:	10c00115 	stw	r3,4(r2)
      return 0;
 800ed88:	0005883a 	mov	r2,zero
 800ed8c:	00000506 	br	800eda4 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ed90:	800ecb00 	call	800ecb0 <alt_get_errno>
 800ed94:	1007883a 	mov	r3,r2
 800ed98:	00801444 	movi	r2,81
 800ed9c:	18800015 	stw	r2,0(r3)
    return -1;
 800eda0:	00bfffc4 	movi	r2,-1
  }
}
 800eda4:	e037883a 	mov	sp,fp
 800eda8:	dfc00117 	ldw	ra,4(sp)
 800edac:	df000017 	ldw	fp,0(sp)
 800edb0:	dec00204 	addi	sp,sp,8
 800edb4:	f800283a 	ret

0800edb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800edb8:	defffe04 	addi	sp,sp,-8
 800edbc:	dfc00115 	stw	ra,4(sp)
 800edc0:	df000015 	stw	fp,0(sp)
 800edc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800edc8:	00820074 	movhi	r2,2049
 800edcc:	108e3c04 	addi	r2,r2,14576
 800edd0:	10800017 	ldw	r2,0(r2)
 800edd4:	10000526 	beq	r2,zero,800edec <alt_get_errno+0x34>
 800edd8:	00820074 	movhi	r2,2049
 800eddc:	108e3c04 	addi	r2,r2,14576
 800ede0:	10800017 	ldw	r2,0(r2)
 800ede4:	103ee83a 	callr	r2
 800ede8:	00000206 	br	800edf4 <alt_get_errno+0x3c>
 800edec:	00820074 	movhi	r2,2049
 800edf0:	10950304 	addi	r2,r2,21516
}
 800edf4:	e037883a 	mov	sp,fp
 800edf8:	dfc00117 	ldw	ra,4(sp)
 800edfc:	df000017 	ldw	fp,0(sp)
 800ee00:	dec00204 	addi	sp,sp,8
 800ee04:	f800283a 	ret

0800ee08 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800ee08:	deffed04 	addi	sp,sp,-76
 800ee0c:	dfc01215 	stw	ra,72(sp)
 800ee10:	df001115 	stw	fp,68(sp)
 800ee14:	df001104 	addi	fp,sp,68
 800ee18:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ee1c:	e0bfff17 	ldw	r2,-4(fp)
 800ee20:	10000816 	blt	r2,zero,800ee44 <isatty+0x3c>
 800ee24:	e13fff17 	ldw	r4,-4(fp)
 800ee28:	01400304 	movi	r5,12
 800ee2c:	800c3380 	call	800c338 <__mulsi3>
 800ee30:	1007883a 	mov	r3,r2
 800ee34:	00820074 	movhi	r2,2049
 800ee38:	1089b904 	addi	r2,r2,9956
 800ee3c:	1885883a 	add	r2,r3,r2
 800ee40:	00000106 	br	800ee48 <isatty+0x40>
 800ee44:	0005883a 	mov	r2,zero
 800ee48:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800ee4c:	e0bfef17 	ldw	r2,-68(fp)
 800ee50:	10000e26 	beq	r2,zero,800ee8c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800ee54:	e0bfef17 	ldw	r2,-68(fp)
 800ee58:	10800017 	ldw	r2,0(r2)
 800ee5c:	10800817 	ldw	r2,32(r2)
 800ee60:	1000021e 	bne	r2,zero,800ee6c <isatty+0x64>
    {
      return 1;
 800ee64:	00800044 	movi	r2,1
 800ee68:	00000d06 	br	800eea0 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800ee6c:	e0bff004 	addi	r2,fp,-64
 800ee70:	e13fff17 	ldw	r4,-4(fp)
 800ee74:	100b883a 	mov	r5,r2
 800ee78:	800ed000 	call	800ed00 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800ee7c:	e0bff117 	ldw	r2,-60(fp)
 800ee80:	10880020 	cmpeqi	r2,r2,8192
 800ee84:	10803fcc 	andi	r2,r2,255
 800ee88:	00000506 	br	800eea0 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ee8c:	800edb80 	call	800edb8 <alt_get_errno>
 800ee90:	1007883a 	mov	r3,r2
 800ee94:	00801444 	movi	r2,81
 800ee98:	18800015 	stw	r2,0(r3)
    return 0;
 800ee9c:	0005883a 	mov	r2,zero
  }
}
 800eea0:	e037883a 	mov	sp,fp
 800eea4:	dfc00117 	ldw	ra,4(sp)
 800eea8:	df000017 	ldw	fp,0(sp)
 800eeac:	dec00204 	addi	sp,sp,8
 800eeb0:	f800283a 	ret

0800eeb4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800eeb4:	defffc04 	addi	sp,sp,-16
 800eeb8:	df000315 	stw	fp,12(sp)
 800eebc:	df000304 	addi	fp,sp,12
 800eec0:	e13ffd15 	stw	r4,-12(fp)
 800eec4:	e17ffe15 	stw	r5,-8(fp)
 800eec8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800eecc:	e0fffe17 	ldw	r3,-8(fp)
 800eed0:	e0bffd17 	ldw	r2,-12(fp)
 800eed4:	18800c26 	beq	r3,r2,800ef08 <alt_load_section+0x54>
  {
    while( to != end )
 800eed8:	00000806 	br	800eefc <alt_load_section+0x48>
    {
      *to++ = *from++;
 800eedc:	e0bffe17 	ldw	r2,-8(fp)
 800eee0:	10c00104 	addi	r3,r2,4
 800eee4:	e0fffe15 	stw	r3,-8(fp)
 800eee8:	e0fffd17 	ldw	r3,-12(fp)
 800eeec:	19000104 	addi	r4,r3,4
 800eef0:	e13ffd15 	stw	r4,-12(fp)
 800eef4:	18c00017 	ldw	r3,0(r3)
 800eef8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800eefc:	e0fffe17 	ldw	r3,-8(fp)
 800ef00:	e0bfff17 	ldw	r2,-4(fp)
 800ef04:	18bff51e 	bne	r3,r2,800eedc <__alt_data_end+0xfc00eedc>
    {
      *to++ = *from++;
    }
  }
}
 800ef08:	e037883a 	mov	sp,fp
 800ef0c:	df000017 	ldw	fp,0(sp)
 800ef10:	dec00104 	addi	sp,sp,4
 800ef14:	f800283a 	ret

0800ef18 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800ef18:	defffe04 	addi	sp,sp,-8
 800ef1c:	dfc00115 	stw	ra,4(sp)
 800ef20:	df000015 	stw	fp,0(sp)
 800ef24:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800ef28:	01020074 	movhi	r4,2049
 800ef2c:	210e4104 	addi	r4,r4,14596
 800ef30:	01420074 	movhi	r5,2049
 800ef34:	29478604 	addi	r5,r5,7704
 800ef38:	01820074 	movhi	r6,2049
 800ef3c:	318e4104 	addi	r6,r6,14596
 800ef40:	800eeb40 	call	800eeb4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800ef44:	01020034 	movhi	r4,2048
 800ef48:	21000804 	addi	r4,r4,32
 800ef4c:	01420034 	movhi	r5,2048
 800ef50:	29400804 	addi	r5,r5,32
 800ef54:	01820034 	movhi	r6,2048
 800ef58:	31806f04 	addi	r6,r6,444
 800ef5c:	800eeb40 	call	800eeb4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800ef60:	01020074 	movhi	r4,2049
 800ef64:	2104e804 	addi	r4,r4,5024
 800ef68:	01420074 	movhi	r5,2049
 800ef6c:	2944e804 	addi	r5,r5,5024
 800ef70:	01820074 	movhi	r6,2049
 800ef74:	31878604 	addi	r6,r6,7704
 800ef78:	800eeb40 	call	800eeb4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800ef7c:	80103180 	call	8010318 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800ef80:	80104e00 	call	80104e0 <alt_icache_flush_all>
}
 800ef84:	e037883a 	mov	sp,fp
 800ef88:	dfc00117 	ldw	ra,4(sp)
 800ef8c:	df000017 	ldw	fp,0(sp)
 800ef90:	dec00204 	addi	sp,sp,8
 800ef94:	f800283a 	ret

0800ef98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ef98:	defffe04 	addi	sp,sp,-8
 800ef9c:	dfc00115 	stw	ra,4(sp)
 800efa0:	df000015 	stw	fp,0(sp)
 800efa4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800efa8:	00820074 	movhi	r2,2049
 800efac:	108e3c04 	addi	r2,r2,14576
 800efb0:	10800017 	ldw	r2,0(r2)
 800efb4:	10000526 	beq	r2,zero,800efcc <alt_get_errno+0x34>
 800efb8:	00820074 	movhi	r2,2049
 800efbc:	108e3c04 	addi	r2,r2,14576
 800efc0:	10800017 	ldw	r2,0(r2)
 800efc4:	103ee83a 	callr	r2
 800efc8:	00000206 	br	800efd4 <alt_get_errno+0x3c>
 800efcc:	00820074 	movhi	r2,2049
 800efd0:	10950304 	addi	r2,r2,21516
}
 800efd4:	e037883a 	mov	sp,fp
 800efd8:	dfc00117 	ldw	ra,4(sp)
 800efdc:	df000017 	ldw	fp,0(sp)
 800efe0:	dec00204 	addi	sp,sp,8
 800efe4:	f800283a 	ret

0800efe8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800efe8:	defff904 	addi	sp,sp,-28
 800efec:	dfc00615 	stw	ra,24(sp)
 800eff0:	df000515 	stw	fp,20(sp)
 800eff4:	df000504 	addi	fp,sp,20
 800eff8:	e13ffd15 	stw	r4,-12(fp)
 800effc:	e17ffe15 	stw	r5,-8(fp)
 800f000:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800f004:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f008:	e0bffd17 	ldw	r2,-12(fp)
 800f00c:	10000816 	blt	r2,zero,800f030 <lseek+0x48>
 800f010:	e13ffd17 	ldw	r4,-12(fp)
 800f014:	01400304 	movi	r5,12
 800f018:	800c3380 	call	800c338 <__mulsi3>
 800f01c:	1007883a 	mov	r3,r2
 800f020:	00820074 	movhi	r2,2049
 800f024:	1089b904 	addi	r2,r2,9956
 800f028:	1885883a 	add	r2,r3,r2
 800f02c:	00000106 	br	800f034 <lseek+0x4c>
 800f030:	0005883a 	mov	r2,zero
 800f034:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800f038:	e0bffc17 	ldw	r2,-16(fp)
 800f03c:	10001026 	beq	r2,zero,800f080 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800f040:	e0bffc17 	ldw	r2,-16(fp)
 800f044:	10800017 	ldw	r2,0(r2)
 800f048:	10800717 	ldw	r2,28(r2)
 800f04c:	10000926 	beq	r2,zero,800f074 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800f050:	e0bffc17 	ldw	r2,-16(fp)
 800f054:	10800017 	ldw	r2,0(r2)
 800f058:	10800717 	ldw	r2,28(r2)
 800f05c:	e13ffc17 	ldw	r4,-16(fp)
 800f060:	e17ffe17 	ldw	r5,-8(fp)
 800f064:	e1bfff17 	ldw	r6,-4(fp)
 800f068:	103ee83a 	callr	r2
 800f06c:	e0bffb15 	stw	r2,-20(fp)
 800f070:	00000506 	br	800f088 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800f074:	00bfde84 	movi	r2,-134
 800f078:	e0bffb15 	stw	r2,-20(fp)
 800f07c:	00000206 	br	800f088 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800f080:	00bfebc4 	movi	r2,-81
 800f084:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800f088:	e0bffb17 	ldw	r2,-20(fp)
 800f08c:	1000070e 	bge	r2,zero,800f0ac <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 800f090:	800ef980 	call	800ef98 <alt_get_errno>
 800f094:	1007883a 	mov	r3,r2
 800f098:	e0bffb17 	ldw	r2,-20(fp)
 800f09c:	0085c83a 	sub	r2,zero,r2
 800f0a0:	18800015 	stw	r2,0(r3)
    rc = -1;
 800f0a4:	00bfffc4 	movi	r2,-1
 800f0a8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800f0ac:	e0bffb17 	ldw	r2,-20(fp)
}
 800f0b0:	e037883a 	mov	sp,fp
 800f0b4:	dfc00117 	ldw	ra,4(sp)
 800f0b8:	df000017 	ldw	fp,0(sp)
 800f0bc:	dec00204 	addi	sp,sp,8
 800f0c0:	f800283a 	ret

0800f0c4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800f0c4:	defffd04 	addi	sp,sp,-12
 800f0c8:	dfc00215 	stw	ra,8(sp)
 800f0cc:	df000115 	stw	fp,4(sp)
 800f0d0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800f0d4:	0009883a 	mov	r4,zero
 800f0d8:	800f5b80 	call	800f5b8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800f0dc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800f0e0:	800f5ec0 	call	800f5ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800f0e4:	01020074 	movhi	r4,2049
 800f0e8:	21077c04 	addi	r4,r4,7664
 800f0ec:	01420074 	movhi	r5,2049
 800f0f0:	29477c04 	addi	r5,r5,7664
 800f0f4:	01820074 	movhi	r6,2049
 800f0f8:	31877c04 	addi	r6,r6,7664
 800f0fc:	80108ac0 	call	80108ac <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800f100:	80104280 	call	8010428 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800f104:	01020074 	movhi	r4,2049
 800f108:	21012104 	addi	r4,r4,1156
 800f10c:	8010ffc0 	call	8010ffc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800f110:	d126d317 	ldw	r4,-25780(gp)
 800f114:	d0e6d417 	ldw	r3,-25776(gp)
 800f118:	d0a6d517 	ldw	r2,-25772(gp)
 800f11c:	180b883a 	mov	r5,r3
 800f120:	100d883a 	mov	r6,r2
 800f124:	80003680 	call	8000368 <main>
 800f128:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800f12c:	01000044 	movi	r4,1
 800f130:	800ebac0 	call	800ebac <close>
  exit (result);
 800f134:	e13fff17 	ldw	r4,-4(fp)
 800f138:	80110100 	call	8011010 <exit>

0800f13c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800f13c:	defffe04 	addi	sp,sp,-8
 800f140:	df000115 	stw	fp,4(sp)
 800f144:	df000104 	addi	fp,sp,4
 800f148:	e13fff15 	stw	r4,-4(fp)
}
 800f14c:	e037883a 	mov	sp,fp
 800f150:	df000017 	ldw	fp,0(sp)
 800f154:	dec00104 	addi	sp,sp,4
 800f158:	f800283a 	ret

0800f15c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800f15c:	defffe04 	addi	sp,sp,-8
 800f160:	df000115 	stw	fp,4(sp)
 800f164:	df000104 	addi	fp,sp,4
 800f168:	e13fff15 	stw	r4,-4(fp)
}
 800f16c:	e037883a 	mov	sp,fp
 800f170:	df000017 	ldw	fp,0(sp)
 800f174:	dec00104 	addi	sp,sp,4
 800f178:	f800283a 	ret

0800f17c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f17c:	defffe04 	addi	sp,sp,-8
 800f180:	dfc00115 	stw	ra,4(sp)
 800f184:	df000015 	stw	fp,0(sp)
 800f188:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f18c:	00820074 	movhi	r2,2049
 800f190:	108e3c04 	addi	r2,r2,14576
 800f194:	10800017 	ldw	r2,0(r2)
 800f198:	10000526 	beq	r2,zero,800f1b0 <alt_get_errno+0x34>
 800f19c:	00820074 	movhi	r2,2049
 800f1a0:	108e3c04 	addi	r2,r2,14576
 800f1a4:	10800017 	ldw	r2,0(r2)
 800f1a8:	103ee83a 	callr	r2
 800f1ac:	00000206 	br	800f1b8 <alt_get_errno+0x3c>
 800f1b0:	00820074 	movhi	r2,2049
 800f1b4:	10950304 	addi	r2,r2,21516
}
 800f1b8:	e037883a 	mov	sp,fp
 800f1bc:	dfc00117 	ldw	ra,4(sp)
 800f1c0:	df000017 	ldw	fp,0(sp)
 800f1c4:	dec00204 	addi	sp,sp,8
 800f1c8:	f800283a 	ret

0800f1cc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800f1cc:	defff904 	addi	sp,sp,-28
 800f1d0:	dfc00615 	stw	ra,24(sp)
 800f1d4:	df000515 	stw	fp,20(sp)
 800f1d8:	df000504 	addi	fp,sp,20
 800f1dc:	e13ffd15 	stw	r4,-12(fp)
 800f1e0:	e17ffe15 	stw	r5,-8(fp)
 800f1e4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f1e8:	e0bffd17 	ldw	r2,-12(fp)
 800f1ec:	10000816 	blt	r2,zero,800f210 <read+0x44>
 800f1f0:	e13ffd17 	ldw	r4,-12(fp)
 800f1f4:	01400304 	movi	r5,12
 800f1f8:	800c3380 	call	800c338 <__mulsi3>
 800f1fc:	1007883a 	mov	r3,r2
 800f200:	00820074 	movhi	r2,2049
 800f204:	1089b904 	addi	r2,r2,9956
 800f208:	1885883a 	add	r2,r3,r2
 800f20c:	00000106 	br	800f214 <read+0x48>
 800f210:	0005883a 	mov	r2,zero
 800f214:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800f218:	e0bffb17 	ldw	r2,-20(fp)
 800f21c:	10002226 	beq	r2,zero,800f2a8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800f220:	e0bffb17 	ldw	r2,-20(fp)
 800f224:	10800217 	ldw	r2,8(r2)
 800f228:	108000cc 	andi	r2,r2,3
 800f22c:	10800060 	cmpeqi	r2,r2,1
 800f230:	1000181e 	bne	r2,zero,800f294 <read+0xc8>
        (fd->dev->read))
 800f234:	e0bffb17 	ldw	r2,-20(fp)
 800f238:	10800017 	ldw	r2,0(r2)
 800f23c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800f240:	10001426 	beq	r2,zero,800f294 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800f244:	e0bffb17 	ldw	r2,-20(fp)
 800f248:	10800017 	ldw	r2,0(r2)
 800f24c:	10800517 	ldw	r2,20(r2)
 800f250:	e0ffff17 	ldw	r3,-4(fp)
 800f254:	e13ffb17 	ldw	r4,-20(fp)
 800f258:	e17ffe17 	ldw	r5,-8(fp)
 800f25c:	180d883a 	mov	r6,r3
 800f260:	103ee83a 	callr	r2
 800f264:	e0bffc15 	stw	r2,-16(fp)
 800f268:	e0bffc17 	ldw	r2,-16(fp)
 800f26c:	1000070e 	bge	r2,zero,800f28c <read+0xc0>
        {
          ALT_ERRNO = -rval;
 800f270:	800f17c0 	call	800f17c <alt_get_errno>
 800f274:	1007883a 	mov	r3,r2
 800f278:	e0bffc17 	ldw	r2,-16(fp)
 800f27c:	0085c83a 	sub	r2,zero,r2
 800f280:	18800015 	stw	r2,0(r3)
          return -1;
 800f284:	00bfffc4 	movi	r2,-1
 800f288:	00000c06 	br	800f2bc <read+0xf0>
        }
        return rval;
 800f28c:	e0bffc17 	ldw	r2,-16(fp)
 800f290:	00000a06 	br	800f2bc <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800f294:	800f17c0 	call	800f17c <alt_get_errno>
 800f298:	1007883a 	mov	r3,r2
 800f29c:	00800344 	movi	r2,13
 800f2a0:	18800015 	stw	r2,0(r3)
 800f2a4:	00000406 	br	800f2b8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800f2a8:	800f17c0 	call	800f17c <alt_get_errno>
 800f2ac:	1007883a 	mov	r3,r2
 800f2b0:	00801444 	movi	r2,81
 800f2b4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800f2b8:	00bfffc4 	movi	r2,-1
}
 800f2bc:	e037883a 	mov	sp,fp
 800f2c0:	dfc00117 	ldw	ra,4(sp)
 800f2c4:	df000017 	ldw	fp,0(sp)
 800f2c8:	dec00204 	addi	sp,sp,8
 800f2cc:	f800283a 	ret

0800f2d0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800f2d0:	defffc04 	addi	sp,sp,-16
 800f2d4:	dfc00315 	stw	ra,12(sp)
 800f2d8:	df000215 	stw	fp,8(sp)
 800f2dc:	dc000115 	stw	r16,4(sp)
 800f2e0:	df000204 	addi	fp,sp,8
 800f2e4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800f2e8:	e0bffe17 	ldw	r2,-8(fp)
 800f2ec:	108000d0 	cmplti	r2,r2,3
 800f2f0:	1000111e 	bne	r2,zero,800f338 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800f2f4:	04020074 	movhi	r16,2049
 800f2f8:	8409b904 	addi	r16,r16,9956
 800f2fc:	e0bffe17 	ldw	r2,-8(fp)
 800f300:	1009883a 	mov	r4,r2
 800f304:	01400304 	movi	r5,12
 800f308:	800c3380 	call	800c338 <__mulsi3>
 800f30c:	8085883a 	add	r2,r16,r2
 800f310:	10800204 	addi	r2,r2,8
 800f314:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800f318:	04020074 	movhi	r16,2049
 800f31c:	8409b904 	addi	r16,r16,9956
 800f320:	e0bffe17 	ldw	r2,-8(fp)
 800f324:	1009883a 	mov	r4,r2
 800f328:	01400304 	movi	r5,12
 800f32c:	800c3380 	call	800c338 <__mulsi3>
 800f330:	8085883a 	add	r2,r16,r2
 800f334:	10000015 	stw	zero,0(r2)
  }
}
 800f338:	e6ffff04 	addi	sp,fp,-4
 800f33c:	dfc00217 	ldw	ra,8(sp)
 800f340:	df000117 	ldw	fp,4(sp)
 800f344:	dc000017 	ldw	r16,0(sp)
 800f348:	dec00304 	addi	sp,sp,12
 800f34c:	f800283a 	ret

0800f350 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800f350:	defff904 	addi	sp,sp,-28
 800f354:	df000615 	stw	fp,24(sp)
 800f358:	df000604 	addi	fp,sp,24
 800f35c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f360:	0005303a 	rdctl	r2,status
 800f364:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f368:	e0fffc17 	ldw	r3,-16(fp)
 800f36c:	00bfff84 	movi	r2,-2
 800f370:	1884703a 	and	r2,r3,r2
 800f374:	1001703a 	wrctl	status,r2
  
  return context;
 800f378:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800f37c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800f380:	d0a00c17 	ldw	r2,-32720(gp)
 800f384:	10c000c4 	addi	r3,r2,3
 800f388:	00bfff04 	movi	r2,-4
 800f38c:	1884703a 	and	r2,r3,r2
 800f390:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800f394:	d0e00c17 	ldw	r3,-32720(gp)
 800f398:	e0bfff17 	ldw	r2,-4(fp)
 800f39c:	1887883a 	add	r3,r3,r2
 800f3a0:	00830034 	movhi	r2,3072
 800f3a4:	10800004 	addi	r2,r2,0
 800f3a8:	10c0062e 	bgeu	r2,r3,800f3c4 <sbrk+0x74>
 800f3ac:	e0bffa17 	ldw	r2,-24(fp)
 800f3b0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f3b4:	e0bffd17 	ldw	r2,-12(fp)
 800f3b8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800f3bc:	00bfffc4 	movi	r2,-1
 800f3c0:	00000b06 	br	800f3f0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800f3c4:	d0a00c17 	ldw	r2,-32720(gp)
 800f3c8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800f3cc:	d0e00c17 	ldw	r3,-32720(gp)
 800f3d0:	e0bfff17 	ldw	r2,-4(fp)
 800f3d4:	1885883a 	add	r2,r3,r2
 800f3d8:	d0a00c15 	stw	r2,-32720(gp)
 800f3dc:	e0bffa17 	ldw	r2,-24(fp)
 800f3e0:	e0bffe15 	stw	r2,-8(fp)
 800f3e4:	e0bffe17 	ldw	r2,-8(fp)
 800f3e8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800f3ec:	e0bffb17 	ldw	r2,-20(fp)
} 
 800f3f0:	e037883a 	mov	sp,fp
 800f3f4:	df000017 	ldw	fp,0(sp)
 800f3f8:	dec00104 	addi	sp,sp,4
 800f3fc:	f800283a 	ret

0800f400 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800f400:	defffd04 	addi	sp,sp,-12
 800f404:	dfc00215 	stw	ra,8(sp)
 800f408:	df000115 	stw	fp,4(sp)
 800f40c:	df000104 	addi	fp,sp,4
 800f410:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 800f414:	e13fff17 	ldw	r4,-4(fp)
 800f418:	80101c00 	call	80101c0 <alt_busy_sleep>
}
 800f41c:	e037883a 	mov	sp,fp
 800f420:	dfc00117 	ldw	ra,4(sp)
 800f424:	df000017 	ldw	fp,0(sp)
 800f428:	dec00204 	addi	sp,sp,8
 800f42c:	f800283a 	ret

0800f430 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f430:	defffe04 	addi	sp,sp,-8
 800f434:	dfc00115 	stw	ra,4(sp)
 800f438:	df000015 	stw	fp,0(sp)
 800f43c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f440:	00820074 	movhi	r2,2049
 800f444:	108e3c04 	addi	r2,r2,14576
 800f448:	10800017 	ldw	r2,0(r2)
 800f44c:	10000526 	beq	r2,zero,800f464 <alt_get_errno+0x34>
 800f450:	00820074 	movhi	r2,2049
 800f454:	108e3c04 	addi	r2,r2,14576
 800f458:	10800017 	ldw	r2,0(r2)
 800f45c:	103ee83a 	callr	r2
 800f460:	00000206 	br	800f46c <alt_get_errno+0x3c>
 800f464:	00820074 	movhi	r2,2049
 800f468:	10950304 	addi	r2,r2,21516
}
 800f46c:	e037883a 	mov	sp,fp
 800f470:	dfc00117 	ldw	ra,4(sp)
 800f474:	df000017 	ldw	fp,0(sp)
 800f478:	dec00204 	addi	sp,sp,8
 800f47c:	f800283a 	ret

0800f480 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800f480:	defff904 	addi	sp,sp,-28
 800f484:	dfc00615 	stw	ra,24(sp)
 800f488:	df000515 	stw	fp,20(sp)
 800f48c:	df000504 	addi	fp,sp,20
 800f490:	e13ffd15 	stw	r4,-12(fp)
 800f494:	e17ffe15 	stw	r5,-8(fp)
 800f498:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f49c:	e0bffd17 	ldw	r2,-12(fp)
 800f4a0:	10000816 	blt	r2,zero,800f4c4 <write+0x44>
 800f4a4:	e13ffd17 	ldw	r4,-12(fp)
 800f4a8:	01400304 	movi	r5,12
 800f4ac:	800c3380 	call	800c338 <__mulsi3>
 800f4b0:	1007883a 	mov	r3,r2
 800f4b4:	00820074 	movhi	r2,2049
 800f4b8:	1089b904 	addi	r2,r2,9956
 800f4bc:	1885883a 	add	r2,r3,r2
 800f4c0:	00000106 	br	800f4c8 <write+0x48>
 800f4c4:	0005883a 	mov	r2,zero
 800f4c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800f4cc:	e0bffb17 	ldw	r2,-20(fp)
 800f4d0:	10002126 	beq	r2,zero,800f558 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800f4d4:	e0bffb17 	ldw	r2,-20(fp)
 800f4d8:	10800217 	ldw	r2,8(r2)
 800f4dc:	108000cc 	andi	r2,r2,3
 800f4e0:	10001826 	beq	r2,zero,800f544 <write+0xc4>
 800f4e4:	e0bffb17 	ldw	r2,-20(fp)
 800f4e8:	10800017 	ldw	r2,0(r2)
 800f4ec:	10800617 	ldw	r2,24(r2)
 800f4f0:	10001426 	beq	r2,zero,800f544 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800f4f4:	e0bffb17 	ldw	r2,-20(fp)
 800f4f8:	10800017 	ldw	r2,0(r2)
 800f4fc:	10800617 	ldw	r2,24(r2)
 800f500:	e0ffff17 	ldw	r3,-4(fp)
 800f504:	e13ffb17 	ldw	r4,-20(fp)
 800f508:	e17ffe17 	ldw	r5,-8(fp)
 800f50c:	180d883a 	mov	r6,r3
 800f510:	103ee83a 	callr	r2
 800f514:	e0bffc15 	stw	r2,-16(fp)
 800f518:	e0bffc17 	ldw	r2,-16(fp)
 800f51c:	1000070e 	bge	r2,zero,800f53c <write+0xbc>
      {
        ALT_ERRNO = -rval;
 800f520:	800f4300 	call	800f430 <alt_get_errno>
 800f524:	1007883a 	mov	r3,r2
 800f528:	e0bffc17 	ldw	r2,-16(fp)
 800f52c:	0085c83a 	sub	r2,zero,r2
 800f530:	18800015 	stw	r2,0(r3)
        return -1;
 800f534:	00bfffc4 	movi	r2,-1
 800f538:	00000c06 	br	800f56c <write+0xec>
      }
      return rval;
 800f53c:	e0bffc17 	ldw	r2,-16(fp)
 800f540:	00000a06 	br	800f56c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800f544:	800f4300 	call	800f430 <alt_get_errno>
 800f548:	1007883a 	mov	r3,r2
 800f54c:	00800344 	movi	r2,13
 800f550:	18800015 	stw	r2,0(r3)
 800f554:	00000406 	br	800f568 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800f558:	800f4300 	call	800f430 <alt_get_errno>
 800f55c:	1007883a 	mov	r3,r2
 800f560:	00801444 	movi	r2,81
 800f564:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800f568:	00bfffc4 	movi	r2,-1
}
 800f56c:	e037883a 	mov	sp,fp
 800f570:	dfc00117 	ldw	ra,4(sp)
 800f574:	df000017 	ldw	fp,0(sp)
 800f578:	dec00204 	addi	sp,sp,8
 800f57c:	f800283a 	ret

0800f580 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800f580:	defffd04 	addi	sp,sp,-12
 800f584:	dfc00215 	stw	ra,8(sp)
 800f588:	df000115 	stw	fp,4(sp)
 800f58c:	df000104 	addi	fp,sp,4
 800f590:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800f594:	e13fff17 	ldw	r4,-4(fp)
 800f598:	01420074 	movhi	r5,2049
 800f59c:	294e3904 	addi	r5,r5,14564
 800f5a0:	80103840 	call	8010384 <alt_dev_llist_insert>
}
 800f5a4:	e037883a 	mov	sp,fp
 800f5a8:	dfc00117 	ldw	ra,4(sp)
 800f5ac:	df000017 	ldw	fp,0(sp)
 800f5b0:	dec00204 	addi	sp,sp,8
 800f5b4:	f800283a 	ret

0800f5b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800f5b8:	defffd04 	addi	sp,sp,-12
 800f5bc:	dfc00215 	stw	ra,8(sp)
 800f5c0:	df000115 	stw	fp,4(sp)
 800f5c4:	df000104 	addi	fp,sp,4
 800f5c8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 800f5cc:	8010d640 	call	8010d64 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800f5d0:	00800044 	movi	r2,1
 800f5d4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800f5d8:	e037883a 	mov	sp,fp
 800f5dc:	dfc00117 	ldw	ra,4(sp)
 800f5e0:	df000017 	ldw	fp,0(sp)
 800f5e4:	dec00204 	addi	sp,sp,8
 800f5e8:	f800283a 	ret

0800f5ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800f5ec:	defffe04 	addi	sp,sp,-8
 800f5f0:	dfc00115 	stw	ra,4(sp)
 800f5f4:	df000015 	stw	fp,0(sp)
 800f5f8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800f5fc:	01020074 	movhi	r4,2049
 800f600:	210a2304 	addi	r4,r4,10380
 800f604:	000b883a 	mov	r5,zero
 800f608:	01800144 	movi	r6,5
 800f60c:	800f7980 	call	800f798 <altera_avalon_jtag_uart_init>
 800f610:	01020074 	movhi	r4,2049
 800f614:	210a1904 	addi	r4,r4,10340
 800f618:	800f5800 	call	800f580 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800f61c:	0001883a 	nop
}
 800f620:	e037883a 	mov	sp,fp
 800f624:	dfc00117 	ldw	ra,4(sp)
 800f628:	df000017 	ldw	fp,0(sp)
 800f62c:	dec00204 	addi	sp,sp,8
 800f630:	f800283a 	ret

0800f634 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800f634:	defffa04 	addi	sp,sp,-24
 800f638:	dfc00515 	stw	ra,20(sp)
 800f63c:	df000415 	stw	fp,16(sp)
 800f640:	df000404 	addi	fp,sp,16
 800f644:	e13ffd15 	stw	r4,-12(fp)
 800f648:	e17ffe15 	stw	r5,-8(fp)
 800f64c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f650:	e0bffd17 	ldw	r2,-12(fp)
 800f654:	10800017 	ldw	r2,0(r2)
 800f658:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800f65c:	e0bffc17 	ldw	r2,-16(fp)
 800f660:	10c00a04 	addi	r3,r2,40
 800f664:	e0bffd17 	ldw	r2,-12(fp)
 800f668:	10800217 	ldw	r2,8(r2)
 800f66c:	1809883a 	mov	r4,r3
 800f670:	e17ffe17 	ldw	r5,-8(fp)
 800f674:	e1bfff17 	ldw	r6,-4(fp)
 800f678:	100f883a 	mov	r7,r2
 800f67c:	800fc5c0 	call	800fc5c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800f680:	e037883a 	mov	sp,fp
 800f684:	dfc00117 	ldw	ra,4(sp)
 800f688:	df000017 	ldw	fp,0(sp)
 800f68c:	dec00204 	addi	sp,sp,8
 800f690:	f800283a 	ret

0800f694 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800f694:	defffa04 	addi	sp,sp,-24
 800f698:	dfc00515 	stw	ra,20(sp)
 800f69c:	df000415 	stw	fp,16(sp)
 800f6a0:	df000404 	addi	fp,sp,16
 800f6a4:	e13ffd15 	stw	r4,-12(fp)
 800f6a8:	e17ffe15 	stw	r5,-8(fp)
 800f6ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f6b0:	e0bffd17 	ldw	r2,-12(fp)
 800f6b4:	10800017 	ldw	r2,0(r2)
 800f6b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800f6bc:	e0bffc17 	ldw	r2,-16(fp)
 800f6c0:	10c00a04 	addi	r3,r2,40
 800f6c4:	e0bffd17 	ldw	r2,-12(fp)
 800f6c8:	10800217 	ldw	r2,8(r2)
 800f6cc:	1809883a 	mov	r4,r3
 800f6d0:	e17ffe17 	ldw	r5,-8(fp)
 800f6d4:	e1bfff17 	ldw	r6,-4(fp)
 800f6d8:	100f883a 	mov	r7,r2
 800f6dc:	800fe680 	call	800fe68 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800f6e0:	e037883a 	mov	sp,fp
 800f6e4:	dfc00117 	ldw	ra,4(sp)
 800f6e8:	df000017 	ldw	fp,0(sp)
 800f6ec:	dec00204 	addi	sp,sp,8
 800f6f0:	f800283a 	ret

0800f6f4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800f6f4:	defffc04 	addi	sp,sp,-16
 800f6f8:	dfc00315 	stw	ra,12(sp)
 800f6fc:	df000215 	stw	fp,8(sp)
 800f700:	df000204 	addi	fp,sp,8
 800f704:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f708:	e0bfff17 	ldw	r2,-4(fp)
 800f70c:	10800017 	ldw	r2,0(r2)
 800f710:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800f714:	e0bffe17 	ldw	r2,-8(fp)
 800f718:	10c00a04 	addi	r3,r2,40
 800f71c:	e0bfff17 	ldw	r2,-4(fp)
 800f720:	10800217 	ldw	r2,8(r2)
 800f724:	1809883a 	mov	r4,r3
 800f728:	100b883a 	mov	r5,r2
 800f72c:	800fb080 	call	800fb08 <altera_avalon_jtag_uart_close>
}
 800f730:	e037883a 	mov	sp,fp
 800f734:	dfc00117 	ldw	ra,4(sp)
 800f738:	df000017 	ldw	fp,0(sp)
 800f73c:	dec00204 	addi	sp,sp,8
 800f740:	f800283a 	ret

0800f744 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800f744:	defffa04 	addi	sp,sp,-24
 800f748:	dfc00515 	stw	ra,20(sp)
 800f74c:	df000415 	stw	fp,16(sp)
 800f750:	df000404 	addi	fp,sp,16
 800f754:	e13ffd15 	stw	r4,-12(fp)
 800f758:	e17ffe15 	stw	r5,-8(fp)
 800f75c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800f760:	e0bffd17 	ldw	r2,-12(fp)
 800f764:	10800017 	ldw	r2,0(r2)
 800f768:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800f76c:	e0bffc17 	ldw	r2,-16(fp)
 800f770:	10800a04 	addi	r2,r2,40
 800f774:	1009883a 	mov	r4,r2
 800f778:	e17ffe17 	ldw	r5,-8(fp)
 800f77c:	e1bfff17 	ldw	r6,-4(fp)
 800f780:	800fb700 	call	800fb70 <altera_avalon_jtag_uart_ioctl>
}
 800f784:	e037883a 	mov	sp,fp
 800f788:	dfc00117 	ldw	ra,4(sp)
 800f78c:	df000017 	ldw	fp,0(sp)
 800f790:	dec00204 	addi	sp,sp,8
 800f794:	f800283a 	ret

0800f798 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800f798:	defffa04 	addi	sp,sp,-24
 800f79c:	dfc00515 	stw	ra,20(sp)
 800f7a0:	df000415 	stw	fp,16(sp)
 800f7a4:	df000404 	addi	fp,sp,16
 800f7a8:	e13ffd15 	stw	r4,-12(fp)
 800f7ac:	e17ffe15 	stw	r5,-8(fp)
 800f7b0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f7b4:	e0bffd17 	ldw	r2,-12(fp)
 800f7b8:	00c00044 	movi	r3,1
 800f7bc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800f7c0:	e0bffd17 	ldw	r2,-12(fp)
 800f7c4:	10800017 	ldw	r2,0(r2)
 800f7c8:	10800104 	addi	r2,r2,4
 800f7cc:	1007883a 	mov	r3,r2
 800f7d0:	e0bffd17 	ldw	r2,-12(fp)
 800f7d4:	10800817 	ldw	r2,32(r2)
 800f7d8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800f7dc:	e0fffe17 	ldw	r3,-8(fp)
 800f7e0:	e0bfff17 	ldw	r2,-4(fp)
 800f7e4:	d8000015 	stw	zero,0(sp)
 800f7e8:	1809883a 	mov	r4,r3
 800f7ec:	100b883a 	mov	r5,r2
 800f7f0:	01820074 	movhi	r6,2049
 800f7f4:	31be1704 	addi	r6,r6,-1956
 800f7f8:	e1fffd17 	ldw	r7,-12(fp)
 800f7fc:	80104fc0 	call	80104fc <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800f800:	e0bffd17 	ldw	r2,-12(fp)
 800f804:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800f808:	e0bffd17 	ldw	r2,-12(fp)
 800f80c:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800f810:	00820074 	movhi	r2,2049
 800f814:	10950804 	addi	r2,r2,21536
 800f818:	10800017 	ldw	r2,0(r2)
 800f81c:	1809883a 	mov	r4,r3
 800f820:	100b883a 	mov	r5,r2
 800f824:	01820074 	movhi	r6,2049
 800f828:	31be9804 	addi	r6,r6,-1440
 800f82c:	e1fffd17 	ldw	r7,-12(fp)
 800f830:	80100800 	call	8010080 <alt_alarm_start>
 800f834:	1000040e 	bge	r2,zero,800f848 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800f838:	e0fffd17 	ldw	r3,-12(fp)
 800f83c:	00a00034 	movhi	r2,32768
 800f840:	10bfffc4 	addi	r2,r2,-1
 800f844:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800f848:	e037883a 	mov	sp,fp
 800f84c:	dfc00117 	ldw	ra,4(sp)
 800f850:	df000017 	ldw	fp,0(sp)
 800f854:	dec00204 	addi	sp,sp,8
 800f858:	f800283a 	ret

0800f85c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800f85c:	defff804 	addi	sp,sp,-32
 800f860:	df000715 	stw	fp,28(sp)
 800f864:	df000704 	addi	fp,sp,28
 800f868:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800f86c:	e0bfff17 	ldw	r2,-4(fp)
 800f870:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800f874:	e0bffb17 	ldw	r2,-20(fp)
 800f878:	10800017 	ldw	r2,0(r2)
 800f87c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f880:	e0bffc17 	ldw	r2,-16(fp)
 800f884:	10800104 	addi	r2,r2,4
 800f888:	10800037 	ldwio	r2,0(r2)
 800f88c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800f890:	e0bffd17 	ldw	r2,-12(fp)
 800f894:	1080c00c 	andi	r2,r2,768
 800f898:	1000011e 	bne	r2,zero,800f8a0 <altera_avalon_jtag_uart_irq+0x44>
      break;
 800f89c:	00006c06 	br	800fa50 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800f8a0:	e0bffd17 	ldw	r2,-12(fp)
 800f8a4:	1080400c 	andi	r2,r2,256
 800f8a8:	10003426 	beq	r2,zero,800f97c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800f8ac:	00800074 	movhi	r2,1
 800f8b0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f8b4:	e0bffb17 	ldw	r2,-20(fp)
 800f8b8:	10800a17 	ldw	r2,40(r2)
 800f8bc:	10800044 	addi	r2,r2,1
 800f8c0:	1081ffcc 	andi	r2,r2,2047
 800f8c4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800f8c8:	e0bffb17 	ldw	r2,-20(fp)
 800f8cc:	10c00b17 	ldw	r3,44(r2)
 800f8d0:	e0bffe17 	ldw	r2,-8(fp)
 800f8d4:	1880011e 	bne	r3,r2,800f8dc <altera_avalon_jtag_uart_irq+0x80>
          break;
 800f8d8:	00001606 	br	800f934 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800f8dc:	e0bffc17 	ldw	r2,-16(fp)
 800f8e0:	10800037 	ldwio	r2,0(r2)
 800f8e4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800f8e8:	e0bff917 	ldw	r2,-28(fp)
 800f8ec:	10a0000c 	andi	r2,r2,32768
 800f8f0:	1000011e 	bne	r2,zero,800f8f8 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 800f8f4:	00000f06 	br	800f934 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800f8f8:	e0bffb17 	ldw	r2,-20(fp)
 800f8fc:	10800a17 	ldw	r2,40(r2)
 800f900:	e0fff917 	ldw	r3,-28(fp)
 800f904:	1809883a 	mov	r4,r3
 800f908:	e0fffb17 	ldw	r3,-20(fp)
 800f90c:	1885883a 	add	r2,r3,r2
 800f910:	10800e04 	addi	r2,r2,56
 800f914:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f918:	e0bffb17 	ldw	r2,-20(fp)
 800f91c:	10800a17 	ldw	r2,40(r2)
 800f920:	10800044 	addi	r2,r2,1
 800f924:	10c1ffcc 	andi	r3,r2,2047
 800f928:	e0bffb17 	ldw	r2,-20(fp)
 800f92c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800f930:	003fe006 	br	800f8b4 <__alt_data_end+0xfc00f8b4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800f934:	e0bff917 	ldw	r2,-28(fp)
 800f938:	10bfffec 	andhi	r2,r2,65535
 800f93c:	10000f26 	beq	r2,zero,800f97c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f940:	e0bffb17 	ldw	r2,-20(fp)
 800f944:	10c00817 	ldw	r3,32(r2)
 800f948:	00bfff84 	movi	r2,-2
 800f94c:	1886703a 	and	r3,r3,r2
 800f950:	e0bffb17 	ldw	r2,-20(fp)
 800f954:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800f958:	e0bffc17 	ldw	r2,-16(fp)
 800f95c:	10800104 	addi	r2,r2,4
 800f960:	1007883a 	mov	r3,r2
 800f964:	e0bffb17 	ldw	r2,-20(fp)
 800f968:	10800817 	ldw	r2,32(r2)
 800f96c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f970:	e0bffc17 	ldw	r2,-16(fp)
 800f974:	10800104 	addi	r2,r2,4
 800f978:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800f97c:	e0bffd17 	ldw	r2,-12(fp)
 800f980:	1080800c 	andi	r2,r2,512
 800f984:	10003126 	beq	r2,zero,800fa4c <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800f988:	e0bffd17 	ldw	r2,-12(fp)
 800f98c:	1004d43a 	srli	r2,r2,16
 800f990:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800f994:	00001406 	br	800f9e8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800f998:	e0bffc17 	ldw	r2,-16(fp)
 800f99c:	e0fffb17 	ldw	r3,-20(fp)
 800f9a0:	18c00d17 	ldw	r3,52(r3)
 800f9a4:	e13ffb17 	ldw	r4,-20(fp)
 800f9a8:	20c7883a 	add	r3,r4,r3
 800f9ac:	18c20e04 	addi	r3,r3,2104
 800f9b0:	18c00003 	ldbu	r3,0(r3)
 800f9b4:	18c03fcc 	andi	r3,r3,255
 800f9b8:	18c0201c 	xori	r3,r3,128
 800f9bc:	18ffe004 	addi	r3,r3,-128
 800f9c0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f9c4:	e0bffb17 	ldw	r2,-20(fp)
 800f9c8:	10800d17 	ldw	r2,52(r2)
 800f9cc:	10800044 	addi	r2,r2,1
 800f9d0:	10c1ffcc 	andi	r3,r2,2047
 800f9d4:	e0bffb17 	ldw	r2,-20(fp)
 800f9d8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800f9dc:	e0bffa17 	ldw	r2,-24(fp)
 800f9e0:	10bfffc4 	addi	r2,r2,-1
 800f9e4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800f9e8:	e0bffa17 	ldw	r2,-24(fp)
 800f9ec:	10000526 	beq	r2,zero,800fa04 <altera_avalon_jtag_uart_irq+0x1a8>
 800f9f0:	e0bffb17 	ldw	r2,-20(fp)
 800f9f4:	10c00d17 	ldw	r3,52(r2)
 800f9f8:	e0bffb17 	ldw	r2,-20(fp)
 800f9fc:	10800c17 	ldw	r2,48(r2)
 800fa00:	18bfe51e 	bne	r3,r2,800f998 <__alt_data_end+0xfc00f998>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800fa04:	e0bffa17 	ldw	r2,-24(fp)
 800fa08:	10001026 	beq	r2,zero,800fa4c <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800fa0c:	e0bffb17 	ldw	r2,-20(fp)
 800fa10:	10c00817 	ldw	r3,32(r2)
 800fa14:	00bfff44 	movi	r2,-3
 800fa18:	1886703a 	and	r3,r3,r2
 800fa1c:	e0bffb17 	ldw	r2,-20(fp)
 800fa20:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800fa24:	e0bffb17 	ldw	r2,-20(fp)
 800fa28:	10800017 	ldw	r2,0(r2)
 800fa2c:	10800104 	addi	r2,r2,4
 800fa30:	1007883a 	mov	r3,r2
 800fa34:	e0bffb17 	ldw	r2,-20(fp)
 800fa38:	10800817 	ldw	r2,32(r2)
 800fa3c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800fa40:	e0bffc17 	ldw	r2,-16(fp)
 800fa44:	10800104 	addi	r2,r2,4
 800fa48:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800fa4c:	003f8c06 	br	800f880 <__alt_data_end+0xfc00f880>
}
 800fa50:	e037883a 	mov	sp,fp
 800fa54:	df000017 	ldw	fp,0(sp)
 800fa58:	dec00104 	addi	sp,sp,4
 800fa5c:	f800283a 	ret

0800fa60 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800fa60:	defff804 	addi	sp,sp,-32
 800fa64:	df000715 	stw	fp,28(sp)
 800fa68:	df000704 	addi	fp,sp,28
 800fa6c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800fa70:	e0bffb17 	ldw	r2,-20(fp)
 800fa74:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800fa78:	e0bff917 	ldw	r2,-28(fp)
 800fa7c:	10800017 	ldw	r2,0(r2)
 800fa80:	10800104 	addi	r2,r2,4
 800fa84:	10800037 	ldwio	r2,0(r2)
 800fa88:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800fa8c:	e0bffa17 	ldw	r2,-24(fp)
 800fa90:	1081000c 	andi	r2,r2,1024
 800fa94:	10000b26 	beq	r2,zero,800fac4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800fa98:	e0bff917 	ldw	r2,-28(fp)
 800fa9c:	10800017 	ldw	r2,0(r2)
 800faa0:	10800104 	addi	r2,r2,4
 800faa4:	1007883a 	mov	r3,r2
 800faa8:	e0bff917 	ldw	r2,-28(fp)
 800faac:	10800817 	ldw	r2,32(r2)
 800fab0:	10810014 	ori	r2,r2,1024
 800fab4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800fab8:	e0bff917 	ldw	r2,-28(fp)
 800fabc:	10000915 	stw	zero,36(r2)
 800fac0:	00000a06 	br	800faec <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800fac4:	e0bff917 	ldw	r2,-28(fp)
 800fac8:	10c00917 	ldw	r3,36(r2)
 800facc:	00a00034 	movhi	r2,32768
 800fad0:	10bfff04 	addi	r2,r2,-4
 800fad4:	10c00536 	bltu	r2,r3,800faec <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800fad8:	e0bff917 	ldw	r2,-28(fp)
 800fadc:	10800917 	ldw	r2,36(r2)
 800fae0:	10c00044 	addi	r3,r2,1
 800fae4:	e0bff917 	ldw	r2,-28(fp)
 800fae8:	10c00915 	stw	r3,36(r2)
 800faec:	00820074 	movhi	r2,2049
 800faf0:	10950804 	addi	r2,r2,21536
 800faf4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800faf8:	e037883a 	mov	sp,fp
 800fafc:	df000017 	ldw	fp,0(sp)
 800fb00:	dec00104 	addi	sp,sp,4
 800fb04:	f800283a 	ret

0800fb08 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800fb08:	defffd04 	addi	sp,sp,-12
 800fb0c:	df000215 	stw	fp,8(sp)
 800fb10:	df000204 	addi	fp,sp,8
 800fb14:	e13ffe15 	stw	r4,-8(fp)
 800fb18:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800fb1c:	00000506 	br	800fb34 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800fb20:	e0bfff17 	ldw	r2,-4(fp)
 800fb24:	1090000c 	andi	r2,r2,16384
 800fb28:	10000226 	beq	r2,zero,800fb34 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800fb2c:	00bffd44 	movi	r2,-11
 800fb30:	00000b06 	br	800fb60 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800fb34:	e0bffe17 	ldw	r2,-8(fp)
 800fb38:	10c00d17 	ldw	r3,52(r2)
 800fb3c:	e0bffe17 	ldw	r2,-8(fp)
 800fb40:	10800c17 	ldw	r2,48(r2)
 800fb44:	18800526 	beq	r3,r2,800fb5c <altera_avalon_jtag_uart_close+0x54>
 800fb48:	e0bffe17 	ldw	r2,-8(fp)
 800fb4c:	10c00917 	ldw	r3,36(r2)
 800fb50:	e0bffe17 	ldw	r2,-8(fp)
 800fb54:	10800117 	ldw	r2,4(r2)
 800fb58:	18bff136 	bltu	r3,r2,800fb20 <__alt_data_end+0xfc00fb20>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800fb5c:	0005883a 	mov	r2,zero
}
 800fb60:	e037883a 	mov	sp,fp
 800fb64:	df000017 	ldw	fp,0(sp)
 800fb68:	dec00104 	addi	sp,sp,4
 800fb6c:	f800283a 	ret

0800fb70 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800fb70:	defffa04 	addi	sp,sp,-24
 800fb74:	df000515 	stw	fp,20(sp)
 800fb78:	df000504 	addi	fp,sp,20
 800fb7c:	e13ffd15 	stw	r4,-12(fp)
 800fb80:	e17ffe15 	stw	r5,-8(fp)
 800fb84:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800fb88:	00bff9c4 	movi	r2,-25
 800fb8c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800fb90:	e0bffe17 	ldw	r2,-8(fp)
 800fb94:	10da8060 	cmpeqi	r3,r2,27137
 800fb98:	1800031e 	bne	r3,zero,800fba8 <altera_avalon_jtag_uart_ioctl+0x38>
 800fb9c:	109a80a0 	cmpeqi	r2,r2,27138
 800fba0:	1000191e 	bne	r2,zero,800fc08 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 800fba4:	00002806 	br	800fc48 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800fba8:	e0bffd17 	ldw	r2,-12(fp)
 800fbac:	10c00117 	ldw	r3,4(r2)
 800fbb0:	00a00034 	movhi	r2,32768
 800fbb4:	10bfffc4 	addi	r2,r2,-1
 800fbb8:	18801226 	beq	r3,r2,800fc04 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 800fbbc:	e0bfff17 	ldw	r2,-4(fp)
 800fbc0:	10800017 	ldw	r2,0(r2)
 800fbc4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800fbc8:	e0bffc17 	ldw	r2,-16(fp)
 800fbcc:	10800090 	cmplti	r2,r2,2
 800fbd0:	1000061e 	bne	r2,zero,800fbec <altera_avalon_jtag_uart_ioctl+0x7c>
 800fbd4:	e0fffc17 	ldw	r3,-16(fp)
 800fbd8:	00a00034 	movhi	r2,32768
 800fbdc:	10bfffc4 	addi	r2,r2,-1
 800fbe0:	18800226 	beq	r3,r2,800fbec <altera_avalon_jtag_uart_ioctl+0x7c>
 800fbe4:	e0bffc17 	ldw	r2,-16(fp)
 800fbe8:	00000206 	br	800fbf4 <altera_avalon_jtag_uart_ioctl+0x84>
 800fbec:	00a00034 	movhi	r2,32768
 800fbf0:	10bfff84 	addi	r2,r2,-2
 800fbf4:	e0fffd17 	ldw	r3,-12(fp)
 800fbf8:	18800115 	stw	r2,4(r3)
      rc = 0;
 800fbfc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800fc00:	00001106 	br	800fc48 <altera_avalon_jtag_uart_ioctl+0xd8>
 800fc04:	00001006 	br	800fc48 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800fc08:	e0bffd17 	ldw	r2,-12(fp)
 800fc0c:	10c00117 	ldw	r3,4(r2)
 800fc10:	00a00034 	movhi	r2,32768
 800fc14:	10bfffc4 	addi	r2,r2,-1
 800fc18:	18800a26 	beq	r3,r2,800fc44 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800fc1c:	e0bffd17 	ldw	r2,-12(fp)
 800fc20:	10c00917 	ldw	r3,36(r2)
 800fc24:	e0bffd17 	ldw	r2,-12(fp)
 800fc28:	10800117 	ldw	r2,4(r2)
 800fc2c:	1885803a 	cmpltu	r2,r3,r2
 800fc30:	10c03fcc 	andi	r3,r2,255
 800fc34:	e0bfff17 	ldw	r2,-4(fp)
 800fc38:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800fc3c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800fc40:	00000006 	br	800fc44 <altera_avalon_jtag_uart_ioctl+0xd4>
 800fc44:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800fc48:	e0bffb17 	ldw	r2,-20(fp)
}
 800fc4c:	e037883a 	mov	sp,fp
 800fc50:	df000017 	ldw	fp,0(sp)
 800fc54:	dec00104 	addi	sp,sp,4
 800fc58:	f800283a 	ret

0800fc5c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800fc5c:	defff304 	addi	sp,sp,-52
 800fc60:	dfc00c15 	stw	ra,48(sp)
 800fc64:	df000b15 	stw	fp,44(sp)
 800fc68:	df000b04 	addi	fp,sp,44
 800fc6c:	e13ffc15 	stw	r4,-16(fp)
 800fc70:	e17ffd15 	stw	r5,-12(fp)
 800fc74:	e1bffe15 	stw	r6,-8(fp)
 800fc78:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800fc7c:	e0bffd17 	ldw	r2,-12(fp)
 800fc80:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800fc84:	00004906 	br	800fdac <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800fc88:	e0bffc17 	ldw	r2,-16(fp)
 800fc8c:	10800a17 	ldw	r2,40(r2)
 800fc90:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800fc94:	e0bffc17 	ldw	r2,-16(fp)
 800fc98:	10800b17 	ldw	r2,44(r2)
 800fc9c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800fca0:	e0fff717 	ldw	r3,-36(fp)
 800fca4:	e0bff817 	ldw	r2,-32(fp)
 800fca8:	18800536 	bltu	r3,r2,800fcc0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800fcac:	e0fff717 	ldw	r3,-36(fp)
 800fcb0:	e0bff817 	ldw	r2,-32(fp)
 800fcb4:	1885c83a 	sub	r2,r3,r2
 800fcb8:	e0bff615 	stw	r2,-40(fp)
 800fcbc:	00000406 	br	800fcd0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800fcc0:	00c20004 	movi	r3,2048
 800fcc4:	e0bff817 	ldw	r2,-32(fp)
 800fcc8:	1885c83a 	sub	r2,r3,r2
 800fccc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800fcd0:	e0bff617 	ldw	r2,-40(fp)
 800fcd4:	1000011e 	bne	r2,zero,800fcdc <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 800fcd8:	00001d06 	br	800fd50 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 800fcdc:	e0fffe17 	ldw	r3,-8(fp)
 800fce0:	e0bff617 	ldw	r2,-40(fp)
 800fce4:	1880022e 	bgeu	r3,r2,800fcf0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800fce8:	e0bffe17 	ldw	r2,-8(fp)
 800fcec:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800fcf0:	e0bff817 	ldw	r2,-32(fp)
 800fcf4:	10800e04 	addi	r2,r2,56
 800fcf8:	e0fffc17 	ldw	r3,-16(fp)
 800fcfc:	1885883a 	add	r2,r3,r2
 800fd00:	e13ff517 	ldw	r4,-44(fp)
 800fd04:	100b883a 	mov	r5,r2
 800fd08:	e1bff617 	ldw	r6,-40(fp)
 800fd0c:	8007ac00 	call	8007ac0 <memcpy>
      ptr   += n;
 800fd10:	e0fff517 	ldw	r3,-44(fp)
 800fd14:	e0bff617 	ldw	r2,-40(fp)
 800fd18:	1885883a 	add	r2,r3,r2
 800fd1c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800fd20:	e0fffe17 	ldw	r3,-8(fp)
 800fd24:	e0bff617 	ldw	r2,-40(fp)
 800fd28:	1885c83a 	sub	r2,r3,r2
 800fd2c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800fd30:	e0fff817 	ldw	r3,-32(fp)
 800fd34:	e0bff617 	ldw	r2,-40(fp)
 800fd38:	1885883a 	add	r2,r3,r2
 800fd3c:	10c1ffcc 	andi	r3,r2,2047
 800fd40:	e0bffc17 	ldw	r2,-16(fp)
 800fd44:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800fd48:	e0bffe17 	ldw	r2,-8(fp)
 800fd4c:	00bfce16 	blt	zero,r2,800fc88 <__alt_data_end+0xfc00fc88>

    /* If we read any data then return it */
    if (ptr != buffer)
 800fd50:	e0fff517 	ldw	r3,-44(fp)
 800fd54:	e0bffd17 	ldw	r2,-12(fp)
 800fd58:	18800126 	beq	r3,r2,800fd60 <altera_avalon_jtag_uart_read+0x104>
      break;
 800fd5c:	00001506 	br	800fdb4 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800fd60:	e0bfff17 	ldw	r2,-4(fp)
 800fd64:	1090000c 	andi	r2,r2,16384
 800fd68:	10000126 	beq	r2,zero,800fd70 <altera_avalon_jtag_uart_read+0x114>
      break;
 800fd6c:	00001106 	br	800fdb4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800fd70:	0001883a 	nop
 800fd74:	e0bffc17 	ldw	r2,-16(fp)
 800fd78:	10c00a17 	ldw	r3,40(r2)
 800fd7c:	e0bff717 	ldw	r2,-36(fp)
 800fd80:	1880051e 	bne	r3,r2,800fd98 <altera_avalon_jtag_uart_read+0x13c>
 800fd84:	e0bffc17 	ldw	r2,-16(fp)
 800fd88:	10c00917 	ldw	r3,36(r2)
 800fd8c:	e0bffc17 	ldw	r2,-16(fp)
 800fd90:	10800117 	ldw	r2,4(r2)
 800fd94:	18bff736 	bltu	r3,r2,800fd74 <__alt_data_end+0xfc00fd74>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800fd98:	e0bffc17 	ldw	r2,-16(fp)
 800fd9c:	10c00a17 	ldw	r3,40(r2)
 800fda0:	e0bff717 	ldw	r2,-36(fp)
 800fda4:	1880011e 	bne	r3,r2,800fdac <altera_avalon_jtag_uart_read+0x150>
      break;
 800fda8:	00000206 	br	800fdb4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800fdac:	e0bffe17 	ldw	r2,-8(fp)
 800fdb0:	00bfb516 	blt	zero,r2,800fc88 <__alt_data_end+0xfc00fc88>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800fdb4:	e0fff517 	ldw	r3,-44(fp)
 800fdb8:	e0bffd17 	ldw	r2,-12(fp)
 800fdbc:	18801826 	beq	r3,r2,800fe20 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fdc0:	0005303a 	rdctl	r2,status
 800fdc4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fdc8:	e0fffa17 	ldw	r3,-24(fp)
 800fdcc:	00bfff84 	movi	r2,-2
 800fdd0:	1884703a 	and	r2,r3,r2
 800fdd4:	1001703a 	wrctl	status,r2
  
  return context;
 800fdd8:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800fddc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800fde0:	e0bffc17 	ldw	r2,-16(fp)
 800fde4:	10800817 	ldw	r2,32(r2)
 800fde8:	10c00054 	ori	r3,r2,1
 800fdec:	e0bffc17 	ldw	r2,-16(fp)
 800fdf0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800fdf4:	e0bffc17 	ldw	r2,-16(fp)
 800fdf8:	10800017 	ldw	r2,0(r2)
 800fdfc:	10800104 	addi	r2,r2,4
 800fe00:	1007883a 	mov	r3,r2
 800fe04:	e0bffc17 	ldw	r2,-16(fp)
 800fe08:	10800817 	ldw	r2,32(r2)
 800fe0c:	18800035 	stwio	r2,0(r3)
 800fe10:	e0bff917 	ldw	r2,-28(fp)
 800fe14:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fe18:	e0bffb17 	ldw	r2,-20(fp)
 800fe1c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800fe20:	e0fff517 	ldw	r3,-44(fp)
 800fe24:	e0bffd17 	ldw	r2,-12(fp)
 800fe28:	18800426 	beq	r3,r2,800fe3c <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 800fe2c:	e0fff517 	ldw	r3,-44(fp)
 800fe30:	e0bffd17 	ldw	r2,-12(fp)
 800fe34:	1885c83a 	sub	r2,r3,r2
 800fe38:	00000606 	br	800fe54 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 800fe3c:	e0bfff17 	ldw	r2,-4(fp)
 800fe40:	1090000c 	andi	r2,r2,16384
 800fe44:	10000226 	beq	r2,zero,800fe50 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 800fe48:	00bffd44 	movi	r2,-11
 800fe4c:	00000106 	br	800fe54 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 800fe50:	00bffec4 	movi	r2,-5
}
 800fe54:	e037883a 	mov	sp,fp
 800fe58:	dfc00117 	ldw	ra,4(sp)
 800fe5c:	df000017 	ldw	fp,0(sp)
 800fe60:	dec00204 	addi	sp,sp,8
 800fe64:	f800283a 	ret

0800fe68 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800fe68:	defff304 	addi	sp,sp,-52
 800fe6c:	dfc00c15 	stw	ra,48(sp)
 800fe70:	df000b15 	stw	fp,44(sp)
 800fe74:	df000b04 	addi	fp,sp,44
 800fe78:	e13ffc15 	stw	r4,-16(fp)
 800fe7c:	e17ffd15 	stw	r5,-12(fp)
 800fe80:	e1bffe15 	stw	r6,-8(fp)
 800fe84:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800fe88:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800fe8c:	e0bffd17 	ldw	r2,-12(fp)
 800fe90:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800fe94:	00003806 	br	800ff78 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800fe98:	e0bffc17 	ldw	r2,-16(fp)
 800fe9c:	10800c17 	ldw	r2,48(r2)
 800fea0:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 800fea4:	e0bffc17 	ldw	r2,-16(fp)
 800fea8:	10800d17 	ldw	r2,52(r2)
 800feac:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800feb0:	e0fff817 	ldw	r3,-32(fp)
 800feb4:	e0bff517 	ldw	r2,-44(fp)
 800feb8:	1880062e 	bgeu	r3,r2,800fed4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800febc:	e0fff517 	ldw	r3,-44(fp)
 800fec0:	e0bff817 	ldw	r2,-32(fp)
 800fec4:	1885c83a 	sub	r2,r3,r2
 800fec8:	10bfffc4 	addi	r2,r2,-1
 800fecc:	e0bff615 	stw	r2,-40(fp)
 800fed0:	00000b06 	br	800ff00 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800fed4:	e0bff517 	ldw	r2,-44(fp)
 800fed8:	10000526 	beq	r2,zero,800fef0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800fedc:	00c20004 	movi	r3,2048
 800fee0:	e0bff817 	ldw	r2,-32(fp)
 800fee4:	1885c83a 	sub	r2,r3,r2
 800fee8:	e0bff615 	stw	r2,-40(fp)
 800feec:	00000406 	br	800ff00 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800fef0:	00c1ffc4 	movi	r3,2047
 800fef4:	e0bff817 	ldw	r2,-32(fp)
 800fef8:	1885c83a 	sub	r2,r3,r2
 800fefc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800ff00:	e0bff617 	ldw	r2,-40(fp)
 800ff04:	1000011e 	bne	r2,zero,800ff0c <altera_avalon_jtag_uart_write+0xa4>
        break;
 800ff08:	00001d06 	br	800ff80 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 800ff0c:	e0fffe17 	ldw	r3,-8(fp)
 800ff10:	e0bff617 	ldw	r2,-40(fp)
 800ff14:	1880022e 	bgeu	r3,r2,800ff20 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 800ff18:	e0bffe17 	ldw	r2,-8(fp)
 800ff1c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800ff20:	e0bff817 	ldw	r2,-32(fp)
 800ff24:	10820e04 	addi	r2,r2,2104
 800ff28:	e0fffc17 	ldw	r3,-16(fp)
 800ff2c:	1885883a 	add	r2,r3,r2
 800ff30:	1009883a 	mov	r4,r2
 800ff34:	e17ffd17 	ldw	r5,-12(fp)
 800ff38:	e1bff617 	ldw	r6,-40(fp)
 800ff3c:	8007ac00 	call	8007ac0 <memcpy>
      ptr   += n;
 800ff40:	e0fffd17 	ldw	r3,-12(fp)
 800ff44:	e0bff617 	ldw	r2,-40(fp)
 800ff48:	1885883a 	add	r2,r3,r2
 800ff4c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800ff50:	e0fffe17 	ldw	r3,-8(fp)
 800ff54:	e0bff617 	ldw	r2,-40(fp)
 800ff58:	1885c83a 	sub	r2,r3,r2
 800ff5c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800ff60:	e0fff817 	ldw	r3,-32(fp)
 800ff64:	e0bff617 	ldw	r2,-40(fp)
 800ff68:	1885883a 	add	r2,r3,r2
 800ff6c:	10c1ffcc 	andi	r3,r2,2047
 800ff70:	e0bffc17 	ldw	r2,-16(fp)
 800ff74:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800ff78:	e0bffe17 	ldw	r2,-8(fp)
 800ff7c:	00bfc616 	blt	zero,r2,800fe98 <__alt_data_end+0xfc00fe98>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ff80:	0005303a 	rdctl	r2,status
 800ff84:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ff88:	e0fffa17 	ldw	r3,-24(fp)
 800ff8c:	00bfff84 	movi	r2,-2
 800ff90:	1884703a 	and	r2,r3,r2
 800ff94:	1001703a 	wrctl	status,r2
  
  return context;
 800ff98:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800ff9c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800ffa0:	e0bffc17 	ldw	r2,-16(fp)
 800ffa4:	10800817 	ldw	r2,32(r2)
 800ffa8:	10c00094 	ori	r3,r2,2
 800ffac:	e0bffc17 	ldw	r2,-16(fp)
 800ffb0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800ffb4:	e0bffc17 	ldw	r2,-16(fp)
 800ffb8:	10800017 	ldw	r2,0(r2)
 800ffbc:	10800104 	addi	r2,r2,4
 800ffc0:	1007883a 	mov	r3,r2
 800ffc4:	e0bffc17 	ldw	r2,-16(fp)
 800ffc8:	10800817 	ldw	r2,32(r2)
 800ffcc:	18800035 	stwio	r2,0(r3)
 800ffd0:	e0bff917 	ldw	r2,-28(fp)
 800ffd4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ffd8:	e0bffb17 	ldw	r2,-20(fp)
 800ffdc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800ffe0:	e0bffe17 	ldw	r2,-8(fp)
 800ffe4:	0080120e 	bge	zero,r2,8010030 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 800ffe8:	e0bfff17 	ldw	r2,-4(fp)
 800ffec:	1090000c 	andi	r2,r2,16384
 800fff0:	10000126 	beq	r2,zero,800fff8 <altera_avalon_jtag_uart_write+0x190>
        break;
 800fff4:	00001006 	br	8010038 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800fff8:	0001883a 	nop
 800fffc:	e0bffc17 	ldw	r2,-16(fp)
 8010000:	10c00d17 	ldw	r3,52(r2)
 8010004:	e0bff517 	ldw	r2,-44(fp)
 8010008:	1880051e 	bne	r3,r2,8010020 <altera_avalon_jtag_uart_write+0x1b8>
 801000c:	e0bffc17 	ldw	r2,-16(fp)
 8010010:	10c00917 	ldw	r3,36(r2)
 8010014:	e0bffc17 	ldw	r2,-16(fp)
 8010018:	10800117 	ldw	r2,4(r2)
 801001c:	18bff736 	bltu	r3,r2,800fffc <__alt_data_end+0xfc00fffc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8010020:	e0bffc17 	ldw	r2,-16(fp)
 8010024:	10800917 	ldw	r2,36(r2)
 8010028:	10000126 	beq	r2,zero,8010030 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 801002c:	00000206 	br	8010038 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 8010030:	e0bffe17 	ldw	r2,-8(fp)
 8010034:	00bf9716 	blt	zero,r2,800fe94 <__alt_data_end+0xfc00fe94>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8010038:	e0fffd17 	ldw	r3,-12(fp)
 801003c:	e0bff717 	ldw	r2,-36(fp)
 8010040:	18800426 	beq	r3,r2,8010054 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 8010044:	e0fffd17 	ldw	r3,-12(fp)
 8010048:	e0bff717 	ldw	r2,-36(fp)
 801004c:	1885c83a 	sub	r2,r3,r2
 8010050:	00000606 	br	801006c <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 8010054:	e0bfff17 	ldw	r2,-4(fp)
 8010058:	1090000c 	andi	r2,r2,16384
 801005c:	10000226 	beq	r2,zero,8010068 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 8010060:	00bffd44 	movi	r2,-11
 8010064:	00000106 	br	801006c <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8010068:	00bffec4 	movi	r2,-5
}
 801006c:	e037883a 	mov	sp,fp
 8010070:	dfc00117 	ldw	ra,4(sp)
 8010074:	df000017 	ldw	fp,0(sp)
 8010078:	dec00204 	addi	sp,sp,8
 801007c:	f800283a 	ret

08010080 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8010080:	defff504 	addi	sp,sp,-44
 8010084:	df000a15 	stw	fp,40(sp)
 8010088:	df000a04 	addi	fp,sp,40
 801008c:	e13ffc15 	stw	r4,-16(fp)
 8010090:	e17ffd15 	stw	r5,-12(fp)
 8010094:	e1bffe15 	stw	r6,-8(fp)
 8010098:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 801009c:	e03ff615 	stw	zero,-40(fp)
 80100a0:	00820074 	movhi	r2,2049
 80100a4:	10950804 	addi	r2,r2,21536
 80100a8:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 80100ac:	10003f26 	beq	r2,zero,80101ac <alt_alarm_start+0x12c>
  {
    if (alarm)
 80100b0:	e0bffc17 	ldw	r2,-16(fp)
 80100b4:	10003b26 	beq	r2,zero,80101a4 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 80100b8:	e0bffc17 	ldw	r2,-16(fp)
 80100bc:	e0fffe17 	ldw	r3,-8(fp)
 80100c0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80100c4:	e0bffc17 	ldw	r2,-16(fp)
 80100c8:	e0ffff17 	ldw	r3,-4(fp)
 80100cc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80100d0:	0005303a 	rdctl	r2,status
 80100d4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80100d8:	e0fff817 	ldw	r3,-32(fp)
 80100dc:	00bfff84 	movi	r2,-2
 80100e0:	1884703a 	and	r2,r3,r2
 80100e4:	1001703a 	wrctl	status,r2
  
  return context;
 80100e8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 80100ec:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80100f0:	00820074 	movhi	r2,2049
 80100f4:	10950904 	addi	r2,r2,21540
 80100f8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 80100fc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8010100:	e0fffd17 	ldw	r3,-12(fp)
 8010104:	e0bff617 	ldw	r2,-40(fp)
 8010108:	1885883a 	add	r2,r3,r2
 801010c:	10c00044 	addi	r3,r2,1
 8010110:	e0bffc17 	ldw	r2,-16(fp)
 8010114:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8010118:	e0bffc17 	ldw	r2,-16(fp)
 801011c:	10c00217 	ldw	r3,8(r2)
 8010120:	e0bff617 	ldw	r2,-40(fp)
 8010124:	1880042e 	bgeu	r3,r2,8010138 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 8010128:	e0bffc17 	ldw	r2,-16(fp)
 801012c:	00c00044 	movi	r3,1
 8010130:	10c00405 	stb	r3,16(r2)
 8010134:	00000206 	br	8010140 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 8010138:	e0bffc17 	ldw	r2,-16(fp)
 801013c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8010140:	e0fffc17 	ldw	r3,-16(fp)
 8010144:	00820074 	movhi	r2,2049
 8010148:	108e3f04 	addi	r2,r2,14588
 801014c:	e0bff915 	stw	r2,-28(fp)
 8010150:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8010154:	e0bffa17 	ldw	r2,-24(fp)
 8010158:	e0fff917 	ldw	r3,-28(fp)
 801015c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8010160:	e0bff917 	ldw	r2,-28(fp)
 8010164:	10c00017 	ldw	r3,0(r2)
 8010168:	e0bffa17 	ldw	r2,-24(fp)
 801016c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8010170:	e0bff917 	ldw	r2,-28(fp)
 8010174:	10800017 	ldw	r2,0(r2)
 8010178:	e0fffa17 	ldw	r3,-24(fp)
 801017c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8010180:	e0bff917 	ldw	r2,-28(fp)
 8010184:	e0fffa17 	ldw	r3,-24(fp)
 8010188:	10c00015 	stw	r3,0(r2)
 801018c:	e0bff717 	ldw	r2,-36(fp)
 8010190:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010194:	e0bffb17 	ldw	r2,-20(fp)
 8010198:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 801019c:	0005883a 	mov	r2,zero
 80101a0:	00000306 	br	80101b0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 80101a4:	00bffa84 	movi	r2,-22
 80101a8:	00000106 	br	80101b0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 80101ac:	00bfde84 	movi	r2,-134
  }
}
 80101b0:	e037883a 	mov	sp,fp
 80101b4:	df000017 	ldw	fp,0(sp)
 80101b8:	dec00104 	addi	sp,sp,4
 80101bc:	f800283a 	ret

080101c0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 80101c0:	defffa04 	addi	sp,sp,-24
 80101c4:	dfc00515 	stw	ra,20(sp)
 80101c8:	df000415 	stw	fp,16(sp)
 80101cc:	df000404 	addi	fp,sp,16
 80101d0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 80101d4:	00800244 	movi	r2,9
 80101d8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 80101dc:	e13ffd17 	ldw	r4,-12(fp)
 80101e0:	014003f4 	movhi	r5,15
 80101e4:	29509004 	addi	r5,r5,16960
 80101e8:	800c3380 	call	800c338 <__mulsi3>
 80101ec:	0100bef4 	movhi	r4,763
 80101f0:	213c2004 	addi	r4,r4,-3968
 80101f4:	100b883a 	mov	r5,r2
 80101f8:	800c3280 	call	800c328 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 80101fc:	01200034 	movhi	r4,32768
 8010200:	213fffc4 	addi	r4,r4,-1
 8010204:	100b883a 	mov	r5,r2
 8010208:	800c3280 	call	800c328 <__udivsi3>
 801020c:	e13fff17 	ldw	r4,-4(fp)
 8010210:	100b883a 	mov	r5,r2
 8010214:	800c3280 	call	800c328 <__udivsi3>
 8010218:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 801021c:	e0bffe17 	ldw	r2,-8(fp)
 8010220:	10002a26 	beq	r2,zero,80102cc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8010224:	e03ffc15 	stw	zero,-16(fp)
 8010228:	00001706 	br	8010288 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 801022c:	00a00034 	movhi	r2,32768
 8010230:	10bfffc4 	addi	r2,r2,-1
 8010234:	10bfffc4 	addi	r2,r2,-1
 8010238:	103ffe1e 	bne	r2,zero,8010234 <__alt_data_end+0xfc010234>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 801023c:	e13ffd17 	ldw	r4,-12(fp)
 8010240:	014003f4 	movhi	r5,15
 8010244:	29509004 	addi	r5,r5,16960
 8010248:	800c3380 	call	800c338 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 801024c:	0100bef4 	movhi	r4,763
 8010250:	213c2004 	addi	r4,r4,-3968
 8010254:	100b883a 	mov	r5,r2
 8010258:	800c3280 	call	800c328 <__udivsi3>
 801025c:	01200034 	movhi	r4,32768
 8010260:	213fffc4 	addi	r4,r4,-1
 8010264:	100b883a 	mov	r5,r2
 8010268:	800c3280 	call	800c328 <__udivsi3>
 801026c:	1007883a 	mov	r3,r2
 8010270:	e0bfff17 	ldw	r2,-4(fp)
 8010274:	10c5c83a 	sub	r2,r2,r3
 8010278:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 801027c:	e0bffc17 	ldw	r2,-16(fp)
 8010280:	10800044 	addi	r2,r2,1
 8010284:	e0bffc15 	stw	r2,-16(fp)
 8010288:	e0fffc17 	ldw	r3,-16(fp)
 801028c:	e0bffe17 	ldw	r2,-8(fp)
 8010290:	18bfe616 	blt	r3,r2,801022c <__alt_data_end+0xfc01022c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8010294:	e13ffd17 	ldw	r4,-12(fp)
 8010298:	014003f4 	movhi	r5,15
 801029c:	29509004 	addi	r5,r5,16960
 80102a0:	800c3380 	call	800c338 <__mulsi3>
 80102a4:	0100bef4 	movhi	r4,763
 80102a8:	213c2004 	addi	r4,r4,-3968
 80102ac:	100b883a 	mov	r5,r2
 80102b0:	800c3280 	call	800c328 <__udivsi3>
 80102b4:	1009883a 	mov	r4,r2
 80102b8:	e17fff17 	ldw	r5,-4(fp)
 80102bc:	800c3380 	call	800c338 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80102c0:	10bfffc4 	addi	r2,r2,-1
 80102c4:	103ffe1e 	bne	r2,zero,80102c0 <__alt_data_end+0xfc0102c0>
 80102c8:	00000d06 	br	8010300 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80102cc:	e13ffd17 	ldw	r4,-12(fp)
 80102d0:	014003f4 	movhi	r5,15
 80102d4:	29509004 	addi	r5,r5,16960
 80102d8:	800c3380 	call	800c338 <__mulsi3>
 80102dc:	0100bef4 	movhi	r4,763
 80102e0:	213c2004 	addi	r4,r4,-3968
 80102e4:	100b883a 	mov	r5,r2
 80102e8:	800c3280 	call	800c328 <__udivsi3>
 80102ec:	1009883a 	mov	r4,r2
 80102f0:	e17fff17 	ldw	r5,-4(fp)
 80102f4:	800c3380 	call	800c338 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80102f8:	10bfffc4 	addi	r2,r2,-1
 80102fc:	00bffe16 	blt	zero,r2,80102f8 <__alt_data_end+0xfc0102f8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8010300:	0005883a 	mov	r2,zero
}
 8010304:	e037883a 	mov	sp,fp
 8010308:	dfc00117 	ldw	ra,4(sp)
 801030c:	df000017 	ldw	fp,0(sp)
 8010310:	dec00204 	addi	sp,sp,8
 8010314:	f800283a 	ret

08010318 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8010318:	deffff04 	addi	sp,sp,-4
 801031c:	df000015 	stw	fp,0(sp)
 8010320:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8010324:	e037883a 	mov	sp,fp
 8010328:	df000017 	ldw	fp,0(sp)
 801032c:	dec00104 	addi	sp,sp,4
 8010330:	f800283a 	ret

08010334 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010334:	defffe04 	addi	sp,sp,-8
 8010338:	dfc00115 	stw	ra,4(sp)
 801033c:	df000015 	stw	fp,0(sp)
 8010340:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010344:	00820074 	movhi	r2,2049
 8010348:	108e3c04 	addi	r2,r2,14576
 801034c:	10800017 	ldw	r2,0(r2)
 8010350:	10000526 	beq	r2,zero,8010368 <alt_get_errno+0x34>
 8010354:	00820074 	movhi	r2,2049
 8010358:	108e3c04 	addi	r2,r2,14576
 801035c:	10800017 	ldw	r2,0(r2)
 8010360:	103ee83a 	callr	r2
 8010364:	00000206 	br	8010370 <alt_get_errno+0x3c>
 8010368:	00820074 	movhi	r2,2049
 801036c:	10950304 	addi	r2,r2,21516
}
 8010370:	e037883a 	mov	sp,fp
 8010374:	dfc00117 	ldw	ra,4(sp)
 8010378:	df000017 	ldw	fp,0(sp)
 801037c:	dec00204 	addi	sp,sp,8
 8010380:	f800283a 	ret

08010384 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8010384:	defffa04 	addi	sp,sp,-24
 8010388:	dfc00515 	stw	ra,20(sp)
 801038c:	df000415 	stw	fp,16(sp)
 8010390:	df000404 	addi	fp,sp,16
 8010394:	e13ffe15 	stw	r4,-8(fp)
 8010398:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 801039c:	e0bffe17 	ldw	r2,-8(fp)
 80103a0:	10000326 	beq	r2,zero,80103b0 <alt_dev_llist_insert+0x2c>
 80103a4:	e0bffe17 	ldw	r2,-8(fp)
 80103a8:	10800217 	ldw	r2,8(r2)
 80103ac:	1000061e 	bne	r2,zero,80103c8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 80103b0:	80103340 	call	8010334 <alt_get_errno>
 80103b4:	1007883a 	mov	r3,r2
 80103b8:	00800584 	movi	r2,22
 80103bc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 80103c0:	00bffa84 	movi	r2,-22
 80103c4:	00001306 	br	8010414 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80103c8:	e0bffe17 	ldw	r2,-8(fp)
 80103cc:	e0ffff17 	ldw	r3,-4(fp)
 80103d0:	e0fffc15 	stw	r3,-16(fp)
 80103d4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80103d8:	e0bffd17 	ldw	r2,-12(fp)
 80103dc:	e0fffc17 	ldw	r3,-16(fp)
 80103e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80103e4:	e0bffc17 	ldw	r2,-16(fp)
 80103e8:	10c00017 	ldw	r3,0(r2)
 80103ec:	e0bffd17 	ldw	r2,-12(fp)
 80103f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80103f4:	e0bffc17 	ldw	r2,-16(fp)
 80103f8:	10800017 	ldw	r2,0(r2)
 80103fc:	e0fffd17 	ldw	r3,-12(fp)
 8010400:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8010404:	e0bffc17 	ldw	r2,-16(fp)
 8010408:	e0fffd17 	ldw	r3,-12(fp)
 801040c:	10c00015 	stw	r3,0(r2)

  return 0;  
 8010410:	0005883a 	mov	r2,zero
}
 8010414:	e037883a 	mov	sp,fp
 8010418:	dfc00117 	ldw	ra,4(sp)
 801041c:	df000017 	ldw	fp,0(sp)
 8010420:	dec00204 	addi	sp,sp,8
 8010424:	f800283a 	ret

08010428 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8010428:	defffd04 	addi	sp,sp,-12
 801042c:	dfc00215 	stw	ra,8(sp)
 8010430:	df000115 	stw	fp,4(sp)
 8010434:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010438:	00820074 	movhi	r2,2049
 801043c:	1084e704 	addi	r2,r2,5020
 8010440:	e0bfff15 	stw	r2,-4(fp)
 8010444:	00000606 	br	8010460 <_do_ctors+0x38>
        (*ctor) (); 
 8010448:	e0bfff17 	ldw	r2,-4(fp)
 801044c:	10800017 	ldw	r2,0(r2)
 8010450:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010454:	e0bfff17 	ldw	r2,-4(fp)
 8010458:	10bfff04 	addi	r2,r2,-4
 801045c:	e0bfff15 	stw	r2,-4(fp)
 8010460:	e0ffff17 	ldw	r3,-4(fp)
 8010464:	00820074 	movhi	r2,2049
 8010468:	1084e804 	addi	r2,r2,5024
 801046c:	18bff62e 	bgeu	r3,r2,8010448 <__alt_data_end+0xfc010448>
        (*ctor) (); 
}
 8010470:	e037883a 	mov	sp,fp
 8010474:	dfc00117 	ldw	ra,4(sp)
 8010478:	df000017 	ldw	fp,0(sp)
 801047c:	dec00204 	addi	sp,sp,8
 8010480:	f800283a 	ret

08010484 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8010484:	defffd04 	addi	sp,sp,-12
 8010488:	dfc00215 	stw	ra,8(sp)
 801048c:	df000115 	stw	fp,4(sp)
 8010490:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8010494:	00820074 	movhi	r2,2049
 8010498:	1084e704 	addi	r2,r2,5020
 801049c:	e0bfff15 	stw	r2,-4(fp)
 80104a0:	00000606 	br	80104bc <_do_dtors+0x38>
        (*dtor) (); 
 80104a4:	e0bfff17 	ldw	r2,-4(fp)
 80104a8:	10800017 	ldw	r2,0(r2)
 80104ac:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80104b0:	e0bfff17 	ldw	r2,-4(fp)
 80104b4:	10bfff04 	addi	r2,r2,-4
 80104b8:	e0bfff15 	stw	r2,-4(fp)
 80104bc:	e0ffff17 	ldw	r3,-4(fp)
 80104c0:	00820074 	movhi	r2,2049
 80104c4:	1084e804 	addi	r2,r2,5024
 80104c8:	18bff62e 	bgeu	r3,r2,80104a4 <__alt_data_end+0xfc0104a4>
        (*dtor) (); 
}
 80104cc:	e037883a 	mov	sp,fp
 80104d0:	dfc00117 	ldw	ra,4(sp)
 80104d4:	df000017 	ldw	fp,0(sp)
 80104d8:	dec00204 	addi	sp,sp,8
 80104dc:	f800283a 	ret

080104e0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80104e0:	deffff04 	addi	sp,sp,-4
 80104e4:	df000015 	stw	fp,0(sp)
 80104e8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 80104ec:	e037883a 	mov	sp,fp
 80104f0:	df000017 	ldw	fp,0(sp)
 80104f4:	dec00104 	addi	sp,sp,4
 80104f8:	f800283a 	ret

080104fc <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80104fc:	defff904 	addi	sp,sp,-28
 8010500:	dfc00615 	stw	ra,24(sp)
 8010504:	df000515 	stw	fp,20(sp)
 8010508:	df000504 	addi	fp,sp,20
 801050c:	e13ffc15 	stw	r4,-16(fp)
 8010510:	e17ffd15 	stw	r5,-12(fp)
 8010514:	e1bffe15 	stw	r6,-8(fp)
 8010518:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 801051c:	e0800217 	ldw	r2,8(fp)
 8010520:	d8800015 	stw	r2,0(sp)
 8010524:	e13ffc17 	ldw	r4,-16(fp)
 8010528:	e17ffd17 	ldw	r5,-12(fp)
 801052c:	e1bffe17 	ldw	r6,-8(fp)
 8010530:	e1ffff17 	ldw	r7,-4(fp)
 8010534:	80106dc0 	call	80106dc <alt_iic_isr_register>
}  
 8010538:	e037883a 	mov	sp,fp
 801053c:	dfc00117 	ldw	ra,4(sp)
 8010540:	df000017 	ldw	fp,0(sp)
 8010544:	dec00204 	addi	sp,sp,8
 8010548:	f800283a 	ret

0801054c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 801054c:	defff904 	addi	sp,sp,-28
 8010550:	df000615 	stw	fp,24(sp)
 8010554:	df000604 	addi	fp,sp,24
 8010558:	e13ffe15 	stw	r4,-8(fp)
 801055c:	e17fff15 	stw	r5,-4(fp)
 8010560:	e0bfff17 	ldw	r2,-4(fp)
 8010564:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010568:	0005303a 	rdctl	r2,status
 801056c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010570:	e0fffb17 	ldw	r3,-20(fp)
 8010574:	00bfff84 	movi	r2,-2
 8010578:	1884703a 	and	r2,r3,r2
 801057c:	1001703a 	wrctl	status,r2
  
  return context;
 8010580:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8010584:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8010588:	e0bffa17 	ldw	r2,-24(fp)
 801058c:	00c00044 	movi	r3,1
 8010590:	1884983a 	sll	r2,r3,r2
 8010594:	1007883a 	mov	r3,r2
 8010598:	00820074 	movhi	r2,2049
 801059c:	10950704 	addi	r2,r2,21532
 80105a0:	10800017 	ldw	r2,0(r2)
 80105a4:	1886b03a 	or	r3,r3,r2
 80105a8:	00820074 	movhi	r2,2049
 80105ac:	10950704 	addi	r2,r2,21532
 80105b0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80105b4:	00820074 	movhi	r2,2049
 80105b8:	10950704 	addi	r2,r2,21532
 80105bc:	10800017 	ldw	r2,0(r2)
 80105c0:	100170fa 	wrctl	ienable,r2
 80105c4:	e0bffc17 	ldw	r2,-16(fp)
 80105c8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80105cc:	e0bffd17 	ldw	r2,-12(fp)
 80105d0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80105d4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 80105d8:	0001883a 	nop
}
 80105dc:	e037883a 	mov	sp,fp
 80105e0:	df000017 	ldw	fp,0(sp)
 80105e4:	dec00104 	addi	sp,sp,4
 80105e8:	f800283a 	ret

080105ec <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80105ec:	defff904 	addi	sp,sp,-28
 80105f0:	df000615 	stw	fp,24(sp)
 80105f4:	df000604 	addi	fp,sp,24
 80105f8:	e13ffe15 	stw	r4,-8(fp)
 80105fc:	e17fff15 	stw	r5,-4(fp)
 8010600:	e0bfff17 	ldw	r2,-4(fp)
 8010604:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010608:	0005303a 	rdctl	r2,status
 801060c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010610:	e0fffb17 	ldw	r3,-20(fp)
 8010614:	00bfff84 	movi	r2,-2
 8010618:	1884703a 	and	r2,r3,r2
 801061c:	1001703a 	wrctl	status,r2
  
  return context;
 8010620:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8010624:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8010628:	e0bffa17 	ldw	r2,-24(fp)
 801062c:	00c00044 	movi	r3,1
 8010630:	1884983a 	sll	r2,r3,r2
 8010634:	0084303a 	nor	r2,zero,r2
 8010638:	1007883a 	mov	r3,r2
 801063c:	00820074 	movhi	r2,2049
 8010640:	10950704 	addi	r2,r2,21532
 8010644:	10800017 	ldw	r2,0(r2)
 8010648:	1886703a 	and	r3,r3,r2
 801064c:	00820074 	movhi	r2,2049
 8010650:	10950704 	addi	r2,r2,21532
 8010654:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8010658:	00820074 	movhi	r2,2049
 801065c:	10950704 	addi	r2,r2,21532
 8010660:	10800017 	ldw	r2,0(r2)
 8010664:	100170fa 	wrctl	ienable,r2
 8010668:	e0bffc17 	ldw	r2,-16(fp)
 801066c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010670:	e0bffd17 	ldw	r2,-12(fp)
 8010674:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8010678:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 801067c:	0001883a 	nop
}
 8010680:	e037883a 	mov	sp,fp
 8010684:	df000017 	ldw	fp,0(sp)
 8010688:	dec00104 	addi	sp,sp,4
 801068c:	f800283a 	ret

08010690 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8010690:	defffc04 	addi	sp,sp,-16
 8010694:	df000315 	stw	fp,12(sp)
 8010698:	df000304 	addi	fp,sp,12
 801069c:	e13ffe15 	stw	r4,-8(fp)
 80106a0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80106a4:	000530fa 	rdctl	r2,ienable
 80106a8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 80106ac:	e0bfff17 	ldw	r2,-4(fp)
 80106b0:	00c00044 	movi	r3,1
 80106b4:	1884983a 	sll	r2,r3,r2
 80106b8:	1007883a 	mov	r3,r2
 80106bc:	e0bffd17 	ldw	r2,-12(fp)
 80106c0:	1884703a 	and	r2,r3,r2
 80106c4:	1004c03a 	cmpne	r2,r2,zero
 80106c8:	10803fcc 	andi	r2,r2,255
}
 80106cc:	e037883a 	mov	sp,fp
 80106d0:	df000017 	ldw	fp,0(sp)
 80106d4:	dec00104 	addi	sp,sp,4
 80106d8:	f800283a 	ret

080106dc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80106dc:	defff504 	addi	sp,sp,-44
 80106e0:	dfc00a15 	stw	ra,40(sp)
 80106e4:	df000915 	stw	fp,36(sp)
 80106e8:	df000904 	addi	fp,sp,36
 80106ec:	e13ffc15 	stw	r4,-16(fp)
 80106f0:	e17ffd15 	stw	r5,-12(fp)
 80106f4:	e1bffe15 	stw	r6,-8(fp)
 80106f8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 80106fc:	00bffa84 	movi	r2,-22
 8010700:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8010704:	e0bffd17 	ldw	r2,-12(fp)
 8010708:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 801070c:	e0bff817 	ldw	r2,-32(fp)
 8010710:	10800808 	cmpgei	r2,r2,32
 8010714:	1000271e 	bne	r2,zero,80107b4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010718:	0005303a 	rdctl	r2,status
 801071c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010720:	e0fffa17 	ldw	r3,-24(fp)
 8010724:	00bfff84 	movi	r2,-2
 8010728:	1884703a 	and	r2,r3,r2
 801072c:	1001703a 	wrctl	status,r2
  
  return context;
 8010730:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8010734:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 8010738:	00820074 	movhi	r2,2049
 801073c:	10951404 	addi	r2,r2,21584
 8010740:	e0fff817 	ldw	r3,-32(fp)
 8010744:	180690fa 	slli	r3,r3,3
 8010748:	10c5883a 	add	r2,r2,r3
 801074c:	e0fffe17 	ldw	r3,-8(fp)
 8010750:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8010754:	00820074 	movhi	r2,2049
 8010758:	10951404 	addi	r2,r2,21584
 801075c:	e0fff817 	ldw	r3,-32(fp)
 8010760:	180690fa 	slli	r3,r3,3
 8010764:	10c5883a 	add	r2,r2,r3
 8010768:	10800104 	addi	r2,r2,4
 801076c:	e0ffff17 	ldw	r3,-4(fp)
 8010770:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8010774:	e0bffe17 	ldw	r2,-8(fp)
 8010778:	10000526 	beq	r2,zero,8010790 <alt_iic_isr_register+0xb4>
 801077c:	e0bff817 	ldw	r2,-32(fp)
 8010780:	e13ffc17 	ldw	r4,-16(fp)
 8010784:	100b883a 	mov	r5,r2
 8010788:	801054c0 	call	801054c <alt_ic_irq_enable>
 801078c:	00000406 	br	80107a0 <alt_iic_isr_register+0xc4>
 8010790:	e0bff817 	ldw	r2,-32(fp)
 8010794:	e13ffc17 	ldw	r4,-16(fp)
 8010798:	100b883a 	mov	r5,r2
 801079c:	80105ec0 	call	80105ec <alt_ic_irq_disable>
 80107a0:	e0bff715 	stw	r2,-36(fp)
 80107a4:	e0bff917 	ldw	r2,-28(fp)
 80107a8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80107ac:	e0bffb17 	ldw	r2,-20(fp)
 80107b0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 80107b4:	e0bff717 	ldw	r2,-36(fp)
}
 80107b8:	e037883a 	mov	sp,fp
 80107bc:	dfc00117 	ldw	ra,4(sp)
 80107c0:	df000017 	ldw	fp,0(sp)
 80107c4:	dec00204 	addi	sp,sp,8
 80107c8:	f800283a 	ret

080107cc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80107cc:	defff804 	addi	sp,sp,-32
 80107d0:	dfc00715 	stw	ra,28(sp)
 80107d4:	df000615 	stw	fp,24(sp)
 80107d8:	dc000515 	stw	r16,20(sp)
 80107dc:	df000604 	addi	fp,sp,24
 80107e0:	e13ffb15 	stw	r4,-20(fp)
 80107e4:	e17ffc15 	stw	r5,-16(fp)
 80107e8:	e1bffd15 	stw	r6,-12(fp)
 80107ec:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 80107f0:	e13ffc17 	ldw	r4,-16(fp)
 80107f4:	e17ffd17 	ldw	r5,-12(fp)
 80107f8:	e1bffe17 	ldw	r6,-8(fp)
 80107fc:	8010a680 	call	8010a68 <open>
 8010800:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 8010804:	e0bffa17 	ldw	r2,-24(fp)
 8010808:	10002216 	blt	r2,zero,8010894 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 801080c:	04020074 	movhi	r16,2049
 8010810:	8409b904 	addi	r16,r16,9956
 8010814:	e0bffa17 	ldw	r2,-24(fp)
 8010818:	1009883a 	mov	r4,r2
 801081c:	01400304 	movi	r5,12
 8010820:	800c3380 	call	800c338 <__mulsi3>
 8010824:	8085883a 	add	r2,r16,r2
 8010828:	10c00017 	ldw	r3,0(r2)
 801082c:	e0bffb17 	ldw	r2,-20(fp)
 8010830:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8010834:	04020074 	movhi	r16,2049
 8010838:	8409b904 	addi	r16,r16,9956
 801083c:	e0bffa17 	ldw	r2,-24(fp)
 8010840:	1009883a 	mov	r4,r2
 8010844:	01400304 	movi	r5,12
 8010848:	800c3380 	call	800c338 <__mulsi3>
 801084c:	8085883a 	add	r2,r16,r2
 8010850:	10800104 	addi	r2,r2,4
 8010854:	10c00017 	ldw	r3,0(r2)
 8010858:	e0bffb17 	ldw	r2,-20(fp)
 801085c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8010860:	04020074 	movhi	r16,2049
 8010864:	8409b904 	addi	r16,r16,9956
 8010868:	e0bffa17 	ldw	r2,-24(fp)
 801086c:	1009883a 	mov	r4,r2
 8010870:	01400304 	movi	r5,12
 8010874:	800c3380 	call	800c338 <__mulsi3>
 8010878:	8085883a 	add	r2,r16,r2
 801087c:	10800204 	addi	r2,r2,8
 8010880:	10c00017 	ldw	r3,0(r2)
 8010884:	e0bffb17 	ldw	r2,-20(fp)
 8010888:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 801088c:	e13ffa17 	ldw	r4,-24(fp)
 8010890:	800f2d00 	call	800f2d0 <alt_release_fd>
  }
} 
 8010894:	e6ffff04 	addi	sp,fp,-4
 8010898:	dfc00217 	ldw	ra,8(sp)
 801089c:	df000117 	ldw	fp,4(sp)
 80108a0:	dc000017 	ldw	r16,0(sp)
 80108a4:	dec00304 	addi	sp,sp,12
 80108a8:	f800283a 	ret

080108ac <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80108ac:	defffb04 	addi	sp,sp,-20
 80108b0:	dfc00415 	stw	ra,16(sp)
 80108b4:	df000315 	stw	fp,12(sp)
 80108b8:	df000304 	addi	fp,sp,12
 80108bc:	e13ffd15 	stw	r4,-12(fp)
 80108c0:	e17ffe15 	stw	r5,-8(fp)
 80108c4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80108c8:	01020074 	movhi	r4,2049
 80108cc:	2109bc04 	addi	r4,r4,9968
 80108d0:	e17ffd17 	ldw	r5,-12(fp)
 80108d4:	01800044 	movi	r6,1
 80108d8:	01c07fc4 	movi	r7,511
 80108dc:	80107cc0 	call	80107cc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80108e0:	01020074 	movhi	r4,2049
 80108e4:	2109b904 	addi	r4,r4,9956
 80108e8:	e17ffe17 	ldw	r5,-8(fp)
 80108ec:	000d883a 	mov	r6,zero
 80108f0:	01c07fc4 	movi	r7,511
 80108f4:	80107cc0 	call	80107cc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80108f8:	01020074 	movhi	r4,2049
 80108fc:	2109bf04 	addi	r4,r4,9980
 8010900:	e17fff17 	ldw	r5,-4(fp)
 8010904:	01800044 	movi	r6,1
 8010908:	01c07fc4 	movi	r7,511
 801090c:	80107cc0 	call	80107cc <alt_open_fd>
}  
 8010910:	e037883a 	mov	sp,fp
 8010914:	dfc00117 	ldw	ra,4(sp)
 8010918:	df000017 	ldw	fp,0(sp)
 801091c:	dec00204 	addi	sp,sp,8
 8010920:	f800283a 	ret

08010924 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010924:	defffe04 	addi	sp,sp,-8
 8010928:	dfc00115 	stw	ra,4(sp)
 801092c:	df000015 	stw	fp,0(sp)
 8010930:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010934:	00820074 	movhi	r2,2049
 8010938:	108e3c04 	addi	r2,r2,14576
 801093c:	10800017 	ldw	r2,0(r2)
 8010940:	10000526 	beq	r2,zero,8010958 <alt_get_errno+0x34>
 8010944:	00820074 	movhi	r2,2049
 8010948:	108e3c04 	addi	r2,r2,14576
 801094c:	10800017 	ldw	r2,0(r2)
 8010950:	103ee83a 	callr	r2
 8010954:	00000206 	br	8010960 <alt_get_errno+0x3c>
 8010958:	00820074 	movhi	r2,2049
 801095c:	10950304 	addi	r2,r2,21516
}
 8010960:	e037883a 	mov	sp,fp
 8010964:	dfc00117 	ldw	ra,4(sp)
 8010968:	df000017 	ldw	fp,0(sp)
 801096c:	dec00204 	addi	sp,sp,8
 8010970:	f800283a 	ret

08010974 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8010974:	defffb04 	addi	sp,sp,-20
 8010978:	dfc00415 	stw	ra,16(sp)
 801097c:	df000315 	stw	fp,12(sp)
 8010980:	dc000215 	stw	r16,8(sp)
 8010984:	df000304 	addi	fp,sp,12
 8010988:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 801098c:	e0bffe17 	ldw	r2,-8(fp)
 8010990:	10800217 	ldw	r2,8(r2)
 8010994:	10d00034 	orhi	r3,r2,16384
 8010998:	e0bffe17 	ldw	r2,-8(fp)
 801099c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80109a0:	e03ffd15 	stw	zero,-12(fp)
 80109a4:	00002306 	br	8010a34 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80109a8:	04020074 	movhi	r16,2049
 80109ac:	8409b904 	addi	r16,r16,9956
 80109b0:	e0bffd17 	ldw	r2,-12(fp)
 80109b4:	1009883a 	mov	r4,r2
 80109b8:	01400304 	movi	r5,12
 80109bc:	800c3380 	call	800c338 <__mulsi3>
 80109c0:	8085883a 	add	r2,r16,r2
 80109c4:	10c00017 	ldw	r3,0(r2)
 80109c8:	e0bffe17 	ldw	r2,-8(fp)
 80109cc:	10800017 	ldw	r2,0(r2)
 80109d0:	1880151e 	bne	r3,r2,8010a28 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80109d4:	04020074 	movhi	r16,2049
 80109d8:	8409b904 	addi	r16,r16,9956
 80109dc:	e0bffd17 	ldw	r2,-12(fp)
 80109e0:	1009883a 	mov	r4,r2
 80109e4:	01400304 	movi	r5,12
 80109e8:	800c3380 	call	800c338 <__mulsi3>
 80109ec:	8085883a 	add	r2,r16,r2
 80109f0:	10800204 	addi	r2,r2,8
 80109f4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80109f8:	10000b0e 	bge	r2,zero,8010a28 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 80109fc:	e13ffd17 	ldw	r4,-12(fp)
 8010a00:	01400304 	movi	r5,12
 8010a04:	800c3380 	call	800c338 <__mulsi3>
 8010a08:	1007883a 	mov	r3,r2
 8010a0c:	00820074 	movhi	r2,2049
 8010a10:	1089b904 	addi	r2,r2,9956
 8010a14:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8010a18:	e0bffe17 	ldw	r2,-8(fp)
 8010a1c:	18800226 	beq	r3,r2,8010a28 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8010a20:	00bffcc4 	movi	r2,-13
 8010a24:	00000a06 	br	8010a50 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8010a28:	e0bffd17 	ldw	r2,-12(fp)
 8010a2c:	10800044 	addi	r2,r2,1
 8010a30:	e0bffd15 	stw	r2,-12(fp)
 8010a34:	00820074 	movhi	r2,2049
 8010a38:	108e3b04 	addi	r2,r2,14572
 8010a3c:	10800017 	ldw	r2,0(r2)
 8010a40:	1007883a 	mov	r3,r2
 8010a44:	e0bffd17 	ldw	r2,-12(fp)
 8010a48:	18bfd72e 	bgeu	r3,r2,80109a8 <__alt_data_end+0xfc0109a8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8010a4c:	0005883a 	mov	r2,zero
}
 8010a50:	e6ffff04 	addi	sp,fp,-4
 8010a54:	dfc00217 	ldw	ra,8(sp)
 8010a58:	df000117 	ldw	fp,4(sp)
 8010a5c:	dc000017 	ldw	r16,0(sp)
 8010a60:	dec00304 	addi	sp,sp,12
 8010a64:	f800283a 	ret

08010a68 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8010a68:	defff604 	addi	sp,sp,-40
 8010a6c:	dfc00915 	stw	ra,36(sp)
 8010a70:	df000815 	stw	fp,32(sp)
 8010a74:	df000804 	addi	fp,sp,32
 8010a78:	e13ffd15 	stw	r4,-12(fp)
 8010a7c:	e17ffe15 	stw	r5,-8(fp)
 8010a80:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8010a84:	00bfffc4 	movi	r2,-1
 8010a88:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8010a8c:	00bffb44 	movi	r2,-19
 8010a90:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8010a94:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8010a98:	e13ffd17 	ldw	r4,-12(fp)
 8010a9c:	01420074 	movhi	r5,2049
 8010aa0:	294e3904 	addi	r5,r5,14564
 8010aa4:	8010d840 	call	8010d84 <alt_find_dev>
 8010aa8:	e0bff815 	stw	r2,-32(fp)
 8010aac:	e0bff817 	ldw	r2,-32(fp)
 8010ab0:	1000051e 	bne	r2,zero,8010ac8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8010ab4:	e13ffd17 	ldw	r4,-12(fp)
 8010ab8:	8010e140 	call	8010e14 <alt_find_file>
 8010abc:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8010ac0:	00800044 	movi	r2,1
 8010ac4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8010ac8:	e0bff817 	ldw	r2,-32(fp)
 8010acc:	10002b26 	beq	r2,zero,8010b7c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8010ad0:	e13ff817 	ldw	r4,-32(fp)
 8010ad4:	8010f280 	call	8010f28 <alt_get_fd>
 8010ad8:	e0bff915 	stw	r2,-28(fp)
 8010adc:	e0bff917 	ldw	r2,-28(fp)
 8010ae0:	1000030e 	bge	r2,zero,8010af0 <open+0x88>
    {
      status = index;
 8010ae4:	e0bff917 	ldw	r2,-28(fp)
 8010ae8:	e0bffa15 	stw	r2,-24(fp)
 8010aec:	00002506 	br	8010b84 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 8010af0:	e13ff917 	ldw	r4,-28(fp)
 8010af4:	01400304 	movi	r5,12
 8010af8:	800c3380 	call	800c338 <__mulsi3>
 8010afc:	1007883a 	mov	r3,r2
 8010b00:	00820074 	movhi	r2,2049
 8010b04:	1089b904 	addi	r2,r2,9956
 8010b08:	1885883a 	add	r2,r3,r2
 8010b0c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8010b10:	e0fffe17 	ldw	r3,-8(fp)
 8010b14:	00900034 	movhi	r2,16384
 8010b18:	10bfffc4 	addi	r2,r2,-1
 8010b1c:	1886703a 	and	r3,r3,r2
 8010b20:	e0bffc17 	ldw	r2,-16(fp)
 8010b24:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8010b28:	e0bffb17 	ldw	r2,-20(fp)
 8010b2c:	1000051e 	bne	r2,zero,8010b44 <open+0xdc>
 8010b30:	e13ffc17 	ldw	r4,-16(fp)
 8010b34:	80109740 	call	8010974 <alt_file_locked>
 8010b38:	e0bffa15 	stw	r2,-24(fp)
 8010b3c:	e0bffa17 	ldw	r2,-24(fp)
 8010b40:	10001016 	blt	r2,zero,8010b84 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8010b44:	e0bff817 	ldw	r2,-32(fp)
 8010b48:	10800317 	ldw	r2,12(r2)
 8010b4c:	10000826 	beq	r2,zero,8010b70 <open+0x108>
 8010b50:	e0bff817 	ldw	r2,-32(fp)
 8010b54:	10800317 	ldw	r2,12(r2)
 8010b58:	e13ffc17 	ldw	r4,-16(fp)
 8010b5c:	e17ffd17 	ldw	r5,-12(fp)
 8010b60:	e1bffe17 	ldw	r6,-8(fp)
 8010b64:	e1ffff17 	ldw	r7,-4(fp)
 8010b68:	103ee83a 	callr	r2
 8010b6c:	00000106 	br	8010b74 <open+0x10c>
 8010b70:	0005883a 	mov	r2,zero
 8010b74:	e0bffa15 	stw	r2,-24(fp)
 8010b78:	00000206 	br	8010b84 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8010b7c:	00bffb44 	movi	r2,-19
 8010b80:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8010b84:	e0bffa17 	ldw	r2,-24(fp)
 8010b88:	1000090e 	bge	r2,zero,8010bb0 <open+0x148>
  {
    alt_release_fd (index);  
 8010b8c:	e13ff917 	ldw	r4,-28(fp)
 8010b90:	800f2d00 	call	800f2d0 <alt_release_fd>
    ALT_ERRNO = -status;
 8010b94:	80109240 	call	8010924 <alt_get_errno>
 8010b98:	1007883a 	mov	r3,r2
 8010b9c:	e0bffa17 	ldw	r2,-24(fp)
 8010ba0:	0085c83a 	sub	r2,zero,r2
 8010ba4:	18800015 	stw	r2,0(r3)
    return -1;
 8010ba8:	00bfffc4 	movi	r2,-1
 8010bac:	00000106 	br	8010bb4 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 8010bb0:	e0bff917 	ldw	r2,-28(fp)
}
 8010bb4:	e037883a 	mov	sp,fp
 8010bb8:	dfc00117 	ldw	ra,4(sp)
 8010bbc:	df000017 	ldw	fp,0(sp)
 8010bc0:	dec00204 	addi	sp,sp,8
 8010bc4:	f800283a 	ret

08010bc8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8010bc8:	defffa04 	addi	sp,sp,-24
 8010bcc:	df000515 	stw	fp,20(sp)
 8010bd0:	df000504 	addi	fp,sp,20
 8010bd4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010bd8:	0005303a 	rdctl	r2,status
 8010bdc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010be0:	e0fffc17 	ldw	r3,-16(fp)
 8010be4:	00bfff84 	movi	r2,-2
 8010be8:	1884703a 	and	r2,r3,r2
 8010bec:	1001703a 	wrctl	status,r2
  
  return context;
 8010bf0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8010bf4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8010bf8:	e0bfff17 	ldw	r2,-4(fp)
 8010bfc:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8010c00:	e0bffd17 	ldw	r2,-12(fp)
 8010c04:	10800017 	ldw	r2,0(r2)
 8010c08:	e0fffd17 	ldw	r3,-12(fp)
 8010c0c:	18c00117 	ldw	r3,4(r3)
 8010c10:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8010c14:	e0bffd17 	ldw	r2,-12(fp)
 8010c18:	10800117 	ldw	r2,4(r2)
 8010c1c:	e0fffd17 	ldw	r3,-12(fp)
 8010c20:	18c00017 	ldw	r3,0(r3)
 8010c24:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8010c28:	e0bffd17 	ldw	r2,-12(fp)
 8010c2c:	e0fffd17 	ldw	r3,-12(fp)
 8010c30:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8010c34:	e0bffd17 	ldw	r2,-12(fp)
 8010c38:	e0fffd17 	ldw	r3,-12(fp)
 8010c3c:	10c00015 	stw	r3,0(r2)
 8010c40:	e0bffb17 	ldw	r2,-20(fp)
 8010c44:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010c48:	e0bffe17 	ldw	r2,-8(fp)
 8010c4c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8010c50:	e037883a 	mov	sp,fp
 8010c54:	df000017 	ldw	fp,0(sp)
 8010c58:	dec00104 	addi	sp,sp,4
 8010c5c:	f800283a 	ret

08010c60 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8010c60:	defffb04 	addi	sp,sp,-20
 8010c64:	dfc00415 	stw	ra,16(sp)
 8010c68:	df000315 	stw	fp,12(sp)
 8010c6c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8010c70:	d0a00e17 	ldw	r2,-32712(gp)
 8010c74:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8010c78:	d0a6d817 	ldw	r2,-25760(gp)
 8010c7c:	10800044 	addi	r2,r2,1
 8010c80:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010c84:	00002e06 	br	8010d40 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8010c88:	e0bffd17 	ldw	r2,-12(fp)
 8010c8c:	10800017 	ldw	r2,0(r2)
 8010c90:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8010c94:	e0bffd17 	ldw	r2,-12(fp)
 8010c98:	10800403 	ldbu	r2,16(r2)
 8010c9c:	10803fcc 	andi	r2,r2,255
 8010ca0:	10000426 	beq	r2,zero,8010cb4 <alt_tick+0x54>
 8010ca4:	d0a6d817 	ldw	r2,-25760(gp)
 8010ca8:	1000021e 	bne	r2,zero,8010cb4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8010cac:	e0bffd17 	ldw	r2,-12(fp)
 8010cb0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8010cb4:	e0bffd17 	ldw	r2,-12(fp)
 8010cb8:	10800217 	ldw	r2,8(r2)
 8010cbc:	d0e6d817 	ldw	r3,-25760(gp)
 8010cc0:	18801d36 	bltu	r3,r2,8010d38 <alt_tick+0xd8>
 8010cc4:	e0bffd17 	ldw	r2,-12(fp)
 8010cc8:	10800403 	ldbu	r2,16(r2)
 8010ccc:	10803fcc 	andi	r2,r2,255
 8010cd0:	1000191e 	bne	r2,zero,8010d38 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8010cd4:	e0bffd17 	ldw	r2,-12(fp)
 8010cd8:	10800317 	ldw	r2,12(r2)
 8010cdc:	e0fffd17 	ldw	r3,-12(fp)
 8010ce0:	18c00517 	ldw	r3,20(r3)
 8010ce4:	1809883a 	mov	r4,r3
 8010ce8:	103ee83a 	callr	r2
 8010cec:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8010cf0:	e0bfff17 	ldw	r2,-4(fp)
 8010cf4:	1000031e 	bne	r2,zero,8010d04 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8010cf8:	e13ffd17 	ldw	r4,-12(fp)
 8010cfc:	8010bc80 	call	8010bc8 <alt_alarm_stop>
 8010d00:	00000d06 	br	8010d38 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8010d04:	e0bffd17 	ldw	r2,-12(fp)
 8010d08:	10c00217 	ldw	r3,8(r2)
 8010d0c:	e0bfff17 	ldw	r2,-4(fp)
 8010d10:	1887883a 	add	r3,r3,r2
 8010d14:	e0bffd17 	ldw	r2,-12(fp)
 8010d18:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8010d1c:	e0bffd17 	ldw	r2,-12(fp)
 8010d20:	10c00217 	ldw	r3,8(r2)
 8010d24:	d0a6d817 	ldw	r2,-25760(gp)
 8010d28:	1880032e 	bgeu	r3,r2,8010d38 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8010d2c:	e0bffd17 	ldw	r2,-12(fp)
 8010d30:	00c00044 	movi	r3,1
 8010d34:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8010d38:	e0bffe17 	ldw	r2,-8(fp)
 8010d3c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010d40:	e0fffd17 	ldw	r3,-12(fp)
 8010d44:	d0a00e04 	addi	r2,gp,-32712
 8010d48:	18bfcf1e 	bne	r3,r2,8010c88 <__alt_data_end+0xfc010c88>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8010d4c:	0001883a 	nop
}
 8010d50:	e037883a 	mov	sp,fp
 8010d54:	dfc00117 	ldw	ra,4(sp)
 8010d58:	df000017 	ldw	fp,0(sp)
 8010d5c:	dec00204 	addi	sp,sp,8
 8010d60:	f800283a 	ret

08010d64 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 8010d64:	deffff04 	addi	sp,sp,-4
 8010d68:	df000015 	stw	fp,0(sp)
 8010d6c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8010d70:	000170fa 	wrctl	ienable,zero
}
 8010d74:	e037883a 	mov	sp,fp
 8010d78:	df000017 	ldw	fp,0(sp)
 8010d7c:	dec00104 	addi	sp,sp,4
 8010d80:	f800283a 	ret

08010d84 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8010d84:	defffa04 	addi	sp,sp,-24
 8010d88:	dfc00515 	stw	ra,20(sp)
 8010d8c:	df000415 	stw	fp,16(sp)
 8010d90:	df000404 	addi	fp,sp,16
 8010d94:	e13ffe15 	stw	r4,-8(fp)
 8010d98:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8010d9c:	e0bfff17 	ldw	r2,-4(fp)
 8010da0:	10800017 	ldw	r2,0(r2)
 8010da4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8010da8:	e13ffe17 	ldw	r4,-8(fp)
 8010dac:	800232c0 	call	800232c <strlen>
 8010db0:	10800044 	addi	r2,r2,1
 8010db4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010db8:	00000d06 	br	8010df0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8010dbc:	e0bffc17 	ldw	r2,-16(fp)
 8010dc0:	10c00217 	ldw	r3,8(r2)
 8010dc4:	e0bffd17 	ldw	r2,-12(fp)
 8010dc8:	1809883a 	mov	r4,r3
 8010dcc:	e17ffe17 	ldw	r5,-8(fp)
 8010dd0:	100d883a 	mov	r6,r2
 8010dd4:	80110480 	call	8011048 <memcmp>
 8010dd8:	1000021e 	bne	r2,zero,8010de4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8010ddc:	e0bffc17 	ldw	r2,-16(fp)
 8010de0:	00000706 	br	8010e00 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8010de4:	e0bffc17 	ldw	r2,-16(fp)
 8010de8:	10800017 	ldw	r2,0(r2)
 8010dec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010df0:	e0fffc17 	ldw	r3,-16(fp)
 8010df4:	e0bfff17 	ldw	r2,-4(fp)
 8010df8:	18bff01e 	bne	r3,r2,8010dbc <__alt_data_end+0xfc010dbc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8010dfc:	0005883a 	mov	r2,zero
}
 8010e00:	e037883a 	mov	sp,fp
 8010e04:	dfc00117 	ldw	ra,4(sp)
 8010e08:	df000017 	ldw	fp,0(sp)
 8010e0c:	dec00204 	addi	sp,sp,8
 8010e10:	f800283a 	ret

08010e14 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8010e14:	defffb04 	addi	sp,sp,-20
 8010e18:	dfc00415 	stw	ra,16(sp)
 8010e1c:	df000315 	stw	fp,12(sp)
 8010e20:	df000304 	addi	fp,sp,12
 8010e24:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8010e28:	00820074 	movhi	r2,2049
 8010e2c:	108e3704 	addi	r2,r2,14556
 8010e30:	10800017 	ldw	r2,0(r2)
 8010e34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8010e38:	00003106 	br	8010f00 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 8010e3c:	e0bffd17 	ldw	r2,-12(fp)
 8010e40:	10800217 	ldw	r2,8(r2)
 8010e44:	1009883a 	mov	r4,r2
 8010e48:	800232c0 	call	800232c <strlen>
 8010e4c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8010e50:	e0bffd17 	ldw	r2,-12(fp)
 8010e54:	10c00217 	ldw	r3,8(r2)
 8010e58:	e0bffe17 	ldw	r2,-8(fp)
 8010e5c:	10bfffc4 	addi	r2,r2,-1
 8010e60:	1885883a 	add	r2,r3,r2
 8010e64:	10800003 	ldbu	r2,0(r2)
 8010e68:	10803fcc 	andi	r2,r2,255
 8010e6c:	1080201c 	xori	r2,r2,128
 8010e70:	10bfe004 	addi	r2,r2,-128
 8010e74:	10800bd8 	cmpnei	r2,r2,47
 8010e78:	1000031e 	bne	r2,zero,8010e88 <alt_find_file+0x74>
    {
      len -= 1;
 8010e7c:	e0bffe17 	ldw	r2,-8(fp)
 8010e80:	10bfffc4 	addi	r2,r2,-1
 8010e84:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8010e88:	e0bffe17 	ldw	r2,-8(fp)
 8010e8c:	e0ffff17 	ldw	r3,-4(fp)
 8010e90:	1885883a 	add	r2,r3,r2
 8010e94:	10800003 	ldbu	r2,0(r2)
 8010e98:	10803fcc 	andi	r2,r2,255
 8010e9c:	1080201c 	xori	r2,r2,128
 8010ea0:	10bfe004 	addi	r2,r2,-128
 8010ea4:	10800be0 	cmpeqi	r2,r2,47
 8010ea8:	1000081e 	bne	r2,zero,8010ecc <alt_find_file+0xb8>
 8010eac:	e0bffe17 	ldw	r2,-8(fp)
 8010eb0:	e0ffff17 	ldw	r3,-4(fp)
 8010eb4:	1885883a 	add	r2,r3,r2
 8010eb8:	10800003 	ldbu	r2,0(r2)
 8010ebc:	10803fcc 	andi	r2,r2,255
 8010ec0:	1080201c 	xori	r2,r2,128
 8010ec4:	10bfe004 	addi	r2,r2,-128
 8010ec8:	10000a1e 	bne	r2,zero,8010ef4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 8010ecc:	e0bffd17 	ldw	r2,-12(fp)
 8010ed0:	10c00217 	ldw	r3,8(r2)
 8010ed4:	e0bffe17 	ldw	r2,-8(fp)
 8010ed8:	1809883a 	mov	r4,r3
 8010edc:	e17fff17 	ldw	r5,-4(fp)
 8010ee0:	100d883a 	mov	r6,r2
 8010ee4:	80110480 	call	8011048 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8010ee8:	1000021e 	bne	r2,zero,8010ef4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8010eec:	e0bffd17 	ldw	r2,-12(fp)
 8010ef0:	00000806 	br	8010f14 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 8010ef4:	e0bffd17 	ldw	r2,-12(fp)
 8010ef8:	10800017 	ldw	r2,0(r2)
 8010efc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8010f00:	e0fffd17 	ldw	r3,-12(fp)
 8010f04:	00820074 	movhi	r2,2049
 8010f08:	108e3704 	addi	r2,r2,14556
 8010f0c:	18bfcb1e 	bne	r3,r2,8010e3c <__alt_data_end+0xfc010e3c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8010f10:	0005883a 	mov	r2,zero
}
 8010f14:	e037883a 	mov	sp,fp
 8010f18:	dfc00117 	ldw	ra,4(sp)
 8010f1c:	df000017 	ldw	fp,0(sp)
 8010f20:	dec00204 	addi	sp,sp,8
 8010f24:	f800283a 	ret

08010f28 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8010f28:	defffa04 	addi	sp,sp,-24
 8010f2c:	dfc00515 	stw	ra,20(sp)
 8010f30:	df000415 	stw	fp,16(sp)
 8010f34:	dc000315 	stw	r16,12(sp)
 8010f38:	df000404 	addi	fp,sp,16
 8010f3c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8010f40:	00bffa04 	movi	r2,-24
 8010f44:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8010f48:	e03ffc15 	stw	zero,-16(fp)
 8010f4c:	00002106 	br	8010fd4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 8010f50:	04020074 	movhi	r16,2049
 8010f54:	8409b904 	addi	r16,r16,9956
 8010f58:	e0bffc17 	ldw	r2,-16(fp)
 8010f5c:	1009883a 	mov	r4,r2
 8010f60:	01400304 	movi	r5,12
 8010f64:	800c3380 	call	800c338 <__mulsi3>
 8010f68:	8085883a 	add	r2,r16,r2
 8010f6c:	10800017 	ldw	r2,0(r2)
 8010f70:	1000151e 	bne	r2,zero,8010fc8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 8010f74:	04020074 	movhi	r16,2049
 8010f78:	8409b904 	addi	r16,r16,9956
 8010f7c:	e0bffc17 	ldw	r2,-16(fp)
 8010f80:	1009883a 	mov	r4,r2
 8010f84:	01400304 	movi	r5,12
 8010f88:	800c3380 	call	800c338 <__mulsi3>
 8010f8c:	8085883a 	add	r2,r16,r2
 8010f90:	e0fffe17 	ldw	r3,-8(fp)
 8010f94:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8010f98:	00820074 	movhi	r2,2049
 8010f9c:	108e3b04 	addi	r2,r2,14572
 8010fa0:	10c00017 	ldw	r3,0(r2)
 8010fa4:	e0bffc17 	ldw	r2,-16(fp)
 8010fa8:	1880040e 	bge	r3,r2,8010fbc <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 8010fac:	00820074 	movhi	r2,2049
 8010fb0:	108e3b04 	addi	r2,r2,14572
 8010fb4:	e0fffc17 	ldw	r3,-16(fp)
 8010fb8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8010fbc:	e0bffc17 	ldw	r2,-16(fp)
 8010fc0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8010fc4:	00000606 	br	8010fe0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8010fc8:	e0bffc17 	ldw	r2,-16(fp)
 8010fcc:	10800044 	addi	r2,r2,1
 8010fd0:	e0bffc15 	stw	r2,-16(fp)
 8010fd4:	e0bffc17 	ldw	r2,-16(fp)
 8010fd8:	10800810 	cmplti	r2,r2,32
 8010fdc:	103fdc1e 	bne	r2,zero,8010f50 <__alt_data_end+0xfc010f50>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8010fe0:	e0bffd17 	ldw	r2,-12(fp)
}
 8010fe4:	e6ffff04 	addi	sp,fp,-4
 8010fe8:	dfc00217 	ldw	ra,8(sp)
 8010fec:	df000117 	ldw	fp,4(sp)
 8010ff0:	dc000017 	ldw	r16,0(sp)
 8010ff4:	dec00304 	addi	sp,sp,12
 8010ff8:	f800283a 	ret

08010ffc <atexit>:
 8010ffc:	200b883a 	mov	r5,r4
 8011000:	000d883a 	mov	r6,zero
 8011004:	0009883a 	mov	r4,zero
 8011008:	000f883a 	mov	r7,zero
 801100c:	80110c41 	jmpi	80110c4 <__register_exitproc>

08011010 <exit>:
 8011010:	defffe04 	addi	sp,sp,-8
 8011014:	000b883a 	mov	r5,zero
 8011018:	dc000015 	stw	r16,0(sp)
 801101c:	dfc00115 	stw	ra,4(sp)
 8011020:	2021883a 	mov	r16,r4
 8011024:	80111d80 	call	80111d8 <__call_exitprocs>
 8011028:	00820074 	movhi	r2,2049
 801102c:	108e3104 	addi	r2,r2,14532
 8011030:	11000017 	ldw	r4,0(r2)
 8011034:	20800f17 	ldw	r2,60(r4)
 8011038:	10000126 	beq	r2,zero,8011040 <exit+0x30>
 801103c:	103ee83a 	callr	r2
 8011040:	8009883a 	mov	r4,r16
 8011044:	801136c0 	call	801136c <_exit>

08011048 <memcmp>:
 8011048:	01c000c4 	movi	r7,3
 801104c:	3980192e 	bgeu	r7,r6,80110b4 <memcmp+0x6c>
 8011050:	2144b03a 	or	r2,r4,r5
 8011054:	11c4703a 	and	r2,r2,r7
 8011058:	10000f26 	beq	r2,zero,8011098 <memcmp+0x50>
 801105c:	20800003 	ldbu	r2,0(r4)
 8011060:	28c00003 	ldbu	r3,0(r5)
 8011064:	10c0151e 	bne	r2,r3,80110bc <memcmp+0x74>
 8011068:	31bfff84 	addi	r6,r6,-2
 801106c:	01ffffc4 	movi	r7,-1
 8011070:	00000406 	br	8011084 <memcmp+0x3c>
 8011074:	20800003 	ldbu	r2,0(r4)
 8011078:	28c00003 	ldbu	r3,0(r5)
 801107c:	31bfffc4 	addi	r6,r6,-1
 8011080:	10c00e1e 	bne	r2,r3,80110bc <memcmp+0x74>
 8011084:	21000044 	addi	r4,r4,1
 8011088:	29400044 	addi	r5,r5,1
 801108c:	31fff91e 	bne	r6,r7,8011074 <__alt_data_end+0xfc011074>
 8011090:	0005883a 	mov	r2,zero
 8011094:	f800283a 	ret
 8011098:	20c00017 	ldw	r3,0(r4)
 801109c:	28800017 	ldw	r2,0(r5)
 80110a0:	1880041e 	bne	r3,r2,80110b4 <memcmp+0x6c>
 80110a4:	31bfff04 	addi	r6,r6,-4
 80110a8:	21000104 	addi	r4,r4,4
 80110ac:	29400104 	addi	r5,r5,4
 80110b0:	39bff936 	bltu	r7,r6,8011098 <__alt_data_end+0xfc011098>
 80110b4:	303fe91e 	bne	r6,zero,801105c <__alt_data_end+0xfc01105c>
 80110b8:	003ff506 	br	8011090 <__alt_data_end+0xfc011090>
 80110bc:	10c5c83a 	sub	r2,r2,r3
 80110c0:	f800283a 	ret

080110c4 <__register_exitproc>:
 80110c4:	00820074 	movhi	r2,2049
 80110c8:	defffa04 	addi	sp,sp,-24
 80110cc:	108e3104 	addi	r2,r2,14532
 80110d0:	dc000315 	stw	r16,12(sp)
 80110d4:	14000017 	ldw	r16,0(r2)
 80110d8:	dc400415 	stw	r17,16(sp)
 80110dc:	dfc00515 	stw	ra,20(sp)
 80110e0:	80805217 	ldw	r2,328(r16)
 80110e4:	2023883a 	mov	r17,r4
 80110e8:	10003626 	beq	r2,zero,80111c4 <__register_exitproc+0x100>
 80110ec:	10c00117 	ldw	r3,4(r2)
 80110f0:	010007c4 	movi	r4,31
 80110f4:	20c00e16 	blt	r4,r3,8011130 <__register_exitproc+0x6c>
 80110f8:	1a400044 	addi	r9,r3,1
 80110fc:	8800211e 	bne	r17,zero,8011184 <__register_exitproc+0xc0>
 8011100:	18c00084 	addi	r3,r3,2
 8011104:	18c7883a 	add	r3,r3,r3
 8011108:	18c7883a 	add	r3,r3,r3
 801110c:	12400115 	stw	r9,4(r2)
 8011110:	10c7883a 	add	r3,r2,r3
 8011114:	19400015 	stw	r5,0(r3)
 8011118:	0005883a 	mov	r2,zero
 801111c:	dfc00517 	ldw	ra,20(sp)
 8011120:	dc400417 	ldw	r17,16(sp)
 8011124:	dc000317 	ldw	r16,12(sp)
 8011128:	dec00604 	addi	sp,sp,24
 801112c:	f800283a 	ret
 8011130:	00800034 	movhi	r2,0
 8011134:	10800004 	addi	r2,r2,0
 8011138:	10002526 	beq	r2,zero,80111d0 <__register_exitproc+0x10c>
 801113c:	01006404 	movi	r4,400
 8011140:	d9400015 	stw	r5,0(sp)
 8011144:	d9800115 	stw	r6,4(sp)
 8011148:	d9c00215 	stw	r7,8(sp)
 801114c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8011150:	d9400017 	ldw	r5,0(sp)
 8011154:	d9800117 	ldw	r6,4(sp)
 8011158:	d9c00217 	ldw	r7,8(sp)
 801115c:	10001c26 	beq	r2,zero,80111d0 <__register_exitproc+0x10c>
 8011160:	80c05217 	ldw	r3,328(r16)
 8011164:	10000115 	stw	zero,4(r2)
 8011168:	02400044 	movi	r9,1
 801116c:	10c00015 	stw	r3,0(r2)
 8011170:	80805215 	stw	r2,328(r16)
 8011174:	10006215 	stw	zero,392(r2)
 8011178:	10006315 	stw	zero,396(r2)
 801117c:	0007883a 	mov	r3,zero
 8011180:	883fdf26 	beq	r17,zero,8011100 <__alt_data_end+0xfc011100>
 8011184:	18d1883a 	add	r8,r3,r3
 8011188:	4211883a 	add	r8,r8,r8
 801118c:	1211883a 	add	r8,r2,r8
 8011190:	41802215 	stw	r6,136(r8)
 8011194:	01000044 	movi	r4,1
 8011198:	11806217 	ldw	r6,392(r2)
 801119c:	20c8983a 	sll	r4,r4,r3
 80111a0:	310cb03a 	or	r6,r6,r4
 80111a4:	11806215 	stw	r6,392(r2)
 80111a8:	41c04215 	stw	r7,264(r8)
 80111ac:	01800084 	movi	r6,2
 80111b0:	89bfd31e 	bne	r17,r6,8011100 <__alt_data_end+0xfc011100>
 80111b4:	11806317 	ldw	r6,396(r2)
 80111b8:	3108b03a 	or	r4,r6,r4
 80111bc:	11006315 	stw	r4,396(r2)
 80111c0:	003fcf06 	br	8011100 <__alt_data_end+0xfc011100>
 80111c4:	80805304 	addi	r2,r16,332
 80111c8:	80805215 	stw	r2,328(r16)
 80111cc:	003fc706 	br	80110ec <__alt_data_end+0xfc0110ec>
 80111d0:	00bfffc4 	movi	r2,-1
 80111d4:	003fd106 	br	801111c <__alt_data_end+0xfc01111c>

080111d8 <__call_exitprocs>:
 80111d8:	00820074 	movhi	r2,2049
 80111dc:	108e3104 	addi	r2,r2,14532
 80111e0:	10800017 	ldw	r2,0(r2)
 80111e4:	defff404 	addi	sp,sp,-48
 80111e8:	dd800815 	stw	r22,32(sp)
 80111ec:	d8800015 	stw	r2,0(sp)
 80111f0:	10805204 	addi	r2,r2,328
 80111f4:	dd000615 	stw	r20,24(sp)
 80111f8:	dc800415 	stw	r18,16(sp)
 80111fc:	dfc00b15 	stw	ra,44(sp)
 8011200:	df000a15 	stw	fp,40(sp)
 8011204:	ddc00915 	stw	r23,36(sp)
 8011208:	dd400715 	stw	r21,28(sp)
 801120c:	dcc00515 	stw	r19,20(sp)
 8011210:	dc400315 	stw	r17,12(sp)
 8011214:	dc000215 	stw	r16,8(sp)
 8011218:	2025883a 	mov	r18,r4
 801121c:	2829883a 	mov	r20,r5
 8011220:	d8800115 	stw	r2,4(sp)
 8011224:	05bfffc4 	movi	r22,-1
 8011228:	d8800017 	ldw	r2,0(sp)
 801122c:	14c05217 	ldw	r19,328(r2)
 8011230:	98001d26 	beq	r19,zero,80112a8 <__call_exitprocs+0xd0>
 8011234:	dd400117 	ldw	r21,4(sp)
 8011238:	98800117 	ldw	r2,4(r19)
 801123c:	173fffc4 	addi	fp,r2,-1
 8011240:	e0000d16 	blt	fp,zero,8011278 <__call_exitprocs+0xa0>
 8011244:	14000044 	addi	r16,r2,1
 8011248:	8421883a 	add	r16,r16,r16
 801124c:	8421883a 	add	r16,r16,r16
 8011250:	84402004 	addi	r17,r16,128
 8011254:	9c63883a 	add	r17,r19,r17
 8011258:	9c21883a 	add	r16,r19,r16
 801125c:	a0001e26 	beq	r20,zero,80112d8 <__call_exitprocs+0x100>
 8011260:	80804017 	ldw	r2,256(r16)
 8011264:	15001c26 	beq	r2,r20,80112d8 <__call_exitprocs+0x100>
 8011268:	e73fffc4 	addi	fp,fp,-1
 801126c:	843fff04 	addi	r16,r16,-4
 8011270:	8c7fff04 	addi	r17,r17,-4
 8011274:	e5bff91e 	bne	fp,r22,801125c <__alt_data_end+0xfc01125c>
 8011278:	00800034 	movhi	r2,0
 801127c:	10800004 	addi	r2,r2,0
 8011280:	10000926 	beq	r2,zero,80112a8 <__call_exitprocs+0xd0>
 8011284:	98800117 	ldw	r2,4(r19)
 8011288:	1000311e 	bne	r2,zero,8011350 <__call_exitprocs+0x178>
 801128c:	98800017 	ldw	r2,0(r19)
 8011290:	10003426 	beq	r2,zero,8011364 <__call_exitprocs+0x18c>
 8011294:	9809883a 	mov	r4,r19
 8011298:	a8800015 	stw	r2,0(r21)
 801129c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 80112a0:	acc00017 	ldw	r19,0(r21)
 80112a4:	983fe41e 	bne	r19,zero,8011238 <__alt_data_end+0xfc011238>
 80112a8:	dfc00b17 	ldw	ra,44(sp)
 80112ac:	df000a17 	ldw	fp,40(sp)
 80112b0:	ddc00917 	ldw	r23,36(sp)
 80112b4:	dd800817 	ldw	r22,32(sp)
 80112b8:	dd400717 	ldw	r21,28(sp)
 80112bc:	dd000617 	ldw	r20,24(sp)
 80112c0:	dcc00517 	ldw	r19,20(sp)
 80112c4:	dc800417 	ldw	r18,16(sp)
 80112c8:	dc400317 	ldw	r17,12(sp)
 80112cc:	dc000217 	ldw	r16,8(sp)
 80112d0:	dec00c04 	addi	sp,sp,48
 80112d4:	f800283a 	ret
 80112d8:	98800117 	ldw	r2,4(r19)
 80112dc:	80c00017 	ldw	r3,0(r16)
 80112e0:	10bfffc4 	addi	r2,r2,-1
 80112e4:	17001526 	beq	r2,fp,801133c <__call_exitprocs+0x164>
 80112e8:	80000015 	stw	zero,0(r16)
 80112ec:	183fde26 	beq	r3,zero,8011268 <__alt_data_end+0xfc011268>
 80112f0:	00800044 	movi	r2,1
 80112f4:	1708983a 	sll	r4,r2,fp
 80112f8:	98806217 	ldw	r2,392(r19)
 80112fc:	9dc00117 	ldw	r23,4(r19)
 8011300:	2084703a 	and	r2,r4,r2
 8011304:	1000061e 	bne	r2,zero,8011320 <__call_exitprocs+0x148>
 8011308:	183ee83a 	callr	r3
 801130c:	98800117 	ldw	r2,4(r19)
 8011310:	15ffc51e 	bne	r2,r23,8011228 <__alt_data_end+0xfc011228>
 8011314:	a8800017 	ldw	r2,0(r21)
 8011318:	14ffd326 	beq	r2,r19,8011268 <__alt_data_end+0xfc011268>
 801131c:	003fc206 	br	8011228 <__alt_data_end+0xfc011228>
 8011320:	98806317 	ldw	r2,396(r19)
 8011324:	2084703a 	and	r2,r4,r2
 8011328:	1000061e 	bne	r2,zero,8011344 <__call_exitprocs+0x16c>
 801132c:	89400017 	ldw	r5,0(r17)
 8011330:	9009883a 	mov	r4,r18
 8011334:	183ee83a 	callr	r3
 8011338:	003ff406 	br	801130c <__alt_data_end+0xfc01130c>
 801133c:	9f000115 	stw	fp,4(r19)
 8011340:	003fea06 	br	80112ec <__alt_data_end+0xfc0112ec>
 8011344:	89000017 	ldw	r4,0(r17)
 8011348:	183ee83a 	callr	r3
 801134c:	003fef06 	br	801130c <__alt_data_end+0xfc01130c>
 8011350:	98800017 	ldw	r2,0(r19)
 8011354:	982b883a 	mov	r21,r19
 8011358:	1027883a 	mov	r19,r2
 801135c:	983fb61e 	bne	r19,zero,8011238 <__alt_data_end+0xfc011238>
 8011360:	003fd106 	br	80112a8 <__alt_data_end+0xfc0112a8>
 8011364:	0005883a 	mov	r2,zero
 8011368:	003ffa06 	br	8011354 <__alt_data_end+0xfc011354>

0801136c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 801136c:	defffd04 	addi	sp,sp,-12
 8011370:	df000215 	stw	fp,8(sp)
 8011374:	df000204 	addi	fp,sp,8
 8011378:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 801137c:	0001883a 	nop
 8011380:	e0bfff17 	ldw	r2,-4(fp)
 8011384:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8011388:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 801138c:	10000226 	beq	r2,zero,8011398 <_exit+0x2c>
    ALT_SIM_FAIL();
 8011390:	002af070 	cmpltui	zero,zero,43969
 8011394:	00000106 	br	801139c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8011398:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 801139c:	003fff06 	br	801139c <__alt_data_end+0xfc01139c>
