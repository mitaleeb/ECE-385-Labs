
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00011dc4 memsz 0x00011dc4 flags r-x
    LOAD off    0x00012de4 vaddr 0x08011de4 paddr 0x080138d0 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000153bc vaddr 0x080153bc paddr 0x080153bc align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000111d4  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a54  08011390  08011390  00012390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  08011de4  080138d0  00012de4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  080153bc  080153bc  000153bc  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  000148d0  2**0
                  CONTENTS
  7 .sdram        00000000  0801551c  0801551c  000148d0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000148d0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000d28  00000000  00000000  000148f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023647  00000000  00000000  00015620  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00008f2e  00000000  00000000  00038c67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b162  00000000  00000000  00041b95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000022cc  00000000  00000000  0004ccf8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003333  00000000  00000000  0004efc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00016d4c  00000000  00000000  000522f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00069044  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001370  00000000  00000000  00069088  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006d78e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006d791  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006d79d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006d79e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0006d79f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0006d7a3  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0006d7a7  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0006d7ab  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0006d7b6  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0006d7c1  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0006d7cc  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000030  00000000  00000000  0006d7d4  2**0
                  CONTENTS, READONLY
 30 .jdi          000040bc  00000000  00000000  0006d804  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0006e33b  00000000  00000000  000718c0  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
08011390 l    d  .rodata	00000000 .rodata
08011de4 l    d  .rwdata	00000000 .rwdata
080153bc l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
0801551c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
080153bc l     O .bss	00000002 ctl_reg.3318
080153be l     O .bss	00000002 no_device.3319
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08011b2a l     O .rodata	00000010 zeroes.4181
08011b3a l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08004604 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080061ac l     F .text	00000008 __fp_lock
080061b4 l     F .text	00000008 __fp_unlock
080061c8 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08011de4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
08012228 l     O .rwdata	00000020 lc_ctype_charset
08012208 l     O .rwdata	00000020 lc_message_charset
08012248 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08011b6c l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
080096f8 l     F .text	000000fc __sprint_r.part.0
08011ca0 l     O .rodata	00000010 blanks.4125
08011c90 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800c1fc l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800eb4c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800ec74 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800eca0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800eda8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800eea4 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800ef88 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800f16c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
080138c0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0800f420 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800f570 l     F .text	00000038 alt_dev_reg
08012830 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800f84c l     F .text	00000204 altera_avalon_jtag_uart_irq
0800fa50 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08010324 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080107bc l     F .text	000000e0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08010914 l     F .text	00000050 alt_get_errno
08010964 l     F .text	000000f4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08008d38 g     F .text	00000074 _mprec_log10
08008e24 g     F .text	0000008c __any_on
0800b124 g     F .text	00000054 _isatty_r
08011b78 g     O .rodata	00000028 __mprec_tinytens
0800f0b4 g     F .text	00000078 alt_main
08002250 g     F .text	000000b8 _puts_r
0801541c g     O .bss	00000100 alt_irq
0800b178 g     F .text	0000005c _lseek_r
080138d0 g       *ABS*	00000000 __flash_rwdata_start
0800d56c g     F .text	00000084 .hidden __eqdf2
0801551c g       *ABS*	00000000 __alt_heap_start
08002214 g     F .text	0000003c printf
0800b3a0 g     F .text	0000009c _wcrtomb_r
080095f0 g     F .text	0000005c __sseek
08006510 g     F .text	00000010 __sinit
0800b230 g     F .text	00000154 __swbuf_r
08006f88 g     F .text	0000007c _setlocale_r
08006368 g     F .text	00000078 __sfmoreglue
0800f14c g     F .text	00000020 __malloc_unlock
080020ec g     F .text	00000080 UsbGetRetryCnt
08007be8 g     F .text	0000015c memmove
080001f8 g     F .text	00000084 IO_init
080064f8 g     F .text	00000018 _cleanup
08007e68 g     F .text	000000a8 _Balloc
0800d5f0 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
08000000 g     F .entry	0000000c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
0800b0cc g     F .text	00000058 _fstat_r
080153d8 g     O .bss	00000004 errno
0800956c g     F .text	00000008 __seofread
080153e0 g     O .bss	00000004 alt_argv
0801b890 g       *ABS*	00000000 _gp
0800f3f0 g     F .text	00000030 usleep
080126b0 g     O .rwdata	00000180 alt_fd_list
08010d74 g     F .text	00000090 alt_find_dev
08007ab0 g     F .text	00000138 memcpy
080061bc g     F .text	0000000c _cleanup_r
0800e974 g     F .text	000000d0 .hidden __floatsidf
0801089c g     F .text	00000078 alt_io_redirect
0800d6d0 g     F .text	000000e0 .hidden __ltdf2
08011390 g       *ABS*	00000000 __DTOR_END__
08002308 g     F .text	00000014 puts
08009450 g     F .text	00000074 __fpclassifyd
08008c94 g     F .text	000000a4 __ratio
0800ac30 g     F .text	00000024 __vfiprintf_internal
0800fc4c g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
080021e8 g     F .text	0000002c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800c318 g     F .text	00000008 .hidden __udivsi3
0800edf8 g     F .text	000000ac isatty
08011bc8 g     O .rodata	000000c8 __mprec_tens
08007004 g     F .text	0000000c __locale_charset
080153d4 g     O .bss	00000004 __malloc_top_pad
0800178c g     F .text	00000264 UsbGetConfigDesc2
08013898 g     O .rwdata	00000004 __mb_cur_max
08007034 g     F .text	0000000c _localeconv_r
08008290 g     F .text	0000003c __i2b
08006974 g     F .text	000004a4 __sfvwrite_r
080094c4 g     F .text	00000054 _sbrk_r
0800b1d4 g     F .text	0000005c _read_r
080138b8 g     O .rwdata	00000004 alt_max_fd
0800addc g     F .text	00000100 _fclose_r
0800617c g     F .text	00000030 fflush
080153d0 g     O .bss	00000004 __malloc_max_sbrked_mem
0800c350 g     F .text	0000089c .hidden __adddf3
08008a3c g     F .text	0000011c __b2d
0800bbe0 g     F .text	0000061c .hidden __umoddi3
0800efd8 g     F .text	000000dc lseek
08013890 g     O .rwdata	00000004 _global_impure_ptr
08008eb0 g     F .text	000005a0 _realloc_r
0801551c g       *ABS*	00000000 __bss_end
080106cc g     F .text	000000f0 alt_iic_isr_register
08010c50 g     F .text	00000104 alt_tick
0800b5a0 g     F .text	00000640 .hidden __udivdi3
0800aef0 g     F .text	00000184 _fputwc_r
08011ba0 g     O .rodata	00000028 __mprec_bigtens
08008074 g     F .text	00000104 __s2b
0800ea44 g     F .text	000000a4 .hidden __floatunsidf
080087e4 g     F .text	00000060 __mcmp
080011ec g     F .text	000000fc UsbSetAddress
08006530 g     F .text	00000018 __fp_lock_all
08010680 g     F .text	0000004c alt_ic_irq_enabled
08010bb8 g     F .text	00000098 alt_alarm_stop
080153e8 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
08012688 g     O .rwdata	00000028 alt_dev_null
08010308 g     F .text	0000001c alt_dcache_flush_all
08008178 g     F .text	00000068 __hi0bits
080002f4 g     F .text	00000074 IO_read
0800e8ec g     F .text	00000088 .hidden __fixdfsi
080138d0 g       *ABS*	00000000 __ram_rwdata_end
080138b0 g     O .rwdata	00000008 alt_dev_list
0800f470 g     F .text	00000100 write
08011de4 g       *ABS*	00000000 __ram_rodata_end
0800ecf0 g     F .text	000000b8 fstat
0800d6d0 g     F .text	000000e0 .hidden __ledf2
0800216c g     F .text	0000007c UsbPrintMem
0800855c g     F .text	00000140 __pow5mult
0800980c g     F .text	00001424 ___vfiprintf_internal_r
080153c8 g     O .bss	00000004 __nlocale_changed
0800c320 g     F .text	00000008 .hidden __umodsi3
0801551c g       *ABS*	00000000 end
0800f788 g     F .text	000000c4 altera_avalon_jtag_uart_init
08011390 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800eae8 g     F .text	00000064 .hidden __clzsi2
0800fe58 g     F .text	00000218 altera_avalon_jtag_uart_write
08006520 g     F .text	00000004 __sfp_lock_acquire
080079c8 g     F .text	000000e8 memchr
080023b4 g     F .text	000020fc ___vfprintf_internal_r
08001aec g     F .text	000000fc UsbClassRequest
08006684 g     F .text	000002f0 _free_r
08007010 g     F .text	00000010 __locale_mb_cur_max
080111c8 g     F .text	00000194 __call_exitprocs
080153c4 g     O .bss	00000004 __mlocale_changed
0801389c g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
080153ec g     O .bss	00000004 _alt_tick_rate
0800869c g     F .text	00000148 __lshift
080153f0 g     O .bss	00000004 _alt_nticks
0800f1bc g     F .text	00000104 read
0800f5dc g     F .text	00000048 alt_sys_init
080110b4 g     F .text	00000114 __register_exitproc
080082cc g     F .text	00000290 __multiply
0800faf8 g     F .text	00000068 altera_avalon_jtag_uart_close
0800c328 g     F .text	00000028 .hidden __mulsi3
08011de4 g       *ABS*	00000000 __ram_rwdata_start
08011390 g       *ABS*	00000000 __ram_rodata_start
080153f4 g     O .bss	00000028 __malloc_current_mallinfo
08008b58 g     F .text	0000013c __d2b
080012e8 g     F .text	00000144 UsbGetDeviceDesc1
0800f624 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08010f18 g     F .text	000000d4 alt_get_fd
080101b0 g     F .text	00000158 alt_busy_sleep
0800acb0 g     F .text	00000054 _close_r
08011038 g     F .text	0000007c memcmp
0800f6e4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0801551c g       *ABS*	00000000 __alt_stack_base
0800f734 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
080044d4 g     F .text	00000130 __swsetup_r
0800cbec g     F .text	00000980 .hidden __divdf3
080063e0 g     F .text	00000118 __sfp
08008dac g     F .text	00000078 __copybits
08012280 g     O .rwdata	00000408 __malloc_av_
0800652c g     F .text	00000004 __sinit_lock_release
0800d7b0 g     F .text	0000086c .hidden __muldf3
08009518 g     F .text	00000054 __sread
08002068 g     F .text	00000084 UsbWaitTDListDone
08010e04 g     F .text	00000114 alt_find_file
08010374 g     F .text	000000a4 alt_dev_llist_insert
0800f12c g     F .text	00000020 __malloc_lock
0800f340 g     F .text	000000b0 sbrk
08005f54 g     F .text	00000228 _fflush_r
0800ad04 g     F .text	000000d8 _calloc_r
080153bc g       *ABS*	00000000 __bss_start
08007d44 g     F .text	00000124 memset
08000368 g     F .text	00000d2c main
080153e4 g     O .bss	00000004 alt_envp
080153cc g     O .bss	00000004 __malloc_max_total_mem
0800f684 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080019f0 g     F .text	000000fc UsbSetConfig
0800b384 g     F .text	0000001c __swbuf
0800964c g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0800aedc g     F .text	00000014 fclose
0800482c g     F .text	00001728 _dtoa_r
08007220 g     F .text	000007a8 _malloc_r
0800b514 g     F .text	00000030 __ascii_wctomb
080138bc g     O .rwdata	00000004 alt_errno
08006e18 g     F .text	000000b8 _fwalk
0800c268 g     F .text	00000054 .hidden __divsi3
08006560 g     F .text	00000124 _malloc_trim_r
08001be8 g     F .text	00000144 UsbGetHidDesc
08011390 g       *ABS*	00000000 __CTOR_END__
08009654 g     F .text	000000a4 strcmp
08011390 g       *ABS*	00000000 __flash_rodata_start
08011390 g       *ABS*	00000000 __DTOR_LIST__
0800d56c g     F .text	00000084 .hidden __nedf2
080010e8 g     F .text	00000054 UsbRead
0800f5a8 g     F .text	00000034 alt_irq_init
0800f2c0 g     F .text	00000080 alt_release_fd
08011cb0 g     O .rodata	00000100 .hidden __clz_tab
080153c0 g     O .bss	00000004 _PathLocale
08010fec g     F .text	00000014 atexit
0800ac54 g     F .text	0000005c _write_r
08007040 g     F .text	0000001c setlocale
08013894 g     O .rwdata	00000004 _impure_ptr
080153dc g     O .bss	00000004 alt_argc
08010474 g     F .text	0000005c _do_dtors
0800702c g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
080089dc g     F .text	00000060 __ulp
08006548 g     F .text	00000018 __fp_unlock_all
080138a8 g     O .rwdata	00000008 alt_fs_list
08001d2c g     F .text	0000033c UsbGetReportDesc
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800705c g     F .text	0000000c localeconv
080104ec g     F .text	00000050 alt_ic_isr_register
080138d0 g       *ABS*	00000000 _edata
0801551c g       *ABS*	00000000 _end
08001094 g     F .text	00000054 UsbWrite
080001bc g       *ABS*	00000000 __ram_exceptions_end
0800fb60 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
080105dc g     F .text	000000a4 alt_ic_irq_disable
08009574 g     F .text	0000007c __swrite
080138a0 g     O .rwdata	00000004 __malloc_trim_threshold
08010d54 g     F .text	00000020 altera_nios2_qsys_irq_init
08007020 g     F .text	0000000c __locale_msgcharset
08011000 g     F .text	00000038 exit
08006ed0 g     F .text	000000b8 _fwalk_reent
08008844 g     F .text	00000198 __mdiff
0800c2bc g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08006524 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800027c g     F .text	00000078 IO_write
0801135c g     F .text	00000034 _exit
08010070 g     F .text	00000140 alt_alarm_start
08007068 g     F .text	000001b8 __smakebuf_r
0800231c g     F .text	00000098 strlen
08010a58 g     F .text	00000160 open
0800d5f0 g     F .text	000000e0 .hidden __gedf2
080138a4 g     O .rwdata	00000004 __wctomb
080097f4 g     F .text	00000018 __sprint_r
080104d0 g     F .text	0000001c alt_icache_flush_all
080138c4 g     O .rwdata	00000004 alt_priority_mask
0801053c g     F .text	000000a0 alt_ic_irq_enable
080044b0 g     F .text	00000024 __vfprintf_internal
0800b544 g     F .text	0000005c _wctomb_r
0800e01c g     F .text	000008d0 .hidden __subdf3
080081e0 g     F .text	000000b0 __lo0bits
08001600 g     F .text	0000018c UsbGetConfigDesc1
080138c8 g     O .rwdata	00000008 alt_alarm_list
08010418 g     F .text	0000005c _do_ctors
0800113c g     F .text	000000b0 UsbSoftReset
0800b43c g     F .text	000000d8 wcrtomb
0800eb9c g     F .text	000000d8 close
0800142c g     F .text	000001d4 UsbGetDeviceDesc2
0800ef08 g     F .text	00000080 alt_load
0800b074 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
08006528 g     F .text	00000004 __sinit_lock_acquire
08007f38 g     F .text	0000013c __multadd
08007f10 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08406f14 	ori	at,at,444
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00820074 	movhi	r2,2049
 8000130:	10950704 	addi	r2,r2,21532
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	00820074 	movhi	r2,2049
 8000148:	10950704 	addi	r2,r2,21532
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001c8:	d6ae2414 	ori	gp,gp,47248
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001d0:	1094ef14 	ori	r2,r2,21436

    movhi r3, %hi(__bss_end)
 80001d4:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001d8:	18d54714 	ori	r3,r3,21788

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	800ef080 	call	800ef08 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	800f0b40 	call	800f0b4 <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
 80001f8:	deffff04 	addi	sp,sp,-4
 80001fc:	df000015 	stw	fp,0(sp)
 8000200:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
 8000204:	00802004 	movi	r2,128
 8000208:	00c00044 	movi	r3,1
 800020c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 8000210:	00801804 	movi	r2,96
 8000214:	00c00044 	movi	r3,1
 8000218:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
 800021c:	00801404 	movi	r2,80
 8000220:	00c00044 	movi	r3,1
 8000224:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
 8000228:	00801c04 	movi	r2,112
 800022c:	00c00044 	movi	r3,1
 8000230:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
 8000234:	00800c04 	movi	r2,48
 8000238:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
 800023c:	00801004 	movi	r2,64
 8000240:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
 8000244:	00801804 	movi	r2,96
 8000248:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
 800024c:	00802004 	movi	r2,128
 8000250:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
 8000254:	00802004 	movi	r2,128
 8000258:	00c00044 	movi	r3,1
 800025c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
 8000260:	00801804 	movi	r2,96
 8000264:	00c00044 	movi	r3,1
 8000268:	10c00005 	stb	r3,0(r2)
}
 800026c:	e037883a 	mov	sp,fp
 8000270:	df000017 	ldw	fp,0(sp)
 8000274:	dec00104 	addi	sp,sp,4
 8000278:	f800283a 	ret

0800027c <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
 800027c:	defffd04 	addi	sp,sp,-12
 8000280:	df000215 	stw	fp,8(sp)
 8000284:	df000204 	addi	fp,sp,8
 8000288:	2007883a 	mov	r3,r4
 800028c:	2805883a 	mov	r2,r5
 8000290:	e0fffe05 	stb	r3,-8(fp)
 8000294:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	(*otg_hpi_w) = 1;
 8000298:	00801c04 	movi	r2,112
 800029c:	00c00044 	movi	r3,1
 80002a0:	10c00005 	stb	r3,0(r2)
	(*otg_hpi_r) = 1;
 80002a4:	00801404 	movi	r2,80
 80002a8:	00c00044 	movi	r3,1
 80002ac:	10c00005 	stb	r3,0(r2)
	(*otg_hpi_address) = Address;
 80002b0:	00800c04 	movi	r2,48
 80002b4:	e0fffe03 	ldbu	r3,-8(fp)
 80002b8:	10c00015 	stw	r3,0(r2)
	(*otg_hpi_cs) = 0;
 80002bc:	00801804 	movi	r2,96
 80002c0:	10000005 	stb	zero,0(r2)
	(*otg_hpi_w) = 0;
 80002c4:	00801c04 	movi	r2,112
 80002c8:	10000005 	stb	zero,0(r2)
	(*otg_hpi_data) = Data;
 80002cc:	00801004 	movi	r2,64
 80002d0:	e0ffff0b 	ldhu	r3,-4(fp)
 80002d4:	10c00015 	stw	r3,0(r2)
	(*otg_hpi_w) = 1;
 80002d8:	00801c04 	movi	r2,112
 80002dc:	00c00044 	movi	r3,1
 80002e0:	10c00005 	stb	r3,0(r2)
}
 80002e4:	e037883a 	mov	sp,fp
 80002e8:	df000017 	ldw	fp,0(sp)
 80002ec:	dec00104 	addi	sp,sp,4
 80002f0:	f800283a 	ret

080002f4 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
 80002f4:	defffd04 	addi	sp,sp,-12
 80002f8:	df000215 	stw	fp,8(sp)
 80002fc:	df000204 	addi	fp,sp,8
 8000300:	2005883a 	mov	r2,r4
 8000304:	e0bfff05 	stb	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);
	(*otg_hpi_w) = 1;
 8000308:	00801c04 	movi	r2,112
 800030c:	00c00044 	movi	r3,1
 8000310:	10c00005 	stb	r3,0(r2)
	(*otg_hpi_r) = 1;
 8000314:	00801404 	movi	r2,80
 8000318:	00c00044 	movi	r3,1
 800031c:	10c00005 	stb	r3,0(r2)
	(*otg_hpi_address) = Address;
 8000320:	00800c04 	movi	r2,48
 8000324:	e0ffff03 	ldbu	r3,-4(fp)
 8000328:	10c00015 	stw	r3,0(r2)
	(*otg_hpi_cs) = 0;
 800032c:	00801804 	movi	r2,96
 8000330:	10000005 	stb	zero,0(r2)
	(*otg_hpi_r) = 0;
 8000334:	00801404 	movi	r2,80
 8000338:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
 800033c:	00801004 	movi	r2,64
 8000340:	10800017 	ldw	r2,0(r2)
 8000344:	e0bffe0d 	sth	r2,-8(fp)
	(*otg_hpi_r) = 1;
 8000348:	00801404 	movi	r2,80
 800034c:	00c00044 	movi	r3,1
 8000350:	10c00005 	stb	r3,0(r2)
	return temp;
 8000354:	e0bffe0b 	ldhu	r2,-8(fp)
}
 8000358:	e037883a 	mov	sp,fp
 800035c:	df000017 	ldw	fp,0(sp)
 8000360:	dec00104 	addi	sp,sp,4
 8000364:	f800283a 	ret

08000368 <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
 8000368:	defff904 	addi	sp,sp,-28
 800036c:	dfc00615 	stw	ra,24(sp)
 8000370:	df000515 	stw	fp,20(sp)
 8000374:	df000504 	addi	fp,sp,20
	IO_init();
 8000378:	80001f80 	call	80001f8 <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
 800037c:	e03ffc0d 	sth	zero,-16(fp)
	int keycode = 0;
 8000380:	e03ffd15 	stw	zero,-12(fp)
	alt_u8 toggle = 0;
 8000384:	e03ffb85 	stb	zero,-18(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
 8000388:	01020074 	movhi	r4,2049
 800038c:	2104e404 	addi	r4,r4,5008
 8000390:	80023080 	call	8002308 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
 8000394:	800113c0 	call	800113c <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 8000398:	01005104 	movi	r4,324
 800039c:	000b883a 	mov	r5,zero
 80003a0:	80010940 	call	8001094 <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 80003a4:	01302414 	movui	r4,49296
 80003a8:	017fffd4 	movui	r5,65535
 80003ac:	80010940 	call	8001094 <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
 80003b0:	01006d04 	movi	r4,436
 80003b4:	01409604 	movi	r5,600
 80003b8:	80010940 	call	8001094 <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
 80003bc:	00811004 	movi	r2,1088
 80003c0:	e0bffb0d 	sth	r2,-20(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
 80003c4:	e0bffb0b 	ldhu	r2,-20(fp)
 80003c8:	01005084 	movi	r4,322
 80003cc:	100b883a 	mov	r5,r2
 80003d0:	80010940 	call	8001094 <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
 80003d4:	00808404 	movi	r2,528
 80003d8:	e0bffe0d 	sth	r2,-8(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
 80003dc:	e0bffe0b 	ldhu	r2,-8(fp)
 80003e0:	01302314 	movui	r4,49292
 80003e4:	100b883a 	mov	r5,r2
 80003e8:	80010940 	call	8001094 <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
 80003ec:	01007104 	movi	r4,452
 80003f0:	000b883a 	mov	r5,zero
 80003f4:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 80003f8:	01007184 	movi	r4,454
 80003fc:	000b883a 	mov	r5,zero
 8000400:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 8000404:	01007204 	movi	r4,456
 8000408:	000b883a 	mov	r5,zero
 800040c:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 8000410:	01007284 	movi	r4,458
 8000414:	000b883a 	mov	r5,zero
 8000418:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 800041c:	01007304 	movi	r4,460
 8000420:	000b883a 	mov	r5,zero
 8000424:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 8000428:	01007384 	movi	r4,462
 800042c:	000b883a 	mov	r5,zero
 8000430:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 8000434:	01007404 	movi	r4,464
 8000438:	000b883a 	mov	r5,zero
 800043c:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 8000440:	01007484 	movi	r4,466
 8000444:	000b883a 	mov	r5,zero
 8000448:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 800044c:	01007504 	movi	r4,468
 8000450:	000b883a 	mov	r5,zero
 8000454:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 8000458:	01007584 	movi	r4,470
 800045c:	000b883a 	mov	r5,zero
 8000460:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 8000464:	01007604 	movi	r4,472
 8000468:	000b883a 	mov	r5,zero
 800046c:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 8000470:	01007684 	movi	r4,474
 8000474:	000b883a 	mov	r5,zero
 8000478:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 800047c:	01007704 	movi	r4,476
 8000480:	000b883a 	mov	r5,zero
 8000484:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 8000488:	01007784 	movi	r4,478
 800048c:	000b883a 	mov	r5,zero
 8000490:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
 8000494:	01007084 	movi	r4,450
 8000498:	01401c84 	movi	r5,114
 800049c:	80010940 	call	8001094 <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
 80004a0:	01000044 	movi	r4,1
 80004a4:	01738054 	movui	r5,52737
 80004a8:	800027c0 	call	800027c <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
 80004ac:	0001883a 	nop
 80004b0:	010000c4 	movi	r4,3
 80004b4:	80002f40 	call	80002f4 <IO_read>
 80004b8:	10bfffcc 	andi	r2,r2,65535
 80004bc:	103ffc26 	beq	r2,zero,80004b0 <__alt_data_end+0xfc0004b0>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 80004c0:	0001883a 	nop
 80004c4:	01000044 	movi	r4,1
 80004c8:	80002f40 	call	80002f4 <IO_read>
 80004cc:	10bfffcc 	andi	r2,r2,65535
 80004d0:	1083fb58 	cmpnei	r2,r2,4077
 80004d4:	10000826 	beq	r2,zero,80004f8 <main+0x190>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
 80004d8:	01000044 	movi	r4,1
 80004dc:	80002f40 	call	80002f4 <IO_read>
 80004e0:	10bfffcc 	andi	r2,r2,65535
 80004e4:	01020074 	movhi	r4,2049
 80004e8:	2104ea04 	addi	r4,r4,5032
 80004ec:	100b883a 	mov	r5,r2
 80004f0:	80022140 	call	8002214 <printf>
		goto USB_HOT_PLUG;
 80004f4:	003fa706 	br	8000394 <__alt_data_end+0xfc000394>
	}
	// STEP 1b end

	printf("STEP 1 Complete");
 80004f8:	01020074 	movhi	r4,2049
 80004fc:	2104f304 	addi	r4,r4,5068
 8000500:	80022140 	call	8002214 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
 8000504:	01007084 	movi	r4,450
 8000508:	01401d04 	movi	r5,116
 800050c:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
 8000510:	01007104 	movi	r4,452
 8000514:	01400f04 	movi	r5,60
 8000518:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
 800051c:	01007184 	movi	r4,454
 8000520:	000b883a 	mov	r5,zero
 8000524:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
 8000528:	01007204 	movi	r4,456
 800052c:	000b883a 	mov	r5,zero
 8000530:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
 8000534:	01007284 	movi	r4,458
 8000538:	000b883a 	mov	r5,zero
 800053c:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
 8000540:	01007304 	movi	r4,460
 8000544:	000b883a 	mov	r5,zero
 8000548:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
 800054c:	01007384 	movi	r4,462
 8000550:	000b883a 	mov	r5,zero
 8000554:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
 8000558:	01007404 	movi	r4,464
 800055c:	000b883a 	mov	r5,zero
 8000560:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
 8000564:	01007484 	movi	r4,466
 8000568:	000b883a 	mov	r5,zero
 800056c:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
 8000570:	01007504 	movi	r4,468
 8000574:	000b883a 	mov	r5,zero
 8000578:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
 800057c:	01007584 	movi	r4,470
 8000580:	000b883a 	mov	r5,zero
 8000584:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
 8000588:	01007604 	movi	r4,472
 800058c:	000b883a 	mov	r5,zero
 8000590:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
 8000594:	01007684 	movi	r4,474
 8000598:	000b883a 	mov	r5,zero
 800059c:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
 80005a0:	01007704 	movi	r4,476
 80005a4:	000b883a 	mov	r5,zero
 80005a8:	80010940 	call	8001094 <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
 80005ac:	01007784 	movi	r4,478
 80005b0:	000b883a 	mov	r5,zero
 80005b4:	80010940 	call	8001094 <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
 80005b8:	01000044 	movi	r4,1
 80005bc:	01738054 	movui	r5,52737
 80005c0:	800027c0 	call	800027c <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
 80005c4:	0001883a 	nop
 80005c8:	01000044 	movi	r4,1
 80005cc:	80002f40 	call	80002f4 <IO_read>
 80005d0:	10bfffcc 	andi	r2,r2,65535
 80005d4:	1083fb58 	cmpnei	r2,r2,4077
 80005d8:	10000826 	beq	r2,zero,80005fc <main+0x294>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
 80005dc:	01000044 	movi	r4,1
 80005e0:	80002f40 	call	80002f4 <IO_read>
 80005e4:	10bfffcc 	andi	r2,r2,65535
 80005e8:	01020074 	movhi	r4,2049
 80005ec:	2104ea04 	addi	r4,r4,5032
 80005f0:	100b883a 	mov	r5,r2
 80005f4:	80022140 	call	8002214 <printf>
		goto USB_HOT_PLUG;
 80005f8:	003f6606 	br	8000394 <__alt_data_end+0xfc000394>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
 80005fc:	00b02284 	movi	r2,-16246
 8000600:	d0a6cb0d 	sth	r2,-25812(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
 8000604:	008c0004 	movi	r2,12288
 8000608:	d0a6cb8d 	sth	r2,-25810(gp)
	fs_device = A_DP_STAT;
 800060c:	00880004 	movi	r2,8192
 8000610:	e0bffc0d 	sth	r2,-16(fp)
	usb_ctl_val = UsbRead(ctl_reg);
 8000614:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000618:	10bfffcc 	andi	r2,r2,65535
 800061c:	1009883a 	mov	r4,r2
 8000620:	80010e80 	call	80010e8 <UsbRead>
 8000624:	e0bffb0d 	sth	r2,-20(fp)

	if (!(usb_ctl_val & no_device))
 8000628:	d0a6cb8b 	ldhu	r2,-25810(gp)
 800062c:	e0fffb0b 	ldhu	r3,-20(fp)
 8000630:	1884703a 	and	r2,r3,r2
 8000634:	10bfffcc 	andi	r2,r2,65535
 8000638:	1000341e 	bne	r2,zero,800070c <main+0x3a4>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 800063c:	e03ffbc5 	stb	zero,-17(fp)
 8000640:	00001006 	br	8000684 <main+0x31c>
		{
			usleep(5*1000);
 8000644:	0104e204 	movi	r4,5000
 8000648:	800f3f00 	call	800f3f0 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 800064c:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000650:	10bfffcc 	andi	r2,r2,65535
 8000654:	1009883a 	mov	r4,r2
 8000658:	80010e80 	call	80010e8 <UsbRead>
 800065c:	e0bffb0d 	sth	r2,-20(fp)
			if(usb_ctl_val & no_device) break;
 8000660:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000664:	e0fffb0b 	ldhu	r3,-20(fp)
 8000668:	1884703a 	and	r2,r3,r2
 800066c:	10bfffcc 	andi	r2,r2,65535
 8000670:	10000126 	beq	r2,zero,8000678 <main+0x310>
 8000674:	00000606 	br	8000690 <main+0x328>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
 8000678:	e0bffbc3 	ldbu	r2,-17(fp)
 800067c:	10800044 	addi	r2,r2,1
 8000680:	e0bffbc5 	stb	r2,-17(fp)
 8000684:	e0bffbc3 	ldbu	r2,-17(fp)
 8000688:	10800170 	cmpltui	r2,r2,5
 800068c:	103fed1e 	bne	r2,zero,8000644 <__alt_data_end+0xfc000644>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
		}
		if(!(usb_ctl_val & no_device))
 8000690:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000694:	e0fffb0b 	ldhu	r3,-20(fp)
 8000698:	1884703a 	and	r2,r3,r2
 800069c:	10bfffcc 	andi	r2,r2,65535
 80006a0:	1000261e 	bne	r2,zero,800073c <main+0x3d4>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
 80006a4:	01020074 	movhi	r4,2049
 80006a8:	2104f704 	addi	r4,r4,5084
 80006ac:	80023080 	call	8002308 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
 80006b0:	01020074 	movhi	r4,2049
 80006b4:	21050104 	addi	r4,r4,5124
 80006b8:	80023080 	call	8002308 <puts>
			while (!(usb_ctl_val & no_device))
 80006bc:	00000d06 	br	80006f4 <main+0x38c>
			{
				usb_ctl_val = UsbRead(ctl_reg);
 80006c0:	d0a6cb0b 	ldhu	r2,-25812(gp)
 80006c4:	10bfffcc 	andi	r2,r2,65535
 80006c8:	1009883a 	mov	r4,r2
 80006cc:	80010e80 	call	80010e8 <UsbRead>
 80006d0:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device)
 80006d4:	d0a6cb8b 	ldhu	r2,-25810(gp)
 80006d8:	e0fffb0b 	ldhu	r3,-20(fp)
 80006dc:	1884703a 	and	r2,r3,r2
 80006e0:	10bfffcc 	andi	r2,r2,65535
 80006e4:	10000126 	beq	r2,zero,80006ec <main+0x384>
					goto USB_HOT_PLUG;
 80006e8:	003f2a06 	br	8000394 <__alt_data_end+0xfc000394>

				usleep(2000);
 80006ec:	0101f404 	movi	r4,2000
 80006f0:	800f3f00 	call	800f3f0 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
 80006f4:	d0a6cb8b 	ldhu	r2,-25810(gp)
 80006f8:	e0fffb0b 	ldhu	r3,-20(fp)
 80006fc:	1884703a 	and	r2,r3,r2
 8000700:	10bfffcc 	andi	r2,r2,65535
 8000704:	103fee26 	beq	r2,zero,80006c0 <__alt_data_end+0xfc0006c0>
 8000708:	00000c06 	br	800073c <main+0x3d4>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
 800070c:	e0fffb0b 	ldhu	r3,-20(fp)
 8000710:	e0bffc0b 	ldhu	r2,-16(fp)
 8000714:	1884703a 	and	r2,r3,r2
 8000718:	10bfffcc 	andi	r2,r2,65535
 800071c:	10000426 	beq	r2,zero,8000730 <main+0x3c8>
		{
			printf("[INFO]: full speed device\n");
 8000720:	01020074 	movhi	r4,2049
 8000724:	21050d04 	addi	r4,r4,5172
 8000728:	80023080 	call	8002308 <puts>
 800072c:	00000306 	br	800073c <main+0x3d4>
		}
		else
		{
			printf("[INFO]: low speed device\n");
 8000730:	01020074 	movhi	r4,2049
 8000734:	21051404 	addi	r4,r4,5200
 8000738:	80023080 	call	8002308 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
 800073c:	80011ec0 	call	80011ec <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000740:	00000306 	br	8000750 <main+0x3e8>
	{
		UsbSetAddress();
 8000744:	80011ec0 	call	80011ec <UsbSetAddress>
		usleep(10*1000);
 8000748:	0109c404 	movi	r4,10000
 800074c:	800f3f00 	call	800f3f0 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000750:	010000c4 	movi	r4,3
 8000754:	80002f40 	call	80002f4 <IO_read>
 8000758:	10bfffcc 	andi	r2,r2,65535
 800075c:	1080040c 	andi	r2,r2,16
 8000760:	103ff826 	beq	r2,zero,8000744 <__alt_data_end+0xfc000744>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000764:	80020680 	call	8002068 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
 8000768:	01000084 	movi	r4,2
 800076c:	01414184 	movi	r5,1286
 8000770:	800027c0 	call	800027c <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000774:	0009883a 	mov	r4,zero
 8000778:	80002f40 	call	80002f4 <IO_read>
 800077c:	10bfffcc 	andi	r2,r2,65535
 8000780:	01020074 	movhi	r4,2049
 8000784:	21051b04 	addi	r4,r4,5228
 8000788:	100b883a 	mov	r5,r2
 800078c:	80022140 	call	8002214 <printf>

	IO_write(HPI_ADDR,0x0508); // n
 8000790:	01000084 	movi	r4,2
 8000794:	01414204 	movi	r5,1288
 8000798:	800027c0 	call	800027c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 800079c:	0009883a 	mov	r4,zero
 80007a0:	80002f40 	call	80002f4 <IO_read>
 80007a4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
 80007a8:	e0bffb0b 	ldhu	r2,-20(fp)
 80007ac:	01020074 	movhi	r4,2049
 80007b0:	21052604 	addi	r4,r4,5272
 80007b4:	100b883a 	mov	r5,r2
 80007b8:	80022140 	call	8002214 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
 80007bc:	e0bffb0b 	ldhu	r2,-20(fp)
 80007c0:	108000e0 	cmpeqi	r2,r2,3
 80007c4:	1000031e 	bne	r2,zero,80007d4 <main+0x46c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 80007c8:	80020ec0 	call	80020ec <UsbGetRetryCnt>
 80007cc:	e0bffb0d 	sth	r2,-20(fp)

		goto USB_HOT_PLUG;
 80007d0:	003ef006 	br	8000394 <__alt_data_end+0xfc000394>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
 80007d4:	01020074 	movhi	r4,2049
 80007d8:	21053204 	addi	r4,r4,5320
 80007dc:	80023080 	call	8002308 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
 80007e0:	80012e80 	call	80012e8 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80007e4:	00000306 	br	80007f4 <main+0x48c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
 80007e8:	80012e80 	call	80012e8 <UsbGetDeviceDesc1>
		usleep(10*1000);
 80007ec:	0109c404 	movi	r4,10000
 80007f0:	800f3f00 	call	800f3f0 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80007f4:	010000c4 	movi	r4,3
 80007f8:	80002f40 	call	80002f4 <IO_read>
 80007fc:	10bfffcc 	andi	r2,r2,65535
 8000800:	1080040c 	andi	r2,r2,16
 8000804:	103ff826 	beq	r2,zero,80007e8 <__alt_data_end+0xfc0007e8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000808:	80020680 	call	8002068 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 800080c:	01000084 	movi	r4,2
 8000810:	01414184 	movi	r5,1286
 8000814:	800027c0 	call	800027c <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000818:	0009883a 	mov	r4,zero
 800081c:	80002f40 	call	80002f4 <IO_read>
 8000820:	10bfffcc 	andi	r2,r2,65535
 8000824:	01020074 	movhi	r4,2049
 8000828:	21054104 	addi	r4,r4,5380
 800082c:	100b883a 	mov	r5,r2
 8000830:	80022140 	call	8002214 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000834:	01000084 	movi	r4,2
 8000838:	01414204 	movi	r5,1288
 800083c:	800027c0 	call	800027c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000840:	0009883a 	mov	r4,zero
 8000844:	80002f40 	call	80002f4 <IO_read>
 8000848:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 800084c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000850:	01020074 	movhi	r4,2049
 8000854:	21054c04 	addi	r4,r4,5424
 8000858:	100b883a 	mov	r5,r2
 800085c:	80022140 	call	8002214 <printf>
	while (usb_ctl_val != 0x03)
 8000860:	00000206 	br	800086c <main+0x504>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000864:	80020ec0 	call	80020ec <UsbGetRetryCnt>
 8000868:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 800086c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000870:	108000d8 	cmpnei	r2,r2,3
 8000874:	103ffb1e 	bne	r2,zero,8000864 <__alt_data_end+0xfc000864>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
 8000878:	01020074 	movhi	r4,2049
 800087c:	21055804 	addi	r4,r4,5472
 8000880:	80023080 	call	8002308 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
 8000884:	800142c0 	call	800142c <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000888:	00000306 	br	8000898 <main+0x530>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
 800088c:	800142c0 	call	800142c <UsbGetDeviceDesc2>
		usleep(10*1000);
 8000890:	0109c404 	movi	r4,10000
 8000894:	800f3f00 	call	800f3f0 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000898:	010000c4 	movi	r4,3
 800089c:	80002f40 	call	80002f4 <IO_read>
 80008a0:	10bfffcc 	andi	r2,r2,65535
 80008a4:	1080040c 	andi	r2,r2,16
 80008a8:	103ff826 	beq	r2,zero,800088c <__alt_data_end+0xfc00088c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 80008ac:	80020680 	call	8002068 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 80008b0:	01000084 	movi	r4,2
 80008b4:	01414184 	movi	r5,1286
 80008b8:	800027c0 	call	800027c <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
 80008bc:	0009883a 	mov	r4,zero
 80008c0:	80002f40 	call	80002f4 <IO_read>
 80008c4:	10bfffcc 	andi	r2,r2,65535
 80008c8:	01020074 	movhi	r4,2049
 80008cc:	21054104 	addi	r4,r4,5380
 80008d0:	100b883a 	mov	r5,r2
 80008d4:	80022140 	call	8002214 <printf>

	IO_write(HPI_ADDR,0x0508);
 80008d8:	01000084 	movi	r4,2
 80008dc:	01414204 	movi	r5,1288
 80008e0:	800027c0 	call	800027c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 80008e4:	0009883a 	mov	r4,zero
 80008e8:	80002f40 	call	80002f4 <IO_read>
 80008ec:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
 80008f0:	e0bffb0b 	ldhu	r2,-20(fp)
 80008f4:	01020074 	movhi	r4,2049
 80008f8:	21054c04 	addi	r4,r4,5424
 80008fc:	100b883a 	mov	r5,r2
 8000900:	80022140 	call	8002214 <printf>
	while (usb_ctl_val != 0x03)
 8000904:	00000206 	br	8000910 <main+0x5a8>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000908:	80020ec0 	call	80020ec <UsbGetRetryCnt>
 800090c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000910:	e0bffb0b 	ldhu	r2,-20(fp)
 8000914:	108000d8 	cmpnei	r2,r2,3
 8000918:	103ffb1e 	bne	r2,zero,8000908 <__alt_data_end+0xfc000908>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
 800091c:	01020074 	movhi	r4,2049
 8000920:	21056c04 	addi	r4,r4,5552
 8000924:	80023080 	call	8002308 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
 8000928:	80016000 	call	8001600 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 800092c:	00000306 	br	800093c <main+0x5d4>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
 8000930:	80016000 	call	8001600 <UsbGetConfigDesc1>
		usleep(10*1000);
 8000934:	0109c404 	movi	r4,10000
 8000938:	800f3f00 	call	800f3f0 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 800093c:	010000c4 	movi	r4,3
 8000940:	80002f40 	call	80002f4 <IO_read>
 8000944:	10bfffcc 	andi	r2,r2,65535
 8000948:	1080040c 	andi	r2,r2,16
 800094c:	103ff826 	beq	r2,zero,8000930 <__alt_data_end+0xfc000930>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000950:	80020680 	call	8002068 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000954:	01000084 	movi	r4,2
 8000958:	01414184 	movi	r5,1286
 800095c:	800027c0 	call	800027c <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000960:	0009883a 	mov	r4,zero
 8000964:	80002f40 	call	80002f4 <IO_read>
 8000968:	10bfffcc 	andi	r2,r2,65535
 800096c:	01020074 	movhi	r4,2049
 8000970:	21057e04 	addi	r4,r4,5624
 8000974:	100b883a 	mov	r5,r2
 8000978:	80022140 	call	8002214 <printf>

	IO_write(HPI_ADDR,0x0508);
 800097c:	01000084 	movi	r4,2
 8000980:	01414204 	movi	r5,1288
 8000984:	800027c0 	call	800027c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000988:	0009883a 	mov	r4,zero
 800098c:	80002f40 	call	80002f4 <IO_read>
 8000990:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
 8000994:	e0bffb0b 	ldhu	r2,-20(fp)
 8000998:	01020074 	movhi	r4,2049
 800099c:	21058904 	addi	r4,r4,5668
 80009a0:	100b883a 	mov	r5,r2
 80009a4:	80022140 	call	8002214 <printf>
	while (usb_ctl_val != 0x03)
 80009a8:	00000206 	br	80009b4 <main+0x64c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 80009ac:	80020ec0 	call	80020ec <UsbGetRetryCnt>
 80009b0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 80009b4:	e0bffb0b 	ldhu	r2,-20(fp)
 80009b8:	108000d8 	cmpnei	r2,r2,3
 80009bc:	103ffb1e 	bne	r2,zero,80009ac <__alt_data_end+0xfc0009ac>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
 80009c0:	01020074 	movhi	r4,2049
 80009c4:	21059504 	addi	r4,r4,5716
 80009c8:	80023080 	call	8002308 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
 80009cc:	800178c0 	call	800178c <UsbGetConfigDesc2>

	usleep(100*1000);
 80009d0:	010000b4 	movhi	r4,2
 80009d4:	2121a804 	addi	r4,r4,-31072
 80009d8:	800f3f00 	call	800f3f0 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80009dc:	00000306 	br	80009ec <main+0x684>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
 80009e0:	800178c0 	call	800178c <UsbGetConfigDesc2>
		usleep(10*1000);
 80009e4:	0109c404 	movi	r4,10000
 80009e8:	800f3f00 	call	800f3f0 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 80009ec:	010000c4 	movi	r4,3
 80009f0:	80002f40 	call	80002f4 <IO_read>
 80009f4:	10bfffcc 	andi	r2,r2,65535
 80009f8:	1080040c 	andi	r2,r2,16
 80009fc:	103ff826 	beq	r2,zero,80009e0 <__alt_data_end+0xfc0009e0>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000a00:	80020680 	call	8002068 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000a04:	01000084 	movi	r4,2
 8000a08:	01414184 	movi	r5,1286
 8000a0c:	800027c0 	call	800027c <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000a10:	0009883a 	mov	r4,zero
 8000a14:	80002f40 	call	80002f4 <IO_read>
 8000a18:	10bfffcc 	andi	r2,r2,65535
 8000a1c:	01020074 	movhi	r4,2049
 8000a20:	2105a804 	addi	r4,r4,5792
 8000a24:	100b883a 	mov	r5,r2
 8000a28:	80022140 	call	8002214 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000a2c:	01000084 	movi	r4,2
 8000a30:	01414204 	movi	r5,1288
 8000a34:	800027c0 	call	800027c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000a38:	0009883a 	mov	r4,zero
 8000a3c:	80002f40 	call	80002f4 <IO_read>
 8000a40:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
 8000a44:	e0bffb0b 	ldhu	r2,-20(fp)
 8000a48:	01020074 	movhi	r4,2049
 8000a4c:	2105b304 	addi	r4,r4,5836
 8000a50:	100b883a 	mov	r5,r2
 8000a54:	80022140 	call	8002214 <printf>
	while (usb_ctl_val != 0x03)
 8000a58:	00000206 	br	8000a64 <main+0x6fc>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000a5c:	80020ec0 	call	80020ec <UsbGetRetryCnt>
 8000a60:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000a64:	e0bffb0b 	ldhu	r2,-20(fp)
 8000a68:	108000d8 	cmpnei	r2,r2,3
 8000a6c:	103ffb1e 	bne	r2,zero,8000a5c <__alt_data_end+0xfc000a5c>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
 8000a70:	01020074 	movhi	r4,2049
 8000a74:	2105bf04 	addi	r4,r4,5884
 8000a78:	80023080 	call	8002308 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
 8000a7c:	01000084 	movi	r4,2
 8000a80:	01415b04 	movi	r5,1388
 8000a84:	800027c0 	call	800027c <IO_write>
	code = IO_read(HPI_DATA);
 8000a88:	0009883a 	mov	r4,zero
 8000a8c:	80002f40 	call	80002f4 <IO_read>
 8000a90:	e0bffe8d 	sth	r2,-6(fp)
	code = code & 0x003;
 8000a94:	e0bffe8b 	ldhu	r2,-6(fp)
 8000a98:	108000cc 	andi	r2,r2,3
 8000a9c:	e0bffe8d 	sth	r2,-6(fp)
	printf("\ncode = %x\n", code);
 8000aa0:	e0bffe8b 	ldhu	r2,-6(fp)
 8000aa4:	01020074 	movhi	r4,2049
 8000aa8:	2105d204 	addi	r4,r4,5960
 8000aac:	100b883a 	mov	r5,r2
 8000ab0:	80022140 	call	8002214 <printf>

	if (code == 0x01)
 8000ab4:	e0bffe8b 	ldhu	r2,-6(fp)
 8000ab8:	10800058 	cmpnei	r2,r2,1
 8000abc:	1000041e 	bne	r2,zero,8000ad0 <main+0x768>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
 8000ac0:	01020074 	movhi	r4,2049
 8000ac4:	2105d504 	addi	r4,r4,5972
 8000ac8:	80023080 	call	8002308 <puts>
 8000acc:	00000306 	br	8000adc <main+0x774>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
 8000ad0:	01020074 	movhi	r4,2049
 8000ad4:	2105e404 	addi	r4,r4,6032
 8000ad8:	80023080 	call	8002308 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
 8000adc:	01000084 	movi	r4,2
 8000ae0:	01415d84 	movi	r5,1398
 8000ae4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x073F);
 8000ae8:	0009883a 	mov	r4,zero
 8000aec:	0141cfc4 	movi	r5,1855
 8000af0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x8105);
 8000af4:	0009883a 	mov	r4,zero
 8000af8:	01604154 	movui	r5,33029
 8000afc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0003);
 8000b00:	0009883a 	mov	r4,zero
 8000b04:	014000c4 	movi	r5,3
 8000b08:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);
 8000b0c:	0009883a 	mov	r4,zero
 8000b10:	01400204 	movi	r5,8
 8000b14:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0xAC0A);
 8000b18:	0009883a 	mov	r4,zero
 8000b1c:	016b0294 	movui	r5,44042
 8000b20:	800027c0 	call	800027c <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
 8000b24:	01006c04 	movi	r4,432
 8000b28:	01415d84 	movi	r5,1398
 8000b2c:	80010940 	call	8001094 <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
 8000b30:	01000084 	movi	r4,2
 8000b34:	01415f04 	movi	r5,1404
 8000b38:	800027c0 	call	800027c <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
 8000b3c:	0009883a 	mov	r4,zero
 8000b40:	80002f40 	call	80002f4 <IO_read>
 8000b44:	e0bfff05 	stb	r2,-4(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
 8000b48:	e0bfff03 	ldbu	r2,-4(fp)
 8000b4c:	01020074 	movhi	r4,2049
 8000b50:	2105ed04 	addi	r4,r4,6068
 8000b54:	100b883a 	mov	r5,r2
 8000b58:	80022140 	call	8002214 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
 8000b5c:	80019f00 	call	80019f0 <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000b60:	00000306 	br	8000b70 <main+0x808>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
 8000b64:	80019f00 	call	80019f0 <UsbSetConfig>
		usleep(10*1000);
 8000b68:	0109c404 	movi	r4,10000
 8000b6c:	800f3f00 	call	800f3f0 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000b70:	010000c4 	movi	r4,3
 8000b74:	80002f40 	call	80002f4 <IO_read>
 8000b78:	10bfffcc 	andi	r2,r2,65535
 8000b7c:	1080040c 	andi	r2,r2,16
 8000b80:	103ff826 	beq	r2,zero,8000b64 <__alt_data_end+0xfc000b64>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000b84:	80020680 	call	8002068 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000b88:	01000084 	movi	r4,2
 8000b8c:	01414184 	movi	r5,1286
 8000b90:	800027c0 	call	800027c <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000b94:	0009883a 	mov	r4,zero
 8000b98:	80002f40 	call	80002f4 <IO_read>
 8000b9c:	10bfffcc 	andi	r2,r2,65535
 8000ba0:	01020074 	movhi	r4,2049
 8000ba4:	2105f704 	addi	r4,r4,6108
 8000ba8:	100b883a 	mov	r5,r2
 8000bac:	80022140 	call	8002214 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000bb0:	01000084 	movi	r4,2
 8000bb4:	01414204 	movi	r5,1288
 8000bb8:	800027c0 	call	800027c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000bbc:	0009883a 	mov	r4,zero
 8000bc0:	80002f40 	call	80002f4 <IO_read>
 8000bc4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
 8000bc8:	e0bffb0b 	ldhu	r2,-20(fp)
 8000bcc:	01020074 	movhi	r4,2049
 8000bd0:	21060204 	addi	r4,r4,6152
 8000bd4:	100b883a 	mov	r5,r2
 8000bd8:	80022140 	call	8002214 <printf>
	while (usb_ctl_val != 0x03)
 8000bdc:	00000206 	br	8000be8 <main+0x880>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000be0:	80020ec0 	call	80020ec <UsbGetRetryCnt>
 8000be4:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000be8:	e0bffb0b 	ldhu	r2,-20(fp)
 8000bec:	108000d8 	cmpnei	r2,r2,3
 8000bf0:	103ffb1e 	bne	r2,zero,8000be0 <__alt_data_end+0xfc000be0>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
 8000bf4:	01020074 	movhi	r4,2049
 8000bf8:	21060e04 	addi	r4,r4,6200
 8000bfc:	80023080 	call	8002308 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
 8000c00:	8001aec0 	call	8001aec <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000c04:	00000306 	br	8000c14 <main+0x8ac>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
 8000c08:	8001aec0 	call	8001aec <UsbClassRequest>
		usleep(10*1000);
 8000c0c:	0109c404 	movi	r4,10000
 8000c10:	800f3f00 	call	800f3f0 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000c14:	010000c4 	movi	r4,3
 8000c18:	80002f40 	call	80002f4 <IO_read>
 8000c1c:	10bfffcc 	andi	r2,r2,65535
 8000c20:	1080040c 	andi	r2,r2,16
 8000c24:	103ff826 	beq	r2,zero,8000c08 <__alt_data_end+0xfc000c08>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000c28:	80020680 	call	8002068 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000c2c:	01000084 	movi	r4,2
 8000c30:	01414184 	movi	r5,1286
 8000c34:	800027c0 	call	800027c <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000c38:	0009883a 	mov	r4,zero
 8000c3c:	80002f40 	call	80002f4 <IO_read>
 8000c40:	10bfffcc 	andi	r2,r2,65535
 8000c44:	01020074 	movhi	r4,2049
 8000c48:	21062004 	addi	r4,r4,6272
 8000c4c:	100b883a 	mov	r5,r2
 8000c50:	80022140 	call	8002214 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000c54:	01000084 	movi	r4,2
 8000c58:	01414204 	movi	r5,1288
 8000c5c:	800027c0 	call	800027c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000c60:	0009883a 	mov	r4,zero
 8000c64:	80002f40 	call	80002f4 <IO_read>
 8000c68:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 8000c6c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000c70:	01020074 	movhi	r4,2049
 8000c74:	21062b04 	addi	r4,r4,6316
 8000c78:	100b883a 	mov	r5,r2
 8000c7c:	80022140 	call	8002214 <printf>
	while (usb_ctl_val != 0x03)
 8000c80:	00000206 	br	8000c8c <main+0x924>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000c84:	80020ec0 	call	80020ec <UsbGetRetryCnt>
 8000c88:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000c8c:	e0bffb0b 	ldhu	r2,-20(fp)
 8000c90:	108000d8 	cmpnei	r2,r2,3
 8000c94:	103ffb1e 	bne	r2,zero,8000c84 <__alt_data_end+0xfc000c84>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
 8000c98:	01020074 	movhi	r4,2049
 8000c9c:	21063704 	addi	r4,r4,6364
 8000ca0:	80023080 	call	8002308 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
 8000ca4:	8001be80 	call	8001be8 <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000ca8:	00000306 	br	8000cb8 <main+0x950>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
 8000cac:	8001be80 	call	8001be8 <UsbGetHidDesc>
		usleep(10*1000);
 8000cb0:	0109c404 	movi	r4,10000
 8000cb4:	800f3f00 	call	800f3f0 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000cb8:	010000c4 	movi	r4,3
 8000cbc:	80002f40 	call	80002f4 <IO_read>
 8000cc0:	10bfffcc 	andi	r2,r2,65535
 8000cc4:	1080040c 	andi	r2,r2,16
 8000cc8:	103ff826 	beq	r2,zero,8000cac <__alt_data_end+0xfc000cac>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000ccc:	80020680 	call	8002068 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000cd0:	01000084 	movi	r4,2
 8000cd4:	01414184 	movi	r5,1286
 8000cd8:	800027c0 	call	800027c <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000cdc:	0009883a 	mov	r4,zero
 8000ce0:	80002f40 	call	80002f4 <IO_read>
 8000ce4:	10bfffcc 	andi	r2,r2,65535
 8000ce8:	01020074 	movhi	r4,2049
 8000cec:	21062004 	addi	r4,r4,6272
 8000cf0:	100b883a 	mov	r5,r2
 8000cf4:	80022140 	call	8002214 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000cf8:	01000084 	movi	r4,2
 8000cfc:	01414204 	movi	r5,1288
 8000d00:	800027c0 	call	800027c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000d04:	0009883a 	mov	r4,zero
 8000d08:	80002f40 	call	80002f4 <IO_read>
 8000d0c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
 8000d10:	e0bffb0b 	ldhu	r2,-20(fp)
 8000d14:	01020074 	movhi	r4,2049
 8000d18:	21062b04 	addi	r4,r4,6316
 8000d1c:	100b883a 	mov	r5,r2
 8000d20:	80022140 	call	8002214 <printf>
	while (usb_ctl_val != 0x03)
 8000d24:	00000206 	br	8000d30 <main+0x9c8>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000d28:	80020ec0 	call	80020ec <UsbGetRetryCnt>
 8000d2c:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000d30:	e0bffb0b 	ldhu	r2,-20(fp)
 8000d34:	108000d8 	cmpnei	r2,r2,3
 8000d38:	103ffb1e 	bne	r2,zero,8000d28 <__alt_data_end+0xfc000d28>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
 8000d3c:	01020074 	movhi	r4,2049
 8000d40:	21064904 	addi	r4,r4,6436
 8000d44:	80023080 	call	8002308 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
 8000d48:	8001d2c0 	call	8001d2c <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000d4c:	00000306 	br	8000d5c <main+0x9f4>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
 8000d50:	8001d2c0 	call	8001d2c <UsbGetReportDesc>
		usleep(10*1000);
 8000d54:	0109c404 	movi	r4,10000
 8000d58:	800f3f00 	call	800f3f0 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000d5c:	010000c4 	movi	r4,3
 8000d60:	80002f40 	call	80002f4 <IO_read>
 8000d64:	10bfffcc 	andi	r2,r2,65535
 8000d68:	1080040c 	andi	r2,r2,16
 8000d6c:	103ff826 	beq	r2,zero,8000d50 <__alt_data_end+0xfc000d50>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
 8000d70:	80020680 	call	8002068 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
 8000d74:	01000084 	movi	r4,2
 8000d78:	01414184 	movi	r5,1286
 8000d7c:	800027c0 	call	800027c <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
 8000d80:	0009883a 	mov	r4,zero
 8000d84:	80002f40 	call	80002f4 <IO_read>
 8000d88:	10bfffcc 	andi	r2,r2,65535
 8000d8c:	01020074 	movhi	r4,2049
 8000d90:	21065d04 	addi	r4,r4,6516
 8000d94:	100b883a 	mov	r5,r2
 8000d98:	80022140 	call	8002214 <printf>

	IO_write(HPI_ADDR,0x0508);
 8000d9c:	01000084 	movi	r4,2
 8000da0:	01414204 	movi	r5,1288
 8000da4:	800027c0 	call	800027c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8000da8:	0009883a 	mov	r4,zero
 8000dac:	80002f40 	call	80002f4 <IO_read>
 8000db0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
 8000db4:	e0bffb0b 	ldhu	r2,-20(fp)
 8000db8:	01020074 	movhi	r4,2049
 8000dbc:	21066904 	addi	r4,r4,6564
 8000dc0:	100b883a 	mov	r5,r2
 8000dc4:	80022140 	call	8002214 <printf>
	while (usb_ctl_val != 0x03)
 8000dc8:	00000206 	br	8000dd4 <main+0xa6c>
	{
		usb_ctl_val = UsbGetRetryCnt();
 8000dcc:	80020ec0 	call	80020ec <UsbGetRetryCnt>
 8000dd0:	e0bffb0d 	sth	r2,-20(fp)
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));

	IO_write(HPI_ADDR,0x0508);
	usb_ctl_val = IO_read(HPI_DATA);
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
	while (usb_ctl_val != 0x03)
 8000dd4:	e0bffb0b 	ldhu	r2,-20(fp)
 8000dd8:	108000d8 	cmpnei	r2,r2,3
 8000ddc:	103ffb1e 	bne	r2,zero,8000dcc <__alt_data_end+0xfc000dcc>
	{
		usb_ctl_val = UsbGetRetryCnt();
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
 8000de0:	01020074 	movhi	r4,2049
 8000de4:	21067504 	addi	r4,r4,6612
 8000de8:	80023080 	call	8002308 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
 8000dec:	0109c404 	movi	r4,10000
 8000df0:	800f3f00 	call	800f3f0 <usleep>
	while(1)
	{
		toggle++;
 8000df4:	e0bffb83 	ldbu	r2,-18(fp)
 8000df8:	10800044 	addi	r2,r2,1
 8000dfc:	e0bffb85 	stb	r2,-18(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
 8000e00:	01000084 	movi	r4,2
 8000e04:	01414004 	movi	r5,1280
 8000e08:	800027c0 	call	800027c <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
 8000e0c:	0009883a 	mov	r4,zero
 8000e10:	01414704 	movi	r5,1308
 8000e14:	800027c0 	call	800027c <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
 8000e18:	e0bfff03 	ldbu	r2,-4(fp)
 8000e1c:	108003cc 	andi	r2,r2,15
 8000e20:	0009883a 	mov	r4,zero
 8000e24:	100b883a 	mov	r5,r2
 8000e28:	800027c0 	call	800027c <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
 8000e2c:	0009883a 	mov	r4,zero
 8000e30:	0140a444 	movi	r5,657
 8000e34:	800027c0 	call	800027c <IO_write>
		if(toggle%2)
 8000e38:	e0bffb83 	ldbu	r2,-18(fp)
 8000e3c:	1080004c 	andi	r2,r2,1
 8000e40:	10803fcc 	andi	r2,r2,255
 8000e44:	10000426 	beq	r2,zero,8000e58 <main+0xaf0>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
 8000e48:	0009883a 	mov	r4,zero
 8000e4c:	01400044 	movi	r5,1
 8000e50:	800027c0 	call	800027c <IO_write>
 8000e54:	00000306 	br	8000e64 <main+0xafc>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
 8000e58:	0009883a 	mov	r4,zero
 8000e5c:	01401044 	movi	r5,65
 8000e60:	800027c0 	call	800027c <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
 8000e64:	0009883a 	mov	r4,zero
 8000e68:	014004c4 	movi	r5,19
 8000e6c:	800027c0 	call	800027c <IO_write>
		IO_write(HPI_DATA,0x0000);//a
 8000e70:	0009883a 	mov	r4,zero
 8000e74:	000b883a 	mov	r5,zero
 8000e78:	800027c0 	call	800027c <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000e7c:	01006c04 	movi	r4,432
 8000e80:	01414004 	movi	r5,1280
 8000e84:	80010940 	call	8001094 <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000e88:	00002406 	br	8000f1c <main+0xbb4>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
 8000e8c:	01000084 	movi	r4,2
 8000e90:	01414004 	movi	r5,1280
 8000e94:	800027c0 	call	800027c <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
 8000e98:	0009883a 	mov	r4,zero
 8000e9c:	01414704 	movi	r5,1308
 8000ea0:	800027c0 	call	800027c <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
 8000ea4:	e0bfff03 	ldbu	r2,-4(fp)
 8000ea8:	108003cc 	andi	r2,r2,15
 8000eac:	0009883a 	mov	r4,zero
 8000eb0:	100b883a 	mov	r5,r2
 8000eb4:	800027c0 	call	800027c <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
 8000eb8:	0009883a 	mov	r4,zero
 8000ebc:	0140a444 	movi	r5,657
 8000ec0:	800027c0 	call	800027c <IO_write>
			if(toggle%2)
 8000ec4:	e0bffb83 	ldbu	r2,-18(fp)
 8000ec8:	1080004c 	andi	r2,r2,1
 8000ecc:	10803fcc 	andi	r2,r2,255
 8000ed0:	10000426 	beq	r2,zero,8000ee4 <main+0xb7c>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
 8000ed4:	0009883a 	mov	r4,zero
 8000ed8:	01400044 	movi	r5,1
 8000edc:	800027c0 	call	800027c <IO_write>
 8000ee0:	00000306 	br	8000ef0 <main+0xb88>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
 8000ee4:	0009883a 	mov	r4,zero
 8000ee8:	01401044 	movi	r5,65
 8000eec:	800027c0 	call	800027c <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
 8000ef0:	0009883a 	mov	r4,zero
 8000ef4:	014004c4 	movi	r5,19
 8000ef8:	800027c0 	call	800027c <IO_write>
			IO_write(HPI_DATA,0x0000);//
 8000efc:	0009883a 	mov	r4,zero
 8000f00:	000b883a 	mov	r5,zero
 8000f04:	800027c0 	call	800027c <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8000f08:	01006c04 	movi	r4,432
 8000f0c:	01414004 	movi	r5,1280
 8000f10:	80010940 	call	8001094 <UsbWrite>
			usleep(10*1000);
 8000f14:	0109c404 	movi	r4,10000
 8000f18:	800f3f00 	call	800f3f0 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8000f1c:	010000c4 	movi	r4,3
 8000f20:	80002f40 	call	80002f4 <IO_read>
 8000f24:	10bfffcc 	andi	r2,r2,65535
 8000f28:	1080040c 	andi	r2,r2,16
 8000f2c:	103fd726 	beq	r2,zero,8000e8c <__alt_data_end+0xfc000e8c>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
 8000f30:	80020680 	call	8002068 <UsbWaitTDListDone>
 8000f34:	e0bffb0d 	sth	r2,-20(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.
		keycode = UsbRead(0x051e);
 8000f38:	01014784 	movi	r4,1310
 8000f3c:	80010e80 	call	80010e8 <UsbRead>
 8000f40:	10bfffcc 	andi	r2,r2,65535
 8000f44:	e0bffd15 	stw	r2,-12(fp)
		//printf("\nfirst two keycode values are %04x\n",keycode);
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		*keycode_base = keycode & 0xff; 
 8000f48:	00800804 	movi	r2,32
 8000f4c:	e0fffd17 	ldw	r3,-12(fp)
 8000f50:	10c00005 	stb	r3,0(r2)

		usleep(200);//usleep(5000);
 8000f54:	01003204 	movi	r4,200
 8000f58:	800f3f00 	call	800f3f0 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
 8000f5c:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000f60:	10bfffcc 	andi	r2,r2,65535
 8000f64:	1009883a 	mov	r4,r2
 8000f68:	80010e80 	call	80010e8 <UsbRead>
 8000f6c:	e0bffb0d 	sth	r2,-20(fp)

		if(!(usb_ctl_val & no_device))
 8000f70:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000f74:	e0fffb0b 	ldhu	r3,-20(fp)
 8000f78:	1884703a 	and	r2,r3,r2
 8000f7c:	10bfffcc 	andi	r2,r2,65535
 8000f80:	1000201e 	bne	r2,zero,8001004 <main+0xc9c>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 8000f84:	e03ffbc5 	stb	zero,-17(fp)
 8000f88:	00001006 	br	8000fcc <main+0xc64>
			{
				usleep(5*1000);
 8000f8c:	0104e204 	movi	r4,5000
 8000f90:	800f3f00 	call	800f3f0 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
 8000f94:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8000f98:	10bfffcc 	andi	r2,r2,65535
 8000f9c:	1009883a 	mov	r4,r2
 8000fa0:	80010e80 	call	80010e8 <UsbRead>
 8000fa4:	e0bffb0d 	sth	r2,-20(fp)
				if(usb_ctl_val & no_device) break;
 8000fa8:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000fac:	e0fffb0b 	ldhu	r3,-20(fp)
 8000fb0:	1884703a 	and	r2,r3,r2
 8000fb4:	10bfffcc 	andi	r2,r2,65535
 8000fb8:	10000126 	beq	r2,zero,8000fc0 <main+0xc58>
 8000fbc:	00000606 	br	8000fd8 <main+0xc70>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
 8000fc0:	e0bffbc3 	ldbu	r2,-17(fp)
 8000fc4:	10800044 	addi	r2,r2,1
 8000fc8:	e0bffbc5 	stb	r2,-17(fp)
 8000fcc:	e0bffbc3 	ldbu	r2,-17(fp)
 8000fd0:	108001f0 	cmpltui	r2,r2,7
 8000fd4:	103fed1e 	bne	r2,zero,8000f8c <__alt_data_end+0xfc000f8c>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
			}
			if(!(usb_ctl_val & no_device))
 8000fd8:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8000fdc:	e0fffb0b 	ldhu	r3,-20(fp)
 8000fe0:	1884703a 	and	r2,r3,r2
 8000fe4:	10bfffcc 	andi	r2,r2,65535
 8000fe8:	1000061e 	bne	r2,zero,8001004 <main+0xc9c>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
 8000fec:	01020074 	movhi	r4,2049
 8000ff0:	21068904 	addi	r4,r4,6692
 8000ff4:	80023080 	call	8002308 <puts>
				printf("[INFO]: please insert again!!! \n");
 8000ff8:	01020074 	movhi	r4,2049
 8000ffc:	21069404 	addi	r4,r4,6736
 8001000:	80023080 	call	8002308 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
 8001004:	00001d06 	br	800107c <main+0xd14>
		{

			usb_ctl_val = UsbRead(ctl_reg);
 8001008:	d0a6cb0b 	ldhu	r2,-25812(gp)
 800100c:	10bfffcc 	andi	r2,r2,65535
 8001010:	1009883a 	mov	r4,r2
 8001014:	80010e80 	call	80010e8 <UsbRead>
 8001018:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 800101c:	0104e204 	movi	r4,5000
 8001020:	800f3f00 	call	800f3f0 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 8001024:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8001028:	10bfffcc 	andi	r2,r2,65535
 800102c:	1009883a 	mov	r4,r2
 8001030:	80010e80 	call	80010e8 <UsbRead>
 8001034:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 8001038:	0104e204 	movi	r4,5000
 800103c:	800f3f00 	call	800f3f0 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
 8001040:	d0a6cb0b 	ldhu	r2,-25812(gp)
 8001044:	10bfffcc 	andi	r2,r2,65535
 8001048:	1009883a 	mov	r4,r2
 800104c:	80010e80 	call	80010e8 <UsbRead>
 8001050:	e0bffb0d 	sth	r2,-20(fp)
			usleep(5*1000);
 8001054:	0104e204 	movi	r4,5000
 8001058:	800f3f00 	call	800f3f0 <usleep>

			if(usb_ctl_val & no_device)
 800105c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8001060:	e0fffb0b 	ldhu	r3,-20(fp)
 8001064:	1884703a 	and	r2,r3,r2
 8001068:	10bfffcc 	andi	r2,r2,65535
 800106c:	10000126 	beq	r2,zero,8001074 <main+0xd0c>
				goto USB_HOT_PLUG;
 8001070:	003cc806 	br	8000394 <__alt_data_end+0xfc000394>

			usleep(200);
 8001074:	01003204 	movi	r4,200
 8001078:	800f3f00 	call	800f3f0 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
 800107c:	d0a6cb8b 	ldhu	r2,-25810(gp)
 8001080:	e0fffb0b 	ldhu	r3,-20(fp)
 8001084:	1884703a 	and	r2,r3,r2
 8001088:	10bfffcc 	andi	r2,r2,65535
 800108c:	103fde26 	beq	r2,zero,8001008 <__alt_data_end+0xfc001008>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
 8001090:	003f5806 	br	8000df4 <__alt_data_end+0xfc000df4>

08001094 <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
 8001094:	defffc04 	addi	sp,sp,-16
 8001098:	dfc00315 	stw	ra,12(sp)
 800109c:	df000215 	stw	fp,8(sp)
 80010a0:	df000204 	addi	fp,sp,8
 80010a4:	2007883a 	mov	r3,r4
 80010a8:	2805883a 	mov	r2,r5
 80010ac:	e0fffe0d 	sth	r3,-8(fp)
 80010b0:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
 80010b4:	e0bffe0b 	ldhu	r2,-8(fp)
 80010b8:	01000084 	movi	r4,2
 80010bc:	100b883a 	mov	r5,r2
 80010c0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA, Data);
 80010c4:	e0bfff0b 	ldhu	r2,-4(fp)
 80010c8:	0009883a 	mov	r4,zero
 80010cc:	100b883a 	mov	r5,r2
 80010d0:	800027c0 	call	800027c <IO_write>
}
 80010d4:	e037883a 	mov	sp,fp
 80010d8:	dfc00117 	ldw	ra,4(sp)
 80010dc:	df000017 	ldw	fp,0(sp)
 80010e0:	dec00204 	addi	sp,sp,8
 80010e4:	f800283a 	ret

080010e8 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
 80010e8:	defffc04 	addi	sp,sp,-16
 80010ec:	dfc00315 	stw	ra,12(sp)
 80010f0:	df000215 	stw	fp,8(sp)
 80010f4:	df000204 	addi	fp,sp,8
 80010f8:	2005883a 	mov	r2,r4
 80010fc:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	IO_write(HPI_ADDR, Address);
 8001100:	e0bfff0b 	ldhu	r2,-4(fp)
 8001104:	01000084 	movi	r4,2
 8001108:	100b883a 	mov	r5,r2
 800110c:	800027c0 	call	800027c <IO_write>
	alt_u16 read_val = IO_read(Address);
 8001110:	e0bfff0b 	ldhu	r2,-4(fp)
 8001114:	10803fcc 	andi	r2,r2,255
 8001118:	1009883a 	mov	r4,r2
 800111c:	80002f40 	call	80002f4 <IO_read>
 8001120:	e0bffe0d 	sth	r2,-8(fp)
	return read_val;
 8001124:	e0bffe0b 	ldhu	r2,-8(fp)
}
 8001128:	e037883a 	mov	sp,fp
 800112c:	dfc00117 	ldw	ra,4(sp)
 8001130:	df000017 	ldw	fp,0(sp)
 8001134:	dec00204 	addi	sp,sp,8
 8001138:	f800283a 	ret

0800113c <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
 800113c:	defffe04 	addi	sp,sp,-8
 8001140:	dfc00115 	stw	ra,4(sp)
 8001144:	df000015 	stw	fp,0(sp)
 8001148:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
 800114c:	01000044 	movi	r4,1
 8001150:	017e9414 	movui	r5,64080
 8001154:	800027c0 	call	800027c <IO_write>
	usleep(100000);
 8001158:	010000b4 	movhi	r4,2
 800115c:	2121a804 	addi	r4,r4,-31072
 8001160:	800f3f00 	call	800f3f0 <usleep>
	printf("[USB INIT]:reset finished!\n");
 8001164:	01020074 	movhi	r4,2049
 8001168:	21069c04 	addi	r4,r4,6768
 800116c:	80023080 	call	8002308 <puts>

	usleep(500000);
 8001170:	01000234 	movhi	r4,8
 8001174:	21284804 	addi	r4,r4,-24288
 8001178:	800f3f00 	call	800f3f0 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
 800117c:	01020074 	movhi	r4,2049
 8001180:	2106a304 	addi	r4,r4,6796
 8001184:	80023080 	call	8002308 <puts>
	IO_read(HPI_MAILBOX);
 8001188:	01000044 	movi	r4,1
 800118c:	80002f40 	call	80002f4 <IO_read>
	IO_read(HPI_STATUS);
 8001190:	010000c4 	movi	r4,3
 8001194:	80002f40 	call	80002f4 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
 8001198:	01005104 	movi	r4,324
 800119c:	80010e80 	call	80010e8 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
 80011a0:	01005104 	movi	r4,324
 80011a4:	000b883a 	mov	r5,zero
 80011a8:	80010940 	call	8001094 <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
 80011ac:	01005204 	movi	r4,328
 80011b0:	80010e80 	call	80010e8 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
 80011b4:	01005204 	movi	r4,328
 80011b8:	000b883a 	mov	r5,zero
 80011bc:	80010940 	call	8001094 <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
 80011c0:	01302414 	movui	r4,49296
 80011c4:	017fffd4 	movui	r5,65535
 80011c8:	80010940 	call	8001094 <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
 80011cc:	01302c14 	movui	r4,49328
 80011d0:	017fffd4 	movui	r5,65535
 80011d4:	80010940 	call	8001094 <UsbWrite>
}
 80011d8:	e037883a 	mov	sp,fp
 80011dc:	dfc00117 	ldw	ra,4(sp)
 80011e0:	df000017 	ldw	fp,0(sp)
 80011e4:	dec00204 	addi	sp,sp,8
 80011e8:	f800283a 	ret

080011ec <UsbSetAddress>:


void UsbSetAddress()
{
 80011ec:	defffe04 	addi	sp,sp,-8
 80011f0:	dfc00115 	stw	ra,4(sp)
 80011f4:	df000015 	stw	fp,0(sp)
 80011f8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 80011fc:	01000084 	movi	r4,2
 8001200:	01414004 	movi	r5,1280
 8001204:	800027c0 	call	800027c <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
 8001208:	0009883a 	mov	r4,zero
 800120c:	01414304 	movi	r5,1292
 8001210:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001214:	0009883a 	mov	r4,zero
 8001218:	01400204 	movi	r5,8
 800121c:	800027c0 	call	800027c <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
 8001220:	0009883a 	mov	r4,zero
 8001224:	01403404 	movi	r5,208
 8001228:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);
 800122c:	0009883a 	mov	r4,zero
 8001230:	01400044 	movi	r5,1
 8001234:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001238:	0009883a 	mov	r4,zero
 800123c:	014004c4 	movi	r5,19
 8001240:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001244:	0009883a 	mov	r4,zero
 8001248:	01414504 	movi	r5,1300
 800124c:	800027c0 	call	800027c <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
 8001250:	0009883a 	mov	r4,zero
 8001254:	01414004 	movi	r5,1280
 8001258:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0002);
 800125c:	0009883a 	mov	r4,zero
 8001260:	01400084 	movi	r5,2
 8001264:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001268:	0009883a 	mov	r4,zero
 800126c:	000b883a 	mov	r5,zero
 8001270:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001274:	0009883a 	mov	r4,zero
 8001278:	000b883a 	mov	r5,zero
 800127c:	800027c0 	call	800027c <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
 8001280:	0009883a 	mov	r4,zero
 8001284:	000b883a 	mov	r5,zero
 8001288:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//
 800128c:	0009883a 	mov	r4,zero
 8001290:	000b883a 	mov	r5,zero
 8001294:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0090);//
 8001298:	0009883a 	mov	r4,zero
 800129c:	01402404 	movi	r5,144
 80012a0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);
 80012a4:	0009883a 	mov	r4,zero
 80012a8:	01401044 	movi	r5,65
 80012ac:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 80012b0:	0009883a 	mov	r4,zero
 80012b4:	014004c4 	movi	r5,19
 80012b8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);
 80012bc:	0009883a 	mov	r4,zero
 80012c0:	000b883a 	mov	r5,zero
 80012c4:	800027c0 	call	800027c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80012c8:	01006c04 	movi	r4,432
 80012cc:	01414004 	movi	r5,1280
 80012d0:	80010940 	call	8001094 <UsbWrite>
}
 80012d4:	e037883a 	mov	sp,fp
 80012d8:	dfc00117 	ldw	ra,4(sp)
 80012dc:	df000017 	ldw	fp,0(sp)
 80012e0:	dec00204 	addi	sp,sp,8
 80012e4:	f800283a 	ret

080012e8 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
 80012e8:	defffe04 	addi	sp,sp,-8
 80012ec:	dfc00115 	stw	ra,4(sp)
 80012f0:	df000015 	stw	fp,0(sp)
 80012f4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 80012f8:	01000084 	movi	r4,2
 80012fc:	01414004 	movi	r5,1280
 8001300:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001304:	0009883a 	mov	r4,zero
 8001308:	01414304 	movi	r5,1292
 800130c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001310:	0009883a 	mov	r4,zero
 8001314:	01400204 	movi	r5,8
 8001318:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 800131c:	0009883a 	mov	r4,zero
 8001320:	0140b404 	movi	r5,720
 8001324:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001328:	0009883a 	mov	r4,zero
 800132c:	01400044 	movi	r5,1
 8001330:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001334:	0009883a 	mov	r4,zero
 8001338:	014004c4 	movi	r5,19
 800133c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001340:	0009883a 	mov	r4,zero
 8001344:	01414504 	movi	r5,1300
 8001348:	800027c0 	call	800027c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 800134c:	0009883a 	mov	r4,zero
 8001350:	0141a004 	movi	r5,1664
 8001354:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
 8001358:	0009883a 	mov	r4,zero
 800135c:	01404004 	movi	r5,256
 8001360:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001364:	0009883a 	mov	r4,zero
 8001368:	000b883a 	mov	r5,zero
 800136c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);
 8001370:	0009883a 	mov	r4,zero
 8001374:	01400204 	movi	r5,8
 8001378:	800027c0 	call	800027c <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
 800137c:	0009883a 	mov	r4,zero
 8001380:	01414b04 	movi	r5,1324
 8001384:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//
 8001388:	0009883a 	mov	r4,zero
 800138c:	01400204 	movi	r5,8
 8001390:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//
 8001394:	0009883a 	mov	r4,zero
 8001398:	0140a404 	movi	r5,656
 800139c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);
 80013a0:	0009883a 	mov	r4,zero
 80013a4:	01401044 	movi	r5,65
 80013a8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 80013ac:	0009883a 	mov	r4,zero
 80013b0:	014004c4 	movi	r5,19
 80013b4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0520);
 80013b8:	0009883a 	mov	r4,zero
 80013bc:	01414804 	movi	r5,1312
 80013c0:	800027c0 	call	800027c <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
 80013c4:	0009883a 	mov	r4,zero
 80013c8:	000b883a 	mov	r5,zero
 80013cc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 80013d0:	0009883a 	mov	r4,zero
 80013d4:	000b883a 	mov	r5,zero
 80013d8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
 80013dc:	0009883a 	mov	r4,zero
 80013e0:	01408404 	movi	r5,528
 80013e4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);
 80013e8:	0009883a 	mov	r4,zero
 80013ec:	01401044 	movi	r5,65
 80013f0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 80013f4:	0009883a 	mov	r4,zero
 80013f8:	014004c4 	movi	r5,19
 80013fc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001400:	0009883a 	mov	r4,zero
 8001404:	000b883a 	mov	r5,zero
 8001408:	800027c0 	call	800027c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 800140c:	01006c04 	movi	r4,432
 8001410:	01414004 	movi	r5,1280
 8001414:	80010940 	call	8001094 <UsbWrite>
}
 8001418:	e037883a 	mov	sp,fp
 800141c:	dfc00117 	ldw	ra,4(sp)
 8001420:	df000017 	ldw	fp,0(sp)
 8001424:	dec00204 	addi	sp,sp,8
 8001428:	f800283a 	ret

0800142c <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
 800142c:	defffe04 	addi	sp,sp,-8
 8001430:	dfc00115 	stw	ra,4(sp)
 8001434:	df000015 	stw	fp,0(sp)
 8001438:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 800143c:	01000084 	movi	r4,2
 8001440:	01414004 	movi	r5,1280
 8001444:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001448:	0009883a 	mov	r4,zero
 800144c:	01414304 	movi	r5,1292
 8001450:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001454:	0009883a 	mov	r4,zero
 8001458:	01400204 	movi	r5,8
 800145c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 8001460:	0009883a 	mov	r4,zero
 8001464:	0140b404 	movi	r5,720
 8001468:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);
 800146c:	0009883a 	mov	r4,zero
 8001470:	01400044 	movi	r5,1
 8001474:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001478:	0009883a 	mov	r4,zero
 800147c:	014004c4 	movi	r5,19
 8001480:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001484:	0009883a 	mov	r4,zero
 8001488:	01414504 	movi	r5,1300
 800148c:	800027c0 	call	800027c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 8001490:	0009883a 	mov	r4,zero
 8001494:	0141a004 	movi	r5,1664
 8001498:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
 800149c:	0009883a 	mov	r4,zero
 80014a0:	01404004 	movi	r5,256
 80014a4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 80014a8:	0009883a 	mov	r4,zero
 80014ac:	000b883a 	mov	r5,zero
 80014b0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0012);//2
 80014b4:	0009883a 	mov	r4,zero
 80014b8:	01400484 	movi	r5,18
 80014bc:	800027c0 	call	800027c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 80014c0:	0009883a 	mov	r4,zero
 80014c4:	01415104 	movi	r5,1348
 80014c8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 80014cc:	0009883a 	mov	r4,zero
 80014d0:	01400204 	movi	r5,8
 80014d4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 80014d8:	0009883a 	mov	r4,zero
 80014dc:	0140a404 	movi	r5,656
 80014e0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 80014e4:	0009883a 	mov	r4,zero
 80014e8:	01401044 	movi	r5,65
 80014ec:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 80014f0:	0009883a 	mov	r4,zero
 80014f4:	014004c4 	movi	r5,19
 80014f8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 80014fc:	0009883a 	mov	r4,zero
 8001500:	01414804 	movi	r5,1312
 8001504:	800027c0 	call	800027c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 8001508:	0009883a 	mov	r4,zero
 800150c:	01415304 	movi	r5,1356
 8001510:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 8001514:	0009883a 	mov	r4,zero
 8001518:	01400204 	movi	r5,8
 800151c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8001520:	0009883a 	mov	r4,zero
 8001524:	0140a404 	movi	r5,656
 8001528:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);//6
 800152c:	0009883a 	mov	r4,zero
 8001530:	01400044 	movi	r5,1
 8001534:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001538:	0009883a 	mov	r4,zero
 800153c:	014004c4 	movi	r5,19
 8001540:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 8001544:	0009883a 	mov	r4,zero
 8001548:	01414b04 	movi	r5,1324
 800154c:	800027c0 	call	800027c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
 8001550:	0009883a 	mov	r4,zero
 8001554:	01415504 	movi	r5,1364
 8001558:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0002);//e
 800155c:	0009883a 	mov	r4,zero
 8001560:	01400084 	movi	r5,2
 8001564:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 8001568:	0009883a 	mov	r4,zero
 800156c:	0140a404 	movi	r5,656
 8001570:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001574:	0009883a 	mov	r4,zero
 8001578:	01401044 	movi	r5,65
 800157c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001580:	0009883a 	mov	r4,zero
 8001584:	014004c4 	movi	r5,19
 8001588:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 800158c:	0009883a 	mov	r4,zero
 8001590:	01414e04 	movi	r5,1336
 8001594:	800027c0 	call	800027c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
 8001598:	0009883a 	mov	r4,zero
 800159c:	000b883a 	mov	r5,zero
 80015a0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 80015a4:	0009883a 	mov	r4,zero
 80015a8:	000b883a 	mov	r5,zero
 80015ac:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0210);//c
 80015b0:	0009883a 	mov	r4,zero
 80015b4:	01408404 	movi	r5,528
 80015b8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//e
 80015bc:	0009883a 	mov	r4,zero
 80015c0:	01401044 	movi	r5,65
 80015c4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 80015c8:	0009883a 	mov	r4,zero
 80015cc:	014004c4 	movi	r5,19
 80015d0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 80015d4:	0009883a 	mov	r4,zero
 80015d8:	000b883a 	mov	r5,zero
 80015dc:	800027c0 	call	800027c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80015e0:	01006c04 	movi	r4,432
 80015e4:	01414004 	movi	r5,1280
 80015e8:	80010940 	call	8001094 <UsbWrite>
}
 80015ec:	e037883a 	mov	sp,fp
 80015f0:	dfc00117 	ldw	ra,4(sp)
 80015f4:	df000017 	ldw	fp,0(sp)
 80015f8:	dec00204 	addi	sp,sp,8
 80015fc:	f800283a 	ret

08001600 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
 8001600:	defffe04 	addi	sp,sp,-8
 8001604:	dfc00115 	stw	ra,4(sp)
 8001608:	df000015 	stw	fp,0(sp)
 800160c:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001610:	01000084 	movi	r4,2
 8001614:	01414004 	movi	r5,1280
 8001618:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x050C);
 800161c:	0009883a 	mov	r4,zero
 8001620:	01414304 	movi	r5,1292
 8001624:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001628:	0009883a 	mov	r4,zero
 800162c:	01400204 	movi	r5,8
 8001630:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 8001634:	0009883a 	mov	r4,zero
 8001638:	0140b404 	movi	r5,720
 800163c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001640:	0009883a 	mov	r4,zero
 8001644:	01400044 	movi	r5,1
 8001648:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 800164c:	0009883a 	mov	r4,zero
 8001650:	014004c4 	movi	r5,19
 8001654:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001658:	0009883a 	mov	r4,zero
 800165c:	01414504 	movi	r5,1300
 8001660:	800027c0 	call	800027c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 8001664:	0009883a 	mov	r4,zero
 8001668:	0141a004 	movi	r5,1664
 800166c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 8001670:	0009883a 	mov	r4,zero
 8001674:	01408004 	movi	r5,512
 8001678:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 800167c:	0009883a 	mov	r4,zero
 8001680:	000b883a 	mov	r5,zero
 8001684:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0009);//2
 8001688:	0009883a 	mov	r4,zero
 800168c:	01400244 	movi	r5,9
 8001690:	800027c0 	call	800027c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 8001694:	0009883a 	mov	r4,zero
 8001698:	01415104 	movi	r5,1348
 800169c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 80016a0:	0009883a 	mov	r4,zero
 80016a4:	01400204 	movi	r5,8
 80016a8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 80016ac:	0009883a 	mov	r4,zero
 80016b0:	0140a404 	movi	r5,656
 80016b4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 80016b8:	0009883a 	mov	r4,zero
 80016bc:	01401044 	movi	r5,65
 80016c0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 80016c4:	0009883a 	mov	r4,zero
 80016c8:	014004c4 	movi	r5,19
 80016cc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 80016d0:	0009883a 	mov	r4,zero
 80016d4:	01414804 	movi	r5,1312
 80016d8:	800027c0 	call	800027c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
 80016dc:	0009883a 	mov	r4,zero
 80016e0:	01415304 	movi	r5,1356
 80016e4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);//2
 80016e8:	0009883a 	mov	r4,zero
 80016ec:	01400044 	movi	r5,1
 80016f0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 80016f4:	0009883a 	mov	r4,zero
 80016f8:	0140a404 	movi	r5,656
 80016fc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 8001700:	0009883a 	mov	r4,zero
 8001704:	01400044 	movi	r5,1
 8001708:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 800170c:	0009883a 	mov	r4,zero
 8001710:	014004c4 	movi	r5,19
 8001714:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 8001718:	0009883a 	mov	r4,zero
 800171c:	01414b04 	movi	r5,1324
 8001720:	800027c0 	call	800027c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 8001724:	0009883a 	mov	r4,zero
 8001728:	000b883a 	mov	r5,zero
 800172c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 8001730:	0009883a 	mov	r4,zero
 8001734:	000b883a 	mov	r5,zero
 8001738:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 800173c:	0009883a 	mov	r4,zero
 8001740:	01408404 	movi	r5,528
 8001744:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001748:	0009883a 	mov	r4,zero
 800174c:	01401044 	movi	r5,65
 8001750:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001754:	0009883a 	mov	r4,zero
 8001758:	014004c4 	movi	r5,19
 800175c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 8001760:	0009883a 	mov	r4,zero
 8001764:	000b883a 	mov	r5,zero
 8001768:	800027c0 	call	800027c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 800176c:	01006c04 	movi	r4,432
 8001770:	01414004 	movi	r5,1280
 8001774:	80010940 	call	8001094 <UsbWrite>
}
 8001778:	e037883a 	mov	sp,fp
 800177c:	dfc00117 	ldw	ra,4(sp)
 8001780:	df000017 	ldw	fp,0(sp)
 8001784:	dec00204 	addi	sp,sp,8
 8001788:	f800283a 	ret

0800178c <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
 800178c:	defffe04 	addi	sp,sp,-8
 8001790:	dfc00115 	stw	ra,4(sp)
 8001794:	df000015 	stw	fp,0(sp)
 8001798:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 800179c:	01000084 	movi	r4,2
 80017a0:	01414004 	movi	r5,1280
 80017a4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x050C);
 80017a8:	0009883a 	mov	r4,zero
 80017ac:	01414304 	movi	r5,1292
 80017b0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 80017b4:	0009883a 	mov	r4,zero
 80017b8:	01400204 	movi	r5,8
 80017bc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 80017c0:	0009883a 	mov	r4,zero
 80017c4:	0140b404 	movi	r5,720
 80017c8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);
 80017cc:	0009883a 	mov	r4,zero
 80017d0:	01400044 	movi	r5,1
 80017d4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 80017d8:	0009883a 	mov	r4,zero
 80017dc:	014004c4 	movi	r5,19
 80017e0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0514);
 80017e4:	0009883a 	mov	r4,zero
 80017e8:	01414504 	movi	r5,1300
 80017ec:	800027c0 	call	800027c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
 80017f0:	0009883a 	mov	r4,zero
 80017f4:	0141a004 	movi	r5,1664
 80017f8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
 80017fc:	0009883a 	mov	r4,zero
 8001800:	01408004 	movi	r5,512
 8001804:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001808:	0009883a 	mov	r4,zero
 800180c:	000b883a 	mov	r5,zero
 8001810:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
 8001814:	0009883a 	mov	r4,zero
 8001818:	01403fc4 	movi	r5,255
 800181c:	800027c0 	call	800027c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
 8001820:	0009883a 	mov	r4,zero
 8001824:	01415704 	movi	r5,1372
 8001828:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 800182c:	0009883a 	mov	r4,zero
 8001830:	01400204 	movi	r5,8
 8001834:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001838:	0009883a 	mov	r4,zero
 800183c:	0140a404 	movi	r5,656
 8001840:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8001844:	0009883a 	mov	r4,zero
 8001848:	01401044 	movi	r5,65
 800184c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001850:	0009883a 	mov	r4,zero
 8001854:	014004c4 	movi	r5,19
 8001858:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 800185c:	0009883a 	mov	r4,zero
 8001860:	01414804 	movi	r5,1312
 8001864:	800027c0 	call	800027c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
 8001868:	0009883a 	mov	r4,zero
 800186c:	01415904 	movi	r5,1380
 8001870:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 8001874:	0009883a 	mov	r4,zero
 8001878:	01400204 	movi	r5,8
 800187c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8001880:	0009883a 	mov	r4,zero
 8001884:	0140a404 	movi	r5,656
 8001888:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 800188c:	0009883a 	mov	r4,zero
 8001890:	01400044 	movi	r5,1
 8001894:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001898:	0009883a 	mov	r4,zero
 800189c:	014004c4 	movi	r5,19
 80018a0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 80018a4:	0009883a 	mov	r4,zero
 80018a8:	01414b04 	movi	r5,1324
 80018ac:	800027c0 	call	800027c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
 80018b0:	0009883a 	mov	r4,zero
 80018b4:	01415b04 	movi	r5,1388
 80018b8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 80018bc:	0009883a 	mov	r4,zero
 80018c0:	01400204 	movi	r5,8
 80018c4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 80018c8:	0009883a 	mov	r4,zero
 80018cc:	0140a404 	movi	r5,656
 80018d0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 80018d4:	0009883a 	mov	r4,zero
 80018d8:	01401044 	movi	r5,65
 80018dc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 80018e0:	0009883a 	mov	r4,zero
 80018e4:	014004c4 	movi	r5,19
 80018e8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 80018ec:	0009883a 	mov	r4,zero
 80018f0:	01414e04 	movi	r5,1336
 80018f4:	800027c0 	call	800027c <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
 80018f8:	0009883a 	mov	r4,zero
 80018fc:	01415d04 	movi	r5,1396
 8001900:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 8001904:	0009883a 	mov	r4,zero
 8001908:	01400204 	movi	r5,8
 800190c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 8001910:	0009883a 	mov	r4,zero
 8001914:	0140a404 	movi	r5,656
 8001918:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 800191c:	0009883a 	mov	r4,zero
 8001920:	01400044 	movi	r5,1
 8001924:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 8001928:	0009883a 	mov	r4,zero
 800192c:	014004c4 	movi	r5,19
 8001930:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 8001934:	0009883a 	mov	r4,zero
 8001938:	01415104 	movi	r5,1348
 800193c:	800027c0 	call	800027c <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
 8001940:	0009883a 	mov	r4,zero
 8001944:	01415f04 	movi	r5,1404
 8001948:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0002);//6
 800194c:	0009883a 	mov	r4,zero
 8001950:	01400084 	movi	r5,2
 8001954:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001958:	0009883a 	mov	r4,zero
 800195c:	0140a404 	movi	r5,656
 8001960:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 8001964:	0009883a 	mov	r4,zero
 8001968:	01401044 	movi	r5,65
 800196c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001970:	0009883a 	mov	r4,zero
 8001974:	014004c4 	movi	r5,19
 8001978:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 800197c:	0009883a 	mov	r4,zero
 8001980:	01415404 	movi	r5,1360
 8001984:	800027c0 	call	800027c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
 8001988:	0009883a 	mov	r4,zero
 800198c:	000b883a 	mov	r5,zero
 8001990:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//2
 8001994:	0009883a 	mov	r4,zero
 8001998:	000b883a 	mov	r5,zero
 800199c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0210);//4
 80019a0:	0009883a 	mov	r4,zero
 80019a4:	01408404 	movi	r5,528
 80019a8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//6
 80019ac:	0009883a 	mov	r4,zero
 80019b0:	01401044 	movi	r5,65
 80019b4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 80019b8:	0009883a 	mov	r4,zero
 80019bc:	014004c4 	movi	r5,19
 80019c0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//a
 80019c4:	0009883a 	mov	r4,zero
 80019c8:	000b883a 	mov	r5,zero
 80019cc:	800027c0 	call	800027c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 80019d0:	01006c04 	movi	r4,432
 80019d4:	01414004 	movi	r5,1280
 80019d8:	80010940 	call	8001094 <UsbWrite>
}
 80019dc:	e037883a 	mov	sp,fp
 80019e0:	dfc00117 	ldw	ra,4(sp)
 80019e4:	df000017 	ldw	fp,0(sp)
 80019e8:	dec00204 	addi	sp,sp,8
 80019ec:	f800283a 	ret

080019f0 <UsbSetConfig>:

void UsbSetConfig()
{
 80019f0:	defffe04 	addi	sp,sp,-8
 80019f4:	dfc00115 	stw	ra,4(sp)
 80019f8:	df000015 	stw	fp,0(sp)
 80019fc:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001a00:	01000084 	movi	r4,2
 8001a04:	01414004 	movi	r5,1280
 8001a08:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001a0c:	0009883a 	mov	r4,zero
 8001a10:	01414304 	movi	r5,1292
 8001a14:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001a18:	0009883a 	mov	r4,zero
 8001a1c:	01400204 	movi	r5,8
 8001a20:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 8001a24:	0009883a 	mov	r4,zero
 8001a28:	0140b404 	movi	r5,720
 8001a2c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001a30:	0009883a 	mov	r4,zero
 8001a34:	01400044 	movi	r5,1
 8001a38:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001a3c:	0009883a 	mov	r4,zero
 8001a40:	014004c4 	movi	r5,19
 8001a44:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001a48:	0009883a 	mov	r4,zero
 8001a4c:	01414504 	movi	r5,1300
 8001a50:	800027c0 	call	800027c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
 8001a54:	0009883a 	mov	r4,zero
 8001a58:	01424004 	movi	r5,2304
 8001a5c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
 8001a60:	0009883a 	mov	r4,zero
 8001a64:	01400044 	movi	r5,1
 8001a68:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001a6c:	0009883a 	mov	r4,zero
 8001a70:	000b883a 	mov	r5,zero
 8001a74:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001a78:	0009883a 	mov	r4,zero
 8001a7c:	000b883a 	mov	r5,zero
 8001a80:	800027c0 	call	800027c <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 8001a84:	0009883a 	mov	r4,zero
 8001a88:	000b883a 	mov	r5,zero
 8001a8c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
 8001a90:	0009883a 	mov	r4,zero
 8001a94:	000b883a 	mov	r5,zero
 8001a98:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 8001a9c:	0009883a 	mov	r4,zero
 8001aa0:	0140a404 	movi	r5,656
 8001aa4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 8001aa8:	0009883a 	mov	r4,zero
 8001aac:	01401044 	movi	r5,65
 8001ab0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001ab4:	0009883a 	mov	r4,zero
 8001ab8:	014004c4 	movi	r5,19
 8001abc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001ac0:	0009883a 	mov	r4,zero
 8001ac4:	000b883a 	mov	r5,zero
 8001ac8:	800027c0 	call	800027c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001acc:	01006c04 	movi	r4,432
 8001ad0:	01414004 	movi	r5,1280
 8001ad4:	80010940 	call	8001094 <UsbWrite>

}
 8001ad8:	e037883a 	mov	sp,fp
 8001adc:	dfc00117 	ldw	ra,4(sp)
 8001ae0:	df000017 	ldw	fp,0(sp)
 8001ae4:	dec00204 	addi	sp,sp,8
 8001ae8:	f800283a 	ret

08001aec <UsbClassRequest>:

void UsbClassRequest()
{
 8001aec:	defffe04 	addi	sp,sp,-8
 8001af0:	dfc00115 	stw	ra,4(sp)
 8001af4:	df000015 	stw	fp,0(sp)
 8001af8:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001afc:	01000084 	movi	r4,2
 8001b00:	01414004 	movi	r5,1280
 8001b04:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001b08:	0009883a 	mov	r4,zero
 8001b0c:	01414304 	movi	r5,1292
 8001b10:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001b14:	0009883a 	mov	r4,zero
 8001b18:	01400204 	movi	r5,8
 8001b1c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 8001b20:	0009883a 	mov	r4,zero
 8001b24:	0140b404 	movi	r5,720
 8001b28:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001b2c:	0009883a 	mov	r4,zero
 8001b30:	01400044 	movi	r5,1
 8001b34:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001b38:	0009883a 	mov	r4,zero
 8001b3c:	014004c4 	movi	r5,19
 8001b40:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001b44:	0009883a 	mov	r4,zero
 8001b48:	01414504 	movi	r5,1300
 8001b4c:	800027c0 	call	800027c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
 8001b50:	0009883a 	mov	r4,zero
 8001b54:	01428844 	movi	r5,2593
 8001b58:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
 8001b5c:	0009883a 	mov	r4,zero
 8001b60:	000b883a 	mov	r5,zero
 8001b64:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001b68:	0009883a 	mov	r4,zero
 8001b6c:	000b883a 	mov	r5,zero
 8001b70:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001b74:	0009883a 	mov	r4,zero
 8001b78:	000b883a 	mov	r5,zero
 8001b7c:	800027c0 	call	800027c <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
 8001b80:	0009883a 	mov	r4,zero
 8001b84:	000b883a 	mov	r5,zero
 8001b88:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
 8001b8c:	0009883a 	mov	r4,zero
 8001b90:	000b883a 	mov	r5,zero
 8001b94:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
 8001b98:	0009883a 	mov	r4,zero
 8001b9c:	0140a404 	movi	r5,656
 8001ba0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
 8001ba4:	0009883a 	mov	r4,zero
 8001ba8:	01401044 	movi	r5,65
 8001bac:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001bb0:	0009883a 	mov	r4,zero
 8001bb4:	014004c4 	movi	r5,19
 8001bb8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);
 8001bbc:	0009883a 	mov	r4,zero
 8001bc0:	000b883a 	mov	r5,zero
 8001bc4:	800027c0 	call	800027c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001bc8:	01006c04 	movi	r4,432
 8001bcc:	01414004 	movi	r5,1280
 8001bd0:	80010940 	call	8001094 <UsbWrite>
}
 8001bd4:	e037883a 	mov	sp,fp
 8001bd8:	dfc00117 	ldw	ra,4(sp)
 8001bdc:	df000017 	ldw	fp,0(sp)
 8001be0:	dec00204 	addi	sp,sp,8
 8001be4:	f800283a 	ret

08001be8 <UsbGetHidDesc>:


void UsbGetHidDesc()
{
 8001be8:	defffe04 	addi	sp,sp,-8
 8001bec:	dfc00115 	stw	ra,4(sp)
 8001bf0:	df000015 	stw	fp,0(sp)
 8001bf4:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001bf8:	01000084 	movi	r4,2
 8001bfc:	01414004 	movi	r5,1280
 8001c00:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001c04:	0009883a 	mov	r4,zero
 8001c08:	01414304 	movi	r5,1292
 8001c0c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001c10:	0009883a 	mov	r4,zero
 8001c14:	01400204 	movi	r5,8
 8001c18:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
 8001c1c:	0009883a 	mov	r4,zero
 8001c20:	0140b404 	movi	r5,720
 8001c24:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001c28:	0009883a 	mov	r4,zero
 8001c2c:	01400044 	movi	r5,1
 8001c30:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001c34:	0009883a 	mov	r4,zero
 8001c38:	014004c4 	movi	r5,19
 8001c3c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001c40:	0009883a 	mov	r4,zero
 8001c44:	01414504 	movi	r5,1300
 8001c48:	800027c0 	call	800027c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 8001c4c:	0009883a 	mov	r4,zero
 8001c50:	0141a044 	movi	r5,1665
 8001c54:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
 8001c58:	0009883a 	mov	r4,zero
 8001c5c:	01484004 	movi	r5,8448
 8001c60:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001c64:	0009883a 	mov	r4,zero
 8001c68:	000b883a 	mov	r5,zero
 8001c6c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 8001c70:	0009883a 	mov	r4,zero
 8001c74:	01401ec4 	movi	r5,123
 8001c78:	800027c0 	call	800027c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
 8001c7c:	0009883a 	mov	r4,zero
 8001c80:	01415104 	movi	r5,1348
 8001c84:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001c88:	0009883a 	mov	r4,zero
 8001c8c:	01400204 	movi	r5,8
 8001c90:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001c94:	0009883a 	mov	r4,zero
 8001c98:	0140a404 	movi	r5,656
 8001c9c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8001ca0:	0009883a 	mov	r4,zero
 8001ca4:	01401044 	movi	r5,65
 8001ca8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001cac:	0009883a 	mov	r4,zero
 8001cb0:	014004c4 	movi	r5,19
 8001cb4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 8001cb8:	0009883a 	mov	r4,zero
 8001cbc:	01414804 	movi	r5,1312
 8001cc0:	800027c0 	call	800027c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
 8001cc4:	0009883a 	mov	r4,zero
 8001cc8:	000b883a 	mov	r5,zero
 8001ccc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 8001cd0:	0009883a 	mov	r4,zero
 8001cd4:	000b883a 	mov	r5,zero
 8001cd8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0210);//530
 8001cdc:	0009883a 	mov	r4,zero
 8001ce0:	01408404 	movi	r5,528
 8001ce4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001ce8:	0009883a 	mov	r4,zero
 8001cec:	01401044 	movi	r5,65
 8001cf0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001cf4:	0009883a 	mov	r4,zero
 8001cf8:	014004c4 	movi	r5,19
 8001cfc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 8001d00:	0009883a 	mov	r4,zero
 8001d04:	000b883a 	mov	r5,zero
 8001d08:	800027c0 	call	800027c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8001d0c:	01006c04 	movi	r4,432
 8001d10:	01414004 	movi	r5,1280
 8001d14:	80010940 	call	8001094 <UsbWrite>

}
 8001d18:	e037883a 	mov	sp,fp
 8001d1c:	dfc00117 	ldw	ra,4(sp)
 8001d20:	df000017 	ldw	fp,0(sp)
 8001d24:	dec00204 	addi	sp,sp,8
 8001d28:	f800283a 	ret

08001d2c <UsbGetReportDesc>:


void UsbGetReportDesc()
{
 8001d2c:	defffe04 	addi	sp,sp,-8
 8001d30:	dfc00115 	stw	ra,4(sp)
 8001d34:	df000015 	stw	fp,0(sp)
 8001d38:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
 8001d3c:	01000084 	movi	r4,2
 8001d40:	01414004 	movi	r5,1280
 8001d44:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x050C);
 8001d48:	0009883a 	mov	r4,zero
 8001d4c:	01414304 	movi	r5,1292
 8001d50:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
 8001d54:	0009883a 	mov	r4,zero
 8001d58:	01400204 	movi	r5,8
 8001d5c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
 8001d60:	0009883a 	mov	r4,zero
 8001d64:	0140b404 	movi	r5,720
 8001d68:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);
 8001d6c:	0009883a 	mov	r4,zero
 8001d70:	01400044 	movi	r5,1
 8001d74:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);
 8001d78:	0009883a 	mov	r4,zero
 8001d7c:	014004c4 	movi	r5,19
 8001d80:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0514);
 8001d84:	0009883a 	mov	r4,zero
 8001d88:	01414504 	movi	r5,1300
 8001d8c:	800027c0 	call	800027c <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
 8001d90:	0009883a 	mov	r4,zero
 8001d94:	0141a044 	movi	r5,1665
 8001d98:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
 8001d9c:	0009883a 	mov	r4,zero
 8001da0:	01488004 	movi	r5,8704
 8001da4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//0
 8001da8:	0009883a 	mov	r4,zero
 8001dac:	000b883a 	mov	r5,zero
 8001db0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x007B);//2
 8001db4:	0009883a 	mov	r4,zero
 8001db8:	01401ec4 	movi	r5,123
 8001dbc:	800027c0 	call	800027c <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
 8001dc0:	0009883a 	mov	r4,zero
 8001dc4:	01416004 	movi	r5,1408
 8001dc8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001dcc:	0009883a 	mov	r4,zero
 8001dd0:	01400204 	movi	r5,8
 8001dd4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001dd8:	0009883a 	mov	r4,zero
 8001ddc:	0140a404 	movi	r5,656
 8001de0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8001de4:	0009883a 	mov	r4,zero
 8001de8:	01401044 	movi	r5,65
 8001dec:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001df0:	0009883a 	mov	r4,zero
 8001df4:	014004c4 	movi	r5,19
 8001df8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0520);//e
 8001dfc:	0009883a 	mov	r4,zero
 8001e00:	01414804 	movi	r5,1312
 8001e04:	800027c0 	call	800027c <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
 8001e08:	0009883a 	mov	r4,zero
 8001e0c:	01416204 	movi	r5,1416
 8001e10:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 8001e14:	0009883a 	mov	r4,zero
 8001e18:	01400204 	movi	r5,8
 8001e1c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8001e20:	0009883a 	mov	r4,zero
 8001e24:	0140a404 	movi	r5,656
 8001e28:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 8001e2c:	0009883a 	mov	r4,zero
 8001e30:	01400044 	movi	r5,1
 8001e34:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001e38:	0009883a 	mov	r4,zero
 8001e3c:	014004c4 	movi	r5,19
 8001e40:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x052c);//a
 8001e44:	0009883a 	mov	r4,zero
 8001e48:	01414b04 	movi	r5,1324
 8001e4c:	800027c0 	call	800027c <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
 8001e50:	0009883a 	mov	r4,zero
 8001e54:	01416404 	movi	r5,1424
 8001e58:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 8001e5c:	0009883a 	mov	r4,zero
 8001e60:	01400204 	movi	r5,8
 8001e64:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//530
 8001e68:	0009883a 	mov	r4,zero
 8001e6c:	0140a404 	movi	r5,656
 8001e70:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//2
 8001e74:	0009883a 	mov	r4,zero
 8001e78:	01401044 	movi	r5,65
 8001e7c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001e80:	0009883a 	mov	r4,zero
 8001e84:	014004c4 	movi	r5,19
 8001e88:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0538);//6
 8001e8c:	0009883a 	mov	r4,zero
 8001e90:	01414e04 	movi	r5,1336
 8001e94:	800027c0 	call	800027c <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
 8001e98:	0009883a 	mov	r4,zero
 8001e9c:	01416604 	movi	r5,1432
 8001ea0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//a
 8001ea4:	0009883a 	mov	r4,zero
 8001ea8:	01400204 	movi	r5,8
 8001eac:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 8001eb0:	0009883a 	mov	r4,zero
 8001eb4:	0140a404 	movi	r5,656
 8001eb8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 8001ebc:	0009883a 	mov	r4,zero
 8001ec0:	01400044 	movi	r5,1
 8001ec4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//540
 8001ec8:	0009883a 	mov	r4,zero
 8001ecc:	014004c4 	movi	r5,19
 8001ed0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0544);//2
 8001ed4:	0009883a 	mov	r4,zero
 8001ed8:	01415104 	movi	r5,1348
 8001edc:	800027c0 	call	800027c <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
 8001ee0:	0009883a 	mov	r4,zero
 8001ee4:	01416804 	movi	r5,1440
 8001ee8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//6
 8001eec:	0009883a 	mov	r4,zero
 8001ef0:	01400204 	movi	r5,8
 8001ef4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//8
 8001ef8:	0009883a 	mov	r4,zero
 8001efc:	0140a404 	movi	r5,656
 8001f00:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
 8001f04:	0009883a 	mov	r4,zero
 8001f08:	01401044 	movi	r5,65
 8001f0c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8001f10:	0009883a 	mov	r4,zero
 8001f14:	014004c4 	movi	r5,19
 8001f18:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0550);//e
 8001f1c:	0009883a 	mov	r4,zero
 8001f20:	01415404 	movi	r5,1360
 8001f24:	800027c0 	call	800027c <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
 8001f28:	0009883a 	mov	r4,zero
 8001f2c:	01416a04 	movi	r5,1448
 8001f30:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//2
 8001f34:	0009883a 	mov	r4,zero
 8001f38:	01400204 	movi	r5,8
 8001f3c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//4
 8001f40:	0009883a 	mov	r4,zero
 8001f44:	0140a404 	movi	r5,656
 8001f48:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
 8001f4c:	0009883a 	mov	r4,zero
 8001f50:	01400044 	movi	r5,1
 8001f54:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//8
 8001f58:	0009883a 	mov	r4,zero
 8001f5c:	014004c4 	movi	r5,19
 8001f60:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x055c);//a
 8001f64:	0009883a 	mov	r4,zero
 8001f68:	01415704 	movi	r5,1372
 8001f6c:	800027c0 	call	800027c <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
 8001f70:	0009883a 	mov	r4,zero
 8001f74:	01416c04 	movi	r5,1456
 8001f78:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0008);//e
 8001f7c:	0009883a 	mov	r4,zero
 8001f80:	01400204 	movi	r5,8
 8001f84:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//560
 8001f88:	0009883a 	mov	r4,zero
 8001f8c:	0140a404 	movi	r5,656
 8001f90:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
 8001f94:	0009883a 	mov	r4,zero
 8001f98:	01401044 	movi	r5,65
 8001f9c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//4
 8001fa0:	0009883a 	mov	r4,zero
 8001fa4:	014004c4 	movi	r5,19
 8001fa8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0568);//6
 8001fac:	0009883a 	mov	r4,zero
 8001fb0:	01415a04 	movi	r5,1384
 8001fb4:	800027c0 	call	800027c <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
 8001fb8:	0009883a 	mov	r4,zero
 8001fbc:	01416e04 	movi	r5,1464
 8001fc0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0003);//a
 8001fc4:	0009883a 	mov	r4,zero
 8001fc8:	014000c4 	movi	r5,3
 8001fcc:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0290);//c
 8001fd0:	0009883a 	mov	r4,zero
 8001fd4:	0140a404 	movi	r5,656
 8001fd8:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
 8001fdc:	0009883a 	mov	r4,zero
 8001fe0:	01400044 	movi	r5,1
 8001fe4:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//570
 8001fe8:	0009883a 	mov	r4,zero
 8001fec:	014004c4 	movi	r5,19
 8001ff0:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0574);//2
 8001ff4:	0009883a 	mov	r4,zero
 8001ff8:	01415d04 	movi	r5,1396
 8001ffc:	800027c0 	call	800027c <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
 8002000:	0009883a 	mov	r4,zero
 8002004:	000b883a 	mov	r5,zero
 8002008:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//6
 800200c:	0009883a 	mov	r4,zero
 8002010:	000b883a 	mov	r5,zero
 8002014:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0210);//8
 8002018:	0009883a 	mov	r4,zero
 800201c:	01408404 	movi	r5,528
 8002020:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0041);//a
 8002024:	0009883a 	mov	r4,zero
 8002028:	01401044 	movi	r5,65
 800202c:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0013);//c
 8002030:	0009883a 	mov	r4,zero
 8002034:	014004c4 	movi	r5,19
 8002038:	800027c0 	call	800027c <IO_write>
	IO_write(HPI_DATA,0x0000);//e
 800203c:	0009883a 	mov	r4,zero
 8002040:	000b883a 	mov	r5,zero
 8002044:	800027c0 	call	800027c <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
 8002048:	01006c04 	movi	r4,432
 800204c:	01414004 	movi	r5,1280
 8002050:	80010940 	call	8001094 <UsbWrite>

}
 8002054:	e037883a 	mov	sp,fp
 8002058:	dfc00117 	ldw	ra,4(sp)
 800205c:	df000017 	ldw	fp,0(sp)
 8002060:	dec00204 	addi	sp,sp,8
 8002064:	f800283a 	ret

08002068 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
 8002068:	defffd04 	addi	sp,sp,-12
 800206c:	dfc00215 	stw	ra,8(sp)
 8002070:	df000115 	stw	fp,4(sp)
 8002074:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
 8002078:	01005104 	movi	r4,324
 800207c:	80010e80 	call	80010e8 <UsbRead>
 8002080:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
 8002084:	01005104 	movi	r4,324
 8002088:	000b883a 	mov	r5,zero
 800208c:	80010940 	call	8001094 <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 8002090:	00000d06 	br	80020c8 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
 8002094:	e0bfff0b 	ldhu	r2,-4(fp)
 8002098:	10000526 	beq	r2,zero,80020b0 <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
 800209c:	e0bfff0b 	ldhu	r2,-4(fp)
 80020a0:	01020074 	movhi	r4,2049
 80020a4:	2106ac04 	addi	r4,r4,6832
 80020a8:	100b883a 	mov	r5,r2
 80020ac:	80022140 	call	8002214 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
 80020b0:	01005104 	movi	r4,324
 80020b4:	80010e80 	call	80010e8 <UsbRead>
 80020b8:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 80020bc:	01005104 	movi	r4,324
 80020c0:	000b883a 	mov	r5,zero
 80020c4:	80010940 	call	8001094 <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
 80020c8:	e0bfff0b 	ldhu	r2,-4(fp)
 80020cc:	10840018 	cmpnei	r2,r2,4096
 80020d0:	103ff01e 	bne	r2,zero,8002094 <__alt_data_end+0xfc002094>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
 80020d4:	e0bfff0b 	ldhu	r2,-4(fp)
}
 80020d8:	e037883a 	mov	sp,fp
 80020dc:	dfc00117 	ldw	ra,4(sp)
 80020e0:	df000017 	ldw	fp,0(sp)
 80020e4:	dec00204 	addi	sp,sp,8
 80020e8:	f800283a 	ret

080020ec <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
 80020ec:	defffd04 	addi	sp,sp,-12
 80020f0:	dfc00215 	stw	ra,8(sp)
 80020f4:	df000115 	stw	fp,4(sp)
 80020f8:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
 80020fc:	010000c4 	movi	r4,3
 8002100:	80002f40 	call	80002f4 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
 8002104:	01005104 	movi	r4,324
 8002108:	80010e80 	call	80010e8 <UsbRead>
 800210c:	10bfffcc 	andi	r2,r2,65535
 8002110:	10840018 	cmpnei	r2,r2,4096
 8002114:	1000091e 	bne	r2,zero,800213c <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
 8002118:	01005104 	movi	r4,324
 800211c:	000b883a 	mov	r5,zero
 8002120:	80010940 	call	8001094 <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
 8002124:	0001883a 	nop
 8002128:	010000c4 	movi	r4,3
 800212c:	80002f40 	call	80002f4 <IO_read>
 8002130:	10bfffcc 	andi	r2,r2,65535
 8002134:	1080040c 	andi	r2,r2,16
 8002138:	103ffb26 	beq	r2,zero,8002128 <__alt_data_end+0xfc002128>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
 800213c:	01000084 	movi	r4,2
 8002140:	01414204 	movi	r5,1288
 8002144:	800027c0 	call	800027c <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
 8002148:	0009883a 	mov	r4,zero
 800214c:	80002f40 	call	80002f4 <IO_read>
 8002150:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
 8002154:	e0bfff0b 	ldhu	r2,-4(fp)
}
 8002158:	e037883a 	mov	sp,fp
 800215c:	dfc00117 	ldw	ra,4(sp)
 8002160:	df000017 	ldw	fp,0(sp)
 8002164:	dec00204 	addi	sp,sp,8
 8002168:	f800283a 	ret

0800216c <UsbPrintMem>:


void UsbPrintMem()
{
 800216c:	defffc04 	addi	sp,sp,-16
 8002170:	dfc00315 	stw	ra,12(sp)
 8002174:	df000215 	stw	fp,8(sp)
 8002178:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
 800217c:	01000084 	movi	r4,2
 8002180:	01414004 	movi	r5,1280
 8002184:	800027c0 	call	800027c <IO_write>
	for (i = 0; i <= 200; i += 2)
 8002188:	e03ffe15 	stw	zero,-8(fp)
 800218c:	00000e06 	br	80021c8 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
 8002190:	0009883a 	mov	r4,zero
 8002194:	80002f40 	call	80002f4 <IO_read>
 8002198:	10bfffcc 	andi	r2,r2,65535
 800219c:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
 80021a0:	e0bffe17 	ldw	r2,-8(fp)
 80021a4:	10814004 	addi	r2,r2,1280
 80021a8:	01020074 	movhi	r4,2049
 80021ac:	2106b404 	addi	r4,r4,6864
 80021b0:	100b883a 	mov	r5,r2
 80021b4:	e1bfff17 	ldw	r6,-4(fp)
 80021b8:	80022140 	call	8002214 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
 80021bc:	e0bffe17 	ldw	r2,-8(fp)
 80021c0:	10800084 	addi	r2,r2,2
 80021c4:	e0bffe15 	stw	r2,-8(fp)
 80021c8:	e0bffe17 	ldw	r2,-8(fp)
 80021cc:	10803250 	cmplti	r2,r2,201
 80021d0:	103fef1e 	bne	r2,zero,8002190 <__alt_data_end+0xfc002190>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
 80021d4:	e037883a 	mov	sp,fp
 80021d8:	dfc00117 	ldw	ra,4(sp)
 80021dc:	df000017 	ldw	fp,0(sp)
 80021e0:	dec00204 	addi	sp,sp,8
 80021e4:	f800283a 	ret

080021e8 <_printf_r>:
 80021e8:	defffd04 	addi	sp,sp,-12
 80021ec:	dfc00015 	stw	ra,0(sp)
 80021f0:	d9800115 	stw	r6,4(sp)
 80021f4:	d9c00215 	stw	r7,8(sp)
 80021f8:	280d883a 	mov	r6,r5
 80021fc:	21400217 	ldw	r5,8(r4)
 8002200:	d9c00104 	addi	r7,sp,4
 8002204:	80023b40 	call	80023b4 <___vfprintf_internal_r>
 8002208:	dfc00017 	ldw	ra,0(sp)
 800220c:	dec00304 	addi	sp,sp,12
 8002210:	f800283a 	ret

08002214 <printf>:
 8002214:	defffc04 	addi	sp,sp,-16
 8002218:	dfc00015 	stw	ra,0(sp)
 800221c:	d9400115 	stw	r5,4(sp)
 8002220:	d9800215 	stw	r6,8(sp)
 8002224:	d9c00315 	stw	r7,12(sp)
 8002228:	00820074 	movhi	r2,2049
 800222c:	108e2504 	addi	r2,r2,14484
 8002230:	10800017 	ldw	r2,0(r2)
 8002234:	200b883a 	mov	r5,r4
 8002238:	d9800104 	addi	r6,sp,4
 800223c:	11000217 	ldw	r4,8(r2)
 8002240:	80044b00 	call	80044b0 <__vfprintf_internal>
 8002244:	dfc00017 	ldw	ra,0(sp)
 8002248:	dec00404 	addi	sp,sp,16
 800224c:	f800283a 	ret

08002250 <_puts_r>:
 8002250:	defff604 	addi	sp,sp,-40
 8002254:	dc000715 	stw	r16,28(sp)
 8002258:	2021883a 	mov	r16,r4
 800225c:	2809883a 	mov	r4,r5
 8002260:	dc400815 	stw	r17,32(sp)
 8002264:	dfc00915 	stw	ra,36(sp)
 8002268:	2823883a 	mov	r17,r5
 800226c:	800231c0 	call	800231c <strlen>
 8002270:	00c20074 	movhi	r3,2049
 8002274:	18ce2504 	addi	r3,r3,14484
 8002278:	18c00017 	ldw	r3,0(r3)
 800227c:	11000044 	addi	r4,r2,1
 8002280:	d8800115 	stw	r2,4(sp)
 8002284:	18c00217 	ldw	r3,8(r3)
 8002288:	01420074 	movhi	r5,2049
 800228c:	2946b904 	addi	r5,r5,6884
 8002290:	1880030b 	ldhu	r2,12(r3)
 8002294:	d9400215 	stw	r5,8(sp)
 8002298:	d9000615 	stw	r4,24(sp)
 800229c:	01400044 	movi	r5,1
 80022a0:	01000084 	movi	r4,2
 80022a4:	d9000515 	stw	r4,20(sp)
 80022a8:	dc400015 	stw	r17,0(sp)
 80022ac:	d9400315 	stw	r5,12(sp)
 80022b0:	dec00415 	stw	sp,16(sp)
 80022b4:	1108000c 	andi	r4,r2,8192
 80022b8:	2000061e 	bne	r4,zero,80022d4 <_puts_r+0x84>
 80022bc:	19401917 	ldw	r5,100(r3)
 80022c0:	0137ffc4 	movi	r4,-8193
 80022c4:	10880014 	ori	r2,r2,8192
 80022c8:	2908703a 	and	r4,r5,r4
 80022cc:	1880030d 	sth	r2,12(r3)
 80022d0:	19001915 	stw	r4,100(r3)
 80022d4:	81400217 	ldw	r5,8(r16)
 80022d8:	8009883a 	mov	r4,r16
 80022dc:	d9800404 	addi	r6,sp,16
 80022e0:	80069740 	call	8006974 <__sfvwrite_r>
 80022e4:	1000061e 	bne	r2,zero,8002300 <_puts_r+0xb0>
 80022e8:	00800284 	movi	r2,10
 80022ec:	dfc00917 	ldw	ra,36(sp)
 80022f0:	dc400817 	ldw	r17,32(sp)
 80022f4:	dc000717 	ldw	r16,28(sp)
 80022f8:	dec00a04 	addi	sp,sp,40
 80022fc:	f800283a 	ret
 8002300:	00bfffc4 	movi	r2,-1
 8002304:	003ff906 	br	80022ec <__alt_data_end+0xfc0022ec>

08002308 <puts>:
 8002308:	00820074 	movhi	r2,2049
 800230c:	108e2504 	addi	r2,r2,14484
 8002310:	200b883a 	mov	r5,r4
 8002314:	11000017 	ldw	r4,0(r2)
 8002318:	80022501 	jmpi	8002250 <_puts_r>

0800231c <strlen>:
 800231c:	208000cc 	andi	r2,r4,3
 8002320:	10002026 	beq	r2,zero,80023a4 <strlen+0x88>
 8002324:	20800007 	ldb	r2,0(r4)
 8002328:	10002026 	beq	r2,zero,80023ac <strlen+0x90>
 800232c:	2005883a 	mov	r2,r4
 8002330:	00000206 	br	800233c <strlen+0x20>
 8002334:	10c00007 	ldb	r3,0(r2)
 8002338:	18001826 	beq	r3,zero,800239c <strlen+0x80>
 800233c:	10800044 	addi	r2,r2,1
 8002340:	10c000cc 	andi	r3,r2,3
 8002344:	183ffb1e 	bne	r3,zero,8002334 <__alt_data_end+0xfc002334>
 8002348:	10c00017 	ldw	r3,0(r2)
 800234c:	01ffbff4 	movhi	r7,65279
 8002350:	39ffbfc4 	addi	r7,r7,-257
 8002354:	00ca303a 	nor	r5,zero,r3
 8002358:	01a02074 	movhi	r6,32897
 800235c:	19c7883a 	add	r3,r3,r7
 8002360:	31a02004 	addi	r6,r6,-32640
 8002364:	1946703a 	and	r3,r3,r5
 8002368:	1986703a 	and	r3,r3,r6
 800236c:	1800091e 	bne	r3,zero,8002394 <strlen+0x78>
 8002370:	10800104 	addi	r2,r2,4
 8002374:	10c00017 	ldw	r3,0(r2)
 8002378:	19cb883a 	add	r5,r3,r7
 800237c:	00c6303a 	nor	r3,zero,r3
 8002380:	28c6703a 	and	r3,r5,r3
 8002384:	1986703a 	and	r3,r3,r6
 8002388:	183ff926 	beq	r3,zero,8002370 <__alt_data_end+0xfc002370>
 800238c:	00000106 	br	8002394 <strlen+0x78>
 8002390:	10800044 	addi	r2,r2,1
 8002394:	10c00007 	ldb	r3,0(r2)
 8002398:	183ffd1e 	bne	r3,zero,8002390 <__alt_data_end+0xfc002390>
 800239c:	1105c83a 	sub	r2,r2,r4
 80023a0:	f800283a 	ret
 80023a4:	2005883a 	mov	r2,r4
 80023a8:	003fe706 	br	8002348 <__alt_data_end+0xfc002348>
 80023ac:	0005883a 	mov	r2,zero
 80023b0:	f800283a 	ret

080023b4 <___vfprintf_internal_r>:
 80023b4:	defeb604 	addi	sp,sp,-1320
 80023b8:	dfc14915 	stw	ra,1316(sp)
 80023bc:	ddc14715 	stw	r23,1308(sp)
 80023c0:	dd814615 	stw	r22,1304(sp)
 80023c4:	202f883a 	mov	r23,r4
 80023c8:	282d883a 	mov	r22,r5
 80023cc:	d9812a15 	stw	r6,1192(sp)
 80023d0:	d9c12d15 	stw	r7,1204(sp)
 80023d4:	df014815 	stw	fp,1312(sp)
 80023d8:	dd414515 	stw	r21,1300(sp)
 80023dc:	dd014415 	stw	r20,1296(sp)
 80023e0:	dcc14315 	stw	r19,1292(sp)
 80023e4:	dc814215 	stw	r18,1288(sp)
 80023e8:	dc414115 	stw	r17,1284(sp)
 80023ec:	dc014015 	stw	r16,1280(sp)
 80023f0:	80070340 	call	8007034 <_localeconv_r>
 80023f4:	10800017 	ldw	r2,0(r2)
 80023f8:	1009883a 	mov	r4,r2
 80023fc:	d8813515 	stw	r2,1236(sp)
 8002400:	800231c0 	call	800231c <strlen>
 8002404:	d8813815 	stw	r2,1248(sp)
 8002408:	b8000226 	beq	r23,zero,8002414 <___vfprintf_internal_r+0x60>
 800240c:	b8800e17 	ldw	r2,56(r23)
 8002410:	10010526 	beq	r2,zero,8002828 <___vfprintf_internal_r+0x474>
 8002414:	b0c0030b 	ldhu	r3,12(r22)
 8002418:	1908000c 	andi	r4,r3,8192
 800241c:	1805883a 	mov	r2,r3
 8002420:	2000071e 	bne	r4,zero,8002440 <___vfprintf_internal_r+0x8c>
 8002424:	b1001917 	ldw	r4,100(r22)
 8002428:	18880014 	ori	r2,r3,8192
 800242c:	00f7ffc4 	movi	r3,-8193
 8002430:	20c8703a 	and	r4,r4,r3
 8002434:	b080030d 	sth	r2,12(r22)
 8002438:	1007883a 	mov	r3,r2
 800243c:	b1001915 	stw	r4,100(r22)
 8002440:	1100020c 	andi	r4,r2,8
 8002444:	2000a826 	beq	r4,zero,80026e8 <___vfprintf_internal_r+0x334>
 8002448:	b1000417 	ldw	r4,16(r22)
 800244c:	2000a626 	beq	r4,zero,80026e8 <___vfprintf_internal_r+0x334>
 8002450:	1080068c 	andi	r2,r2,26
 8002454:	01000284 	movi	r4,10
 8002458:	1100ac26 	beq	r2,r4,800270c <___vfprintf_internal_r+0x358>
 800245c:	d8c10e04 	addi	r3,sp,1080
 8002460:	d9010dc4 	addi	r4,sp,1079
 8002464:	d9400404 	addi	r5,sp,16
 8002468:	05020074 	movhi	r20,2049
 800246c:	1905c83a 	sub	r2,r3,r4
 8002470:	a506ca84 	addi	r20,r20,6954
 8002474:	d8c12815 	stw	r3,1184(sp)
 8002478:	d9012915 	stw	r4,1188(sp)
 800247c:	d9411e15 	stw	r5,1144(sp)
 8002480:	d8012015 	stw	zero,1152(sp)
 8002484:	d8011f15 	stw	zero,1148(sp)
 8002488:	d8013315 	stw	zero,1228(sp)
 800248c:	d8013715 	stw	zero,1244(sp)
 8002490:	d8013915 	stw	zero,1252(sp)
 8002494:	d8013b15 	stw	zero,1260(sp)
 8002498:	d8013a15 	stw	zero,1256(sp)
 800249c:	d8012f15 	stw	zero,1212(sp)
 80024a0:	2811883a 	mov	r8,r5
 80024a4:	d8813c15 	stw	r2,1264(sp)
 80024a8:	d8c12a17 	ldw	r3,1192(sp)
 80024ac:	18800007 	ldb	r2,0(r3)
 80024b0:	10021326 	beq	r2,zero,8002d00 <___vfprintf_internal_r+0x94c>
 80024b4:	00c00944 	movi	r3,37
 80024b8:	dc012a17 	ldw	r16,1192(sp)
 80024bc:	10c0021e 	bne	r2,r3,80024c8 <___vfprintf_internal_r+0x114>
 80024c0:	00001606 	br	800251c <___vfprintf_internal_r+0x168>
 80024c4:	10c08526 	beq	r2,r3,80026dc <___vfprintf_internal_r+0x328>
 80024c8:	84000044 	addi	r16,r16,1
 80024cc:	80800007 	ldb	r2,0(r16)
 80024d0:	103ffc1e 	bne	r2,zero,80024c4 <__alt_data_end+0xfc0024c4>
 80024d4:	d9012a17 	ldw	r4,1192(sp)
 80024d8:	8123c83a 	sub	r17,r16,r4
 80024dc:	88000f26 	beq	r17,zero,800251c <___vfprintf_internal_r+0x168>
 80024e0:	d8812a17 	ldw	r2,1192(sp)
 80024e4:	d8c12017 	ldw	r3,1152(sp)
 80024e8:	44400115 	stw	r17,4(r8)
 80024ec:	40800015 	stw	r2,0(r8)
 80024f0:	d8811f17 	ldw	r2,1148(sp)
 80024f4:	1c47883a 	add	r3,r3,r17
 80024f8:	d8c12015 	stw	r3,1152(sp)
 80024fc:	10800044 	addi	r2,r2,1
 8002500:	d8811f15 	stw	r2,1148(sp)
 8002504:	00c001c4 	movi	r3,7
 8002508:	1880b516 	blt	r3,r2,80027e0 <___vfprintf_internal_r+0x42c>
 800250c:	42000204 	addi	r8,r8,8
 8002510:	d8c12f17 	ldw	r3,1212(sp)
 8002514:	1c47883a 	add	r3,r3,r17
 8002518:	d8c12f15 	stw	r3,1212(sp)
 800251c:	80800007 	ldb	r2,0(r16)
 8002520:	1000b626 	beq	r2,zero,80027fc <___vfprintf_internal_r+0x448>
 8002524:	80800044 	addi	r2,r16,1
 8002528:	84000047 	ldb	r16,1(r16)
 800252c:	0027883a 	mov	r19,zero
 8002530:	0039883a 	mov	fp,zero
 8002534:	dcc12b05 	stb	r19,1196(sp)
 8002538:	d8012785 	stb	zero,1182(sp)
 800253c:	027fffc4 	movi	r9,-1
 8002540:	d8012e15 	stw	zero,1208(sp)
 8002544:	04401604 	movi	r17,88
 8002548:	04800244 	movi	r18,9
 800254c:	da012a15 	stw	r8,1192(sp)
 8002550:	e027883a 	mov	r19,fp
 8002554:	17000044 	addi	fp,r2,1
 8002558:	80bff804 	addi	r2,r16,-32
 800255c:	88831236 	bltu	r17,r2,80031a8 <___vfprintf_internal_r+0xdf4>
 8002560:	100490ba 	slli	r2,r2,2
 8002564:	01020034 	movhi	r4,2048
 8002568:	21095e04 	addi	r4,r4,9592
 800256c:	1105883a 	add	r2,r2,r4
 8002570:	10800017 	ldw	r2,0(r2)
 8002574:	1000683a 	jmp	r2
 8002578:	080030c4 	addi	zero,at,195
 800257c:	080031a8 	cmpgeui	zero,at,198
 8002580:	080031a8 	cmpgeui	zero,at,198
 8002584:	080030e0 	cmpeqi	zero,at,195
 8002588:	080031a8 	cmpgeui	zero,at,198
 800258c:	080031a8 	cmpgeui	zero,at,198
 8002590:	080031a8 	cmpgeui	zero,at,198
 8002594:	080031a8 	cmpgeui	zero,at,198
 8002598:	080031a8 	cmpgeui	zero,at,198
 800259c:	080031a8 	cmpgeui	zero,at,198
 80025a0:	080030f0 	cmpltui	zero,at,195
 80025a4:	08003118 	cmpnei	zero,at,196
 80025a8:	080031a8 	cmpgeui	zero,at,198
 80025ac:	08002834 	orhi	zero,at,160
 80025b0:	08002844 	addi	zero,at,161
 80025b4:	080031a8 	cmpgeui	zero,at,198
 80025b8:	08002894 	ori	zero,at,162
 80025bc:	080028a4 	muli	zero,at,162
 80025c0:	080028a4 	muli	zero,at,162
 80025c4:	080028a4 	muli	zero,at,162
 80025c8:	080028a4 	muli	zero,at,162
 80025cc:	080028a4 	muli	zero,at,162
 80025d0:	080028a4 	muli	zero,at,162
 80025d4:	080028a4 	muli	zero,at,162
 80025d8:	080028a4 	muli	zero,at,162
 80025dc:	080028a4 	muli	zero,at,162
 80025e0:	080031a8 	cmpgeui	zero,at,198
 80025e4:	080031a8 	cmpgeui	zero,at,198
 80025e8:	080031a8 	cmpgeui	zero,at,198
 80025ec:	080031a8 	cmpgeui	zero,at,198
 80025f0:	080031a8 	cmpgeui	zero,at,198
 80025f4:	080031a8 	cmpgeui	zero,at,198
 80025f8:	080031a8 	cmpgeui	zero,at,198
 80025fc:	080031a8 	cmpgeui	zero,at,198
 8002600:	080031a8 	cmpgeui	zero,at,198
 8002604:	080031a8 	cmpgeui	zero,at,198
 8002608:	080028e8 	cmpgeui	zero,at,163
 800260c:	08002d08 	cmpgei	zero,at,180
 8002610:	080031a8 	cmpgeui	zero,at,198
 8002614:	08002d08 	cmpgei	zero,at,180
 8002618:	080031a8 	cmpgeui	zero,at,198
 800261c:	080031a8 	cmpgeui	zero,at,198
 8002620:	080031a8 	cmpgeui	zero,at,198
 8002624:	080031a8 	cmpgeui	zero,at,198
 8002628:	08002db0 	cmpltui	zero,at,182
 800262c:	080031a8 	cmpgeui	zero,at,198
 8002630:	080031a8 	cmpgeui	zero,at,198
 8002634:	08002dc0 	call	8002dc <__alt_mem_onchip_memory2_0+0x8002dc>
 8002638:	080031a8 	cmpgeui	zero,at,198
 800263c:	080031a8 	cmpgeui	zero,at,198
 8002640:	080031a8 	cmpgeui	zero,at,198
 8002644:	080031a8 	cmpgeui	zero,at,198
 8002648:	080031a8 	cmpgeui	zero,at,198
 800264c:	08002e04 	addi	zero,at,184
 8002650:	080031a8 	cmpgeui	zero,at,198
 8002654:	080031a8 	cmpgeui	zero,at,198
 8002658:	08002e3c 	xorhi	zero,at,184
 800265c:	080031a8 	cmpgeui	zero,at,198
 8002660:	080031a8 	cmpgeui	zero,at,198
 8002664:	080031a8 	cmpgeui	zero,at,198
 8002668:	080031a8 	cmpgeui	zero,at,198
 800266c:	080031a8 	cmpgeui	zero,at,198
 8002670:	080031a8 	cmpgeui	zero,at,198
 8002674:	080031a8 	cmpgeui	zero,at,198
 8002678:	080031a8 	cmpgeui	zero,at,198
 800267c:	080031a8 	cmpgeui	zero,at,198
 8002680:	080031a8 	cmpgeui	zero,at,198
 8002684:	08003078 	rdprs	zero,at,193
 8002688:	08003024 	muli	zero,at,192
 800268c:	08002d08 	cmpgei	zero,at,180
 8002690:	08002d08 	cmpgei	zero,at,180
 8002694:	08002d08 	cmpgei	zero,at,180
 8002698:	08003068 	cmpgeui	zero,at,193
 800269c:	08003024 	muli	zero,at,192
 80026a0:	080031a8 	cmpgeui	zero,at,198
 80026a4:	080031a8 	cmpgeui	zero,at,198
 80026a8:	08002f40 	call	8002f4 <__alt_mem_onchip_memory2_0+0x8002f4>
 80026ac:	080031a8 	cmpgeui	zero,at,198
 80026b0:	08002f58 	cmpnei	zero,at,189
 80026b4:	08002f98 	cmpnei	zero,at,190
 80026b8:	08002fd8 	cmpnei	zero,at,191
 80026bc:	08002ea4 	muli	zero,at,186
 80026c0:	080031a8 	cmpgeui	zero,at,198
 80026c4:	0800312c 	andhi	zero,at,196
 80026c8:	080031a8 	cmpgeui	zero,at,198
 80026cc:	08002eb4 	orhi	zero,at,186
 80026d0:	080031a8 	cmpgeui	zero,at,198
 80026d4:	080031a8 	cmpgeui	zero,at,198
 80026d8:	08002ef4 	orhi	zero,at,187
 80026dc:	d9412a17 	ldw	r5,1192(sp)
 80026e0:	8163c83a 	sub	r17,r16,r5
 80026e4:	003f7d06 	br	80024dc <__alt_data_end+0xfc0024dc>
 80026e8:	b809883a 	mov	r4,r23
 80026ec:	b00b883a 	mov	r5,r22
 80026f0:	80044d40 	call	80044d4 <__swsetup_r>
 80026f4:	10002d1e 	bne	r2,zero,80027ac <___vfprintf_internal_r+0x3f8>
 80026f8:	b0c0030b 	ldhu	r3,12(r22)
 80026fc:	01000284 	movi	r4,10
 8002700:	1805883a 	mov	r2,r3
 8002704:	1080068c 	andi	r2,r2,26
 8002708:	113f541e 	bne	r2,r4,800245c <__alt_data_end+0xfc00245c>
 800270c:	b080038b 	ldhu	r2,14(r22)
 8002710:	113fffcc 	andi	r4,r2,65535
 8002714:	2120001c 	xori	r4,r4,32768
 8002718:	21200004 	addi	r4,r4,-32768
 800271c:	203f4f16 	blt	r4,zero,800245c <__alt_data_end+0xfc00245c>
 8002720:	b2c01917 	ldw	r11,100(r22)
 8002724:	b2800717 	ldw	r10,28(r22)
 8002728:	b2400917 	ldw	r9,36(r22)
 800272c:	d9812a17 	ldw	r6,1192(sp)
 8002730:	d9c12d17 	ldw	r7,1204(sp)
 8002734:	02010004 	movi	r8,1024
 8002738:	18ffff4c 	andi	r3,r3,65533
 800273c:	d881078d 	sth	r2,1054(sp)
 8002740:	b809883a 	mov	r4,r23
 8002744:	d8800404 	addi	r2,sp,16
 8002748:	d9410404 	addi	r5,sp,1040
 800274c:	d8c1070d 	sth	r3,1052(sp)
 8002750:	dac11d15 	stw	r11,1140(sp)
 8002754:	da810b15 	stw	r10,1068(sp)
 8002758:	da410d15 	stw	r9,1076(sp)
 800275c:	d8810415 	stw	r2,1040(sp)
 8002760:	d8810815 	stw	r2,1056(sp)
 8002764:	da010615 	stw	r8,1048(sp)
 8002768:	da010915 	stw	r8,1060(sp)
 800276c:	d8010a15 	stw	zero,1064(sp)
 8002770:	80023b40 	call	80023b4 <___vfprintf_internal_r>
 8002774:	1021883a 	mov	r16,r2
 8002778:	10000416 	blt	r2,zero,800278c <___vfprintf_internal_r+0x3d8>
 800277c:	b809883a 	mov	r4,r23
 8002780:	d9410404 	addi	r5,sp,1040
 8002784:	8005f540 	call	8005f54 <_fflush_r>
 8002788:	1007301e 	bne	r2,zero,800444c <___vfprintf_internal_r+0x2098>
 800278c:	d881070b 	ldhu	r2,1052(sp)
 8002790:	1080100c 	andi	r2,r2,64
 8002794:	10000326 	beq	r2,zero,80027a4 <___vfprintf_internal_r+0x3f0>
 8002798:	b080030b 	ldhu	r2,12(r22)
 800279c:	10801014 	ori	r2,r2,64
 80027a0:	b080030d 	sth	r2,12(r22)
 80027a4:	8005883a 	mov	r2,r16
 80027a8:	00000106 	br	80027b0 <___vfprintf_internal_r+0x3fc>
 80027ac:	00bfffc4 	movi	r2,-1
 80027b0:	dfc14917 	ldw	ra,1316(sp)
 80027b4:	df014817 	ldw	fp,1312(sp)
 80027b8:	ddc14717 	ldw	r23,1308(sp)
 80027bc:	dd814617 	ldw	r22,1304(sp)
 80027c0:	dd414517 	ldw	r21,1300(sp)
 80027c4:	dd014417 	ldw	r20,1296(sp)
 80027c8:	dcc14317 	ldw	r19,1292(sp)
 80027cc:	dc814217 	ldw	r18,1288(sp)
 80027d0:	dc414117 	ldw	r17,1284(sp)
 80027d4:	dc014017 	ldw	r16,1280(sp)
 80027d8:	dec14a04 	addi	sp,sp,1320
 80027dc:	f800283a 	ret
 80027e0:	b809883a 	mov	r4,r23
 80027e4:	b00b883a 	mov	r5,r22
 80027e8:	d9811e04 	addi	r6,sp,1144
 80027ec:	80097f40 	call	80097f4 <__sprint_r>
 80027f0:	1000081e 	bne	r2,zero,8002814 <___vfprintf_internal_r+0x460>
 80027f4:	da000404 	addi	r8,sp,16
 80027f8:	003f4506 	br	8002510 <__alt_data_end+0xfc002510>
 80027fc:	d8812017 	ldw	r2,1152(sp)
 8002800:	10000426 	beq	r2,zero,8002814 <___vfprintf_internal_r+0x460>
 8002804:	b809883a 	mov	r4,r23
 8002808:	b00b883a 	mov	r5,r22
 800280c:	d9811e04 	addi	r6,sp,1144
 8002810:	80097f40 	call	80097f4 <__sprint_r>
 8002814:	b080030b 	ldhu	r2,12(r22)
 8002818:	1080100c 	andi	r2,r2,64
 800281c:	103fe31e 	bne	r2,zero,80027ac <__alt_data_end+0xfc0027ac>
 8002820:	d8812f17 	ldw	r2,1212(sp)
 8002824:	003fe206 	br	80027b0 <__alt_data_end+0xfc0027b0>
 8002828:	b809883a 	mov	r4,r23
 800282c:	80065100 	call	8006510 <__sinit>
 8002830:	003ef806 	br	8002414 <__alt_data_end+0xfc002414>
 8002834:	e005883a 	mov	r2,fp
 8002838:	9cc00114 	ori	r19,r19,4
 800283c:	e4000007 	ldb	r16,0(fp)
 8002840:	003f4406 	br	8002554 <__alt_data_end+0xfc002554>
 8002844:	e4000007 	ldb	r16,0(fp)
 8002848:	01000a84 	movi	r4,42
 800284c:	e0800044 	addi	r2,fp,1
 8002850:	8106f626 	beq	r16,r4,800442c <___vfprintf_internal_r+0x2078>
 8002854:	857ff404 	addi	r21,r16,-48
 8002858:	1039883a 	mov	fp,r2
 800285c:	0013883a 	mov	r9,zero
 8002860:	957f3d36 	bltu	r18,r21,8002558 <__alt_data_end+0xfc002558>
 8002864:	0009883a 	mov	r4,zero
 8002868:	01400284 	movi	r5,10
 800286c:	800c3280 	call	800c328 <__mulsi3>
 8002870:	e4000007 	ldb	r16,0(fp)
 8002874:	a889883a 	add	r4,r21,r2
 8002878:	e7000044 	addi	fp,fp,1
 800287c:	857ff404 	addi	r21,r16,-48
 8002880:	957ff92e 	bgeu	r18,r21,8002868 <__alt_data_end+0xfc002868>
 8002884:	2013883a 	mov	r9,r4
 8002888:	203f330e 	bge	r4,zero,8002558 <__alt_data_end+0xfc002558>
 800288c:	027fffc4 	movi	r9,-1
 8002890:	003f3106 	br	8002558 <__alt_data_end+0xfc002558>
 8002894:	9cc02014 	ori	r19,r19,128
 8002898:	e005883a 	mov	r2,fp
 800289c:	e4000007 	ldb	r16,0(fp)
 80028a0:	003f2c06 	br	8002554 <__alt_data_end+0xfc002554>
 80028a4:	857ff404 	addi	r21,r16,-48
 80028a8:	d8012e15 	stw	zero,1208(sp)
 80028ac:	e021883a 	mov	r16,fp
 80028b0:	0009883a 	mov	r4,zero
 80028b4:	da412c15 	stw	r9,1200(sp)
 80028b8:	01400284 	movi	r5,10
 80028bc:	800c3280 	call	800c328 <__mulsi3>
 80028c0:	81400007 	ldb	r5,0(r16)
 80028c4:	1549883a 	add	r4,r2,r21
 80028c8:	e7000044 	addi	fp,fp,1
 80028cc:	2d7ff404 	addi	r21,r5,-48
 80028d0:	e021883a 	mov	r16,fp
 80028d4:	957ff82e 	bgeu	r18,r21,80028b8 <__alt_data_end+0xfc0028b8>
 80028d8:	2821883a 	mov	r16,r5
 80028dc:	d9012e15 	stw	r4,1208(sp)
 80028e0:	da412c17 	ldw	r9,1200(sp)
 80028e4:	003f1c06 	br	8002558 <__alt_data_end+0xfc002558>
 80028e8:	da012a17 	ldw	r8,1192(sp)
 80028ec:	df012a15 	stw	fp,1192(sp)
 80028f0:	9839883a 	mov	fp,r19
 80028f4:	dcc12b03 	ldbu	r19,1196(sp)
 80028f8:	e7000414 	ori	fp,fp,16
 80028fc:	e080080c 	andi	r2,fp,32
 8002900:	dcc12785 	stb	r19,1182(sp)
 8002904:	d8c12d17 	ldw	r3,1204(sp)
 8002908:	1001ce26 	beq	r2,zero,8003044 <___vfprintf_internal_r+0xc90>
 800290c:	d9012d17 	ldw	r4,1204(sp)
 8002910:	18800117 	ldw	r2,4(r3)
 8002914:	1c800017 	ldw	r18,0(r3)
 8002918:	21000204 	addi	r4,r4,8
 800291c:	d9012d15 	stw	r4,1204(sp)
 8002920:	102b883a 	mov	r21,r2
 8002924:	10044916 	blt	r2,zero,8003a4c <___vfprintf_internal_r+0x1698>
 8002928:	dcc12783 	ldbu	r19,1182(sp)
 800292c:	da413215 	stw	r9,1224(sp)
 8002930:	00800044 	movi	r2,1
 8002934:	9546b03a 	or	r3,r18,r21
 8002938:	48000216 	blt	r9,zero,8002944 <___vfprintf_internal_r+0x590>
 800293c:	013fdfc4 	movi	r4,-129
 8002940:	e138703a 	and	fp,fp,r4
 8002944:	1802251e 	bne	r3,zero,80031dc <___vfprintf_internal_r+0xe28>
 8002948:	48031726 	beq	r9,zero,80035a8 <___vfprintf_internal_r+0x11f4>
 800294c:	10803fcc 	andi	r2,r2,255
 8002950:	00c00044 	movi	r3,1
 8002954:	10c24526 	beq	r2,r3,800326c <___vfprintf_internal_r+0xeb8>
 8002958:	00c00084 	movi	r3,2
 800295c:	10c33426 	beq	r2,r3,8003630 <___vfprintf_internal_r+0x127c>
 8002960:	d8c10e04 	addi	r3,sp,1080
 8002964:	9008d0fa 	srli	r4,r18,3
 8002968:	a80a977a 	slli	r5,r21,29
 800296c:	a82ad0fa 	srli	r21,r21,3
 8002970:	948001cc 	andi	r18,r18,7
 8002974:	90800c04 	addi	r2,r18,48
 8002978:	18ffffc4 	addi	r3,r3,-1
 800297c:	2924b03a 	or	r18,r5,r4
 8002980:	18800005 	stb	r2,0(r3)
 8002984:	9548b03a 	or	r4,r18,r21
 8002988:	203ff61e 	bne	r4,zero,8002964 <__alt_data_end+0xfc002964>
 800298c:	e100004c 	andi	r4,fp,1
 8002990:	d8c13115 	stw	r3,1220(sp)
 8002994:	20039a1e 	bne	r4,zero,8003800 <___vfprintf_internal_r+0x144c>
 8002998:	d8812817 	ldw	r2,1184(sp)
 800299c:	10e3c83a 	sub	r17,r2,r3
 80029a0:	8805883a 	mov	r2,r17
 80029a4:	8a40010e 	bge	r17,r9,80029ac <___vfprintf_internal_r+0x5f8>
 80029a8:	4805883a 	mov	r2,r9
 80029ac:	d8812b15 	stw	r2,1196(sp)
 80029b0:	d8013415 	stw	zero,1232(sp)
 80029b4:	98803fcc 	andi	r2,r19,255
 80029b8:	1080201c 	xori	r2,r2,128
 80029bc:	10bfe004 	addi	r2,r2,-128
 80029c0:	10000326 	beq	r2,zero,80029d0 <___vfprintf_internal_r+0x61c>
 80029c4:	d8c12b17 	ldw	r3,1196(sp)
 80029c8:	18c00044 	addi	r3,r3,1
 80029cc:	d8c12b15 	stw	r3,1196(sp)
 80029d0:	e0c0008c 	andi	r3,fp,2
 80029d4:	d8c12c15 	stw	r3,1200(sp)
 80029d8:	18000326 	beq	r3,zero,80029e8 <___vfprintf_internal_r+0x634>
 80029dc:	d8c12b17 	ldw	r3,1196(sp)
 80029e0:	18c00084 	addi	r3,r3,2
 80029e4:	d8c12b15 	stw	r3,1196(sp)
 80029e8:	e0c0210c 	andi	r3,fp,132
 80029ec:	d8c13015 	stw	r3,1216(sp)
 80029f0:	1801f81e 	bne	r3,zero,80031d4 <___vfprintf_internal_r+0xe20>
 80029f4:	d9012e17 	ldw	r4,1208(sp)
 80029f8:	d8c12b17 	ldw	r3,1196(sp)
 80029fc:	20ebc83a 	sub	r21,r4,r3
 8002a00:	0541f40e 	bge	zero,r21,80031d4 <___vfprintf_internal_r+0xe20>
 8002a04:	02400404 	movi	r9,16
 8002a08:	d8c12017 	ldw	r3,1152(sp)
 8002a0c:	d8811f17 	ldw	r2,1148(sp)
 8002a10:	4d45750e 	bge	r9,r21,8003fe8 <___vfprintf_internal_r+0x1c34>
 8002a14:	01420074 	movhi	r5,2049
 8002a18:	2946ce84 	addi	r5,r5,6970
 8002a1c:	d9413615 	stw	r5,1240(sp)
 8002a20:	4827883a 	mov	r19,r9
 8002a24:	048001c4 	movi	r18,7
 8002a28:	00000306 	br	8002a38 <___vfprintf_internal_r+0x684>
 8002a2c:	ad7ffc04 	addi	r21,r21,-16
 8002a30:	42000204 	addi	r8,r8,8
 8002a34:	9d40130e 	bge	r19,r21,8002a84 <___vfprintf_internal_r+0x6d0>
 8002a38:	01020074 	movhi	r4,2049
 8002a3c:	18c00404 	addi	r3,r3,16
 8002a40:	10800044 	addi	r2,r2,1
 8002a44:	2106ce84 	addi	r4,r4,6970
 8002a48:	41000015 	stw	r4,0(r8)
 8002a4c:	44c00115 	stw	r19,4(r8)
 8002a50:	d8c12015 	stw	r3,1152(sp)
 8002a54:	d8811f15 	stw	r2,1148(sp)
 8002a58:	90bff40e 	bge	r18,r2,8002a2c <__alt_data_end+0xfc002a2c>
 8002a5c:	b809883a 	mov	r4,r23
 8002a60:	b00b883a 	mov	r5,r22
 8002a64:	d9811e04 	addi	r6,sp,1144
 8002a68:	80097f40 	call	80097f4 <__sprint_r>
 8002a6c:	103f691e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 8002a70:	ad7ffc04 	addi	r21,r21,-16
 8002a74:	d8c12017 	ldw	r3,1152(sp)
 8002a78:	d8811f17 	ldw	r2,1148(sp)
 8002a7c:	da000404 	addi	r8,sp,16
 8002a80:	9d7fed16 	blt	r19,r21,8002a38 <__alt_data_end+0xfc002a38>
 8002a84:	d9413617 	ldw	r5,1240(sp)
 8002a88:	a8c7883a 	add	r3,r21,r3
 8002a8c:	10800044 	addi	r2,r2,1
 8002a90:	41400015 	stw	r5,0(r8)
 8002a94:	45400115 	stw	r21,4(r8)
 8002a98:	d8c12015 	stw	r3,1152(sp)
 8002a9c:	d8811f15 	stw	r2,1148(sp)
 8002aa0:	010001c4 	movi	r4,7
 8002aa4:	20832b16 	blt	r4,r2,8003754 <___vfprintf_internal_r+0x13a0>
 8002aa8:	d8812787 	ldb	r2,1182(sp)
 8002aac:	42000204 	addi	r8,r8,8
 8002ab0:	10000c26 	beq	r2,zero,8002ae4 <___vfprintf_internal_r+0x730>
 8002ab4:	d8811f17 	ldw	r2,1148(sp)
 8002ab8:	d9012784 	addi	r4,sp,1182
 8002abc:	18c00044 	addi	r3,r3,1
 8002ac0:	10800044 	addi	r2,r2,1
 8002ac4:	41000015 	stw	r4,0(r8)
 8002ac8:	01000044 	movi	r4,1
 8002acc:	41000115 	stw	r4,4(r8)
 8002ad0:	d8c12015 	stw	r3,1152(sp)
 8002ad4:	d8811f15 	stw	r2,1148(sp)
 8002ad8:	010001c4 	movi	r4,7
 8002adc:	2082c416 	blt	r4,r2,80035f0 <___vfprintf_internal_r+0x123c>
 8002ae0:	42000204 	addi	r8,r8,8
 8002ae4:	d8812c17 	ldw	r2,1200(sp)
 8002ae8:	10000c26 	beq	r2,zero,8002b1c <___vfprintf_internal_r+0x768>
 8002aec:	d8811f17 	ldw	r2,1148(sp)
 8002af0:	d9012704 	addi	r4,sp,1180
 8002af4:	18c00084 	addi	r3,r3,2
 8002af8:	10800044 	addi	r2,r2,1
 8002afc:	41000015 	stw	r4,0(r8)
 8002b00:	01000084 	movi	r4,2
 8002b04:	41000115 	stw	r4,4(r8)
 8002b08:	d8c12015 	stw	r3,1152(sp)
 8002b0c:	d8811f15 	stw	r2,1148(sp)
 8002b10:	010001c4 	movi	r4,7
 8002b14:	2082be16 	blt	r4,r2,8003610 <___vfprintf_internal_r+0x125c>
 8002b18:	42000204 	addi	r8,r8,8
 8002b1c:	d9013017 	ldw	r4,1216(sp)
 8002b20:	00802004 	movi	r2,128
 8002b24:	20822026 	beq	r4,r2,80033a8 <___vfprintf_internal_r+0xff4>
 8002b28:	d9413217 	ldw	r5,1224(sp)
 8002b2c:	2c67c83a 	sub	r19,r5,r17
 8002b30:	04c0260e 	bge	zero,r19,8002bcc <___vfprintf_internal_r+0x818>
 8002b34:	05400404 	movi	r21,16
 8002b38:	d8811f17 	ldw	r2,1148(sp)
 8002b3c:	acc4720e 	bge	r21,r19,8003d08 <___vfprintf_internal_r+0x1954>
 8002b40:	01420074 	movhi	r5,2049
 8002b44:	2946ca84 	addi	r5,r5,6954
 8002b48:	d9412c15 	stw	r5,1200(sp)
 8002b4c:	048001c4 	movi	r18,7
 8002b50:	00000306 	br	8002b60 <___vfprintf_internal_r+0x7ac>
 8002b54:	9cfffc04 	addi	r19,r19,-16
 8002b58:	42000204 	addi	r8,r8,8
 8002b5c:	acc0110e 	bge	r21,r19,8002ba4 <___vfprintf_internal_r+0x7f0>
 8002b60:	18c00404 	addi	r3,r3,16
 8002b64:	10800044 	addi	r2,r2,1
 8002b68:	45000015 	stw	r20,0(r8)
 8002b6c:	45400115 	stw	r21,4(r8)
 8002b70:	d8c12015 	stw	r3,1152(sp)
 8002b74:	d8811f15 	stw	r2,1148(sp)
 8002b78:	90bff60e 	bge	r18,r2,8002b54 <__alt_data_end+0xfc002b54>
 8002b7c:	b809883a 	mov	r4,r23
 8002b80:	b00b883a 	mov	r5,r22
 8002b84:	d9811e04 	addi	r6,sp,1144
 8002b88:	80097f40 	call	80097f4 <__sprint_r>
 8002b8c:	103f211e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 8002b90:	9cfffc04 	addi	r19,r19,-16
 8002b94:	d8c12017 	ldw	r3,1152(sp)
 8002b98:	d8811f17 	ldw	r2,1148(sp)
 8002b9c:	da000404 	addi	r8,sp,16
 8002ba0:	acffef16 	blt	r21,r19,8002b60 <__alt_data_end+0xfc002b60>
 8002ba4:	d9012c17 	ldw	r4,1200(sp)
 8002ba8:	1cc7883a 	add	r3,r3,r19
 8002bac:	10800044 	addi	r2,r2,1
 8002bb0:	41000015 	stw	r4,0(r8)
 8002bb4:	44c00115 	stw	r19,4(r8)
 8002bb8:	d8c12015 	stw	r3,1152(sp)
 8002bbc:	d8811f15 	stw	r2,1148(sp)
 8002bc0:	010001c4 	movi	r4,7
 8002bc4:	20828216 	blt	r4,r2,80035d0 <___vfprintf_internal_r+0x121c>
 8002bc8:	42000204 	addi	r8,r8,8
 8002bcc:	e080400c 	andi	r2,fp,256
 8002bd0:	1001ac1e 	bne	r2,zero,8003284 <___vfprintf_internal_r+0xed0>
 8002bd4:	d8811f17 	ldw	r2,1148(sp)
 8002bd8:	d9413117 	ldw	r5,1220(sp)
 8002bdc:	1c47883a 	add	r3,r3,r17
 8002be0:	10800044 	addi	r2,r2,1
 8002be4:	41400015 	stw	r5,0(r8)
 8002be8:	44400115 	stw	r17,4(r8)
 8002bec:	d8c12015 	stw	r3,1152(sp)
 8002bf0:	d8811f15 	stw	r2,1148(sp)
 8002bf4:	010001c4 	movi	r4,7
 8002bf8:	20825d16 	blt	r4,r2,8003570 <___vfprintf_internal_r+0x11bc>
 8002bfc:	42000204 	addi	r8,r8,8
 8002c00:	e080010c 	andi	r2,fp,4
 8002c04:	10003126 	beq	r2,zero,8002ccc <___vfprintf_internal_r+0x918>
 8002c08:	d8812e17 	ldw	r2,1208(sp)
 8002c0c:	d9012b17 	ldw	r4,1196(sp)
 8002c10:	1121c83a 	sub	r16,r2,r4
 8002c14:	04002d0e 	bge	zero,r16,8002ccc <___vfprintf_internal_r+0x918>
 8002c18:	04400404 	movi	r17,16
 8002c1c:	d8811f17 	ldw	r2,1148(sp)
 8002c20:	8c05340e 	bge	r17,r16,80040f4 <___vfprintf_internal_r+0x1d40>
 8002c24:	01020074 	movhi	r4,2049
 8002c28:	2106ce84 	addi	r4,r4,6970
 8002c2c:	d9013615 	stw	r4,1240(sp)
 8002c30:	048001c4 	movi	r18,7
 8002c34:	00000306 	br	8002c44 <___vfprintf_internal_r+0x890>
 8002c38:	843ffc04 	addi	r16,r16,-16
 8002c3c:	42000204 	addi	r8,r8,8
 8002c40:	8c00130e 	bge	r17,r16,8002c90 <___vfprintf_internal_r+0x8dc>
 8002c44:	01420074 	movhi	r5,2049
 8002c48:	18c00404 	addi	r3,r3,16
 8002c4c:	10800044 	addi	r2,r2,1
 8002c50:	2946ce84 	addi	r5,r5,6970
 8002c54:	41400015 	stw	r5,0(r8)
 8002c58:	44400115 	stw	r17,4(r8)
 8002c5c:	d8c12015 	stw	r3,1152(sp)
 8002c60:	d8811f15 	stw	r2,1148(sp)
 8002c64:	90bff40e 	bge	r18,r2,8002c38 <__alt_data_end+0xfc002c38>
 8002c68:	b809883a 	mov	r4,r23
 8002c6c:	b00b883a 	mov	r5,r22
 8002c70:	d9811e04 	addi	r6,sp,1144
 8002c74:	80097f40 	call	80097f4 <__sprint_r>
 8002c78:	103ee61e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 8002c7c:	843ffc04 	addi	r16,r16,-16
 8002c80:	d8c12017 	ldw	r3,1152(sp)
 8002c84:	d8811f17 	ldw	r2,1148(sp)
 8002c88:	da000404 	addi	r8,sp,16
 8002c8c:	8c3fed16 	blt	r17,r16,8002c44 <__alt_data_end+0xfc002c44>
 8002c90:	d9013617 	ldw	r4,1240(sp)
 8002c94:	1c07883a 	add	r3,r3,r16
 8002c98:	10800044 	addi	r2,r2,1
 8002c9c:	41000015 	stw	r4,0(r8)
 8002ca0:	44000115 	stw	r16,4(r8)
 8002ca4:	d8c12015 	stw	r3,1152(sp)
 8002ca8:	d8811f15 	stw	r2,1148(sp)
 8002cac:	010001c4 	movi	r4,7
 8002cb0:	2080060e 	bge	r4,r2,8002ccc <___vfprintf_internal_r+0x918>
 8002cb4:	b809883a 	mov	r4,r23
 8002cb8:	b00b883a 	mov	r5,r22
 8002cbc:	d9811e04 	addi	r6,sp,1144
 8002cc0:	80097f40 	call	80097f4 <__sprint_r>
 8002cc4:	103ed31e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 8002cc8:	d8c12017 	ldw	r3,1152(sp)
 8002ccc:	df012b17 	ldw	fp,1196(sp)
 8002cd0:	d9412e17 	ldw	r5,1208(sp)
 8002cd4:	e140010e 	bge	fp,r5,8002cdc <___vfprintf_internal_r+0x928>
 8002cd8:	2839883a 	mov	fp,r5
 8002cdc:	d8812f17 	ldw	r2,1212(sp)
 8002ce0:	1705883a 	add	r2,r2,fp
 8002ce4:	d8812f15 	stw	r2,1212(sp)
 8002ce8:	1802291e 	bne	r3,zero,8003590 <___vfprintf_internal_r+0x11dc>
 8002cec:	d8c12a17 	ldw	r3,1192(sp)
 8002cf0:	d8011f15 	stw	zero,1148(sp)
 8002cf4:	da000404 	addi	r8,sp,16
 8002cf8:	18800007 	ldb	r2,0(r3)
 8002cfc:	103ded1e 	bne	r2,zero,80024b4 <__alt_data_end+0xfc0024b4>
 8002d00:	dc012a17 	ldw	r16,1192(sp)
 8002d04:	003e0506 	br	800251c <__alt_data_end+0xfc00251c>
 8002d08:	d9012d17 	ldw	r4,1204(sp)
 8002d0c:	d9412d17 	ldw	r5,1204(sp)
 8002d10:	da012a17 	ldw	r8,1192(sp)
 8002d14:	21000017 	ldw	r4,0(r4)
 8002d18:	29400117 	ldw	r5,4(r5)
 8002d1c:	df012a15 	stw	fp,1192(sp)
 8002d20:	9839883a 	mov	fp,r19
 8002d24:	dcc12b03 	ldbu	r19,1196(sp)
 8002d28:	d9013715 	stw	r4,1244(sp)
 8002d2c:	d9413915 	stw	r5,1252(sp)
 8002d30:	da013f15 	stw	r8,1276(sp)
 8002d34:	da413e15 	stw	r9,1272(sp)
 8002d38:	dcc12785 	stb	r19,1182(sp)
 8002d3c:	80094500 	call	8009450 <__fpclassifyd>
 8002d40:	d8c12d17 	ldw	r3,1204(sp)
 8002d44:	04400044 	movi	r17,1
 8002d48:	da013f17 	ldw	r8,1276(sp)
 8002d4c:	1c800204 	addi	r18,r3,8
 8002d50:	da413e17 	ldw	r9,1272(sp)
 8002d54:	d9013717 	ldw	r4,1244(sp)
 8002d58:	d9413917 	ldw	r5,1252(sp)
 8002d5c:	1443451e 	bne	r2,r17,8003a74 <___vfprintf_internal_r+0x16c0>
 8002d60:	000d883a 	mov	r6,zero
 8002d64:	000f883a 	mov	r7,zero
 8002d68:	800d6d00 	call	800d6d0 <__ledf2>
 8002d6c:	da013f17 	ldw	r8,1276(sp)
 8002d70:	1004fe16 	blt	r2,zero,800416c <___vfprintf_internal_r+0x1db8>
 8002d74:	dcc12783 	ldbu	r19,1182(sp)
 8002d78:	008011c4 	movi	r2,71
 8002d7c:	14045d0e 	bge	r2,r16,8003ef4 <___vfprintf_internal_r+0x1b40>
 8002d80:	01420074 	movhi	r5,2049
 8002d84:	2946bb04 	addi	r5,r5,6892
 8002d88:	d9413115 	stw	r5,1220(sp)
 8002d8c:	00c000c4 	movi	r3,3
 8002d90:	00bfdfc4 	movi	r2,-129
 8002d94:	d8c12b15 	stw	r3,1196(sp)
 8002d98:	e0b8703a 	and	fp,fp,r2
 8002d9c:	dc812d15 	stw	r18,1204(sp)
 8002da0:	1823883a 	mov	r17,r3
 8002da4:	d8013215 	stw	zero,1224(sp)
 8002da8:	d8013415 	stw	zero,1232(sp)
 8002dac:	003f0106 	br	80029b4 <__alt_data_end+0xfc0029b4>
 8002db0:	9cc00214 	ori	r19,r19,8
 8002db4:	e005883a 	mov	r2,fp
 8002db8:	e4000007 	ldb	r16,0(fp)
 8002dbc:	003de506 	br	8002554 <__alt_data_end+0xfc002554>
 8002dc0:	da012a17 	ldw	r8,1192(sp)
 8002dc4:	df012a15 	stw	fp,1192(sp)
 8002dc8:	9f000414 	ori	fp,r19,16
 8002dcc:	e0c0080c 	andi	r3,fp,32
 8002dd0:	d8812d17 	ldw	r2,1204(sp)
 8002dd4:	18007626 	beq	r3,zero,8002fb0 <___vfprintf_internal_r+0xbfc>
 8002dd8:	d9412d17 	ldw	r5,1204(sp)
 8002ddc:	14800017 	ldw	r18,0(r2)
 8002de0:	15400117 	ldw	r21,4(r2)
 8002de4:	29400204 	addi	r5,r5,8
 8002de8:	d9412d15 	stw	r5,1204(sp)
 8002dec:	0005883a 	mov	r2,zero
 8002df0:	9546b03a 	or	r3,r18,r21
 8002df4:	d8012785 	stb	zero,1182(sp)
 8002df8:	da413215 	stw	r9,1224(sp)
 8002dfc:	0027883a 	mov	r19,zero
 8002e00:	003ecd06 	br	8002938 <__alt_data_end+0xfc002938>
 8002e04:	da012a17 	ldw	r8,1192(sp)
 8002e08:	df012a15 	stw	fp,1192(sp)
 8002e0c:	9f000414 	ori	fp,r19,16
 8002e10:	e0c0080c 	andi	r3,fp,32
 8002e14:	d8812d17 	ldw	r2,1204(sp)
 8002e18:	18002c26 	beq	r3,zero,8002ecc <___vfprintf_internal_r+0xb18>
 8002e1c:	d9012d17 	ldw	r4,1204(sp)
 8002e20:	14800017 	ldw	r18,0(r2)
 8002e24:	15400117 	ldw	r21,4(r2)
 8002e28:	21000204 	addi	r4,r4,8
 8002e2c:	d9012d15 	stw	r4,1204(sp)
 8002e30:	00800044 	movi	r2,1
 8002e34:	9546b03a 	or	r3,r18,r21
 8002e38:	003fee06 	br	8002df4 <__alt_data_end+0xfc002df4>
 8002e3c:	da012a17 	ldw	r8,1192(sp)
 8002e40:	df012a15 	stw	fp,1192(sp)
 8002e44:	9839883a 	mov	fp,r19
 8002e48:	dcc12b03 	ldbu	r19,1196(sp)
 8002e4c:	01420074 	movhi	r5,2049
 8002e50:	2946be04 	addi	r5,r5,6904
 8002e54:	dcc12785 	stb	r19,1182(sp)
 8002e58:	d9413b15 	stw	r5,1260(sp)
 8002e5c:	e0c0080c 	andi	r3,fp,32
 8002e60:	d8812d17 	ldw	r2,1204(sp)
 8002e64:	18002e26 	beq	r3,zero,8002f20 <___vfprintf_internal_r+0xb6c>
 8002e68:	d9412d17 	ldw	r5,1204(sp)
 8002e6c:	14800017 	ldw	r18,0(r2)
 8002e70:	15400117 	ldw	r21,4(r2)
 8002e74:	29400204 	addi	r5,r5,8
 8002e78:	d9412d15 	stw	r5,1204(sp)
 8002e7c:	e080004c 	andi	r2,fp,1
 8002e80:	10025c26 	beq	r2,zero,80037f4 <___vfprintf_internal_r+0x1440>
 8002e84:	9546b03a 	or	r3,r18,r21
 8002e88:	18038f26 	beq	r3,zero,8003cc8 <___vfprintf_internal_r+0x1914>
 8002e8c:	00800c04 	movi	r2,48
 8002e90:	d8812705 	stb	r2,1180(sp)
 8002e94:	dc012745 	stb	r16,1181(sp)
 8002e98:	e7000094 	ori	fp,fp,2
 8002e9c:	00800084 	movi	r2,2
 8002ea0:	003fd406 	br	8002df4 <__alt_data_end+0xfc002df4>
 8002ea4:	9cc00814 	ori	r19,r19,32
 8002ea8:	e005883a 	mov	r2,fp
 8002eac:	e4000007 	ldb	r16,0(fp)
 8002eb0:	003da806 	br	8002554 <__alt_data_end+0xfc002554>
 8002eb4:	da012a17 	ldw	r8,1192(sp)
 8002eb8:	df012a15 	stw	fp,1192(sp)
 8002ebc:	9839883a 	mov	fp,r19
 8002ec0:	e0c0080c 	andi	r3,fp,32
 8002ec4:	d8812d17 	ldw	r2,1204(sp)
 8002ec8:	183fd41e 	bne	r3,zero,8002e1c <__alt_data_end+0xfc002e1c>
 8002ecc:	e0c0040c 	andi	r3,fp,16
 8002ed0:	18035f26 	beq	r3,zero,8003c50 <___vfprintf_internal_r+0x189c>
 8002ed4:	d9412d17 	ldw	r5,1204(sp)
 8002ed8:	14800017 	ldw	r18,0(r2)
 8002edc:	002b883a 	mov	r21,zero
 8002ee0:	29400104 	addi	r5,r5,4
 8002ee4:	d9412d15 	stw	r5,1204(sp)
 8002ee8:	00800044 	movi	r2,1
 8002eec:	9007883a 	mov	r3,r18
 8002ef0:	003fc006 	br	8002df4 <__alt_data_end+0xfc002df4>
 8002ef4:	da012a17 	ldw	r8,1192(sp)
 8002ef8:	df012a15 	stw	fp,1192(sp)
 8002efc:	9839883a 	mov	fp,r19
 8002f00:	dcc12b03 	ldbu	r19,1196(sp)
 8002f04:	01020074 	movhi	r4,2049
 8002f08:	2106c304 	addi	r4,r4,6924
 8002f0c:	d9013b15 	stw	r4,1260(sp)
 8002f10:	dcc12785 	stb	r19,1182(sp)
 8002f14:	e0c0080c 	andi	r3,fp,32
 8002f18:	d8812d17 	ldw	r2,1204(sp)
 8002f1c:	183fd21e 	bne	r3,zero,8002e68 <__alt_data_end+0xfc002e68>
 8002f20:	e0c0040c 	andi	r3,fp,16
 8002f24:	18035426 	beq	r3,zero,8003c78 <___vfprintf_internal_r+0x18c4>
 8002f28:	d8c12d17 	ldw	r3,1204(sp)
 8002f2c:	14800017 	ldw	r18,0(r2)
 8002f30:	002b883a 	mov	r21,zero
 8002f34:	18c00104 	addi	r3,r3,4
 8002f38:	d8c12d15 	stw	r3,1204(sp)
 8002f3c:	003fcf06 	br	8002e7c <__alt_data_end+0xfc002e7c>
 8002f40:	e4000007 	ldb	r16,0(fp)
 8002f44:	00801b04 	movi	r2,108
 8002f48:	8083f726 	beq	r16,r2,8003f28 <___vfprintf_internal_r+0x1b74>
 8002f4c:	9cc00414 	ori	r19,r19,16
 8002f50:	e005883a 	mov	r2,fp
 8002f54:	003d7f06 	br	8002554 <__alt_data_end+0xfc002554>
 8002f58:	da012a17 	ldw	r8,1192(sp)
 8002f5c:	df012a15 	stw	fp,1192(sp)
 8002f60:	9839883a 	mov	fp,r19
 8002f64:	dcc12b03 	ldbu	r19,1196(sp)
 8002f68:	e080080c 	andi	r2,fp,32
 8002f6c:	dcc12785 	stb	r19,1182(sp)
 8002f70:	10032226 	beq	r2,zero,8003bfc <___vfprintf_internal_r+0x1848>
 8002f74:	d9412d17 	ldw	r5,1204(sp)
 8002f78:	d9012f17 	ldw	r4,1212(sp)
 8002f7c:	28800017 	ldw	r2,0(r5)
 8002f80:	2007d7fa 	srai	r3,r4,31
 8002f84:	29400104 	addi	r5,r5,4
 8002f88:	d9412d15 	stw	r5,1204(sp)
 8002f8c:	11000015 	stw	r4,0(r2)
 8002f90:	10c00115 	stw	r3,4(r2)
 8002f94:	003d4406 	br	80024a8 <__alt_data_end+0xfc0024a8>
 8002f98:	da012a17 	ldw	r8,1192(sp)
 8002f9c:	df012a15 	stw	fp,1192(sp)
 8002fa0:	9839883a 	mov	fp,r19
 8002fa4:	e0c0080c 	andi	r3,fp,32
 8002fa8:	d8812d17 	ldw	r2,1204(sp)
 8002fac:	183f8a1e 	bne	r3,zero,8002dd8 <__alt_data_end+0xfc002dd8>
 8002fb0:	e0c0040c 	andi	r3,fp,16
 8002fb4:	18031c26 	beq	r3,zero,8003c28 <___vfprintf_internal_r+0x1874>
 8002fb8:	14800017 	ldw	r18,0(r2)
 8002fbc:	d8812d17 	ldw	r2,1204(sp)
 8002fc0:	002b883a 	mov	r21,zero
 8002fc4:	9007883a 	mov	r3,r18
 8002fc8:	10800104 	addi	r2,r2,4
 8002fcc:	d8812d15 	stw	r2,1204(sp)
 8002fd0:	0005883a 	mov	r2,zero
 8002fd4:	003f8706 	br	8002df4 <__alt_data_end+0xfc002df4>
 8002fd8:	d9412d17 	ldw	r5,1204(sp)
 8002fdc:	00800c04 	movi	r2,48
 8002fe0:	d8812705 	stb	r2,1180(sp)
 8002fe4:	2c800017 	ldw	r18,0(r5)
 8002fe8:	00801e04 	movi	r2,120
 8002fec:	d8812745 	stb	r2,1181(sp)
 8002ff0:	00820074 	movhi	r2,2049
 8002ff4:	1086c304 	addi	r2,r2,6924
 8002ff8:	29400104 	addi	r5,r5,4
 8002ffc:	da012a17 	ldw	r8,1192(sp)
 8003000:	d8813b15 	stw	r2,1260(sp)
 8003004:	df012a15 	stw	fp,1192(sp)
 8003008:	002b883a 	mov	r21,zero
 800300c:	9f000094 	ori	fp,r19,2
 8003010:	d9412d15 	stw	r5,1204(sp)
 8003014:	00800084 	movi	r2,2
 8003018:	04001e04 	movi	r16,120
 800301c:	9007883a 	mov	r3,r18
 8003020:	003f7406 	br	8002df4 <__alt_data_end+0xfc002df4>
 8003024:	da012a17 	ldw	r8,1192(sp)
 8003028:	df012a15 	stw	fp,1192(sp)
 800302c:	9839883a 	mov	fp,r19
 8003030:	dcc12b03 	ldbu	r19,1196(sp)
 8003034:	e080080c 	andi	r2,fp,32
 8003038:	d8c12d17 	ldw	r3,1204(sp)
 800303c:	dcc12785 	stb	r19,1182(sp)
 8003040:	103e321e 	bne	r2,zero,800290c <__alt_data_end+0xfc00290c>
 8003044:	e080040c 	andi	r2,fp,16
 8003048:	10031326 	beq	r2,zero,8003c98 <___vfprintf_internal_r+0x18e4>
 800304c:	1c800017 	ldw	r18,0(r3)
 8003050:	d9412d17 	ldw	r5,1204(sp)
 8003054:	902bd7fa 	srai	r21,r18,31
 8003058:	29400104 	addi	r5,r5,4
 800305c:	d9412d15 	stw	r5,1204(sp)
 8003060:	a805883a 	mov	r2,r21
 8003064:	003e2f06 	br	8002924 <__alt_data_end+0xfc002924>
 8003068:	9cc01014 	ori	r19,r19,64
 800306c:	e005883a 	mov	r2,fp
 8003070:	e4000007 	ldb	r16,0(fp)
 8003074:	003d3706 	br	8002554 <__alt_data_end+0xfc002554>
 8003078:	d8c12d17 	ldw	r3,1204(sp)
 800307c:	d9012d17 	ldw	r4,1204(sp)
 8003080:	da012a17 	ldw	r8,1192(sp)
 8003084:	18800017 	ldw	r2,0(r3)
 8003088:	21000104 	addi	r4,r4,4
 800308c:	00c00044 	movi	r3,1
 8003090:	df012a15 	stw	fp,1192(sp)
 8003094:	d8c12b15 	stw	r3,1196(sp)
 8003098:	9839883a 	mov	fp,r19
 800309c:	d8012785 	stb	zero,1182(sp)
 80030a0:	d8810405 	stb	r2,1040(sp)
 80030a4:	d9012d15 	stw	r4,1204(sp)
 80030a8:	1823883a 	mov	r17,r3
 80030ac:	d8c10404 	addi	r3,sp,1040
 80030b0:	d8013215 	stw	zero,1224(sp)
 80030b4:	d8013415 	stw	zero,1232(sp)
 80030b8:	d8c13115 	stw	r3,1220(sp)
 80030bc:	0005883a 	mov	r2,zero
 80030c0:	003e4306 	br	80029d0 <__alt_data_end+0xfc0029d0>
 80030c4:	d8812b07 	ldb	r2,1196(sp)
 80030c8:	1002fc1e 	bne	r2,zero,8003cbc <___vfprintf_internal_r+0x1908>
 80030cc:	00c00804 	movi	r3,32
 80030d0:	d8c12b05 	stb	r3,1196(sp)
 80030d4:	e005883a 	mov	r2,fp
 80030d8:	e4000007 	ldb	r16,0(fp)
 80030dc:	003d1d06 	br	8002554 <__alt_data_end+0xfc002554>
 80030e0:	9cc00054 	ori	r19,r19,1
 80030e4:	e005883a 	mov	r2,fp
 80030e8:	e4000007 	ldb	r16,0(fp)
 80030ec:	003d1906 	br	8002554 <__alt_data_end+0xfc002554>
 80030f0:	d9012d17 	ldw	r4,1204(sp)
 80030f4:	d9412d17 	ldw	r5,1204(sp)
 80030f8:	21000017 	ldw	r4,0(r4)
 80030fc:	28c00104 	addi	r3,r5,4
 8003100:	d9012e15 	stw	r4,1208(sp)
 8003104:	20038c16 	blt	r4,zero,8003f38 <___vfprintf_internal_r+0x1b84>
 8003108:	d8c12d15 	stw	r3,1204(sp)
 800310c:	e005883a 	mov	r2,fp
 8003110:	e4000007 	ldb	r16,0(fp)
 8003114:	003d0f06 	br	8002554 <__alt_data_end+0xfc002554>
 8003118:	00c00ac4 	movi	r3,43
 800311c:	d8c12b05 	stb	r3,1196(sp)
 8003120:	e005883a 	mov	r2,fp
 8003124:	e4000007 	ldb	r16,0(fp)
 8003128:	003d0a06 	br	8002554 <__alt_data_end+0xfc002554>
 800312c:	d8c12d17 	ldw	r3,1204(sp)
 8003130:	d9012d17 	ldw	r4,1204(sp)
 8003134:	da012a17 	ldw	r8,1192(sp)
 8003138:	18c00017 	ldw	r3,0(r3)
 800313c:	df012a15 	stw	fp,1192(sp)
 8003140:	d8012785 	stb	zero,1182(sp)
 8003144:	d8c13115 	stw	r3,1220(sp)
 8003148:	9839883a 	mov	fp,r19
 800314c:	24800104 	addi	r18,r4,4
 8003150:	1803f726 	beq	r3,zero,8004130 <___vfprintf_internal_r+0x1d7c>
 8003154:	d9013117 	ldw	r4,1220(sp)
 8003158:	48038916 	blt	r9,zero,8003f80 <___vfprintf_internal_r+0x1bcc>
 800315c:	480d883a 	mov	r6,r9
 8003160:	000b883a 	mov	r5,zero
 8003164:	da013f15 	stw	r8,1276(sp)
 8003168:	da413e15 	stw	r9,1272(sp)
 800316c:	80079c80 	call	80079c8 <memchr>
 8003170:	da013f17 	ldw	r8,1276(sp)
 8003174:	da413e17 	ldw	r9,1272(sp)
 8003178:	10045926 	beq	r2,zero,80042e0 <___vfprintf_internal_r+0x1f2c>
 800317c:	d8c13117 	ldw	r3,1220(sp)
 8003180:	10e3c83a 	sub	r17,r2,r3
 8003184:	4c433516 	blt	r9,r17,8003e5c <___vfprintf_internal_r+0x1aa8>
 8003188:	8805883a 	mov	r2,r17
 800318c:	88038116 	blt	r17,zero,8003f94 <___vfprintf_internal_r+0x1be0>
 8003190:	dcc12783 	ldbu	r19,1182(sp)
 8003194:	d8812b15 	stw	r2,1196(sp)
 8003198:	dc812d15 	stw	r18,1204(sp)
 800319c:	d8013215 	stw	zero,1224(sp)
 80031a0:	d8013415 	stw	zero,1232(sp)
 80031a4:	003e0306 	br	80029b4 <__alt_data_end+0xfc0029b4>
 80031a8:	da012a17 	ldw	r8,1192(sp)
 80031ac:	df012a15 	stw	fp,1192(sp)
 80031b0:	9839883a 	mov	fp,r19
 80031b4:	dcc12b03 	ldbu	r19,1196(sp)
 80031b8:	dcc12785 	stb	r19,1182(sp)
 80031bc:	803d8f26 	beq	r16,zero,80027fc <__alt_data_end+0xfc0027fc>
 80031c0:	00c00044 	movi	r3,1
 80031c4:	d8c12b15 	stw	r3,1196(sp)
 80031c8:	dc010405 	stb	r16,1040(sp)
 80031cc:	d8012785 	stb	zero,1182(sp)
 80031d0:	003fb506 	br	80030a8 <__alt_data_end+0xfc0030a8>
 80031d4:	d8c12017 	ldw	r3,1152(sp)
 80031d8:	003e3506 	br	8002ab0 <__alt_data_end+0xfc002ab0>
 80031dc:	10803fcc 	andi	r2,r2,255
 80031e0:	00c00044 	movi	r3,1
 80031e4:	10fddc1e 	bne	r2,r3,8002958 <__alt_data_end+0xfc002958>
 80031e8:	a800021e 	bne	r21,zero,80031f4 <___vfprintf_internal_r+0xe40>
 80031ec:	00800244 	movi	r2,9
 80031f0:	14801e2e 	bgeu	r2,r18,800326c <___vfprintf_internal_r+0xeb8>
 80031f4:	dc012b15 	stw	r16,1196(sp)
 80031f8:	dc410e04 	addi	r17,sp,1080
 80031fc:	9021883a 	mov	r16,r18
 8003200:	da012c15 	stw	r8,1200(sp)
 8003204:	a825883a 	mov	r18,r21
 8003208:	482b883a 	mov	r21,r9
 800320c:	8009883a 	mov	r4,r16
 8003210:	900b883a 	mov	r5,r18
 8003214:	01800284 	movi	r6,10
 8003218:	000f883a 	mov	r7,zero
 800321c:	800bbe00 	call	800bbe0 <__umoddi3>
 8003220:	10800c04 	addi	r2,r2,48
 8003224:	8c7fffc4 	addi	r17,r17,-1
 8003228:	8009883a 	mov	r4,r16
 800322c:	900b883a 	mov	r5,r18
 8003230:	01800284 	movi	r6,10
 8003234:	000f883a 	mov	r7,zero
 8003238:	88800005 	stb	r2,0(r17)
 800323c:	800b5a00 	call	800b5a0 <__udivdi3>
 8003240:	1021883a 	mov	r16,r2
 8003244:	10c4b03a 	or	r2,r2,r3
 8003248:	1825883a 	mov	r18,r3
 800324c:	103fef1e 	bne	r2,zero,800320c <__alt_data_end+0xfc00320c>
 8003250:	d9012817 	ldw	r4,1184(sp)
 8003254:	dc413115 	stw	r17,1220(sp)
 8003258:	dc012b17 	ldw	r16,1196(sp)
 800325c:	da012c17 	ldw	r8,1200(sp)
 8003260:	a813883a 	mov	r9,r21
 8003264:	2463c83a 	sub	r17,r4,r17
 8003268:	003dcd06 	br	80029a0 <__alt_data_end+0xfc0029a0>
 800326c:	94800c04 	addi	r18,r18,48
 8003270:	d8c10dc4 	addi	r3,sp,1079
 8003274:	dc810dc5 	stb	r18,1079(sp)
 8003278:	dc413c17 	ldw	r17,1264(sp)
 800327c:	d8c13115 	stw	r3,1220(sp)
 8003280:	003dc706 	br	80029a0 <__alt_data_end+0xfc0029a0>
 8003284:	00801944 	movi	r2,101
 8003288:	1400720e 	bge	r2,r16,8003454 <___vfprintf_internal_r+0x10a0>
 800328c:	d9013717 	ldw	r4,1244(sp)
 8003290:	d9413917 	ldw	r5,1252(sp)
 8003294:	000d883a 	mov	r6,zero
 8003298:	000f883a 	mov	r7,zero
 800329c:	d8c13d15 	stw	r3,1268(sp)
 80032a0:	da013f15 	stw	r8,1276(sp)
 80032a4:	800d56c0 	call	800d56c <__eqdf2>
 80032a8:	d8c13d17 	ldw	r3,1268(sp)
 80032ac:	da013f17 	ldw	r8,1276(sp)
 80032b0:	1000f41e 	bne	r2,zero,8003684 <___vfprintf_internal_r+0x12d0>
 80032b4:	d8811f17 	ldw	r2,1148(sp)
 80032b8:	01020074 	movhi	r4,2049
 80032bc:	2106ca04 	addi	r4,r4,6952
 80032c0:	18c00044 	addi	r3,r3,1
 80032c4:	10800044 	addi	r2,r2,1
 80032c8:	41000015 	stw	r4,0(r8)
 80032cc:	01000044 	movi	r4,1
 80032d0:	41000115 	stw	r4,4(r8)
 80032d4:	d8c12015 	stw	r3,1152(sp)
 80032d8:	d8811f15 	stw	r2,1148(sp)
 80032dc:	010001c4 	movi	r4,7
 80032e0:	20828d16 	blt	r4,r2,8003d18 <___vfprintf_internal_r+0x1964>
 80032e4:	42000204 	addi	r8,r8,8
 80032e8:	d8812617 	ldw	r2,1176(sp)
 80032ec:	d9413317 	ldw	r5,1228(sp)
 80032f0:	11400216 	blt	r2,r5,80032fc <___vfprintf_internal_r+0xf48>
 80032f4:	e080004c 	andi	r2,fp,1
 80032f8:	103e4126 	beq	r2,zero,8002c00 <__alt_data_end+0xfc002c00>
 80032fc:	d8813817 	ldw	r2,1248(sp)
 8003300:	d9013517 	ldw	r4,1236(sp)
 8003304:	d9413817 	ldw	r5,1248(sp)
 8003308:	1887883a 	add	r3,r3,r2
 800330c:	d8811f17 	ldw	r2,1148(sp)
 8003310:	41000015 	stw	r4,0(r8)
 8003314:	41400115 	stw	r5,4(r8)
 8003318:	10800044 	addi	r2,r2,1
 800331c:	d8c12015 	stw	r3,1152(sp)
 8003320:	d8811f15 	stw	r2,1148(sp)
 8003324:	010001c4 	movi	r4,7
 8003328:	20830916 	blt	r4,r2,8003f50 <___vfprintf_internal_r+0x1b9c>
 800332c:	42000204 	addi	r8,r8,8
 8003330:	d8813317 	ldw	r2,1228(sp)
 8003334:	143fffc4 	addi	r16,r2,-1
 8003338:	043e310e 	bge	zero,r16,8002c00 <__alt_data_end+0xfc002c00>
 800333c:	04400404 	movi	r17,16
 8003340:	d8811f17 	ldw	r2,1148(sp)
 8003344:	8c007e0e 	bge	r17,r16,8003540 <___vfprintf_internal_r+0x118c>
 8003348:	01420074 	movhi	r5,2049
 800334c:	2946ca84 	addi	r5,r5,6954
 8003350:	d9412c15 	stw	r5,1200(sp)
 8003354:	04c001c4 	movi	r19,7
 8003358:	00000306 	br	8003368 <___vfprintf_internal_r+0xfb4>
 800335c:	42000204 	addi	r8,r8,8
 8003360:	843ffc04 	addi	r16,r16,-16
 8003364:	8c00790e 	bge	r17,r16,800354c <___vfprintf_internal_r+0x1198>
 8003368:	18c00404 	addi	r3,r3,16
 800336c:	10800044 	addi	r2,r2,1
 8003370:	45000015 	stw	r20,0(r8)
 8003374:	44400115 	stw	r17,4(r8)
 8003378:	d8c12015 	stw	r3,1152(sp)
 800337c:	d8811f15 	stw	r2,1148(sp)
 8003380:	98bff60e 	bge	r19,r2,800335c <__alt_data_end+0xfc00335c>
 8003384:	b809883a 	mov	r4,r23
 8003388:	b00b883a 	mov	r5,r22
 800338c:	d9811e04 	addi	r6,sp,1144
 8003390:	80097f40 	call	80097f4 <__sprint_r>
 8003394:	103d1f1e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 8003398:	d8c12017 	ldw	r3,1152(sp)
 800339c:	d8811f17 	ldw	r2,1148(sp)
 80033a0:	da000404 	addi	r8,sp,16
 80033a4:	003fee06 	br	8003360 <__alt_data_end+0xfc003360>
 80033a8:	d9412e17 	ldw	r5,1208(sp)
 80033ac:	d8812b17 	ldw	r2,1196(sp)
 80033b0:	28a7c83a 	sub	r19,r5,r2
 80033b4:	04fddc0e 	bge	zero,r19,8002b28 <__alt_data_end+0xfc002b28>
 80033b8:	05400404 	movi	r21,16
 80033bc:	d8811f17 	ldw	r2,1148(sp)
 80033c0:	acc3870e 	bge	r21,r19,80041e0 <___vfprintf_internal_r+0x1e2c>
 80033c4:	01420074 	movhi	r5,2049
 80033c8:	2946ca84 	addi	r5,r5,6954
 80033cc:	d9412c15 	stw	r5,1200(sp)
 80033d0:	048001c4 	movi	r18,7
 80033d4:	00000306 	br	80033e4 <___vfprintf_internal_r+0x1030>
 80033d8:	9cfffc04 	addi	r19,r19,-16
 80033dc:	42000204 	addi	r8,r8,8
 80033e0:	acc0110e 	bge	r21,r19,8003428 <___vfprintf_internal_r+0x1074>
 80033e4:	18c00404 	addi	r3,r3,16
 80033e8:	10800044 	addi	r2,r2,1
 80033ec:	45000015 	stw	r20,0(r8)
 80033f0:	45400115 	stw	r21,4(r8)
 80033f4:	d8c12015 	stw	r3,1152(sp)
 80033f8:	d8811f15 	stw	r2,1148(sp)
 80033fc:	90bff60e 	bge	r18,r2,80033d8 <__alt_data_end+0xfc0033d8>
 8003400:	b809883a 	mov	r4,r23
 8003404:	b00b883a 	mov	r5,r22
 8003408:	d9811e04 	addi	r6,sp,1144
 800340c:	80097f40 	call	80097f4 <__sprint_r>
 8003410:	103d001e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 8003414:	9cfffc04 	addi	r19,r19,-16
 8003418:	d8c12017 	ldw	r3,1152(sp)
 800341c:	d8811f17 	ldw	r2,1148(sp)
 8003420:	da000404 	addi	r8,sp,16
 8003424:	acffef16 	blt	r21,r19,80033e4 <__alt_data_end+0xfc0033e4>
 8003428:	d9012c17 	ldw	r4,1200(sp)
 800342c:	1cc7883a 	add	r3,r3,r19
 8003430:	10800044 	addi	r2,r2,1
 8003434:	41000015 	stw	r4,0(r8)
 8003438:	44c00115 	stw	r19,4(r8)
 800343c:	d8c12015 	stw	r3,1152(sp)
 8003440:	d8811f15 	stw	r2,1148(sp)
 8003444:	010001c4 	movi	r4,7
 8003448:	20817816 	blt	r4,r2,8003a2c <___vfprintf_internal_r+0x1678>
 800344c:	42000204 	addi	r8,r8,8
 8003450:	003db506 	br	8002b28 <__alt_data_end+0xfc002b28>
 8003454:	d9413317 	ldw	r5,1228(sp)
 8003458:	00800044 	movi	r2,1
 800345c:	18c00044 	addi	r3,r3,1
 8003460:	11413e0e 	bge	r2,r5,800395c <___vfprintf_internal_r+0x15a8>
 8003464:	dc011f17 	ldw	r16,1148(sp)
 8003468:	d8813117 	ldw	r2,1220(sp)
 800346c:	d8c12015 	stw	r3,1152(sp)
 8003470:	84000044 	addi	r16,r16,1
 8003474:	40800015 	stw	r2,0(r8)
 8003478:	00800044 	movi	r2,1
 800347c:	40800115 	stw	r2,4(r8)
 8003480:	dc011f15 	stw	r16,1148(sp)
 8003484:	008001c4 	movi	r2,7
 8003488:	14015616 	blt	r2,r16,80039e4 <___vfprintf_internal_r+0x1630>
 800348c:	42000204 	addi	r8,r8,8
 8003490:	d9013817 	ldw	r4,1248(sp)
 8003494:	d9413517 	ldw	r5,1236(sp)
 8003498:	84000044 	addi	r16,r16,1
 800349c:	1907883a 	add	r3,r3,r4
 80034a0:	41400015 	stw	r5,0(r8)
 80034a4:	41000115 	stw	r4,4(r8)
 80034a8:	d8c12015 	stw	r3,1152(sp)
 80034ac:	dc011f15 	stw	r16,1148(sp)
 80034b0:	008001c4 	movi	r2,7
 80034b4:	14015416 	blt	r2,r16,8003a08 <___vfprintf_internal_r+0x1654>
 80034b8:	44400204 	addi	r17,r8,8
 80034bc:	d9013717 	ldw	r4,1244(sp)
 80034c0:	d9413917 	ldw	r5,1252(sp)
 80034c4:	000d883a 	mov	r6,zero
 80034c8:	000f883a 	mov	r7,zero
 80034cc:	d8c13d15 	stw	r3,1268(sp)
 80034d0:	800d56c0 	call	800d56c <__eqdf2>
 80034d4:	d8c13d17 	ldw	r3,1268(sp)
 80034d8:	1000a726 	beq	r2,zero,8003778 <___vfprintf_internal_r+0x13c4>
 80034dc:	d9013317 	ldw	r4,1228(sp)
 80034e0:	d9413117 	ldw	r5,1220(sp)
 80034e4:	84000044 	addi	r16,r16,1
 80034e8:	20bfffc4 	addi	r2,r4,-1
 80034ec:	1887883a 	add	r3,r3,r2
 80034f0:	29000044 	addi	r4,r5,1
 80034f4:	88800115 	stw	r2,4(r17)
 80034f8:	89000015 	stw	r4,0(r17)
 80034fc:	d8c12015 	stw	r3,1152(sp)
 8003500:	dc011f15 	stw	r16,1148(sp)
 8003504:	008001c4 	movi	r2,7
 8003508:	14012d16 	blt	r2,r16,80039c0 <___vfprintf_internal_r+0x160c>
 800350c:	8c400204 	addi	r17,r17,8
 8003510:	d9413a17 	ldw	r5,1256(sp)
 8003514:	dcc122c4 	addi	r19,sp,1163
 8003518:	84000044 	addi	r16,r16,1
 800351c:	28c7883a 	add	r3,r5,r3
 8003520:	8cc00015 	stw	r19,0(r17)
 8003524:	89400115 	stw	r5,4(r17)
 8003528:	d8c12015 	stw	r3,1152(sp)
 800352c:	dc011f15 	stw	r16,1148(sp)
 8003530:	008001c4 	movi	r2,7
 8003534:	14000e16 	blt	r2,r16,8003570 <___vfprintf_internal_r+0x11bc>
 8003538:	8a000204 	addi	r8,r17,8
 800353c:	003db006 	br	8002c00 <__alt_data_end+0xfc002c00>
 8003540:	01020074 	movhi	r4,2049
 8003544:	2106ca84 	addi	r4,r4,6954
 8003548:	d9012c15 	stw	r4,1200(sp)
 800354c:	d9012c17 	ldw	r4,1200(sp)
 8003550:	1c07883a 	add	r3,r3,r16
 8003554:	44000115 	stw	r16,4(r8)
 8003558:	41000015 	stw	r4,0(r8)
 800355c:	10800044 	addi	r2,r2,1
 8003560:	d8c12015 	stw	r3,1152(sp)
 8003564:	d8811f15 	stw	r2,1148(sp)
 8003568:	010001c4 	movi	r4,7
 800356c:	20bda30e 	bge	r4,r2,8002bfc <__alt_data_end+0xfc002bfc>
 8003570:	b809883a 	mov	r4,r23
 8003574:	b00b883a 	mov	r5,r22
 8003578:	d9811e04 	addi	r6,sp,1144
 800357c:	80097f40 	call	80097f4 <__sprint_r>
 8003580:	103ca41e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 8003584:	d8c12017 	ldw	r3,1152(sp)
 8003588:	da000404 	addi	r8,sp,16
 800358c:	003d9c06 	br	8002c00 <__alt_data_end+0xfc002c00>
 8003590:	b809883a 	mov	r4,r23
 8003594:	b00b883a 	mov	r5,r22
 8003598:	d9811e04 	addi	r6,sp,1144
 800359c:	80097f40 	call	80097f4 <__sprint_r>
 80035a0:	103dd226 	beq	r2,zero,8002cec <__alt_data_end+0xfc002cec>
 80035a4:	003c9b06 	br	8002814 <__alt_data_end+0xfc002814>
 80035a8:	10803fcc 	andi	r2,r2,255
 80035ac:	1000311e 	bne	r2,zero,8003674 <___vfprintf_internal_r+0x12c0>
 80035b0:	e080004c 	andi	r2,fp,1
 80035b4:	10002f26 	beq	r2,zero,8003674 <___vfprintf_internal_r+0x12c0>
 80035b8:	00800c04 	movi	r2,48
 80035bc:	d8c10dc4 	addi	r3,sp,1079
 80035c0:	d8810dc5 	stb	r2,1079(sp)
 80035c4:	dc413c17 	ldw	r17,1264(sp)
 80035c8:	d8c13115 	stw	r3,1220(sp)
 80035cc:	003cf406 	br	80029a0 <__alt_data_end+0xfc0029a0>
 80035d0:	b809883a 	mov	r4,r23
 80035d4:	b00b883a 	mov	r5,r22
 80035d8:	d9811e04 	addi	r6,sp,1144
 80035dc:	80097f40 	call	80097f4 <__sprint_r>
 80035e0:	103c8c1e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 80035e4:	d8c12017 	ldw	r3,1152(sp)
 80035e8:	da000404 	addi	r8,sp,16
 80035ec:	003d7706 	br	8002bcc <__alt_data_end+0xfc002bcc>
 80035f0:	b809883a 	mov	r4,r23
 80035f4:	b00b883a 	mov	r5,r22
 80035f8:	d9811e04 	addi	r6,sp,1144
 80035fc:	80097f40 	call	80097f4 <__sprint_r>
 8003600:	103c841e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 8003604:	d8c12017 	ldw	r3,1152(sp)
 8003608:	da000404 	addi	r8,sp,16
 800360c:	003d3506 	br	8002ae4 <__alt_data_end+0xfc002ae4>
 8003610:	b809883a 	mov	r4,r23
 8003614:	b00b883a 	mov	r5,r22
 8003618:	d9811e04 	addi	r6,sp,1144
 800361c:	80097f40 	call	80097f4 <__sprint_r>
 8003620:	103c7c1e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 8003624:	d8c12017 	ldw	r3,1152(sp)
 8003628:	da000404 	addi	r8,sp,16
 800362c:	003d3b06 	br	8002b1c <__alt_data_end+0xfc002b1c>
 8003630:	d9413b17 	ldw	r5,1260(sp)
 8003634:	d8c10e04 	addi	r3,sp,1080
 8003638:	908003cc 	andi	r2,r18,15
 800363c:	a808973a 	slli	r4,r21,28
 8003640:	2885883a 	add	r2,r5,r2
 8003644:	9024d13a 	srli	r18,r18,4
 8003648:	10800003 	ldbu	r2,0(r2)
 800364c:	a82ad13a 	srli	r21,r21,4
 8003650:	18ffffc4 	addi	r3,r3,-1
 8003654:	24a4b03a 	or	r18,r4,r18
 8003658:	18800005 	stb	r2,0(r3)
 800365c:	9544b03a 	or	r2,r18,r21
 8003660:	103ff51e 	bne	r2,zero,8003638 <__alt_data_end+0xfc003638>
 8003664:	d9412817 	ldw	r5,1184(sp)
 8003668:	d8c13115 	stw	r3,1220(sp)
 800366c:	28e3c83a 	sub	r17,r5,r3
 8003670:	003ccb06 	br	80029a0 <__alt_data_end+0xfc0029a0>
 8003674:	d8c10e04 	addi	r3,sp,1080
 8003678:	0023883a 	mov	r17,zero
 800367c:	d8c13115 	stw	r3,1220(sp)
 8003680:	003cc706 	br	80029a0 <__alt_data_end+0xfc0029a0>
 8003684:	dc012617 	ldw	r16,1176(sp)
 8003688:	0401ab0e 	bge	zero,r16,8003d38 <___vfprintf_internal_r+0x1984>
 800368c:	d8813317 	ldw	r2,1228(sp)
 8003690:	d9413117 	ldw	r5,1220(sp)
 8003694:	d9013417 	ldw	r4,1232(sp)
 8003698:	1023883a 	mov	r17,r2
 800369c:	28a1883a 	add	r16,r5,r2
 80036a0:	2080010e 	bge	r4,r2,80036a8 <___vfprintf_internal_r+0x12f4>
 80036a4:	2023883a 	mov	r17,r4
 80036a8:	04400b0e 	bge	zero,r17,80036d8 <___vfprintf_internal_r+0x1324>
 80036ac:	d8811f17 	ldw	r2,1148(sp)
 80036b0:	d9413117 	ldw	r5,1220(sp)
 80036b4:	1c47883a 	add	r3,r3,r17
 80036b8:	10800044 	addi	r2,r2,1
 80036bc:	41400015 	stw	r5,0(r8)
 80036c0:	44400115 	stw	r17,4(r8)
 80036c4:	d8c12015 	stw	r3,1152(sp)
 80036c8:	d8811f15 	stw	r2,1148(sp)
 80036cc:	010001c4 	movi	r4,7
 80036d0:	20826716 	blt	r4,r2,8004070 <___vfprintf_internal_r+0x1cbc>
 80036d4:	42000204 	addi	r8,r8,8
 80036d8:	88026316 	blt	r17,zero,8004068 <___vfprintf_internal_r+0x1cb4>
 80036dc:	d8813417 	ldw	r2,1232(sp)
 80036e0:	1463c83a 	sub	r17,r2,r17
 80036e4:	0440590e 	bge	zero,r17,800384c <___vfprintf_internal_r+0x1498>
 80036e8:	04c00404 	movi	r19,16
 80036ec:	d8811f17 	ldw	r2,1148(sp)
 80036f0:	9c41770e 	bge	r19,r17,8003cd0 <___vfprintf_internal_r+0x191c>
 80036f4:	01420074 	movhi	r5,2049
 80036f8:	2946ca84 	addi	r5,r5,6954
 80036fc:	d9412c15 	stw	r5,1200(sp)
 8003700:	054001c4 	movi	r21,7
 8003704:	00000306 	br	8003714 <___vfprintf_internal_r+0x1360>
 8003708:	42000204 	addi	r8,r8,8
 800370c:	8c7ffc04 	addi	r17,r17,-16
 8003710:	9c41720e 	bge	r19,r17,8003cdc <___vfprintf_internal_r+0x1928>
 8003714:	18c00404 	addi	r3,r3,16
 8003718:	10800044 	addi	r2,r2,1
 800371c:	45000015 	stw	r20,0(r8)
 8003720:	44c00115 	stw	r19,4(r8)
 8003724:	d8c12015 	stw	r3,1152(sp)
 8003728:	d8811f15 	stw	r2,1148(sp)
 800372c:	a8bff60e 	bge	r21,r2,8003708 <__alt_data_end+0xfc003708>
 8003730:	b809883a 	mov	r4,r23
 8003734:	b00b883a 	mov	r5,r22
 8003738:	d9811e04 	addi	r6,sp,1144
 800373c:	80097f40 	call	80097f4 <__sprint_r>
 8003740:	103c341e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 8003744:	d8c12017 	ldw	r3,1152(sp)
 8003748:	d8811f17 	ldw	r2,1148(sp)
 800374c:	da000404 	addi	r8,sp,16
 8003750:	003fee06 	br	800370c <__alt_data_end+0xfc00370c>
 8003754:	b809883a 	mov	r4,r23
 8003758:	b00b883a 	mov	r5,r22
 800375c:	d9811e04 	addi	r6,sp,1144
 8003760:	80097f40 	call	80097f4 <__sprint_r>
 8003764:	103c2b1e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 8003768:	d8c12017 	ldw	r3,1152(sp)
 800376c:	d8812787 	ldb	r2,1182(sp)
 8003770:	da000404 	addi	r8,sp,16
 8003774:	003cce06 	br	8002ab0 <__alt_data_end+0xfc002ab0>
 8003778:	d8813317 	ldw	r2,1228(sp)
 800377c:	14ffffc4 	addi	r19,r2,-1
 8003780:	04ff630e 	bge	zero,r19,8003510 <__alt_data_end+0xfc003510>
 8003784:	05400404 	movi	r21,16
 8003788:	acc0810e 	bge	r21,r19,8003990 <___vfprintf_internal_r+0x15dc>
 800378c:	01420074 	movhi	r5,2049
 8003790:	2946ca84 	addi	r5,r5,6954
 8003794:	d9412c15 	stw	r5,1200(sp)
 8003798:	01c001c4 	movi	r7,7
 800379c:	00000306 	br	80037ac <___vfprintf_internal_r+0x13f8>
 80037a0:	8c400204 	addi	r17,r17,8
 80037a4:	9cfffc04 	addi	r19,r19,-16
 80037a8:	acc07c0e 	bge	r21,r19,800399c <___vfprintf_internal_r+0x15e8>
 80037ac:	18c00404 	addi	r3,r3,16
 80037b0:	84000044 	addi	r16,r16,1
 80037b4:	8d000015 	stw	r20,0(r17)
 80037b8:	8d400115 	stw	r21,4(r17)
 80037bc:	d8c12015 	stw	r3,1152(sp)
 80037c0:	dc011f15 	stw	r16,1148(sp)
 80037c4:	3c3ff60e 	bge	r7,r16,80037a0 <__alt_data_end+0xfc0037a0>
 80037c8:	b809883a 	mov	r4,r23
 80037cc:	b00b883a 	mov	r5,r22
 80037d0:	d9811e04 	addi	r6,sp,1144
 80037d4:	d9c13d15 	stw	r7,1268(sp)
 80037d8:	80097f40 	call	80097f4 <__sprint_r>
 80037dc:	d9c13d17 	ldw	r7,1268(sp)
 80037e0:	103c0c1e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 80037e4:	d8c12017 	ldw	r3,1152(sp)
 80037e8:	dc011f17 	ldw	r16,1148(sp)
 80037ec:	dc400404 	addi	r17,sp,16
 80037f0:	003fec06 	br	80037a4 <__alt_data_end+0xfc0037a4>
 80037f4:	00800084 	movi	r2,2
 80037f8:	9546b03a 	or	r3,r18,r21
 80037fc:	003d7d06 	br	8002df4 <__alt_data_end+0xfc002df4>
 8003800:	10803fcc 	andi	r2,r2,255
 8003804:	1080201c 	xori	r2,r2,128
 8003808:	10bfe004 	addi	r2,r2,-128
 800380c:	01000c04 	movi	r4,48
 8003810:	1101d726 	beq	r2,r4,8003f70 <___vfprintf_internal_r+0x1bbc>
 8003814:	d9413117 	ldw	r5,1220(sp)
 8003818:	d8812817 	ldw	r2,1184(sp)
 800381c:	193fffc5 	stb	r4,-1(r3)
 8003820:	297fffc4 	addi	r5,r5,-1
 8003824:	d9413115 	stw	r5,1220(sp)
 8003828:	1163c83a 	sub	r17,r2,r5
 800382c:	003c5c06 	br	80029a0 <__alt_data_end+0xfc0029a0>
 8003830:	b809883a 	mov	r4,r23
 8003834:	b00b883a 	mov	r5,r22
 8003838:	d9811e04 	addi	r6,sp,1144
 800383c:	80097f40 	call	80097f4 <__sprint_r>
 8003840:	103bf41e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 8003844:	d8c12017 	ldw	r3,1152(sp)
 8003848:	da000404 	addi	r8,sp,16
 800384c:	d9413117 	ldw	r5,1220(sp)
 8003850:	d9013417 	ldw	r4,1232(sp)
 8003854:	d8812617 	ldw	r2,1176(sp)
 8003858:	2923883a 	add	r17,r5,r4
 800385c:	d9413317 	ldw	r5,1228(sp)
 8003860:	11400216 	blt	r2,r5,800386c <___vfprintf_internal_r+0x14b8>
 8003864:	e100004c 	andi	r4,fp,1
 8003868:	20000d26 	beq	r4,zero,80038a0 <___vfprintf_internal_r+0x14ec>
 800386c:	d9013817 	ldw	r4,1248(sp)
 8003870:	d9413517 	ldw	r5,1236(sp)
 8003874:	1907883a 	add	r3,r3,r4
 8003878:	d9011f17 	ldw	r4,1148(sp)
 800387c:	41400015 	stw	r5,0(r8)
 8003880:	d9413817 	ldw	r5,1248(sp)
 8003884:	21000044 	addi	r4,r4,1
 8003888:	d8c12015 	stw	r3,1152(sp)
 800388c:	41400115 	stw	r5,4(r8)
 8003890:	d9011f15 	stw	r4,1148(sp)
 8003894:	014001c4 	movi	r5,7
 8003898:	2901fd16 	blt	r5,r4,8004090 <___vfprintf_internal_r+0x1cdc>
 800389c:	42000204 	addi	r8,r8,8
 80038a0:	d9013317 	ldw	r4,1228(sp)
 80038a4:	2085c83a 	sub	r2,r4,r2
 80038a8:	8449c83a 	sub	r4,r16,r17
 80038ac:	1021883a 	mov	r16,r2
 80038b0:	2080010e 	bge	r4,r2,80038b8 <___vfprintf_internal_r+0x1504>
 80038b4:	2021883a 	mov	r16,r4
 80038b8:	04000a0e 	bge	zero,r16,80038e4 <___vfprintf_internal_r+0x1530>
 80038bc:	d9011f17 	ldw	r4,1148(sp)
 80038c0:	1c07883a 	add	r3,r3,r16
 80038c4:	44400015 	stw	r17,0(r8)
 80038c8:	21000044 	addi	r4,r4,1
 80038cc:	44000115 	stw	r16,4(r8)
 80038d0:	d8c12015 	stw	r3,1152(sp)
 80038d4:	d9011f15 	stw	r4,1148(sp)
 80038d8:	014001c4 	movi	r5,7
 80038dc:	29020916 	blt	r5,r4,8004104 <___vfprintf_internal_r+0x1d50>
 80038e0:	42000204 	addi	r8,r8,8
 80038e4:	80020116 	blt	r16,zero,80040ec <___vfprintf_internal_r+0x1d38>
 80038e8:	1421c83a 	sub	r16,r2,r16
 80038ec:	043cc40e 	bge	zero,r16,8002c00 <__alt_data_end+0xfc002c00>
 80038f0:	04400404 	movi	r17,16
 80038f4:	d8811f17 	ldw	r2,1148(sp)
 80038f8:	8c3f110e 	bge	r17,r16,8003540 <__alt_data_end+0xfc003540>
 80038fc:	01420074 	movhi	r5,2049
 8003900:	2946ca84 	addi	r5,r5,6954
 8003904:	d9412c15 	stw	r5,1200(sp)
 8003908:	04c001c4 	movi	r19,7
 800390c:	00000306 	br	800391c <___vfprintf_internal_r+0x1568>
 8003910:	42000204 	addi	r8,r8,8
 8003914:	843ffc04 	addi	r16,r16,-16
 8003918:	8c3f0c0e 	bge	r17,r16,800354c <__alt_data_end+0xfc00354c>
 800391c:	18c00404 	addi	r3,r3,16
 8003920:	10800044 	addi	r2,r2,1
 8003924:	45000015 	stw	r20,0(r8)
 8003928:	44400115 	stw	r17,4(r8)
 800392c:	d8c12015 	stw	r3,1152(sp)
 8003930:	d8811f15 	stw	r2,1148(sp)
 8003934:	98bff60e 	bge	r19,r2,8003910 <__alt_data_end+0xfc003910>
 8003938:	b809883a 	mov	r4,r23
 800393c:	b00b883a 	mov	r5,r22
 8003940:	d9811e04 	addi	r6,sp,1144
 8003944:	80097f40 	call	80097f4 <__sprint_r>
 8003948:	103bb21e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 800394c:	d8c12017 	ldw	r3,1152(sp)
 8003950:	d8811f17 	ldw	r2,1148(sp)
 8003954:	da000404 	addi	r8,sp,16
 8003958:	003fee06 	br	8003914 <__alt_data_end+0xfc003914>
 800395c:	e088703a 	and	r4,fp,r2
 8003960:	203ec01e 	bne	r4,zero,8003464 <__alt_data_end+0xfc003464>
 8003964:	dc011f17 	ldw	r16,1148(sp)
 8003968:	d9013117 	ldw	r4,1220(sp)
 800396c:	40800115 	stw	r2,4(r8)
 8003970:	84000044 	addi	r16,r16,1
 8003974:	41000015 	stw	r4,0(r8)
 8003978:	d8c12015 	stw	r3,1152(sp)
 800397c:	dc011f15 	stw	r16,1148(sp)
 8003980:	008001c4 	movi	r2,7
 8003984:	14000e16 	blt	r2,r16,80039c0 <___vfprintf_internal_r+0x160c>
 8003988:	44400204 	addi	r17,r8,8
 800398c:	003ee006 	br	8003510 <__alt_data_end+0xfc003510>
 8003990:	01020074 	movhi	r4,2049
 8003994:	2106ca84 	addi	r4,r4,6954
 8003998:	d9012c15 	stw	r4,1200(sp)
 800399c:	d8812c17 	ldw	r2,1200(sp)
 80039a0:	1cc7883a 	add	r3,r3,r19
 80039a4:	84000044 	addi	r16,r16,1
 80039a8:	88800015 	stw	r2,0(r17)
 80039ac:	8cc00115 	stw	r19,4(r17)
 80039b0:	d8c12015 	stw	r3,1152(sp)
 80039b4:	dc011f15 	stw	r16,1148(sp)
 80039b8:	008001c4 	movi	r2,7
 80039bc:	143ed30e 	bge	r2,r16,800350c <__alt_data_end+0xfc00350c>
 80039c0:	b809883a 	mov	r4,r23
 80039c4:	b00b883a 	mov	r5,r22
 80039c8:	d9811e04 	addi	r6,sp,1144
 80039cc:	80097f40 	call	80097f4 <__sprint_r>
 80039d0:	103b901e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 80039d4:	d8c12017 	ldw	r3,1152(sp)
 80039d8:	dc011f17 	ldw	r16,1148(sp)
 80039dc:	dc400404 	addi	r17,sp,16
 80039e0:	003ecb06 	br	8003510 <__alt_data_end+0xfc003510>
 80039e4:	b809883a 	mov	r4,r23
 80039e8:	b00b883a 	mov	r5,r22
 80039ec:	d9811e04 	addi	r6,sp,1144
 80039f0:	80097f40 	call	80097f4 <__sprint_r>
 80039f4:	103b871e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 80039f8:	d8c12017 	ldw	r3,1152(sp)
 80039fc:	dc011f17 	ldw	r16,1148(sp)
 8003a00:	da000404 	addi	r8,sp,16
 8003a04:	003ea206 	br	8003490 <__alt_data_end+0xfc003490>
 8003a08:	b809883a 	mov	r4,r23
 8003a0c:	b00b883a 	mov	r5,r22
 8003a10:	d9811e04 	addi	r6,sp,1144
 8003a14:	80097f40 	call	80097f4 <__sprint_r>
 8003a18:	103b7e1e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 8003a1c:	d8c12017 	ldw	r3,1152(sp)
 8003a20:	dc011f17 	ldw	r16,1148(sp)
 8003a24:	dc400404 	addi	r17,sp,16
 8003a28:	003ea406 	br	80034bc <__alt_data_end+0xfc0034bc>
 8003a2c:	b809883a 	mov	r4,r23
 8003a30:	b00b883a 	mov	r5,r22
 8003a34:	d9811e04 	addi	r6,sp,1144
 8003a38:	80097f40 	call	80097f4 <__sprint_r>
 8003a3c:	103b751e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 8003a40:	d8c12017 	ldw	r3,1152(sp)
 8003a44:	da000404 	addi	r8,sp,16
 8003a48:	003c3706 	br	8002b28 <__alt_data_end+0xfc002b28>
 8003a4c:	04a5c83a 	sub	r18,zero,r18
 8003a50:	9004c03a 	cmpne	r2,r18,zero
 8003a54:	056bc83a 	sub	r21,zero,r21
 8003a58:	a8abc83a 	sub	r21,r21,r2
 8003a5c:	04c00b44 	movi	r19,45
 8003a60:	dcc12785 	stb	r19,1182(sp)
 8003a64:	da413215 	stw	r9,1224(sp)
 8003a68:	00800044 	movi	r2,1
 8003a6c:	9546b03a 	or	r3,r18,r21
 8003a70:	003bb106 	br	8002938 <__alt_data_end+0xfc002938>
 8003a74:	da013f15 	stw	r8,1276(sp)
 8003a78:	da413e15 	stw	r9,1272(sp)
 8003a7c:	80094500 	call	8009450 <__fpclassifyd>
 8003a80:	da013f17 	ldw	r8,1276(sp)
 8003a84:	da413e17 	ldw	r9,1272(sp)
 8003a88:	1000e526 	beq	r2,zero,8003e20 <___vfprintf_internal_r+0x1a6c>
 8003a8c:	04fff7c4 	movi	r19,-33
 8003a90:	00bfffc4 	movi	r2,-1
 8003a94:	84e6703a 	and	r19,r16,r19
 8003a98:	48822926 	beq	r9,r2,8004340 <___vfprintf_internal_r+0x1f8c>
 8003a9c:	008011c4 	movi	r2,71
 8003aa0:	98821626 	beq	r19,r2,80042fc <___vfprintf_internal_r+0x1f48>
 8003aa4:	d9013917 	ldw	r4,1252(sp)
 8003aa8:	e0c04014 	ori	r3,fp,256
 8003aac:	d8c12d15 	stw	r3,1204(sp)
 8003ab0:	20021f16 	blt	r4,zero,8004330 <___vfprintf_internal_r+0x1f7c>
 8003ab4:	dc413917 	ldw	r17,1252(sp)
 8003ab8:	d8012b05 	stb	zero,1196(sp)
 8003abc:	00801984 	movi	r2,102
 8003ac0:	80814d26 	beq	r16,r2,8003ff8 <___vfprintf_internal_r+0x1c44>
 8003ac4:	00801184 	movi	r2,70
 8003ac8:	80814b26 	beq	r16,r2,8003ff8 <___vfprintf_internal_r+0x1c44>
 8003acc:	00801144 	movi	r2,69
 8003ad0:	98821d26 	beq	r19,r2,8004348 <___vfprintf_internal_r+0x1f94>
 8003ad4:	482b883a 	mov	r21,r9
 8003ad8:	d8812604 	addi	r2,sp,1176
 8003adc:	d8800115 	stw	r2,4(sp)
 8003ae0:	d9413717 	ldw	r5,1244(sp)
 8003ae4:	d8812504 	addi	r2,sp,1172
 8003ae8:	d8800215 	stw	r2,8(sp)
 8003aec:	d8812104 	addi	r2,sp,1156
 8003af0:	dd400015 	stw	r21,0(sp)
 8003af4:	d8800315 	stw	r2,12(sp)
 8003af8:	b809883a 	mov	r4,r23
 8003afc:	880d883a 	mov	r6,r17
 8003b00:	01c00084 	movi	r7,2
 8003b04:	da013f15 	stw	r8,1276(sp)
 8003b08:	da413e15 	stw	r9,1272(sp)
 8003b0c:	800482c0 	call	800482c <_dtoa_r>
 8003b10:	d8813115 	stw	r2,1220(sp)
 8003b14:	008019c4 	movi	r2,103
 8003b18:	da013f17 	ldw	r8,1276(sp)
 8003b1c:	da413e17 	ldw	r9,1272(sp)
 8003b20:	80800226 	beq	r16,r2,8003b2c <___vfprintf_internal_r+0x1778>
 8003b24:	008011c4 	movi	r2,71
 8003b28:	8081451e 	bne	r16,r2,8004040 <___vfprintf_internal_r+0x1c8c>
 8003b2c:	e080004c 	andi	r2,fp,1
 8003b30:	10021e26 	beq	r2,zero,80043ac <___vfprintf_internal_r+0x1ff8>
 8003b34:	d8c13117 	ldw	r3,1220(sp)
 8003b38:	1d55883a 	add	r10,r3,r21
 8003b3c:	d9013717 	ldw	r4,1244(sp)
 8003b40:	880b883a 	mov	r5,r17
 8003b44:	000d883a 	mov	r6,zero
 8003b48:	000f883a 	mov	r7,zero
 8003b4c:	da013f15 	stw	r8,1276(sp)
 8003b50:	da413e15 	stw	r9,1272(sp)
 8003b54:	da813d15 	stw	r10,1268(sp)
 8003b58:	800d56c0 	call	800d56c <__eqdf2>
 8003b5c:	da013f17 	ldw	r8,1276(sp)
 8003b60:	da413e17 	ldw	r9,1272(sp)
 8003b64:	da813d17 	ldw	r10,1268(sp)
 8003b68:	1001a126 	beq	r2,zero,80041f0 <___vfprintf_internal_r+0x1e3c>
 8003b6c:	d8812117 	ldw	r2,1156(sp)
 8003b70:	1280062e 	bgeu	r2,r10,8003b8c <___vfprintf_internal_r+0x17d8>
 8003b74:	01000c04 	movi	r4,48
 8003b78:	10c00044 	addi	r3,r2,1
 8003b7c:	d8c12115 	stw	r3,1156(sp)
 8003b80:	11000005 	stb	r4,0(r2)
 8003b84:	d8812117 	ldw	r2,1156(sp)
 8003b88:	12bffb36 	bltu	r2,r10,8003b78 <__alt_data_end+0xfc003b78>
 8003b8c:	d8c13117 	ldw	r3,1220(sp)
 8003b90:	10c5c83a 	sub	r2,r2,r3
 8003b94:	d8813315 	stw	r2,1228(sp)
 8003b98:	008011c4 	movi	r2,71
 8003b9c:	98818926 	beq	r19,r2,80041c4 <___vfprintf_internal_r+0x1e10>
 8003ba0:	00801944 	movi	r2,101
 8003ba4:	14023c0e 	bge	r2,r16,8004498 <___vfprintf_internal_r+0x20e4>
 8003ba8:	d8c12617 	ldw	r3,1176(sp)
 8003bac:	00801984 	movi	r2,102
 8003bb0:	d8c13415 	stw	r3,1232(sp)
 8003bb4:	8081ef26 	beq	r16,r2,8004374 <___vfprintf_internal_r+0x1fc0>
 8003bb8:	d8c13417 	ldw	r3,1232(sp)
 8003bbc:	d9013317 	ldw	r4,1228(sp)
 8003bc0:	1901e316 	blt	r3,r4,8004350 <___vfprintf_internal_r+0x1f9c>
 8003bc4:	e080004c 	andi	r2,fp,1
 8003bc8:	1001f426 	beq	r2,zero,800439c <___vfprintf_internal_r+0x1fe8>
 8003bcc:	d8c13417 	ldw	r3,1232(sp)
 8003bd0:	1c400044 	addi	r17,r3,1
 8003bd4:	8839883a 	mov	fp,r17
 8003bd8:	8801e416 	blt	r17,zero,800436c <___vfprintf_internal_r+0x1fb8>
 8003bdc:	dd412b07 	ldb	r21,1196(sp)
 8003be0:	a801701e 	bne	r21,zero,80041a4 <___vfprintf_internal_r+0x1df0>
 8003be4:	df012b15 	stw	fp,1196(sp)
 8003be8:	dcc12783 	ldbu	r19,1182(sp)
 8003bec:	df012d17 	ldw	fp,1204(sp)
 8003bf0:	d8013215 	stw	zero,1224(sp)
 8003bf4:	dc812d15 	stw	r18,1204(sp)
 8003bf8:	003b6e06 	br	80029b4 <__alt_data_end+0xfc0029b4>
 8003bfc:	e080040c 	andi	r2,fp,16
 8003c00:	1000b51e 	bne	r2,zero,8003ed8 <___vfprintf_internal_r+0x1b24>
 8003c04:	e080100c 	andi	r2,fp,64
 8003c08:	10015b26 	beq	r2,zero,8004178 <___vfprintf_internal_r+0x1dc4>
 8003c0c:	d9012d17 	ldw	r4,1204(sp)
 8003c10:	d9412f17 	ldw	r5,1212(sp)
 8003c14:	20800017 	ldw	r2,0(r4)
 8003c18:	21000104 	addi	r4,r4,4
 8003c1c:	d9012d15 	stw	r4,1204(sp)
 8003c20:	1140000d 	sth	r5,0(r2)
 8003c24:	003a2006 	br	80024a8 <__alt_data_end+0xfc0024a8>
 8003c28:	e0c0100c 	andi	r3,fp,64
 8003c2c:	1800a226 	beq	r3,zero,8003eb8 <___vfprintf_internal_r+0x1b04>
 8003c30:	d8c12d17 	ldw	r3,1204(sp)
 8003c34:	1480000b 	ldhu	r18,0(r2)
 8003c38:	002b883a 	mov	r21,zero
 8003c3c:	18c00104 	addi	r3,r3,4
 8003c40:	d8c12d15 	stw	r3,1204(sp)
 8003c44:	0005883a 	mov	r2,zero
 8003c48:	9007883a 	mov	r3,r18
 8003c4c:	003c6906 	br	8002df4 <__alt_data_end+0xfc002df4>
 8003c50:	e0c0100c 	andi	r3,fp,64
 8003c54:	18009026 	beq	r3,zero,8003e98 <___vfprintf_internal_r+0x1ae4>
 8003c58:	1480000b 	ldhu	r18,0(r2)
 8003c5c:	d8812d17 	ldw	r2,1204(sp)
 8003c60:	002b883a 	mov	r21,zero
 8003c64:	9007883a 	mov	r3,r18
 8003c68:	10800104 	addi	r2,r2,4
 8003c6c:	d8812d15 	stw	r2,1204(sp)
 8003c70:	00800044 	movi	r2,1
 8003c74:	003c5f06 	br	8002df4 <__alt_data_end+0xfc002df4>
 8003c78:	e0c0100c 	andi	r3,fp,64
 8003c7c:	18008026 	beq	r3,zero,8003e80 <___vfprintf_internal_r+0x1acc>
 8003c80:	d9012d17 	ldw	r4,1204(sp)
 8003c84:	1480000b 	ldhu	r18,0(r2)
 8003c88:	002b883a 	mov	r21,zero
 8003c8c:	21000104 	addi	r4,r4,4
 8003c90:	d9012d15 	stw	r4,1204(sp)
 8003c94:	003c7906 	br	8002e7c <__alt_data_end+0xfc002e7c>
 8003c98:	e080100c 	andi	r2,fp,64
 8003c9c:	10007126 	beq	r2,zero,8003e64 <___vfprintf_internal_r+0x1ab0>
 8003ca0:	1c80000f 	ldh	r18,0(r3)
 8003ca4:	d8812d17 	ldw	r2,1204(sp)
 8003ca8:	902bd7fa 	srai	r21,r18,31
 8003cac:	10800104 	addi	r2,r2,4
 8003cb0:	d8812d15 	stw	r2,1204(sp)
 8003cb4:	a805883a 	mov	r2,r21
 8003cb8:	003b1a06 	br	8002924 <__alt_data_end+0xfc002924>
 8003cbc:	e4000007 	ldb	r16,0(fp)
 8003cc0:	e005883a 	mov	r2,fp
 8003cc4:	003a2306 	br	8002554 <__alt_data_end+0xfc002554>
 8003cc8:	00800084 	movi	r2,2
 8003ccc:	003c4906 	br	8002df4 <__alt_data_end+0xfc002df4>
 8003cd0:	01020074 	movhi	r4,2049
 8003cd4:	2106ca84 	addi	r4,r4,6954
 8003cd8:	d9012c15 	stw	r4,1200(sp)
 8003cdc:	d9012c17 	ldw	r4,1200(sp)
 8003ce0:	1c47883a 	add	r3,r3,r17
 8003ce4:	10800044 	addi	r2,r2,1
 8003ce8:	41000015 	stw	r4,0(r8)
 8003cec:	44400115 	stw	r17,4(r8)
 8003cf0:	d8c12015 	stw	r3,1152(sp)
 8003cf4:	d8811f15 	stw	r2,1148(sp)
 8003cf8:	010001c4 	movi	r4,7
 8003cfc:	20becc16 	blt	r4,r2,8003830 <__alt_data_end+0xfc003830>
 8003d00:	42000204 	addi	r8,r8,8
 8003d04:	003ed106 	br	800384c <__alt_data_end+0xfc00384c>
 8003d08:	01020074 	movhi	r4,2049
 8003d0c:	2106ca84 	addi	r4,r4,6954
 8003d10:	d9012c15 	stw	r4,1200(sp)
 8003d14:	003ba306 	br	8002ba4 <__alt_data_end+0xfc002ba4>
 8003d18:	b809883a 	mov	r4,r23
 8003d1c:	b00b883a 	mov	r5,r22
 8003d20:	d9811e04 	addi	r6,sp,1144
 8003d24:	80097f40 	call	80097f4 <__sprint_r>
 8003d28:	103aba1e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 8003d2c:	d8c12017 	ldw	r3,1152(sp)
 8003d30:	da000404 	addi	r8,sp,16
 8003d34:	003d6c06 	br	80032e8 <__alt_data_end+0xfc0032e8>
 8003d38:	d8811f17 	ldw	r2,1148(sp)
 8003d3c:	01420074 	movhi	r5,2049
 8003d40:	01000044 	movi	r4,1
 8003d44:	18c00044 	addi	r3,r3,1
 8003d48:	10800044 	addi	r2,r2,1
 8003d4c:	2946ca04 	addi	r5,r5,6952
 8003d50:	41000115 	stw	r4,4(r8)
 8003d54:	41400015 	stw	r5,0(r8)
 8003d58:	d8c12015 	stw	r3,1152(sp)
 8003d5c:	d8811f15 	stw	r2,1148(sp)
 8003d60:	010001c4 	movi	r4,7
 8003d64:	20806716 	blt	r4,r2,8003f04 <___vfprintf_internal_r+0x1b50>
 8003d68:	42000204 	addi	r8,r8,8
 8003d6c:	8000041e 	bne	r16,zero,8003d80 <___vfprintf_internal_r+0x19cc>
 8003d70:	d8813317 	ldw	r2,1228(sp)
 8003d74:	1000021e 	bne	r2,zero,8003d80 <___vfprintf_internal_r+0x19cc>
 8003d78:	e080004c 	andi	r2,fp,1
 8003d7c:	103ba026 	beq	r2,zero,8002c00 <__alt_data_end+0xfc002c00>
 8003d80:	d9013817 	ldw	r4,1248(sp)
 8003d84:	d8811f17 	ldw	r2,1148(sp)
 8003d88:	d9413517 	ldw	r5,1236(sp)
 8003d8c:	1907883a 	add	r3,r3,r4
 8003d90:	10800044 	addi	r2,r2,1
 8003d94:	41000115 	stw	r4,4(r8)
 8003d98:	41400015 	stw	r5,0(r8)
 8003d9c:	d8c12015 	stw	r3,1152(sp)
 8003da0:	d8811f15 	stw	r2,1148(sp)
 8003da4:	010001c4 	movi	r4,7
 8003da8:	20815716 	blt	r4,r2,8004308 <___vfprintf_internal_r+0x1f54>
 8003dac:	42000204 	addi	r8,r8,8
 8003db0:	0421c83a 	sub	r16,zero,r16
 8003db4:	0400810e 	bge	zero,r16,8003fbc <___vfprintf_internal_r+0x1c08>
 8003db8:	04400404 	movi	r17,16
 8003dbc:	8c00bd0e 	bge	r17,r16,80040b4 <___vfprintf_internal_r+0x1d00>
 8003dc0:	01420074 	movhi	r5,2049
 8003dc4:	2946ca84 	addi	r5,r5,6954
 8003dc8:	d9412c15 	stw	r5,1200(sp)
 8003dcc:	04c001c4 	movi	r19,7
 8003dd0:	00000306 	br	8003de0 <___vfprintf_internal_r+0x1a2c>
 8003dd4:	42000204 	addi	r8,r8,8
 8003dd8:	843ffc04 	addi	r16,r16,-16
 8003ddc:	8c00b80e 	bge	r17,r16,80040c0 <___vfprintf_internal_r+0x1d0c>
 8003de0:	18c00404 	addi	r3,r3,16
 8003de4:	10800044 	addi	r2,r2,1
 8003de8:	45000015 	stw	r20,0(r8)
 8003dec:	44400115 	stw	r17,4(r8)
 8003df0:	d8c12015 	stw	r3,1152(sp)
 8003df4:	d8811f15 	stw	r2,1148(sp)
 8003df8:	98bff60e 	bge	r19,r2,8003dd4 <__alt_data_end+0xfc003dd4>
 8003dfc:	b809883a 	mov	r4,r23
 8003e00:	b00b883a 	mov	r5,r22
 8003e04:	d9811e04 	addi	r6,sp,1144
 8003e08:	80097f40 	call	80097f4 <__sprint_r>
 8003e0c:	103a811e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 8003e10:	d8c12017 	ldw	r3,1152(sp)
 8003e14:	d8811f17 	ldw	r2,1148(sp)
 8003e18:	da000404 	addi	r8,sp,16
 8003e1c:	003fee06 	br	8003dd8 <__alt_data_end+0xfc003dd8>
 8003e20:	008011c4 	movi	r2,71
 8003e24:	1400db16 	blt	r2,r16,8004194 <___vfprintf_internal_r+0x1de0>
 8003e28:	01020074 	movhi	r4,2049
 8003e2c:	2106bc04 	addi	r4,r4,6896
 8003e30:	d9013115 	stw	r4,1220(sp)
 8003e34:	00c000c4 	movi	r3,3
 8003e38:	00bfdfc4 	movi	r2,-129
 8003e3c:	d8c12b15 	stw	r3,1196(sp)
 8003e40:	e0b8703a 	and	fp,fp,r2
 8003e44:	dcc12783 	ldbu	r19,1182(sp)
 8003e48:	dc812d15 	stw	r18,1204(sp)
 8003e4c:	1823883a 	mov	r17,r3
 8003e50:	d8013215 	stw	zero,1224(sp)
 8003e54:	d8013415 	stw	zero,1232(sp)
 8003e58:	003ad606 	br	80029b4 <__alt_data_end+0xfc0029b4>
 8003e5c:	4823883a 	mov	r17,r9
 8003e60:	003cc906 	br	8003188 <__alt_data_end+0xfc003188>
 8003e64:	1c800017 	ldw	r18,0(r3)
 8003e68:	d8c12d17 	ldw	r3,1204(sp)
 8003e6c:	902bd7fa 	srai	r21,r18,31
 8003e70:	18c00104 	addi	r3,r3,4
 8003e74:	d8c12d15 	stw	r3,1204(sp)
 8003e78:	a805883a 	mov	r2,r21
 8003e7c:	003aa906 	br	8002924 <__alt_data_end+0xfc002924>
 8003e80:	d9412d17 	ldw	r5,1204(sp)
 8003e84:	14800017 	ldw	r18,0(r2)
 8003e88:	002b883a 	mov	r21,zero
 8003e8c:	29400104 	addi	r5,r5,4
 8003e90:	d9412d15 	stw	r5,1204(sp)
 8003e94:	003bf906 	br	8002e7c <__alt_data_end+0xfc002e7c>
 8003e98:	d8c12d17 	ldw	r3,1204(sp)
 8003e9c:	14800017 	ldw	r18,0(r2)
 8003ea0:	002b883a 	mov	r21,zero
 8003ea4:	18c00104 	addi	r3,r3,4
 8003ea8:	d8c12d15 	stw	r3,1204(sp)
 8003eac:	00800044 	movi	r2,1
 8003eb0:	9007883a 	mov	r3,r18
 8003eb4:	003bcf06 	br	8002df4 <__alt_data_end+0xfc002df4>
 8003eb8:	d9012d17 	ldw	r4,1204(sp)
 8003ebc:	14800017 	ldw	r18,0(r2)
 8003ec0:	002b883a 	mov	r21,zero
 8003ec4:	21000104 	addi	r4,r4,4
 8003ec8:	d9012d15 	stw	r4,1204(sp)
 8003ecc:	0005883a 	mov	r2,zero
 8003ed0:	9007883a 	mov	r3,r18
 8003ed4:	003bc706 	br	8002df4 <__alt_data_end+0xfc002df4>
 8003ed8:	d9412d17 	ldw	r5,1204(sp)
 8003edc:	d8c12f17 	ldw	r3,1212(sp)
 8003ee0:	28800017 	ldw	r2,0(r5)
 8003ee4:	29400104 	addi	r5,r5,4
 8003ee8:	d9412d15 	stw	r5,1204(sp)
 8003eec:	10c00015 	stw	r3,0(r2)
 8003ef0:	00396d06 	br	80024a8 <__alt_data_end+0xfc0024a8>
 8003ef4:	01020074 	movhi	r4,2049
 8003ef8:	2106ba04 	addi	r4,r4,6888
 8003efc:	d9013115 	stw	r4,1220(sp)
 8003f00:	003ba206 	br	8002d8c <__alt_data_end+0xfc002d8c>
 8003f04:	b809883a 	mov	r4,r23
 8003f08:	b00b883a 	mov	r5,r22
 8003f0c:	d9811e04 	addi	r6,sp,1144
 8003f10:	80097f40 	call	80097f4 <__sprint_r>
 8003f14:	103a3f1e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 8003f18:	dc012617 	ldw	r16,1176(sp)
 8003f1c:	d8c12017 	ldw	r3,1152(sp)
 8003f20:	da000404 	addi	r8,sp,16
 8003f24:	003f9106 	br	8003d6c <__alt_data_end+0xfc003d6c>
 8003f28:	e0800044 	addi	r2,fp,1
 8003f2c:	9cc00814 	ori	r19,r19,32
 8003f30:	e4000047 	ldb	r16,1(fp)
 8003f34:	00398706 	br	8002554 <__alt_data_end+0xfc002554>
 8003f38:	d8812e17 	ldw	r2,1208(sp)
 8003f3c:	d8c12d15 	stw	r3,1204(sp)
 8003f40:	0085c83a 	sub	r2,zero,r2
 8003f44:	d8812e15 	stw	r2,1208(sp)
 8003f48:	e005883a 	mov	r2,fp
 8003f4c:	003a3a06 	br	8002838 <__alt_data_end+0xfc002838>
 8003f50:	b809883a 	mov	r4,r23
 8003f54:	b00b883a 	mov	r5,r22
 8003f58:	d9811e04 	addi	r6,sp,1144
 8003f5c:	80097f40 	call	80097f4 <__sprint_r>
 8003f60:	103a2c1e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 8003f64:	d8c12017 	ldw	r3,1152(sp)
 8003f68:	da000404 	addi	r8,sp,16
 8003f6c:	003cf006 	br	8003330 <__alt_data_end+0xfc003330>
 8003f70:	d8c12817 	ldw	r3,1184(sp)
 8003f74:	d9013117 	ldw	r4,1220(sp)
 8003f78:	1923c83a 	sub	r17,r3,r4
 8003f7c:	003a8806 	br	80029a0 <__alt_data_end+0xfc0029a0>
 8003f80:	da013f15 	stw	r8,1276(sp)
 8003f84:	800231c0 	call	800231c <strlen>
 8003f88:	1023883a 	mov	r17,r2
 8003f8c:	da013f17 	ldw	r8,1276(sp)
 8003f90:	883c7f0e 	bge	r17,zero,8003190 <__alt_data_end+0xfc003190>
 8003f94:	0005883a 	mov	r2,zero
 8003f98:	003c7d06 	br	8003190 <__alt_data_end+0xfc003190>
 8003f9c:	b809883a 	mov	r4,r23
 8003fa0:	b00b883a 	mov	r5,r22
 8003fa4:	d9811e04 	addi	r6,sp,1144
 8003fa8:	80097f40 	call	80097f4 <__sprint_r>
 8003fac:	103a191e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 8003fb0:	d8c12017 	ldw	r3,1152(sp)
 8003fb4:	d8811f17 	ldw	r2,1148(sp)
 8003fb8:	da000404 	addi	r8,sp,16
 8003fbc:	d9413317 	ldw	r5,1228(sp)
 8003fc0:	d9013117 	ldw	r4,1220(sp)
 8003fc4:	10800044 	addi	r2,r2,1
 8003fc8:	28c7883a 	add	r3,r5,r3
 8003fcc:	41000015 	stw	r4,0(r8)
 8003fd0:	41400115 	stw	r5,4(r8)
 8003fd4:	d8c12015 	stw	r3,1152(sp)
 8003fd8:	d8811f15 	stw	r2,1148(sp)
 8003fdc:	010001c4 	movi	r4,7
 8003fe0:	20bb060e 	bge	r4,r2,8002bfc <__alt_data_end+0xfc002bfc>
 8003fe4:	003d6206 	br	8003570 <__alt_data_end+0xfc003570>
 8003fe8:	01020074 	movhi	r4,2049
 8003fec:	2106ce84 	addi	r4,r4,6970
 8003ff0:	d9013615 	stw	r4,1240(sp)
 8003ff4:	003aa306 	br	8002a84 <__alt_data_end+0xfc002a84>
 8003ff8:	d8812604 	addi	r2,sp,1176
 8003ffc:	d8800115 	stw	r2,4(sp)
 8004000:	d9413717 	ldw	r5,1244(sp)
 8004004:	d8812504 	addi	r2,sp,1172
 8004008:	d8800215 	stw	r2,8(sp)
 800400c:	d8812104 	addi	r2,sp,1156
 8004010:	da400015 	stw	r9,0(sp)
 8004014:	d8800315 	stw	r2,12(sp)
 8004018:	b809883a 	mov	r4,r23
 800401c:	880d883a 	mov	r6,r17
 8004020:	01c000c4 	movi	r7,3
 8004024:	da013f15 	stw	r8,1276(sp)
 8004028:	da413e15 	stw	r9,1272(sp)
 800402c:	800482c0 	call	800482c <_dtoa_r>
 8004030:	da413e17 	ldw	r9,1272(sp)
 8004034:	da013f17 	ldw	r8,1276(sp)
 8004038:	d8813115 	stw	r2,1220(sp)
 800403c:	482b883a 	mov	r21,r9
 8004040:	d8c13117 	ldw	r3,1220(sp)
 8004044:	00801184 	movi	r2,70
 8004048:	1d55883a 	add	r10,r3,r21
 800404c:	98bebb1e 	bne	r19,r2,8003b3c <__alt_data_end+0xfc003b3c>
 8004050:	19000007 	ldb	r4,0(r3)
 8004054:	00800c04 	movi	r2,48
 8004058:	2080dd26 	beq	r4,r2,80043d0 <___vfprintf_internal_r+0x201c>
 800405c:	d8c12617 	ldw	r3,1176(sp)
 8004060:	50d5883a 	add	r10,r10,r3
 8004064:	003eb506 	br	8003b3c <__alt_data_end+0xfc003b3c>
 8004068:	0023883a 	mov	r17,zero
 800406c:	003d9b06 	br	80036dc <__alt_data_end+0xfc0036dc>
 8004070:	b809883a 	mov	r4,r23
 8004074:	b00b883a 	mov	r5,r22
 8004078:	d9811e04 	addi	r6,sp,1144
 800407c:	80097f40 	call	80097f4 <__sprint_r>
 8004080:	1039e41e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 8004084:	d8c12017 	ldw	r3,1152(sp)
 8004088:	da000404 	addi	r8,sp,16
 800408c:	003d9206 	br	80036d8 <__alt_data_end+0xfc0036d8>
 8004090:	b809883a 	mov	r4,r23
 8004094:	b00b883a 	mov	r5,r22
 8004098:	d9811e04 	addi	r6,sp,1144
 800409c:	80097f40 	call	80097f4 <__sprint_r>
 80040a0:	1039dc1e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 80040a4:	d8812617 	ldw	r2,1176(sp)
 80040a8:	d8c12017 	ldw	r3,1152(sp)
 80040ac:	da000404 	addi	r8,sp,16
 80040b0:	003dfb06 	br	80038a0 <__alt_data_end+0xfc0038a0>
 80040b4:	01020074 	movhi	r4,2049
 80040b8:	2106ca84 	addi	r4,r4,6954
 80040bc:	d9012c15 	stw	r4,1200(sp)
 80040c0:	d9012c17 	ldw	r4,1200(sp)
 80040c4:	1c07883a 	add	r3,r3,r16
 80040c8:	10800044 	addi	r2,r2,1
 80040cc:	41000015 	stw	r4,0(r8)
 80040d0:	44000115 	stw	r16,4(r8)
 80040d4:	d8c12015 	stw	r3,1152(sp)
 80040d8:	d8811f15 	stw	r2,1148(sp)
 80040dc:	010001c4 	movi	r4,7
 80040e0:	20bfae16 	blt	r4,r2,8003f9c <__alt_data_end+0xfc003f9c>
 80040e4:	42000204 	addi	r8,r8,8
 80040e8:	003fb406 	br	8003fbc <__alt_data_end+0xfc003fbc>
 80040ec:	0021883a 	mov	r16,zero
 80040f0:	003dfd06 	br	80038e8 <__alt_data_end+0xfc0038e8>
 80040f4:	01420074 	movhi	r5,2049
 80040f8:	2946ce84 	addi	r5,r5,6970
 80040fc:	d9413615 	stw	r5,1240(sp)
 8004100:	003ae306 	br	8002c90 <__alt_data_end+0xfc002c90>
 8004104:	b809883a 	mov	r4,r23
 8004108:	b00b883a 	mov	r5,r22
 800410c:	d9811e04 	addi	r6,sp,1144
 8004110:	80097f40 	call	80097f4 <__sprint_r>
 8004114:	1039bf1e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 8004118:	d8812617 	ldw	r2,1176(sp)
 800411c:	d9413317 	ldw	r5,1228(sp)
 8004120:	d8c12017 	ldw	r3,1152(sp)
 8004124:	da000404 	addi	r8,sp,16
 8004128:	2885c83a 	sub	r2,r5,r2
 800412c:	003ded06 	br	80038e4 <__alt_data_end+0xfc0038e4>
 8004130:	00800184 	movi	r2,6
 8004134:	1240012e 	bgeu	r2,r9,800413c <___vfprintf_internal_r+0x1d88>
 8004138:	1013883a 	mov	r9,r2
 800413c:	4823883a 	mov	r17,r9
 8004140:	4805883a 	mov	r2,r9
 8004144:	4800b216 	blt	r9,zero,8004410 <___vfprintf_internal_r+0x205c>
 8004148:	01420074 	movhi	r5,2049
 800414c:	2946c804 	addi	r5,r5,6944
 8004150:	d8812b15 	stw	r2,1196(sp)
 8004154:	dc812d15 	stw	r18,1204(sp)
 8004158:	d8013215 	stw	zero,1224(sp)
 800415c:	d8013415 	stw	zero,1232(sp)
 8004160:	d9413115 	stw	r5,1220(sp)
 8004164:	0005883a 	mov	r2,zero
 8004168:	003a1906 	br	80029d0 <__alt_data_end+0xfc0029d0>
 800416c:	04c00b44 	movi	r19,45
 8004170:	dcc12785 	stb	r19,1182(sp)
 8004174:	003b0006 	br	8002d78 <__alt_data_end+0xfc002d78>
 8004178:	d8c12d17 	ldw	r3,1204(sp)
 800417c:	d9012f17 	ldw	r4,1212(sp)
 8004180:	18800017 	ldw	r2,0(r3)
 8004184:	18c00104 	addi	r3,r3,4
 8004188:	d8c12d15 	stw	r3,1204(sp)
 800418c:	11000015 	stw	r4,0(r2)
 8004190:	0038c506 	br	80024a8 <__alt_data_end+0xfc0024a8>
 8004194:	01420074 	movhi	r5,2049
 8004198:	2946bd04 	addi	r5,r5,6900
 800419c:	d9413115 	stw	r5,1220(sp)
 80041a0:	003f2406 	br	8003e34 <__alt_data_end+0xfc003e34>
 80041a4:	00800b44 	movi	r2,45
 80041a8:	d8812785 	stb	r2,1182(sp)
 80041ac:	df012b15 	stw	fp,1196(sp)
 80041b0:	d8013215 	stw	zero,1224(sp)
 80041b4:	df012d17 	ldw	fp,1204(sp)
 80041b8:	00800b44 	movi	r2,45
 80041bc:	dc812d15 	stw	r18,1204(sp)
 80041c0:	003a0006 	br	80029c4 <__alt_data_end+0xfc0029c4>
 80041c4:	d8c12617 	ldw	r3,1176(sp)
 80041c8:	00bfff44 	movi	r2,-3
 80041cc:	18800a16 	blt	r3,r2,80041f8 <___vfprintf_internal_r+0x1e44>
 80041d0:	48c00916 	blt	r9,r3,80041f8 <___vfprintf_internal_r+0x1e44>
 80041d4:	d8c13415 	stw	r3,1232(sp)
 80041d8:	040019c4 	movi	r16,103
 80041dc:	003e7606 	br	8003bb8 <__alt_data_end+0xfc003bb8>
 80041e0:	01020074 	movhi	r4,2049
 80041e4:	2106ca84 	addi	r4,r4,6954
 80041e8:	d9012c15 	stw	r4,1200(sp)
 80041ec:	003c8e06 	br	8003428 <__alt_data_end+0xfc003428>
 80041f0:	5005883a 	mov	r2,r10
 80041f4:	003e6506 	br	8003b8c <__alt_data_end+0xfc003b8c>
 80041f8:	843fff84 	addi	r16,r16,-2
 80041fc:	1d7fffc4 	addi	r21,r3,-1
 8004200:	dd412615 	stw	r21,1176(sp)
 8004204:	dc0122c5 	stb	r16,1163(sp)
 8004208:	a8009216 	blt	r21,zero,8004454 <___vfprintf_internal_r+0x20a0>
 800420c:	00800ac4 	movi	r2,43
 8004210:	d8812305 	stb	r2,1164(sp)
 8004214:	00800244 	movi	r2,9
 8004218:	1540660e 	bge	r2,r21,80043b4 <___vfprintf_internal_r+0x2000>
 800421c:	dcc122c4 	addi	r19,sp,1163
 8004220:	dc012c15 	stw	r16,1200(sp)
 8004224:	4023883a 	mov	r17,r8
 8004228:	9821883a 	mov	r16,r19
 800422c:	a809883a 	mov	r4,r21
 8004230:	01400284 	movi	r5,10
 8004234:	800c2bc0 	call	800c2bc <__modsi3>
 8004238:	10800c04 	addi	r2,r2,48
 800423c:	843fffc4 	addi	r16,r16,-1
 8004240:	a809883a 	mov	r4,r21
 8004244:	01400284 	movi	r5,10
 8004248:	80800005 	stb	r2,0(r16)
 800424c:	800c2680 	call	800c268 <__divsi3>
 8004250:	01000244 	movi	r4,9
 8004254:	102b883a 	mov	r21,r2
 8004258:	20bff416 	blt	r4,r2,800422c <__alt_data_end+0xfc00422c>
 800425c:	8811883a 	mov	r8,r17
 8004260:	10800c04 	addi	r2,r2,48
 8004264:	8023883a 	mov	r17,r16
 8004268:	897fffc4 	addi	r5,r17,-1
 800426c:	88bfffc5 	stb	r2,-1(r17)
 8004270:	dc012c17 	ldw	r16,1200(sp)
 8004274:	2cc08a2e 	bgeu	r5,r19,80044a0 <___vfprintf_internal_r+0x20ec>
 8004278:	d9812384 	addi	r6,sp,1166
 800427c:	344dc83a 	sub	r6,r6,r17
 8004280:	d9012344 	addi	r4,sp,1165
 8004284:	998d883a 	add	r6,r19,r6
 8004288:	00000106 	br	8004290 <___vfprintf_internal_r+0x1edc>
 800428c:	28800003 	ldbu	r2,0(r5)
 8004290:	20800005 	stb	r2,0(r4)
 8004294:	21000044 	addi	r4,r4,1
 8004298:	29400044 	addi	r5,r5,1
 800429c:	21bffb1e 	bne	r4,r6,800428c <__alt_data_end+0xfc00428c>
 80042a0:	d8812304 	addi	r2,sp,1164
 80042a4:	1445c83a 	sub	r2,r2,r17
 80042a8:	d9412344 	addi	r5,sp,1165
 80042ac:	2885883a 	add	r2,r5,r2
 80042b0:	14e7c83a 	sub	r19,r2,r19
 80042b4:	d8813317 	ldw	r2,1228(sp)
 80042b8:	d8c13317 	ldw	r3,1228(sp)
 80042bc:	dcc13a15 	stw	r19,1256(sp)
 80042c0:	14e3883a 	add	r17,r2,r19
 80042c4:	00800044 	movi	r2,1
 80042c8:	10c0550e 	bge	r2,r3,8004420 <___vfprintf_internal_r+0x206c>
 80042cc:	8c400044 	addi	r17,r17,1
 80042d0:	8839883a 	mov	fp,r17
 80042d4:	88005016 	blt	r17,zero,8004418 <___vfprintf_internal_r+0x2064>
 80042d8:	d8013415 	stw	zero,1232(sp)
 80042dc:	003e3f06 	br	8003bdc <__alt_data_end+0xfc003bdc>
 80042e0:	da412b15 	stw	r9,1196(sp)
 80042e4:	dcc12783 	ldbu	r19,1182(sp)
 80042e8:	4823883a 	mov	r17,r9
 80042ec:	dc812d15 	stw	r18,1204(sp)
 80042f0:	d8013215 	stw	zero,1224(sp)
 80042f4:	d8013415 	stw	zero,1232(sp)
 80042f8:	0039ae06 	br	80029b4 <__alt_data_end+0xfc0029b4>
 80042fc:	483de91e 	bne	r9,zero,8003aa4 <__alt_data_end+0xfc003aa4>
 8004300:	8813883a 	mov	r9,r17
 8004304:	003de706 	br	8003aa4 <__alt_data_end+0xfc003aa4>
 8004308:	b809883a 	mov	r4,r23
 800430c:	b00b883a 	mov	r5,r22
 8004310:	d9811e04 	addi	r6,sp,1144
 8004314:	80097f40 	call	80097f4 <__sprint_r>
 8004318:	10393e1e 	bne	r2,zero,8002814 <__alt_data_end+0xfc002814>
 800431c:	dc012617 	ldw	r16,1176(sp)
 8004320:	d8c12017 	ldw	r3,1152(sp)
 8004324:	d8811f17 	ldw	r2,1148(sp)
 8004328:	da000404 	addi	r8,sp,16
 800432c:	003ea006 	br	8003db0 <__alt_data_end+0xfc003db0>
 8004330:	00c00b44 	movi	r3,45
 8004334:	2460003c 	xorhi	r17,r4,32768
 8004338:	d8c12b05 	stb	r3,1196(sp)
 800433c:	003ddf06 	br	8003abc <__alt_data_end+0xfc003abc>
 8004340:	02400184 	movi	r9,6
 8004344:	003dd706 	br	8003aa4 <__alt_data_end+0xfc003aa4>
 8004348:	4d400044 	addi	r21,r9,1
 800434c:	003de206 	br	8003ad8 <__alt_data_end+0xfc003ad8>
 8004350:	d8c13417 	ldw	r3,1232(sp)
 8004354:	00c0490e 	bge	zero,r3,800447c <___vfprintf_internal_r+0x20c8>
 8004358:	04400044 	movi	r17,1
 800435c:	d9013317 	ldw	r4,1228(sp)
 8004360:	8923883a 	add	r17,r17,r4
 8004364:	8839883a 	mov	fp,r17
 8004368:	883e1c0e 	bge	r17,zero,8003bdc <__alt_data_end+0xfc003bdc>
 800436c:	0039883a 	mov	fp,zero
 8004370:	003e1a06 	br	8003bdc <__alt_data_end+0xfc003bdc>
 8004374:	00c03b0e 	bge	zero,r3,8004464 <___vfprintf_internal_r+0x20b0>
 8004378:	4800021e 	bne	r9,zero,8004384 <___vfprintf_internal_r+0x1fd0>
 800437c:	e080004c 	andi	r2,fp,1
 8004380:	10000626 	beq	r2,zero,800439c <___vfprintf_internal_r+0x1fe8>
 8004384:	d8c13417 	ldw	r3,1232(sp)
 8004388:	4a400044 	addi	r9,r9,1
 800438c:	1a63883a 	add	r17,r3,r9
 8004390:	8839883a 	mov	fp,r17
 8004394:	883e110e 	bge	r17,zero,8003bdc <__alt_data_end+0xfc003bdc>
 8004398:	003ff406 	br	800436c <__alt_data_end+0xfc00436c>
 800439c:	1839883a 	mov	fp,r3
 80043a0:	18004116 	blt	r3,zero,80044a8 <___vfprintf_internal_r+0x20f4>
 80043a4:	dc413417 	ldw	r17,1232(sp)
 80043a8:	003e0c06 	br	8003bdc <__alt_data_end+0xfc003bdc>
 80043ac:	d8812117 	ldw	r2,1156(sp)
 80043b0:	003df606 	br	8003b8c <__alt_data_end+0xfc003b8c>
 80043b4:	00800c04 	movi	r2,48
 80043b8:	a8c00c04 	addi	r3,r21,48
 80043bc:	d8812345 	stb	r2,1165(sp)
 80043c0:	d8c12385 	stb	r3,1166(sp)
 80043c4:	d88123c4 	addi	r2,sp,1167
 80043c8:	dcc122c4 	addi	r19,sp,1163
 80043cc:	003fb806 	br	80042b0 <__alt_data_end+0xfc0042b0>
 80043d0:	d9013717 	ldw	r4,1244(sp)
 80043d4:	880b883a 	mov	r5,r17
 80043d8:	000d883a 	mov	r6,zero
 80043dc:	000f883a 	mov	r7,zero
 80043e0:	da013f15 	stw	r8,1276(sp)
 80043e4:	da413e15 	stw	r9,1272(sp)
 80043e8:	da813d15 	stw	r10,1268(sp)
 80043ec:	800d56c0 	call	800d56c <__eqdf2>
 80043f0:	da013f17 	ldw	r8,1276(sp)
 80043f4:	da413e17 	ldw	r9,1272(sp)
 80043f8:	da813d17 	ldw	r10,1268(sp)
 80043fc:	103f1726 	beq	r2,zero,800405c <__alt_data_end+0xfc00405c>
 8004400:	00800044 	movi	r2,1
 8004404:	1547c83a 	sub	r3,r2,r21
 8004408:	d8c12615 	stw	r3,1176(sp)
 800440c:	003f1406 	br	8004060 <__alt_data_end+0xfc004060>
 8004410:	0005883a 	mov	r2,zero
 8004414:	003f4c06 	br	8004148 <__alt_data_end+0xfc004148>
 8004418:	0039883a 	mov	fp,zero
 800441c:	003fae06 	br	80042d8 <__alt_data_end+0xfc0042d8>
 8004420:	e084703a 	and	r2,fp,r2
 8004424:	103faa26 	beq	r2,zero,80042d0 <__alt_data_end+0xfc0042d0>
 8004428:	003fa806 	br	80042cc <__alt_data_end+0xfc0042cc>
 800442c:	d9412d17 	ldw	r5,1204(sp)
 8004430:	2a400017 	ldw	r9,0(r5)
 8004434:	28c00104 	addi	r3,r5,4
 8004438:	d8c12d15 	stw	r3,1204(sp)
 800443c:	483ebc0e 	bge	r9,zero,8003f30 <__alt_data_end+0xfc003f30>
 8004440:	027fffc4 	movi	r9,-1
 8004444:	e4000047 	ldb	r16,1(fp)
 8004448:	00384206 	br	8002554 <__alt_data_end+0xfc002554>
 800444c:	043fffc4 	movi	r16,-1
 8004450:	0038ce06 	br	800278c <__alt_data_end+0xfc00278c>
 8004454:	00800b44 	movi	r2,45
 8004458:	056bc83a 	sub	r21,zero,r21
 800445c:	d8812305 	stb	r2,1164(sp)
 8004460:	003f6c06 	br	8004214 <__alt_data_end+0xfc004214>
 8004464:	4800081e 	bne	r9,zero,8004488 <___vfprintf_internal_r+0x20d4>
 8004468:	e080004c 	andi	r2,fp,1
 800446c:	1000061e 	bne	r2,zero,8004488 <___vfprintf_internal_r+0x20d4>
 8004470:	07000044 	movi	fp,1
 8004474:	e023883a 	mov	r17,fp
 8004478:	003dd806 	br	8003bdc <__alt_data_end+0xfc003bdc>
 800447c:	04400084 	movi	r17,2
 8004480:	88e3c83a 	sub	r17,r17,r3
 8004484:	003fb506 	br	800435c <__alt_data_end+0xfc00435c>
 8004488:	4c400084 	addi	r17,r9,2
 800448c:	8839883a 	mov	fp,r17
 8004490:	883dd20e 	bge	r17,zero,8003bdc <__alt_data_end+0xfc003bdc>
 8004494:	003fb506 	br	800436c <__alt_data_end+0xfc00436c>
 8004498:	d8c12617 	ldw	r3,1176(sp)
 800449c:	003f5706 	br	80041fc <__alt_data_end+0xfc0041fc>
 80044a0:	d8812344 	addi	r2,sp,1165
 80044a4:	003f8206 	br	80042b0 <__alt_data_end+0xfc0042b0>
 80044a8:	0039883a 	mov	fp,zero
 80044ac:	003fbd06 	br	80043a4 <__alt_data_end+0xfc0043a4>

080044b0 <__vfprintf_internal>:
 80044b0:	2007883a 	mov	r3,r4
 80044b4:	01020074 	movhi	r4,2049
 80044b8:	210e2504 	addi	r4,r4,14484
 80044bc:	21000017 	ldw	r4,0(r4)
 80044c0:	2805883a 	mov	r2,r5
 80044c4:	300f883a 	mov	r7,r6
 80044c8:	180b883a 	mov	r5,r3
 80044cc:	100d883a 	mov	r6,r2
 80044d0:	80023b41 	jmpi	80023b4 <___vfprintf_internal_r>

080044d4 <__swsetup_r>:
 80044d4:	00820074 	movhi	r2,2049
 80044d8:	defffd04 	addi	sp,sp,-12
 80044dc:	108e2504 	addi	r2,r2,14484
 80044e0:	dc400115 	stw	r17,4(sp)
 80044e4:	2023883a 	mov	r17,r4
 80044e8:	11000017 	ldw	r4,0(r2)
 80044ec:	dc000015 	stw	r16,0(sp)
 80044f0:	dfc00215 	stw	ra,8(sp)
 80044f4:	2821883a 	mov	r16,r5
 80044f8:	20000226 	beq	r4,zero,8004504 <__swsetup_r+0x30>
 80044fc:	20c00e17 	ldw	r3,56(r4)
 8004500:	18002e26 	beq	r3,zero,80045bc <__swsetup_r+0xe8>
 8004504:	8080030b 	ldhu	r2,12(r16)
 8004508:	10c0020c 	andi	r3,r2,8
 800450c:	100d883a 	mov	r6,r2
 8004510:	18000f26 	beq	r3,zero,8004550 <__swsetup_r+0x7c>
 8004514:	80c00417 	ldw	r3,16(r16)
 8004518:	18001526 	beq	r3,zero,8004570 <__swsetup_r+0x9c>
 800451c:	1100004c 	andi	r4,r2,1
 8004520:	20001c1e 	bne	r4,zero,8004594 <__swsetup_r+0xc0>
 8004524:	1080008c 	andi	r2,r2,2
 8004528:	1000261e 	bne	r2,zero,80045c4 <__swsetup_r+0xf0>
 800452c:	80800517 	ldw	r2,20(r16)
 8004530:	80800215 	stw	r2,8(r16)
 8004534:	18001c26 	beq	r3,zero,80045a8 <__swsetup_r+0xd4>
 8004538:	0005883a 	mov	r2,zero
 800453c:	dfc00217 	ldw	ra,8(sp)
 8004540:	dc400117 	ldw	r17,4(sp)
 8004544:	dc000017 	ldw	r16,0(sp)
 8004548:	dec00304 	addi	sp,sp,12
 800454c:	f800283a 	ret
 8004550:	3080040c 	andi	r2,r6,16
 8004554:	10001726 	beq	r2,zero,80045b4 <__swsetup_r+0xe0>
 8004558:	3080010c 	andi	r2,r6,4
 800455c:	10001b1e 	bne	r2,zero,80045cc <__swsetup_r+0xf8>
 8004560:	80c00417 	ldw	r3,16(r16)
 8004564:	30800214 	ori	r2,r6,8
 8004568:	8080030d 	sth	r2,12(r16)
 800456c:	183feb1e 	bne	r3,zero,800451c <__alt_data_end+0xfc00451c>
 8004570:	1140a00c 	andi	r5,r2,640
 8004574:	01008004 	movi	r4,512
 8004578:	293fe826 	beq	r5,r4,800451c <__alt_data_end+0xfc00451c>
 800457c:	8809883a 	mov	r4,r17
 8004580:	800b883a 	mov	r5,r16
 8004584:	80070680 	call	8007068 <__smakebuf_r>
 8004588:	8080030b 	ldhu	r2,12(r16)
 800458c:	80c00417 	ldw	r3,16(r16)
 8004590:	003fe206 	br	800451c <__alt_data_end+0xfc00451c>
 8004594:	80800517 	ldw	r2,20(r16)
 8004598:	80000215 	stw	zero,8(r16)
 800459c:	0085c83a 	sub	r2,zero,r2
 80045a0:	80800615 	stw	r2,24(r16)
 80045a4:	183fe41e 	bne	r3,zero,8004538 <__alt_data_end+0xfc004538>
 80045a8:	8080030b 	ldhu	r2,12(r16)
 80045ac:	1080200c 	andi	r2,r2,128
 80045b0:	103fe226 	beq	r2,zero,800453c <__alt_data_end+0xfc00453c>
 80045b4:	00bfffc4 	movi	r2,-1
 80045b8:	003fe006 	br	800453c <__alt_data_end+0xfc00453c>
 80045bc:	80065100 	call	8006510 <__sinit>
 80045c0:	003fd006 	br	8004504 <__alt_data_end+0xfc004504>
 80045c4:	0005883a 	mov	r2,zero
 80045c8:	003fd906 	br	8004530 <__alt_data_end+0xfc004530>
 80045cc:	81400c17 	ldw	r5,48(r16)
 80045d0:	28000626 	beq	r5,zero,80045ec <__swsetup_r+0x118>
 80045d4:	80801004 	addi	r2,r16,64
 80045d8:	28800326 	beq	r5,r2,80045e8 <__swsetup_r+0x114>
 80045dc:	8809883a 	mov	r4,r17
 80045e0:	80066840 	call	8006684 <_free_r>
 80045e4:	8180030b 	ldhu	r6,12(r16)
 80045e8:	80000c15 	stw	zero,48(r16)
 80045ec:	80c00417 	ldw	r3,16(r16)
 80045f0:	00bff6c4 	movi	r2,-37
 80045f4:	118c703a 	and	r6,r2,r6
 80045f8:	80000115 	stw	zero,4(r16)
 80045fc:	80c00015 	stw	r3,0(r16)
 8004600:	003fd806 	br	8004564 <__alt_data_end+0xfc004564>

08004604 <quorem>:
 8004604:	defff204 	addi	sp,sp,-56
 8004608:	ddc00b15 	stw	r23,44(sp)
 800460c:	20800417 	ldw	r2,16(r4)
 8004610:	2dc00417 	ldw	r23,16(r5)
 8004614:	dfc00d15 	stw	ra,52(sp)
 8004618:	df000c15 	stw	fp,48(sp)
 800461c:	dd800a15 	stw	r22,40(sp)
 8004620:	dd400915 	stw	r21,36(sp)
 8004624:	dd000815 	stw	r20,32(sp)
 8004628:	dcc00715 	stw	r19,28(sp)
 800462c:	dc800615 	stw	r18,24(sp)
 8004630:	dc400515 	stw	r17,20(sp)
 8004634:	dc000415 	stw	r16,16(sp)
 8004638:	15c07a16 	blt	r2,r23,8004824 <quorem+0x220>
 800463c:	bdffffc4 	addi	r23,r23,-1
 8004640:	bde9883a 	add	r20,r23,r23
 8004644:	28c00504 	addi	r3,r5,20
 8004648:	a529883a 	add	r20,r20,r20
 800464c:	1d39883a 	add	fp,r3,r20
 8004650:	24c00504 	addi	r19,r4,20
 8004654:	d9400215 	stw	r5,8(sp)
 8004658:	9d29883a 	add	r20,r19,r20
 800465c:	e1400017 	ldw	r5,0(fp)
 8004660:	d9000015 	stw	r4,0(sp)
 8004664:	a1000017 	ldw	r4,0(r20)
 8004668:	29400044 	addi	r5,r5,1
 800466c:	d8c00115 	stw	r3,4(sp)
 8004670:	dd000315 	stw	r20,12(sp)
 8004674:	800c3180 	call	800c318 <__udivsi3>
 8004678:	1025883a 	mov	r18,r2
 800467c:	10003026 	beq	r2,zero,8004740 <quorem+0x13c>
 8004680:	dc400117 	ldw	r17,4(sp)
 8004684:	9829883a 	mov	r20,r19
 8004688:	002d883a 	mov	r22,zero
 800468c:	0021883a 	mov	r16,zero
 8004690:	8d400017 	ldw	r21,0(r17)
 8004694:	900b883a 	mov	r5,r18
 8004698:	8c400104 	addi	r17,r17,4
 800469c:	a93fffcc 	andi	r4,r21,65535
 80046a0:	800c3280 	call	800c328 <__mulsi3>
 80046a4:	a808d43a 	srli	r4,r21,16
 80046a8:	900b883a 	mov	r5,r18
 80046ac:	b0ad883a 	add	r22,r22,r2
 80046b0:	800c3280 	call	800c328 <__mulsi3>
 80046b4:	a1000017 	ldw	r4,0(r20)
 80046b8:	b00cd43a 	srli	r6,r22,16
 80046bc:	b0ffffcc 	andi	r3,r22,65535
 80046c0:	217fffcc 	andi	r5,r4,65535
 80046c4:	2c21883a 	add	r16,r5,r16
 80046c8:	80c7c83a 	sub	r3,r16,r3
 80046cc:	2008d43a 	srli	r4,r4,16
 80046d0:	3085883a 	add	r2,r6,r2
 80046d4:	1821d43a 	srai	r16,r3,16
 80046d8:	117fffcc 	andi	r5,r2,65535
 80046dc:	2149c83a 	sub	r4,r4,r5
 80046e0:	2421883a 	add	r16,r4,r16
 80046e4:	8008943a 	slli	r4,r16,16
 80046e8:	18ffffcc 	andi	r3,r3,65535
 80046ec:	102cd43a 	srli	r22,r2,16
 80046f0:	20c8b03a 	or	r4,r4,r3
 80046f4:	a1000015 	stw	r4,0(r20)
 80046f8:	8021d43a 	srai	r16,r16,16
 80046fc:	a5000104 	addi	r20,r20,4
 8004700:	e47fe32e 	bgeu	fp,r17,8004690 <__alt_data_end+0xfc004690>
 8004704:	d8c00317 	ldw	r3,12(sp)
 8004708:	18800017 	ldw	r2,0(r3)
 800470c:	10000c1e 	bne	r2,zero,8004740 <quorem+0x13c>
 8004710:	18bfff04 	addi	r2,r3,-4
 8004714:	9880082e 	bgeu	r19,r2,8004738 <quorem+0x134>
 8004718:	18ffff17 	ldw	r3,-4(r3)
 800471c:	18000326 	beq	r3,zero,800472c <quorem+0x128>
 8004720:	00000506 	br	8004738 <quorem+0x134>
 8004724:	10c00017 	ldw	r3,0(r2)
 8004728:	1800031e 	bne	r3,zero,8004738 <quorem+0x134>
 800472c:	10bfff04 	addi	r2,r2,-4
 8004730:	bdffffc4 	addi	r23,r23,-1
 8004734:	98bffb36 	bltu	r19,r2,8004724 <__alt_data_end+0xfc004724>
 8004738:	d8c00017 	ldw	r3,0(sp)
 800473c:	1dc00415 	stw	r23,16(r3)
 8004740:	d9000017 	ldw	r4,0(sp)
 8004744:	d9400217 	ldw	r5,8(sp)
 8004748:	80087e40 	call	80087e4 <__mcmp>
 800474c:	10002816 	blt	r2,zero,80047f0 <quorem+0x1ec>
 8004750:	dc400117 	ldw	r17,4(sp)
 8004754:	94800044 	addi	r18,r18,1
 8004758:	980d883a 	mov	r6,r19
 800475c:	0007883a 	mov	r3,zero
 8004760:	31000017 	ldw	r4,0(r6)
 8004764:	89400017 	ldw	r5,0(r17)
 8004768:	31800104 	addi	r6,r6,4
 800476c:	20bfffcc 	andi	r2,r4,65535
 8004770:	10c7883a 	add	r3,r2,r3
 8004774:	28bfffcc 	andi	r2,r5,65535
 8004778:	1885c83a 	sub	r2,r3,r2
 800477c:	280ad43a 	srli	r5,r5,16
 8004780:	2008d43a 	srli	r4,r4,16
 8004784:	1007d43a 	srai	r3,r2,16
 8004788:	10bfffcc 	andi	r2,r2,65535
 800478c:	2149c83a 	sub	r4,r4,r5
 8004790:	20c9883a 	add	r4,r4,r3
 8004794:	200a943a 	slli	r5,r4,16
 8004798:	8c400104 	addi	r17,r17,4
 800479c:	2007d43a 	srai	r3,r4,16
 80047a0:	2884b03a 	or	r2,r5,r2
 80047a4:	30bfff15 	stw	r2,-4(r6)
 80047a8:	e47fed2e 	bgeu	fp,r17,8004760 <__alt_data_end+0xfc004760>
 80047ac:	bdc5883a 	add	r2,r23,r23
 80047b0:	1085883a 	add	r2,r2,r2
 80047b4:	9887883a 	add	r3,r19,r2
 80047b8:	18800017 	ldw	r2,0(r3)
 80047bc:	10000c1e 	bne	r2,zero,80047f0 <quorem+0x1ec>
 80047c0:	18bfff04 	addi	r2,r3,-4
 80047c4:	9880082e 	bgeu	r19,r2,80047e8 <quorem+0x1e4>
 80047c8:	18ffff17 	ldw	r3,-4(r3)
 80047cc:	18000326 	beq	r3,zero,80047dc <quorem+0x1d8>
 80047d0:	00000506 	br	80047e8 <quorem+0x1e4>
 80047d4:	10c00017 	ldw	r3,0(r2)
 80047d8:	1800031e 	bne	r3,zero,80047e8 <quorem+0x1e4>
 80047dc:	10bfff04 	addi	r2,r2,-4
 80047e0:	bdffffc4 	addi	r23,r23,-1
 80047e4:	98bffb36 	bltu	r19,r2,80047d4 <__alt_data_end+0xfc0047d4>
 80047e8:	d8c00017 	ldw	r3,0(sp)
 80047ec:	1dc00415 	stw	r23,16(r3)
 80047f0:	9005883a 	mov	r2,r18
 80047f4:	dfc00d17 	ldw	ra,52(sp)
 80047f8:	df000c17 	ldw	fp,48(sp)
 80047fc:	ddc00b17 	ldw	r23,44(sp)
 8004800:	dd800a17 	ldw	r22,40(sp)
 8004804:	dd400917 	ldw	r21,36(sp)
 8004808:	dd000817 	ldw	r20,32(sp)
 800480c:	dcc00717 	ldw	r19,28(sp)
 8004810:	dc800617 	ldw	r18,24(sp)
 8004814:	dc400517 	ldw	r17,20(sp)
 8004818:	dc000417 	ldw	r16,16(sp)
 800481c:	dec00e04 	addi	sp,sp,56
 8004820:	f800283a 	ret
 8004824:	0005883a 	mov	r2,zero
 8004828:	003ff206 	br	80047f4 <__alt_data_end+0xfc0047f4>

0800482c <_dtoa_r>:
 800482c:	20801017 	ldw	r2,64(r4)
 8004830:	deffde04 	addi	sp,sp,-136
 8004834:	dd401d15 	stw	r21,116(sp)
 8004838:	dcc01b15 	stw	r19,108(sp)
 800483c:	dc801a15 	stw	r18,104(sp)
 8004840:	dc401915 	stw	r17,100(sp)
 8004844:	dc001815 	stw	r16,96(sp)
 8004848:	dfc02115 	stw	ra,132(sp)
 800484c:	df002015 	stw	fp,128(sp)
 8004850:	ddc01f15 	stw	r23,124(sp)
 8004854:	dd801e15 	stw	r22,120(sp)
 8004858:	dd001c15 	stw	r20,112(sp)
 800485c:	d9c00315 	stw	r7,12(sp)
 8004860:	2021883a 	mov	r16,r4
 8004864:	302b883a 	mov	r21,r6
 8004868:	2825883a 	mov	r18,r5
 800486c:	dc402417 	ldw	r17,144(sp)
 8004870:	3027883a 	mov	r19,r6
 8004874:	10000826 	beq	r2,zero,8004898 <_dtoa_r+0x6c>
 8004878:	21801117 	ldw	r6,68(r4)
 800487c:	00c00044 	movi	r3,1
 8004880:	100b883a 	mov	r5,r2
 8004884:	1986983a 	sll	r3,r3,r6
 8004888:	11800115 	stw	r6,4(r2)
 800488c:	10c00215 	stw	r3,8(r2)
 8004890:	8007f100 	call	8007f10 <_Bfree>
 8004894:	80001015 	stw	zero,64(r16)
 8004898:	a8002d16 	blt	r21,zero,8004950 <_dtoa_r+0x124>
 800489c:	88000015 	stw	zero,0(r17)
 80048a0:	a8dffc2c 	andhi	r3,r21,32752
 80048a4:	009ffc34 	movhi	r2,32752
 80048a8:	18801b26 	beq	r3,r2,8004918 <_dtoa_r+0xec>
 80048ac:	9009883a 	mov	r4,r18
 80048b0:	980b883a 	mov	r5,r19
 80048b4:	000d883a 	mov	r6,zero
 80048b8:	000f883a 	mov	r7,zero
 80048bc:	800d56c0 	call	800d56c <__eqdf2>
 80048c0:	10002a1e 	bne	r2,zero,800496c <_dtoa_r+0x140>
 80048c4:	d8c02317 	ldw	r3,140(sp)
 80048c8:	d9002517 	ldw	r4,148(sp)
 80048cc:	00800044 	movi	r2,1
 80048d0:	18800015 	stw	r2,0(r3)
 80048d4:	2001a226 	beq	r4,zero,8004f60 <_dtoa_r+0x734>
 80048d8:	00820074 	movhi	r2,2049
 80048dc:	1086ca44 	addi	r2,r2,6953
 80048e0:	20800015 	stw	r2,0(r4)
 80048e4:	10bfffc4 	addi	r2,r2,-1
 80048e8:	dfc02117 	ldw	ra,132(sp)
 80048ec:	df002017 	ldw	fp,128(sp)
 80048f0:	ddc01f17 	ldw	r23,124(sp)
 80048f4:	dd801e17 	ldw	r22,120(sp)
 80048f8:	dd401d17 	ldw	r21,116(sp)
 80048fc:	dd001c17 	ldw	r20,112(sp)
 8004900:	dcc01b17 	ldw	r19,108(sp)
 8004904:	dc801a17 	ldw	r18,104(sp)
 8004908:	dc401917 	ldw	r17,100(sp)
 800490c:	dc001817 	ldw	r16,96(sp)
 8004910:	dec02204 	addi	sp,sp,136
 8004914:	f800283a 	ret
 8004918:	d8c02317 	ldw	r3,140(sp)
 800491c:	0089c3c4 	movi	r2,9999
 8004920:	18800015 	stw	r2,0(r3)
 8004924:	90017c26 	beq	r18,zero,8004f18 <_dtoa_r+0x6ec>
 8004928:	00820074 	movhi	r2,2049
 800492c:	1086d604 	addi	r2,r2,7000
 8004930:	d9002517 	ldw	r4,148(sp)
 8004934:	203fec26 	beq	r4,zero,80048e8 <__alt_data_end+0xfc0048e8>
 8004938:	10c000c7 	ldb	r3,3(r2)
 800493c:	18017d1e 	bne	r3,zero,8004f34 <_dtoa_r+0x708>
 8004940:	10c000c4 	addi	r3,r2,3
 8004944:	d9802517 	ldw	r6,148(sp)
 8004948:	30c00015 	stw	r3,0(r6)
 800494c:	003fe606 	br	80048e8 <__alt_data_end+0xfc0048e8>
 8004950:	04e00034 	movhi	r19,32768
 8004954:	9cffffc4 	addi	r19,r19,-1
 8004958:	00800044 	movi	r2,1
 800495c:	ace6703a 	and	r19,r21,r19
 8004960:	88800015 	stw	r2,0(r17)
 8004964:	982b883a 	mov	r21,r19
 8004968:	003fcd06 	br	80048a0 <__alt_data_end+0xfc0048a0>
 800496c:	d8800204 	addi	r2,sp,8
 8004970:	a822d53a 	srli	r17,r21,20
 8004974:	d8800015 	stw	r2,0(sp)
 8004978:	8009883a 	mov	r4,r16
 800497c:	900b883a 	mov	r5,r18
 8004980:	980d883a 	mov	r6,r19
 8004984:	d9c00104 	addi	r7,sp,4
 8004988:	8008b580 	call	8008b58 <__d2b>
 800498c:	1039883a 	mov	fp,r2
 8004990:	88016a1e 	bne	r17,zero,8004f3c <_dtoa_r+0x710>
 8004994:	dd000217 	ldw	r20,8(sp)
 8004998:	dc400117 	ldw	r17,4(sp)
 800499c:	00befbc4 	movi	r2,-1041
 80049a0:	a463883a 	add	r17,r20,r17
 80049a4:	8882ea16 	blt	r17,r2,8005550 <_dtoa_r+0xd24>
 80049a8:	00bf0384 	movi	r2,-1010
 80049ac:	1445c83a 	sub	r2,r2,r17
 80049b0:	89010484 	addi	r4,r17,1042
 80049b4:	a8aa983a 	sll	r21,r21,r2
 80049b8:	9108d83a 	srl	r4,r18,r4
 80049bc:	a908b03a 	or	r4,r21,r4
 80049c0:	800ea440 	call	800ea44 <__floatunsidf>
 80049c4:	017f8434 	movhi	r5,65040
 80049c8:	01800044 	movi	r6,1
 80049cc:	1009883a 	mov	r4,r2
 80049d0:	194b883a 	add	r5,r3,r5
 80049d4:	8c7fffc4 	addi	r17,r17,-1
 80049d8:	d9800f15 	stw	r6,60(sp)
 80049dc:	000d883a 	mov	r6,zero
 80049e0:	01cffe34 	movhi	r7,16376
 80049e4:	800e01c0 	call	800e01c <__subdf3>
 80049e8:	0198dbf4 	movhi	r6,25455
 80049ec:	01cff4f4 	movhi	r7,16339
 80049f0:	1009883a 	mov	r4,r2
 80049f4:	180b883a 	mov	r5,r3
 80049f8:	3190d844 	addi	r6,r6,17249
 80049fc:	39e1e9c4 	addi	r7,r7,-30809
 8004a00:	800d7b00 	call	800d7b0 <__muldf3>
 8004a04:	01a2d874 	movhi	r6,35681
 8004a08:	01cff1f4 	movhi	r7,16327
 8004a0c:	180b883a 	mov	r5,r3
 8004a10:	31b22cc4 	addi	r6,r6,-14157
 8004a14:	39e28a04 	addi	r7,r7,-30168
 8004a18:	1009883a 	mov	r4,r2
 8004a1c:	800c3500 	call	800c350 <__adddf3>
 8004a20:	8809883a 	mov	r4,r17
 8004a24:	102d883a 	mov	r22,r2
 8004a28:	182b883a 	mov	r21,r3
 8004a2c:	800e9740 	call	800e974 <__floatsidf>
 8004a30:	019427f4 	movhi	r6,20639
 8004a34:	01cff4f4 	movhi	r7,16339
 8004a38:	1009883a 	mov	r4,r2
 8004a3c:	180b883a 	mov	r5,r3
 8004a40:	319e7ec4 	addi	r6,r6,31227
 8004a44:	39d104c4 	addi	r7,r7,17427
 8004a48:	800d7b00 	call	800d7b0 <__muldf3>
 8004a4c:	b009883a 	mov	r4,r22
 8004a50:	a80b883a 	mov	r5,r21
 8004a54:	100d883a 	mov	r6,r2
 8004a58:	180f883a 	mov	r7,r3
 8004a5c:	800c3500 	call	800c350 <__adddf3>
 8004a60:	1009883a 	mov	r4,r2
 8004a64:	180b883a 	mov	r5,r3
 8004a68:	102d883a 	mov	r22,r2
 8004a6c:	182b883a 	mov	r21,r3
 8004a70:	800e8ec0 	call	800e8ec <__fixdfsi>
 8004a74:	b009883a 	mov	r4,r22
 8004a78:	a80b883a 	mov	r5,r21
 8004a7c:	000d883a 	mov	r6,zero
 8004a80:	000f883a 	mov	r7,zero
 8004a84:	d8800515 	stw	r2,20(sp)
 8004a88:	800d6d00 	call	800d6d0 <__ledf2>
 8004a8c:	10023116 	blt	r2,zero,8005354 <_dtoa_r+0xb28>
 8004a90:	d8c00517 	ldw	r3,20(sp)
 8004a94:	00800584 	movi	r2,22
 8004a98:	10c21f36 	bltu	r2,r3,8005318 <_dtoa_r+0xaec>
 8004a9c:	180490fa 	slli	r2,r3,3
 8004aa0:	00c20074 	movhi	r3,2049
 8004aa4:	18c6f204 	addi	r3,r3,7112
 8004aa8:	1885883a 	add	r2,r3,r2
 8004aac:	11000017 	ldw	r4,0(r2)
 8004ab0:	11400117 	ldw	r5,4(r2)
 8004ab4:	900d883a 	mov	r6,r18
 8004ab8:	980f883a 	mov	r7,r19
 8004abc:	800d5f00 	call	800d5f0 <__gedf2>
 8004ac0:	0082a70e 	bge	zero,r2,8005560 <_dtoa_r+0xd34>
 8004ac4:	d9000517 	ldw	r4,20(sp)
 8004ac8:	d8000c15 	stw	zero,48(sp)
 8004acc:	213fffc4 	addi	r4,r4,-1
 8004ad0:	d9000515 	stw	r4,20(sp)
 8004ad4:	a463c83a 	sub	r17,r20,r17
 8004ad8:	8dbfffc4 	addi	r22,r17,-1
 8004adc:	b0021916 	blt	r22,zero,8005344 <_dtoa_r+0xb18>
 8004ae0:	d8000815 	stw	zero,32(sp)
 8004ae4:	d8800517 	ldw	r2,20(sp)
 8004ae8:	10020e16 	blt	r2,zero,8005324 <_dtoa_r+0xaf8>
 8004aec:	b0ad883a 	add	r22,r22,r2
 8004af0:	d8800a15 	stw	r2,40(sp)
 8004af4:	d8000915 	stw	zero,36(sp)
 8004af8:	d8c00317 	ldw	r3,12(sp)
 8004afc:	00800244 	movi	r2,9
 8004b00:	10c11a36 	bltu	r2,r3,8004f6c <_dtoa_r+0x740>
 8004b04:	00800144 	movi	r2,5
 8004b08:	10c4fc0e 	bge	r2,r3,8005efc <_dtoa_r+0x16d0>
 8004b0c:	18ffff04 	addi	r3,r3,-4
 8004b10:	d8c00315 	stw	r3,12(sp)
 8004b14:	0029883a 	mov	r20,zero
 8004b18:	d9800317 	ldw	r6,12(sp)
 8004b1c:	008000c4 	movi	r2,3
 8004b20:	3083bd26 	beq	r6,r2,8005a18 <_dtoa_r+0x11ec>
 8004b24:	1183670e 	bge	r2,r6,80058c4 <_dtoa_r+0x1098>
 8004b28:	d8c00317 	ldw	r3,12(sp)
 8004b2c:	00800104 	movi	r2,4
 8004b30:	1882e726 	beq	r3,r2,80056d0 <_dtoa_r+0xea4>
 8004b34:	00800144 	movi	r2,5
 8004b38:	1884f21e 	bne	r3,r2,8005f04 <_dtoa_r+0x16d8>
 8004b3c:	00800044 	movi	r2,1
 8004b40:	d8800b15 	stw	r2,44(sp)
 8004b44:	d8c02217 	ldw	r3,136(sp)
 8004b48:	d9000517 	ldw	r4,20(sp)
 8004b4c:	1907883a 	add	r3,r3,r4
 8004b50:	19800044 	addi	r6,r3,1
 8004b54:	d8c00d15 	stw	r3,52(sp)
 8004b58:	d9800615 	stw	r6,24(sp)
 8004b5c:	0183c30e 	bge	zero,r6,8005a6c <_dtoa_r+0x1240>
 8004b60:	d9800617 	ldw	r6,24(sp)
 8004b64:	3023883a 	mov	r17,r6
 8004b68:	80001115 	stw	zero,68(r16)
 8004b6c:	008005c4 	movi	r2,23
 8004b70:	1184f62e 	bgeu	r2,r6,8005f4c <_dtoa_r+0x1720>
 8004b74:	00c00044 	movi	r3,1
 8004b78:	00800104 	movi	r2,4
 8004b7c:	1085883a 	add	r2,r2,r2
 8004b80:	11000504 	addi	r4,r2,20
 8004b84:	180b883a 	mov	r5,r3
 8004b88:	18c00044 	addi	r3,r3,1
 8004b8c:	313ffb2e 	bgeu	r6,r4,8004b7c <__alt_data_end+0xfc004b7c>
 8004b90:	81401115 	stw	r5,68(r16)
 8004b94:	8009883a 	mov	r4,r16
 8004b98:	8007e680 	call	8007e68 <_Balloc>
 8004b9c:	d8800715 	stw	r2,28(sp)
 8004ba0:	80801015 	stw	r2,64(r16)
 8004ba4:	00800384 	movi	r2,14
 8004ba8:	1440fd36 	bltu	r2,r17,8004fa0 <_dtoa_r+0x774>
 8004bac:	a000fc26 	beq	r20,zero,8004fa0 <_dtoa_r+0x774>
 8004bb0:	d8800517 	ldw	r2,20(sp)
 8004bb4:	0083b90e 	bge	zero,r2,8005a9c <_dtoa_r+0x1270>
 8004bb8:	d8c00517 	ldw	r3,20(sp)
 8004bbc:	108003cc 	andi	r2,r2,15
 8004bc0:	100490fa 	slli	r2,r2,3
 8004bc4:	182fd13a 	srai	r23,r3,4
 8004bc8:	00c20074 	movhi	r3,2049
 8004bcc:	18c6f204 	addi	r3,r3,7112
 8004bd0:	1885883a 	add	r2,r3,r2
 8004bd4:	b8c0040c 	andi	r3,r23,16
 8004bd8:	12c00017 	ldw	r11,0(r2)
 8004bdc:	12800117 	ldw	r10,4(r2)
 8004be0:	18039726 	beq	r3,zero,8005a40 <_dtoa_r+0x1214>
 8004be4:	00820074 	movhi	r2,2049
 8004be8:	1086e804 	addi	r2,r2,7072
 8004bec:	11800817 	ldw	r6,32(r2)
 8004bf0:	11c00917 	ldw	r7,36(r2)
 8004bf4:	9009883a 	mov	r4,r18
 8004bf8:	980b883a 	mov	r5,r19
 8004bfc:	da801615 	stw	r10,88(sp)
 8004c00:	dac01515 	stw	r11,84(sp)
 8004c04:	800cbec0 	call	800cbec <__divdf3>
 8004c08:	da801617 	ldw	r10,88(sp)
 8004c0c:	dac01517 	ldw	r11,84(sp)
 8004c10:	bdc003cc 	andi	r23,r23,15
 8004c14:	044000c4 	movi	r17,3
 8004c18:	d8800e15 	stw	r2,56(sp)
 8004c1c:	182b883a 	mov	r21,r3
 8004c20:	b8001126 	beq	r23,zero,8004c68 <_dtoa_r+0x43c>
 8004c24:	05020074 	movhi	r20,2049
 8004c28:	a506e804 	addi	r20,r20,7072
 8004c2c:	5805883a 	mov	r2,r11
 8004c30:	5007883a 	mov	r3,r10
 8004c34:	b980004c 	andi	r6,r23,1
 8004c38:	1009883a 	mov	r4,r2
 8004c3c:	b82fd07a 	srai	r23,r23,1
 8004c40:	180b883a 	mov	r5,r3
 8004c44:	30000426 	beq	r6,zero,8004c58 <_dtoa_r+0x42c>
 8004c48:	a1800017 	ldw	r6,0(r20)
 8004c4c:	a1c00117 	ldw	r7,4(r20)
 8004c50:	8c400044 	addi	r17,r17,1
 8004c54:	800d7b00 	call	800d7b0 <__muldf3>
 8004c58:	a5000204 	addi	r20,r20,8
 8004c5c:	b83ff51e 	bne	r23,zero,8004c34 <__alt_data_end+0xfc004c34>
 8004c60:	1017883a 	mov	r11,r2
 8004c64:	1815883a 	mov	r10,r3
 8004c68:	d9000e17 	ldw	r4,56(sp)
 8004c6c:	a80b883a 	mov	r5,r21
 8004c70:	580d883a 	mov	r6,r11
 8004c74:	500f883a 	mov	r7,r10
 8004c78:	800cbec0 	call	800cbec <__divdf3>
 8004c7c:	1029883a 	mov	r20,r2
 8004c80:	182b883a 	mov	r21,r3
 8004c84:	d9800c17 	ldw	r6,48(sp)
 8004c88:	30000626 	beq	r6,zero,8004ca4 <_dtoa_r+0x478>
 8004c8c:	a009883a 	mov	r4,r20
 8004c90:	a80b883a 	mov	r5,r21
 8004c94:	000d883a 	mov	r6,zero
 8004c98:	01cffc34 	movhi	r7,16368
 8004c9c:	800d6d00 	call	800d6d0 <__ledf2>
 8004ca0:	10043216 	blt	r2,zero,8005d6c <_dtoa_r+0x1540>
 8004ca4:	8809883a 	mov	r4,r17
 8004ca8:	800e9740 	call	800e974 <__floatsidf>
 8004cac:	1009883a 	mov	r4,r2
 8004cb0:	180b883a 	mov	r5,r3
 8004cb4:	a00d883a 	mov	r6,r20
 8004cb8:	a80f883a 	mov	r7,r21
 8004cbc:	800d7b00 	call	800d7b0 <__muldf3>
 8004cc0:	000d883a 	mov	r6,zero
 8004cc4:	1009883a 	mov	r4,r2
 8004cc8:	180b883a 	mov	r5,r3
 8004ccc:	01d00734 	movhi	r7,16412
 8004cd0:	800c3500 	call	800c350 <__adddf3>
 8004cd4:	1023883a 	mov	r17,r2
 8004cd8:	d9800617 	ldw	r6,24(sp)
 8004cdc:	00bf3034 	movhi	r2,64704
 8004ce0:	1885883a 	add	r2,r3,r2
 8004ce4:	d8800e15 	stw	r2,56(sp)
 8004ce8:	30032e26 	beq	r6,zero,80059a4 <_dtoa_r+0x1178>
 8004cec:	d8c00517 	ldw	r3,20(sp)
 8004cf0:	da800617 	ldw	r10,24(sp)
 8004cf4:	d8c01215 	stw	r3,72(sp)
 8004cf8:	d9000b17 	ldw	r4,44(sp)
 8004cfc:	2003b026 	beq	r4,zero,8005bc0 <_dtoa_r+0x1394>
 8004d00:	50bfffc4 	addi	r2,r10,-1
 8004d04:	100490fa 	slli	r2,r2,3
 8004d08:	00c20074 	movhi	r3,2049
 8004d0c:	18c6f204 	addi	r3,r3,7112
 8004d10:	1885883a 	add	r2,r3,r2
 8004d14:	11800017 	ldw	r6,0(r2)
 8004d18:	11c00117 	ldw	r7,4(r2)
 8004d1c:	d8800717 	ldw	r2,28(sp)
 8004d20:	0009883a 	mov	r4,zero
 8004d24:	014ff834 	movhi	r5,16352
 8004d28:	da801615 	stw	r10,88(sp)
 8004d2c:	15c00044 	addi	r23,r2,1
 8004d30:	800cbec0 	call	800cbec <__divdf3>
 8004d34:	d9c00e17 	ldw	r7,56(sp)
 8004d38:	880d883a 	mov	r6,r17
 8004d3c:	1009883a 	mov	r4,r2
 8004d40:	180b883a 	mov	r5,r3
 8004d44:	800e01c0 	call	800e01c <__subdf3>
 8004d48:	a80b883a 	mov	r5,r21
 8004d4c:	a009883a 	mov	r4,r20
 8004d50:	d8c01015 	stw	r3,64(sp)
 8004d54:	d8800e15 	stw	r2,56(sp)
 8004d58:	800e8ec0 	call	800e8ec <__fixdfsi>
 8004d5c:	1009883a 	mov	r4,r2
 8004d60:	d8801715 	stw	r2,92(sp)
 8004d64:	800e9740 	call	800e974 <__floatsidf>
 8004d68:	a009883a 	mov	r4,r20
 8004d6c:	a80b883a 	mov	r5,r21
 8004d70:	100d883a 	mov	r6,r2
 8004d74:	180f883a 	mov	r7,r3
 8004d78:	800e01c0 	call	800e01c <__subdf3>
 8004d7c:	da001717 	ldw	r8,92(sp)
 8004d80:	1829883a 	mov	r20,r3
 8004d84:	d8c00717 	ldw	r3,28(sp)
 8004d88:	d9000e17 	ldw	r4,56(sp)
 8004d8c:	d9401017 	ldw	r5,64(sp)
 8004d90:	42000c04 	addi	r8,r8,48
 8004d94:	1023883a 	mov	r17,r2
 8004d98:	1a000005 	stb	r8,0(r3)
 8004d9c:	880d883a 	mov	r6,r17
 8004da0:	a00f883a 	mov	r7,r20
 8004da4:	402b883a 	mov	r21,r8
 8004da8:	800d5f00 	call	800d5f0 <__gedf2>
 8004dac:	00844516 	blt	zero,r2,8005ec4 <_dtoa_r+0x1698>
 8004db0:	0009883a 	mov	r4,zero
 8004db4:	014ffc34 	movhi	r5,16368
 8004db8:	880d883a 	mov	r6,r17
 8004dbc:	a00f883a 	mov	r7,r20
 8004dc0:	800e01c0 	call	800e01c <__subdf3>
 8004dc4:	d9000e17 	ldw	r4,56(sp)
 8004dc8:	d9401017 	ldw	r5,64(sp)
 8004dcc:	100d883a 	mov	r6,r2
 8004dd0:	180f883a 	mov	r7,r3
 8004dd4:	800d5f00 	call	800d5f0 <__gedf2>
 8004dd8:	da801617 	ldw	r10,88(sp)
 8004ddc:	00843616 	blt	zero,r2,8005eb8 <_dtoa_r+0x168c>
 8004de0:	00800044 	movi	r2,1
 8004de4:	12806e0e 	bge	r2,r10,8004fa0 <_dtoa_r+0x774>
 8004de8:	d9000717 	ldw	r4,28(sp)
 8004dec:	dd801315 	stw	r22,76(sp)
 8004df0:	dc001115 	stw	r16,68(sp)
 8004df4:	2295883a 	add	r10,r4,r10
 8004df8:	dcc01415 	stw	r19,80(sp)
 8004dfc:	502d883a 	mov	r22,r10
 8004e00:	dcc01017 	ldw	r19,64(sp)
 8004e04:	b821883a 	mov	r16,r23
 8004e08:	dc801015 	stw	r18,64(sp)
 8004e0c:	dc800e17 	ldw	r18,56(sp)
 8004e10:	00000906 	br	8004e38 <_dtoa_r+0x60c>
 8004e14:	800e01c0 	call	800e01c <__subdf3>
 8004e18:	1009883a 	mov	r4,r2
 8004e1c:	180b883a 	mov	r5,r3
 8004e20:	900d883a 	mov	r6,r18
 8004e24:	980f883a 	mov	r7,r19
 8004e28:	800d6d00 	call	800d6d0 <__ledf2>
 8004e2c:	10040e16 	blt	r2,zero,8005e68 <_dtoa_r+0x163c>
 8004e30:	b821883a 	mov	r16,r23
 8004e34:	bd841026 	beq	r23,r22,8005e78 <_dtoa_r+0x164c>
 8004e38:	9009883a 	mov	r4,r18
 8004e3c:	980b883a 	mov	r5,r19
 8004e40:	000d883a 	mov	r6,zero
 8004e44:	01d00934 	movhi	r7,16420
 8004e48:	800d7b00 	call	800d7b0 <__muldf3>
 8004e4c:	000d883a 	mov	r6,zero
 8004e50:	01d00934 	movhi	r7,16420
 8004e54:	8809883a 	mov	r4,r17
 8004e58:	a00b883a 	mov	r5,r20
 8004e5c:	1025883a 	mov	r18,r2
 8004e60:	1827883a 	mov	r19,r3
 8004e64:	800d7b00 	call	800d7b0 <__muldf3>
 8004e68:	180b883a 	mov	r5,r3
 8004e6c:	1009883a 	mov	r4,r2
 8004e70:	1823883a 	mov	r17,r3
 8004e74:	1029883a 	mov	r20,r2
 8004e78:	800e8ec0 	call	800e8ec <__fixdfsi>
 8004e7c:	1009883a 	mov	r4,r2
 8004e80:	102b883a 	mov	r21,r2
 8004e84:	800e9740 	call	800e974 <__floatsidf>
 8004e88:	a009883a 	mov	r4,r20
 8004e8c:	880b883a 	mov	r5,r17
 8004e90:	100d883a 	mov	r6,r2
 8004e94:	180f883a 	mov	r7,r3
 8004e98:	800e01c0 	call	800e01c <__subdf3>
 8004e9c:	ad400c04 	addi	r21,r21,48
 8004ea0:	1009883a 	mov	r4,r2
 8004ea4:	180b883a 	mov	r5,r3
 8004ea8:	900d883a 	mov	r6,r18
 8004eac:	980f883a 	mov	r7,r19
 8004eb0:	85400005 	stb	r21,0(r16)
 8004eb4:	1023883a 	mov	r17,r2
 8004eb8:	1829883a 	mov	r20,r3
 8004ebc:	800d6d00 	call	800d6d0 <__ledf2>
 8004ec0:	bdc00044 	addi	r23,r23,1
 8004ec4:	0009883a 	mov	r4,zero
 8004ec8:	014ffc34 	movhi	r5,16368
 8004ecc:	880d883a 	mov	r6,r17
 8004ed0:	a00f883a 	mov	r7,r20
 8004ed4:	103fcf0e 	bge	r2,zero,8004e14 <__alt_data_end+0xfc004e14>
 8004ed8:	d9801217 	ldw	r6,72(sp)
 8004edc:	dc001117 	ldw	r16,68(sp)
 8004ee0:	d9800515 	stw	r6,20(sp)
 8004ee4:	8009883a 	mov	r4,r16
 8004ee8:	e00b883a 	mov	r5,fp
 8004eec:	8007f100 	call	8007f10 <_Bfree>
 8004ef0:	d8c00517 	ldw	r3,20(sp)
 8004ef4:	d9002317 	ldw	r4,140(sp)
 8004ef8:	d9802517 	ldw	r6,148(sp)
 8004efc:	b8000005 	stb	zero,0(r23)
 8004f00:	18800044 	addi	r2,r3,1
 8004f04:	20800015 	stw	r2,0(r4)
 8004f08:	30027226 	beq	r6,zero,80058d4 <_dtoa_r+0x10a8>
 8004f0c:	35c00015 	stw	r23,0(r6)
 8004f10:	d8800717 	ldw	r2,28(sp)
 8004f14:	003e7406 	br	80048e8 <__alt_data_end+0xfc0048e8>
 8004f18:	00800434 	movhi	r2,16
 8004f1c:	10bfffc4 	addi	r2,r2,-1
 8004f20:	a8aa703a 	and	r21,r21,r2
 8004f24:	a83e801e 	bne	r21,zero,8004928 <__alt_data_end+0xfc004928>
 8004f28:	00820074 	movhi	r2,2049
 8004f2c:	1086d304 	addi	r2,r2,6988
 8004f30:	003e7f06 	br	8004930 <__alt_data_end+0xfc004930>
 8004f34:	10c00204 	addi	r3,r2,8
 8004f38:	003e8206 	br	8004944 <__alt_data_end+0xfc004944>
 8004f3c:	01400434 	movhi	r5,16
 8004f40:	297fffc4 	addi	r5,r5,-1
 8004f44:	994a703a 	and	r5,r19,r5
 8004f48:	9009883a 	mov	r4,r18
 8004f4c:	8c7f0044 	addi	r17,r17,-1023
 8004f50:	294ffc34 	orhi	r5,r5,16368
 8004f54:	dd000217 	ldw	r20,8(sp)
 8004f58:	d8000f15 	stw	zero,60(sp)
 8004f5c:	003e9f06 	br	80049dc <__alt_data_end+0xfc0049dc>
 8004f60:	00820074 	movhi	r2,2049
 8004f64:	1086ca04 	addi	r2,r2,6952
 8004f68:	003e5f06 	br	80048e8 <__alt_data_end+0xfc0048e8>
 8004f6c:	80001115 	stw	zero,68(r16)
 8004f70:	8009883a 	mov	r4,r16
 8004f74:	000b883a 	mov	r5,zero
 8004f78:	8007e680 	call	8007e68 <_Balloc>
 8004f7c:	01bfffc4 	movi	r6,-1
 8004f80:	d8800715 	stw	r2,28(sp)
 8004f84:	80801015 	stw	r2,64(r16)
 8004f88:	00800044 	movi	r2,1
 8004f8c:	d9800615 	stw	r6,24(sp)
 8004f90:	d8800b15 	stw	r2,44(sp)
 8004f94:	d8002215 	stw	zero,136(sp)
 8004f98:	d9800d15 	stw	r6,52(sp)
 8004f9c:	d8000315 	stw	zero,12(sp)
 8004fa0:	d8800117 	ldw	r2,4(sp)
 8004fa4:	10008e16 	blt	r2,zero,80051e0 <_dtoa_r+0x9b4>
 8004fa8:	d9000517 	ldw	r4,20(sp)
 8004fac:	00c00384 	movi	r3,14
 8004fb0:	19008b16 	blt	r3,r4,80051e0 <_dtoa_r+0x9b4>
 8004fb4:	200490fa 	slli	r2,r4,3
 8004fb8:	00c20074 	movhi	r3,2049
 8004fbc:	d9802217 	ldw	r6,136(sp)
 8004fc0:	18c6f204 	addi	r3,r3,7112
 8004fc4:	1885883a 	add	r2,r3,r2
 8004fc8:	14400017 	ldw	r17,0(r2)
 8004fcc:	15000117 	ldw	r20,4(r2)
 8004fd0:	3001c716 	blt	r6,zero,80056f0 <_dtoa_r+0xec4>
 8004fd4:	880d883a 	mov	r6,r17
 8004fd8:	a00f883a 	mov	r7,r20
 8004fdc:	9009883a 	mov	r4,r18
 8004fe0:	980b883a 	mov	r5,r19
 8004fe4:	800cbec0 	call	800cbec <__divdf3>
 8004fe8:	180b883a 	mov	r5,r3
 8004fec:	1009883a 	mov	r4,r2
 8004ff0:	800e8ec0 	call	800e8ec <__fixdfsi>
 8004ff4:	1009883a 	mov	r4,r2
 8004ff8:	102d883a 	mov	r22,r2
 8004ffc:	800e9740 	call	800e974 <__floatsidf>
 8005000:	1009883a 	mov	r4,r2
 8005004:	180b883a 	mov	r5,r3
 8005008:	880d883a 	mov	r6,r17
 800500c:	a00f883a 	mov	r7,r20
 8005010:	800d7b00 	call	800d7b0 <__muldf3>
 8005014:	9009883a 	mov	r4,r18
 8005018:	980b883a 	mov	r5,r19
 800501c:	100d883a 	mov	r6,r2
 8005020:	180f883a 	mov	r7,r3
 8005024:	800e01c0 	call	800e01c <__subdf3>
 8005028:	d9000717 	ldw	r4,28(sp)
 800502c:	d9800617 	ldw	r6,24(sp)
 8005030:	180b883a 	mov	r5,r3
 8005034:	b0c00c04 	addi	r3,r22,48
 8005038:	20c00005 	stb	r3,0(r4)
 800503c:	25c00044 	addi	r23,r4,1
 8005040:	01000044 	movi	r4,1
 8005044:	1011883a 	mov	r8,r2
 8005048:	2807883a 	mov	r3,r5
 800504c:	31003d26 	beq	r6,r4,8005144 <_dtoa_r+0x918>
 8005050:	000d883a 	mov	r6,zero
 8005054:	01d00934 	movhi	r7,16420
 8005058:	1009883a 	mov	r4,r2
 800505c:	800d7b00 	call	800d7b0 <__muldf3>
 8005060:	1009883a 	mov	r4,r2
 8005064:	180b883a 	mov	r5,r3
 8005068:	000d883a 	mov	r6,zero
 800506c:	000f883a 	mov	r7,zero
 8005070:	1027883a 	mov	r19,r2
 8005074:	182b883a 	mov	r21,r3
 8005078:	800d56c0 	call	800d56c <__eqdf2>
 800507c:	103f9926 	beq	r2,zero,8004ee4 <__alt_data_end+0xfc004ee4>
 8005080:	d8c00617 	ldw	r3,24(sp)
 8005084:	d9000717 	ldw	r4,28(sp)
 8005088:	b825883a 	mov	r18,r23
 800508c:	18bfffc4 	addi	r2,r3,-1
 8005090:	20ad883a 	add	r22,r4,r2
 8005094:	dc000315 	stw	r16,12(sp)
 8005098:	00000a06 	br	80050c4 <_dtoa_r+0x898>
 800509c:	800d7b00 	call	800d7b0 <__muldf3>
 80050a0:	1009883a 	mov	r4,r2
 80050a4:	180b883a 	mov	r5,r3
 80050a8:	000d883a 	mov	r6,zero
 80050ac:	000f883a 	mov	r7,zero
 80050b0:	1027883a 	mov	r19,r2
 80050b4:	182b883a 	mov	r21,r3
 80050b8:	b825883a 	mov	r18,r23
 80050bc:	800d56c0 	call	800d56c <__eqdf2>
 80050c0:	10022626 	beq	r2,zero,800595c <_dtoa_r+0x1130>
 80050c4:	880d883a 	mov	r6,r17
 80050c8:	a00f883a 	mov	r7,r20
 80050cc:	9809883a 	mov	r4,r19
 80050d0:	a80b883a 	mov	r5,r21
 80050d4:	800cbec0 	call	800cbec <__divdf3>
 80050d8:	180b883a 	mov	r5,r3
 80050dc:	1009883a 	mov	r4,r2
 80050e0:	800e8ec0 	call	800e8ec <__fixdfsi>
 80050e4:	1009883a 	mov	r4,r2
 80050e8:	1021883a 	mov	r16,r2
 80050ec:	800e9740 	call	800e974 <__floatsidf>
 80050f0:	1009883a 	mov	r4,r2
 80050f4:	180b883a 	mov	r5,r3
 80050f8:	880d883a 	mov	r6,r17
 80050fc:	a00f883a 	mov	r7,r20
 8005100:	800d7b00 	call	800d7b0 <__muldf3>
 8005104:	9809883a 	mov	r4,r19
 8005108:	a80b883a 	mov	r5,r21
 800510c:	100d883a 	mov	r6,r2
 8005110:	180f883a 	mov	r7,r3
 8005114:	800e01c0 	call	800e01c <__subdf3>
 8005118:	82000c04 	addi	r8,r16,48
 800511c:	92000005 	stb	r8,0(r18)
 8005120:	1009883a 	mov	r4,r2
 8005124:	180b883a 	mov	r5,r3
 8005128:	000d883a 	mov	r6,zero
 800512c:	01d00934 	movhi	r7,16420
 8005130:	1011883a 	mov	r8,r2
 8005134:	bdc00044 	addi	r23,r23,1
 8005138:	95bfd81e 	bne	r18,r22,800509c <__alt_data_end+0xfc00509c>
 800513c:	802d883a 	mov	r22,r16
 8005140:	dc000317 	ldw	r16,12(sp)
 8005144:	4009883a 	mov	r4,r8
 8005148:	180b883a 	mov	r5,r3
 800514c:	400d883a 	mov	r6,r8
 8005150:	180f883a 	mov	r7,r3
 8005154:	800c3500 	call	800c350 <__adddf3>
 8005158:	8809883a 	mov	r4,r17
 800515c:	a00b883a 	mov	r5,r20
 8005160:	100d883a 	mov	r6,r2
 8005164:	180f883a 	mov	r7,r3
 8005168:	1027883a 	mov	r19,r2
 800516c:	1825883a 	mov	r18,r3
 8005170:	800d6d00 	call	800d6d0 <__ledf2>
 8005174:	10000816 	blt	r2,zero,8005198 <_dtoa_r+0x96c>
 8005178:	8809883a 	mov	r4,r17
 800517c:	a00b883a 	mov	r5,r20
 8005180:	980d883a 	mov	r6,r19
 8005184:	900f883a 	mov	r7,r18
 8005188:	800d56c0 	call	800d56c <__eqdf2>
 800518c:	103f551e 	bne	r2,zero,8004ee4 <__alt_data_end+0xfc004ee4>
 8005190:	b580004c 	andi	r22,r22,1
 8005194:	b03f5326 	beq	r22,zero,8004ee4 <__alt_data_end+0xfc004ee4>
 8005198:	bd7fffc3 	ldbu	r21,-1(r23)
 800519c:	b8bfffc4 	addi	r2,r23,-1
 80051a0:	1007883a 	mov	r3,r2
 80051a4:	01400e44 	movi	r5,57
 80051a8:	d9800717 	ldw	r6,28(sp)
 80051ac:	00000506 	br	80051c4 <_dtoa_r+0x998>
 80051b0:	18ffffc4 	addi	r3,r3,-1
 80051b4:	30825e26 	beq	r6,r2,8005b30 <_dtoa_r+0x1304>
 80051b8:	1d400003 	ldbu	r21,0(r3)
 80051bc:	102f883a 	mov	r23,r2
 80051c0:	10bfffc4 	addi	r2,r2,-1
 80051c4:	a9003fcc 	andi	r4,r21,255
 80051c8:	2100201c 	xori	r4,r4,128
 80051cc:	213fe004 	addi	r4,r4,-128
 80051d0:	217ff726 	beq	r4,r5,80051b0 <__alt_data_end+0xfc0051b0>
 80051d4:	aa000044 	addi	r8,r21,1
 80051d8:	12000005 	stb	r8,0(r2)
 80051dc:	003f4106 	br	8004ee4 <__alt_data_end+0xfc004ee4>
 80051e0:	d8c00b17 	ldw	r3,44(sp)
 80051e4:	18006726 	beq	r3,zero,8005384 <_dtoa_r+0xb58>
 80051e8:	d9000317 	ldw	r4,12(sp)
 80051ec:	00c00044 	movi	r3,1
 80051f0:	19016a0e 	bge	r3,r4,800579c <_dtoa_r+0xf70>
 80051f4:	d8800617 	ldw	r2,24(sp)
 80051f8:	d8c00917 	ldw	r3,36(sp)
 80051fc:	157fffc4 	addi	r21,r2,-1
 8005200:	1d420716 	blt	r3,r21,8005a20 <_dtoa_r+0x11f4>
 8005204:	1d6bc83a 	sub	r21,r3,r21
 8005208:	d8800617 	ldw	r2,24(sp)
 800520c:	1002c716 	blt	r2,zero,8005d2c <_dtoa_r+0x1500>
 8005210:	dd000817 	ldw	r20,32(sp)
 8005214:	d8800617 	ldw	r2,24(sp)
 8005218:	d9800817 	ldw	r6,32(sp)
 800521c:	8009883a 	mov	r4,r16
 8005220:	01400044 	movi	r5,1
 8005224:	308d883a 	add	r6,r6,r2
 8005228:	d9800815 	stw	r6,32(sp)
 800522c:	b0ad883a 	add	r22,r22,r2
 8005230:	80082900 	call	8008290 <__i2b>
 8005234:	1023883a 	mov	r17,r2
 8005238:	a0000826 	beq	r20,zero,800525c <_dtoa_r+0xa30>
 800523c:	0580070e 	bge	zero,r22,800525c <_dtoa_r+0xa30>
 8005240:	b005883a 	mov	r2,r22
 8005244:	a5812016 	blt	r20,r22,80056c8 <_dtoa_r+0xe9c>
 8005248:	d8c00817 	ldw	r3,32(sp)
 800524c:	a0a9c83a 	sub	r20,r20,r2
 8005250:	b0adc83a 	sub	r22,r22,r2
 8005254:	1887c83a 	sub	r3,r3,r2
 8005258:	d8c00815 	stw	r3,32(sp)
 800525c:	d9000917 	ldw	r4,36(sp)
 8005260:	0100140e 	bge	zero,r4,80052b4 <_dtoa_r+0xa88>
 8005264:	d9800b17 	ldw	r6,44(sp)
 8005268:	3001e526 	beq	r6,zero,8005a00 <_dtoa_r+0x11d4>
 800526c:	05400e0e 	bge	zero,r21,80052a8 <_dtoa_r+0xa7c>
 8005270:	880b883a 	mov	r5,r17
 8005274:	8009883a 	mov	r4,r16
 8005278:	a80d883a 	mov	r6,r21
 800527c:	800855c0 	call	800855c <__pow5mult>
 8005280:	e00d883a 	mov	r6,fp
 8005284:	8009883a 	mov	r4,r16
 8005288:	100b883a 	mov	r5,r2
 800528c:	1023883a 	mov	r17,r2
 8005290:	80082cc0 	call	80082cc <__multiply>
 8005294:	102f883a 	mov	r23,r2
 8005298:	e00b883a 	mov	r5,fp
 800529c:	8009883a 	mov	r4,r16
 80052a0:	8007f100 	call	8007f10 <_Bfree>
 80052a4:	b839883a 	mov	fp,r23
 80052a8:	d8800917 	ldw	r2,36(sp)
 80052ac:	154dc83a 	sub	r6,r2,r21
 80052b0:	3001281e 	bne	r6,zero,8005754 <_dtoa_r+0xf28>
 80052b4:	05c00044 	movi	r23,1
 80052b8:	8009883a 	mov	r4,r16
 80052bc:	b80b883a 	mov	r5,r23
 80052c0:	80082900 	call	8008290 <__i2b>
 80052c4:	d8c00a17 	ldw	r3,40(sp)
 80052c8:	102b883a 	mov	r21,r2
 80052cc:	00c0310e 	bge	zero,r3,8005394 <_dtoa_r+0xb68>
 80052d0:	8009883a 	mov	r4,r16
 80052d4:	100b883a 	mov	r5,r2
 80052d8:	180d883a 	mov	r6,r3
 80052dc:	800855c0 	call	800855c <__pow5mult>
 80052e0:	d9000317 	ldw	r4,12(sp)
 80052e4:	102b883a 	mov	r21,r2
 80052e8:	b9011f0e 	bge	r23,r4,8005768 <_dtoa_r+0xf3c>
 80052ec:	0027883a 	mov	r19,zero
 80052f0:	a8800417 	ldw	r2,16(r21)
 80052f4:	10800104 	addi	r2,r2,4
 80052f8:	1085883a 	add	r2,r2,r2
 80052fc:	1085883a 	add	r2,r2,r2
 8005300:	a885883a 	add	r2,r21,r2
 8005304:	11000017 	ldw	r4,0(r2)
 8005308:	80081780 	call	8008178 <__hi0bits>
 800530c:	00c00804 	movi	r3,32
 8005310:	1885c83a 	sub	r2,r3,r2
 8005314:	00002506 	br	80053ac <_dtoa_r+0xb80>
 8005318:	01800044 	movi	r6,1
 800531c:	d9800c15 	stw	r6,48(sp)
 8005320:	003dec06 	br	8004ad4 <__alt_data_end+0xfc004ad4>
 8005324:	d8c00817 	ldw	r3,32(sp)
 8005328:	d9000517 	ldw	r4,20(sp)
 800532c:	d8000a15 	stw	zero,40(sp)
 8005330:	1907c83a 	sub	r3,r3,r4
 8005334:	010dc83a 	sub	r6,zero,r4
 8005338:	d8c00815 	stw	r3,32(sp)
 800533c:	d9800915 	stw	r6,36(sp)
 8005340:	003ded06 	br	8004af8 <__alt_data_end+0xfc004af8>
 8005344:	05adc83a 	sub	r22,zero,r22
 8005348:	dd800815 	stw	r22,32(sp)
 800534c:	002d883a 	mov	r22,zero
 8005350:	003de406 	br	8004ae4 <__alt_data_end+0xfc004ae4>
 8005354:	d9000517 	ldw	r4,20(sp)
 8005358:	800e9740 	call	800e974 <__floatsidf>
 800535c:	1009883a 	mov	r4,r2
 8005360:	180b883a 	mov	r5,r3
 8005364:	b00d883a 	mov	r6,r22
 8005368:	a80f883a 	mov	r7,r21
 800536c:	800d56c0 	call	800d56c <__eqdf2>
 8005370:	103dc726 	beq	r2,zero,8004a90 <__alt_data_end+0xfc004a90>
 8005374:	d8800517 	ldw	r2,20(sp)
 8005378:	10bfffc4 	addi	r2,r2,-1
 800537c:	d8800515 	stw	r2,20(sp)
 8005380:	003dc306 	br	8004a90 <__alt_data_end+0xfc004a90>
 8005384:	dd400917 	ldw	r21,36(sp)
 8005388:	dd000817 	ldw	r20,32(sp)
 800538c:	0023883a 	mov	r17,zero
 8005390:	003fa906 	br	8005238 <__alt_data_end+0xfc005238>
 8005394:	d9800317 	ldw	r6,12(sp)
 8005398:	b981670e 	bge	r23,r6,8005938 <_dtoa_r+0x110c>
 800539c:	0027883a 	mov	r19,zero
 80053a0:	d8c00a17 	ldw	r3,40(sp)
 80053a4:	183fd21e 	bne	r3,zero,80052f0 <__alt_data_end+0xfc0052f0>
 80053a8:	00800044 	movi	r2,1
 80053ac:	1585883a 	add	r2,r2,r22
 80053b0:	108007cc 	andi	r2,r2,31
 80053b4:	10005f26 	beq	r2,zero,8005534 <_dtoa_r+0xd08>
 80053b8:	00c00804 	movi	r3,32
 80053bc:	1887c83a 	sub	r3,r3,r2
 80053c0:	01000104 	movi	r4,4
 80053c4:	20c2dd0e 	bge	r4,r3,8005f3c <_dtoa_r+0x1710>
 80053c8:	d9000817 	ldw	r4,32(sp)
 80053cc:	00c00704 	movi	r3,28
 80053d0:	1885c83a 	sub	r2,r3,r2
 80053d4:	2089883a 	add	r4,r4,r2
 80053d8:	d9000815 	stw	r4,32(sp)
 80053dc:	a0a9883a 	add	r20,r20,r2
 80053e0:	b0ad883a 	add	r22,r22,r2
 80053e4:	d8800817 	ldw	r2,32(sp)
 80053e8:	0080050e 	bge	zero,r2,8005400 <_dtoa_r+0xbd4>
 80053ec:	e00b883a 	mov	r5,fp
 80053f0:	8009883a 	mov	r4,r16
 80053f4:	100d883a 	mov	r6,r2
 80053f8:	800869c0 	call	800869c <__lshift>
 80053fc:	1039883a 	mov	fp,r2
 8005400:	0580050e 	bge	zero,r22,8005418 <_dtoa_r+0xbec>
 8005404:	a80b883a 	mov	r5,r21
 8005408:	8009883a 	mov	r4,r16
 800540c:	b00d883a 	mov	r6,r22
 8005410:	800869c0 	call	800869c <__lshift>
 8005414:	102b883a 	mov	r21,r2
 8005418:	d8c00c17 	ldw	r3,48(sp)
 800541c:	1801161e 	bne	r3,zero,8005878 <_dtoa_r+0x104c>
 8005420:	d8c00617 	ldw	r3,24(sp)
 8005424:	00c12d0e 	bge	zero,r3,80058dc <_dtoa_r+0x10b0>
 8005428:	d8c00b17 	ldw	r3,44(sp)
 800542c:	1800571e 	bne	r3,zero,800558c <_dtoa_r+0xd60>
 8005430:	dc800717 	ldw	r18,28(sp)
 8005434:	dcc00617 	ldw	r19,24(sp)
 8005438:	9029883a 	mov	r20,r18
 800543c:	00000206 	br	8005448 <_dtoa_r+0xc1c>
 8005440:	8007f380 	call	8007f38 <__multadd>
 8005444:	1039883a 	mov	fp,r2
 8005448:	e009883a 	mov	r4,fp
 800544c:	a80b883a 	mov	r5,r21
 8005450:	80046040 	call	8004604 <quorem>
 8005454:	10800c04 	addi	r2,r2,48
 8005458:	90800005 	stb	r2,0(r18)
 800545c:	94800044 	addi	r18,r18,1
 8005460:	9507c83a 	sub	r3,r18,r20
 8005464:	8009883a 	mov	r4,r16
 8005468:	e00b883a 	mov	r5,fp
 800546c:	01800284 	movi	r6,10
 8005470:	000f883a 	mov	r7,zero
 8005474:	1cfff216 	blt	r3,r19,8005440 <__alt_data_end+0xfc005440>
 8005478:	1011883a 	mov	r8,r2
 800547c:	d8800617 	ldw	r2,24(sp)
 8005480:	00822e0e 	bge	zero,r2,8005d3c <_dtoa_r+0x1510>
 8005484:	d9000717 	ldw	r4,28(sp)
 8005488:	0025883a 	mov	r18,zero
 800548c:	20af883a 	add	r23,r4,r2
 8005490:	e00b883a 	mov	r5,fp
 8005494:	01800044 	movi	r6,1
 8005498:	8009883a 	mov	r4,r16
 800549c:	da001715 	stw	r8,92(sp)
 80054a0:	800869c0 	call	800869c <__lshift>
 80054a4:	1009883a 	mov	r4,r2
 80054a8:	a80b883a 	mov	r5,r21
 80054ac:	1039883a 	mov	fp,r2
 80054b0:	80087e40 	call	80087e4 <__mcmp>
 80054b4:	da001717 	ldw	r8,92(sp)
 80054b8:	00816e0e 	bge	zero,r2,8005a74 <_dtoa_r+0x1248>
 80054bc:	b93fffc3 	ldbu	r4,-1(r23)
 80054c0:	b8bfffc4 	addi	r2,r23,-1
 80054c4:	1007883a 	mov	r3,r2
 80054c8:	01800e44 	movi	r6,57
 80054cc:	d9c00717 	ldw	r7,28(sp)
 80054d0:	00000506 	br	80054e8 <_dtoa_r+0xcbc>
 80054d4:	18ffffc4 	addi	r3,r3,-1
 80054d8:	38811926 	beq	r7,r2,8005940 <_dtoa_r+0x1114>
 80054dc:	19000003 	ldbu	r4,0(r3)
 80054e0:	102f883a 	mov	r23,r2
 80054e4:	10bfffc4 	addi	r2,r2,-1
 80054e8:	21403fcc 	andi	r5,r4,255
 80054ec:	2940201c 	xori	r5,r5,128
 80054f0:	297fe004 	addi	r5,r5,-128
 80054f4:	29bff726 	beq	r5,r6,80054d4 <__alt_data_end+0xfc0054d4>
 80054f8:	21000044 	addi	r4,r4,1
 80054fc:	11000005 	stb	r4,0(r2)
 8005500:	8009883a 	mov	r4,r16
 8005504:	a80b883a 	mov	r5,r21
 8005508:	8007f100 	call	8007f10 <_Bfree>
 800550c:	883e7526 	beq	r17,zero,8004ee4 <__alt_data_end+0xfc004ee4>
 8005510:	90000426 	beq	r18,zero,8005524 <_dtoa_r+0xcf8>
 8005514:	94400326 	beq	r18,r17,8005524 <_dtoa_r+0xcf8>
 8005518:	8009883a 	mov	r4,r16
 800551c:	900b883a 	mov	r5,r18
 8005520:	8007f100 	call	8007f10 <_Bfree>
 8005524:	8009883a 	mov	r4,r16
 8005528:	880b883a 	mov	r5,r17
 800552c:	8007f100 	call	8007f10 <_Bfree>
 8005530:	003e6c06 	br	8004ee4 <__alt_data_end+0xfc004ee4>
 8005534:	00800704 	movi	r2,28
 8005538:	d9800817 	ldw	r6,32(sp)
 800553c:	a0a9883a 	add	r20,r20,r2
 8005540:	b0ad883a 	add	r22,r22,r2
 8005544:	308d883a 	add	r6,r6,r2
 8005548:	d9800815 	stw	r6,32(sp)
 800554c:	003fa506 	br	80053e4 <__alt_data_end+0xfc0053e4>
 8005550:	013efb84 	movi	r4,-1042
 8005554:	246bc83a 	sub	r21,r4,r17
 8005558:	9548983a 	sll	r4,r18,r21
 800555c:	003d1806 	br	80049c0 <__alt_data_end+0xfc0049c0>
 8005560:	d8000c15 	stw	zero,48(sp)
 8005564:	003d5b06 	br	8004ad4 <__alt_data_end+0xfc004ad4>
 8005568:	880b883a 	mov	r5,r17
 800556c:	8009883a 	mov	r4,r16
 8005570:	01800284 	movi	r6,10
 8005574:	000f883a 	mov	r7,zero
 8005578:	8007f380 	call	8007f38 <__multadd>
 800557c:	1023883a 	mov	r17,r2
 8005580:	d8800d17 	ldw	r2,52(sp)
 8005584:	0082550e 	bge	zero,r2,8005edc <_dtoa_r+0x16b0>
 8005588:	d8800615 	stw	r2,24(sp)
 800558c:	0500050e 	bge	zero,r20,80055a4 <_dtoa_r+0xd78>
 8005590:	880b883a 	mov	r5,r17
 8005594:	8009883a 	mov	r4,r16
 8005598:	a00d883a 	mov	r6,r20
 800559c:	800869c0 	call	800869c <__lshift>
 80055a0:	1023883a 	mov	r17,r2
 80055a4:	98016a1e 	bne	r19,zero,8005b50 <_dtoa_r+0x1324>
 80055a8:	8829883a 	mov	r20,r17
 80055ac:	d9000617 	ldw	r4,24(sp)
 80055b0:	dcc00717 	ldw	r19,28(sp)
 80055b4:	9480004c 	andi	r18,r18,1
 80055b8:	20bfffc4 	addi	r2,r4,-1
 80055bc:	9885883a 	add	r2,r19,r2
 80055c0:	d8800415 	stw	r2,16(sp)
 80055c4:	dc800615 	stw	r18,24(sp)
 80055c8:	e009883a 	mov	r4,fp
 80055cc:	a80b883a 	mov	r5,r21
 80055d0:	80046040 	call	8004604 <quorem>
 80055d4:	e009883a 	mov	r4,fp
 80055d8:	880b883a 	mov	r5,r17
 80055dc:	102f883a 	mov	r23,r2
 80055e0:	80087e40 	call	80087e4 <__mcmp>
 80055e4:	8009883a 	mov	r4,r16
 80055e8:	a80b883a 	mov	r5,r21
 80055ec:	a00d883a 	mov	r6,r20
 80055f0:	102d883a 	mov	r22,r2
 80055f4:	80088440 	call	8008844 <__mdiff>
 80055f8:	1007883a 	mov	r3,r2
 80055fc:	10800317 	ldw	r2,12(r2)
 8005600:	bc800c04 	addi	r18,r23,48
 8005604:	1000971e 	bne	r2,zero,8005864 <_dtoa_r+0x1038>
 8005608:	180b883a 	mov	r5,r3
 800560c:	e009883a 	mov	r4,fp
 8005610:	d8c01515 	stw	r3,84(sp)
 8005614:	80087e40 	call	80087e4 <__mcmp>
 8005618:	d8c01517 	ldw	r3,84(sp)
 800561c:	8009883a 	mov	r4,r16
 8005620:	d8801515 	stw	r2,84(sp)
 8005624:	180b883a 	mov	r5,r3
 8005628:	8007f100 	call	8007f10 <_Bfree>
 800562c:	d8801517 	ldw	r2,84(sp)
 8005630:	1000041e 	bne	r2,zero,8005644 <_dtoa_r+0xe18>
 8005634:	d9800317 	ldw	r6,12(sp)
 8005638:	3000021e 	bne	r6,zero,8005644 <_dtoa_r+0xe18>
 800563c:	d8c00617 	ldw	r3,24(sp)
 8005640:	18007626 	beq	r3,zero,800581c <_dtoa_r+0xff0>
 8005644:	b0005b16 	blt	r22,zero,80057b4 <_dtoa_r+0xf88>
 8005648:	b000041e 	bne	r22,zero,800565c <_dtoa_r+0xe30>
 800564c:	d9000317 	ldw	r4,12(sp)
 8005650:	2000021e 	bne	r4,zero,800565c <_dtoa_r+0xe30>
 8005654:	d8c00617 	ldw	r3,24(sp)
 8005658:	18005626 	beq	r3,zero,80057b4 <_dtoa_r+0xf88>
 800565c:	00814d16 	blt	zero,r2,8005b94 <_dtoa_r+0x1368>
 8005660:	d8c00417 	ldw	r3,16(sp)
 8005664:	9d800044 	addi	r22,r19,1
 8005668:	9c800005 	stb	r18,0(r19)
 800566c:	b02f883a 	mov	r23,r22
 8005670:	98c14c26 	beq	r19,r3,8005ba4 <_dtoa_r+0x1378>
 8005674:	e00b883a 	mov	r5,fp
 8005678:	8009883a 	mov	r4,r16
 800567c:	01800284 	movi	r6,10
 8005680:	000f883a 	mov	r7,zero
 8005684:	8007f380 	call	8007f38 <__multadd>
 8005688:	1039883a 	mov	fp,r2
 800568c:	8d006d26 	beq	r17,r20,8005844 <_dtoa_r+0x1018>
 8005690:	880b883a 	mov	r5,r17
 8005694:	01800284 	movi	r6,10
 8005698:	000f883a 	mov	r7,zero
 800569c:	8009883a 	mov	r4,r16
 80056a0:	8007f380 	call	8007f38 <__multadd>
 80056a4:	a00b883a 	mov	r5,r20
 80056a8:	8009883a 	mov	r4,r16
 80056ac:	01800284 	movi	r6,10
 80056b0:	000f883a 	mov	r7,zero
 80056b4:	1023883a 	mov	r17,r2
 80056b8:	8007f380 	call	8007f38 <__multadd>
 80056bc:	1029883a 	mov	r20,r2
 80056c0:	b027883a 	mov	r19,r22
 80056c4:	003fc006 	br	80055c8 <__alt_data_end+0xfc0055c8>
 80056c8:	a005883a 	mov	r2,r20
 80056cc:	003ede06 	br	8005248 <__alt_data_end+0xfc005248>
 80056d0:	01000044 	movi	r4,1
 80056d4:	d9000b15 	stw	r4,44(sp)
 80056d8:	d9802217 	ldw	r6,136(sp)
 80056dc:	0180dc0e 	bge	zero,r6,8005a50 <_dtoa_r+0x1224>
 80056e0:	3023883a 	mov	r17,r6
 80056e4:	d9800d15 	stw	r6,52(sp)
 80056e8:	d9800615 	stw	r6,24(sp)
 80056ec:	003d1e06 	br	8004b68 <__alt_data_end+0xfc004b68>
 80056f0:	d8800617 	ldw	r2,24(sp)
 80056f4:	00be3716 	blt	zero,r2,8004fd4 <__alt_data_end+0xfc004fd4>
 80056f8:	1000be1e 	bne	r2,zero,80059f4 <_dtoa_r+0x11c8>
 80056fc:	8809883a 	mov	r4,r17
 8005700:	a00b883a 	mov	r5,r20
 8005704:	000d883a 	mov	r6,zero
 8005708:	01d00534 	movhi	r7,16404
 800570c:	800d7b00 	call	800d7b0 <__muldf3>
 8005710:	1009883a 	mov	r4,r2
 8005714:	180b883a 	mov	r5,r3
 8005718:	900d883a 	mov	r6,r18
 800571c:	980f883a 	mov	r7,r19
 8005720:	800d5f00 	call	800d5f0 <__gedf2>
 8005724:	002b883a 	mov	r21,zero
 8005728:	0023883a 	mov	r17,zero
 800572c:	10007a16 	blt	r2,zero,8005918 <_dtoa_r+0x10ec>
 8005730:	d9002217 	ldw	r4,136(sp)
 8005734:	ddc00717 	ldw	r23,28(sp)
 8005738:	0108303a 	nor	r4,zero,r4
 800573c:	d9000515 	stw	r4,20(sp)
 8005740:	8009883a 	mov	r4,r16
 8005744:	a80b883a 	mov	r5,r21
 8005748:	8007f100 	call	8007f10 <_Bfree>
 800574c:	883f751e 	bne	r17,zero,8005524 <__alt_data_end+0xfc005524>
 8005750:	003de406 	br	8004ee4 <__alt_data_end+0xfc004ee4>
 8005754:	e00b883a 	mov	r5,fp
 8005758:	8009883a 	mov	r4,r16
 800575c:	800855c0 	call	800855c <__pow5mult>
 8005760:	1039883a 	mov	fp,r2
 8005764:	003ed306 	br	80052b4 <__alt_data_end+0xfc0052b4>
 8005768:	903ee01e 	bne	r18,zero,80052ec <__alt_data_end+0xfc0052ec>
 800576c:	00800434 	movhi	r2,16
 8005770:	10bfffc4 	addi	r2,r2,-1
 8005774:	9884703a 	and	r2,r19,r2
 8005778:	103f081e 	bne	r2,zero,800539c <__alt_data_end+0xfc00539c>
 800577c:	9cdffc2c 	andhi	r19,r19,32752
 8005780:	983f0626 	beq	r19,zero,800539c <__alt_data_end+0xfc00539c>
 8005784:	d8800817 	ldw	r2,32(sp)
 8005788:	b5800044 	addi	r22,r22,1
 800578c:	04c00044 	movi	r19,1
 8005790:	10800044 	addi	r2,r2,1
 8005794:	d8800815 	stw	r2,32(sp)
 8005798:	003f0106 	br	80053a0 <__alt_data_end+0xfc0053a0>
 800579c:	d9800f17 	ldw	r6,60(sp)
 80057a0:	30016826 	beq	r6,zero,8005d44 <_dtoa_r+0x1518>
 80057a4:	10810cc4 	addi	r2,r2,1075
 80057a8:	dd400917 	ldw	r21,36(sp)
 80057ac:	dd000817 	ldw	r20,32(sp)
 80057b0:	003e9906 	br	8005218 <__alt_data_end+0xfc005218>
 80057b4:	9011883a 	mov	r8,r18
 80057b8:	4007883a 	mov	r3,r8
 80057bc:	e02d883a 	mov	r22,fp
 80057c0:	0080100e 	bge	zero,r2,8005804 <_dtoa_r+0xfd8>
 80057c4:	01800044 	movi	r6,1
 80057c8:	8009883a 	mov	r4,r16
 80057cc:	e00b883a 	mov	r5,fp
 80057d0:	da001515 	stw	r8,84(sp)
 80057d4:	da001715 	stw	r8,92(sp)
 80057d8:	800869c0 	call	800869c <__lshift>
 80057dc:	1009883a 	mov	r4,r2
 80057e0:	a80b883a 	mov	r5,r21
 80057e4:	102d883a 	mov	r22,r2
 80057e8:	80087e40 	call	80087e4 <__mcmp>
 80057ec:	d8c01517 	ldw	r3,84(sp)
 80057f0:	da001717 	ldw	r8,92(sp)
 80057f4:	0081a50e 	bge	zero,r2,8005e8c <_dtoa_r+0x1660>
 80057f8:	00800e44 	movi	r2,57
 80057fc:	40817b26 	beq	r8,r2,8005dec <_dtoa_r+0x15c0>
 8005800:	40c00044 	addi	r3,r8,1
 8005804:	8825883a 	mov	r18,r17
 8005808:	9dc00044 	addi	r23,r19,1
 800580c:	98c00005 	stb	r3,0(r19)
 8005810:	a023883a 	mov	r17,r20
 8005814:	b039883a 	mov	fp,r22
 8005818:	003f3906 	br	8005500 <__alt_data_end+0xfc005500>
 800581c:	00800e44 	movi	r2,57
 8005820:	9011883a 	mov	r8,r18
 8005824:	90817226 	beq	r18,r2,8005df0 <_dtoa_r+0x15c4>
 8005828:	0580010e 	bge	zero,r22,8005830 <_dtoa_r+0x1004>
 800582c:	ba000c44 	addi	r8,r23,49
 8005830:	8825883a 	mov	r18,r17
 8005834:	9dc00044 	addi	r23,r19,1
 8005838:	9a000005 	stb	r8,0(r19)
 800583c:	a023883a 	mov	r17,r20
 8005840:	003f2f06 	br	8005500 <__alt_data_end+0xfc005500>
 8005844:	880b883a 	mov	r5,r17
 8005848:	8009883a 	mov	r4,r16
 800584c:	01800284 	movi	r6,10
 8005850:	000f883a 	mov	r7,zero
 8005854:	8007f380 	call	8007f38 <__multadd>
 8005858:	1023883a 	mov	r17,r2
 800585c:	1029883a 	mov	r20,r2
 8005860:	003f9706 	br	80056c0 <__alt_data_end+0xfc0056c0>
 8005864:	8009883a 	mov	r4,r16
 8005868:	180b883a 	mov	r5,r3
 800586c:	8007f100 	call	8007f10 <_Bfree>
 8005870:	00800044 	movi	r2,1
 8005874:	003f7306 	br	8005644 <__alt_data_end+0xfc005644>
 8005878:	e009883a 	mov	r4,fp
 800587c:	a80b883a 	mov	r5,r21
 8005880:	80087e40 	call	80087e4 <__mcmp>
 8005884:	103ee60e 	bge	r2,zero,8005420 <__alt_data_end+0xfc005420>
 8005888:	8009883a 	mov	r4,r16
 800588c:	e00b883a 	mov	r5,fp
 8005890:	01800284 	movi	r6,10
 8005894:	000f883a 	mov	r7,zero
 8005898:	8007f380 	call	8007f38 <__multadd>
 800589c:	d9000517 	ldw	r4,20(sp)
 80058a0:	d9800b17 	ldw	r6,44(sp)
 80058a4:	1039883a 	mov	fp,r2
 80058a8:	213fffc4 	addi	r4,r4,-1
 80058ac:	d9000515 	stw	r4,20(sp)
 80058b0:	303f2d1e 	bne	r6,zero,8005568 <__alt_data_end+0xfc005568>
 80058b4:	d9000d17 	ldw	r4,52(sp)
 80058b8:	0101780e 	bge	zero,r4,8005e9c <_dtoa_r+0x1670>
 80058bc:	d9000615 	stw	r4,24(sp)
 80058c0:	003edb06 	br	8005430 <__alt_data_end+0xfc005430>
 80058c4:	00800084 	movi	r2,2
 80058c8:	30818e1e 	bne	r6,r2,8005f04 <_dtoa_r+0x16d8>
 80058cc:	d8000b15 	stw	zero,44(sp)
 80058d0:	003f8106 	br	80056d8 <__alt_data_end+0xfc0056d8>
 80058d4:	d8800717 	ldw	r2,28(sp)
 80058d8:	003c0306 	br	80048e8 <__alt_data_end+0xfc0048e8>
 80058dc:	d9000317 	ldw	r4,12(sp)
 80058e0:	00800084 	movi	r2,2
 80058e4:	113ed00e 	bge	r2,r4,8005428 <__alt_data_end+0xfc005428>
 80058e8:	d8c00617 	ldw	r3,24(sp)
 80058ec:	183f901e 	bne	r3,zero,8005730 <__alt_data_end+0xfc005730>
 80058f0:	a80b883a 	mov	r5,r21
 80058f4:	8009883a 	mov	r4,r16
 80058f8:	01800144 	movi	r6,5
 80058fc:	000f883a 	mov	r7,zero
 8005900:	8007f380 	call	8007f38 <__multadd>
 8005904:	e009883a 	mov	r4,fp
 8005908:	100b883a 	mov	r5,r2
 800590c:	102b883a 	mov	r21,r2
 8005910:	80087e40 	call	80087e4 <__mcmp>
 8005914:	00bf860e 	bge	zero,r2,8005730 <__alt_data_end+0xfc005730>
 8005918:	d9800717 	ldw	r6,28(sp)
 800591c:	00800c44 	movi	r2,49
 8005920:	30800005 	stb	r2,0(r6)
 8005924:	d8800517 	ldw	r2,20(sp)
 8005928:	35c00044 	addi	r23,r6,1
 800592c:	10800044 	addi	r2,r2,1
 8005930:	d8800515 	stw	r2,20(sp)
 8005934:	003f8206 	br	8005740 <__alt_data_end+0xfc005740>
 8005938:	903e981e 	bne	r18,zero,800539c <__alt_data_end+0xfc00539c>
 800593c:	003f8b06 	br	800576c <__alt_data_end+0xfc00576c>
 8005940:	d9800517 	ldw	r6,20(sp)
 8005944:	d8c00717 	ldw	r3,28(sp)
 8005948:	00800c44 	movi	r2,49
 800594c:	31800044 	addi	r6,r6,1
 8005950:	d9800515 	stw	r6,20(sp)
 8005954:	18800005 	stb	r2,0(r3)
 8005958:	003ee906 	br	8005500 <__alt_data_end+0xfc005500>
 800595c:	dc000317 	ldw	r16,12(sp)
 8005960:	003d6006 	br	8004ee4 <__alt_data_end+0xfc004ee4>
 8005964:	8809883a 	mov	r4,r17
 8005968:	800e9740 	call	800e974 <__floatsidf>
 800596c:	a009883a 	mov	r4,r20
 8005970:	a80b883a 	mov	r5,r21
 8005974:	100d883a 	mov	r6,r2
 8005978:	180f883a 	mov	r7,r3
 800597c:	800d7b00 	call	800d7b0 <__muldf3>
 8005980:	1009883a 	mov	r4,r2
 8005984:	180b883a 	mov	r5,r3
 8005988:	000d883a 	mov	r6,zero
 800598c:	01d00734 	movhi	r7,16412
 8005990:	800c3500 	call	800c350 <__adddf3>
 8005994:	1023883a 	mov	r17,r2
 8005998:	00bf3034 	movhi	r2,64704
 800599c:	1885883a 	add	r2,r3,r2
 80059a0:	d8800e15 	stw	r2,56(sp)
 80059a4:	a009883a 	mov	r4,r20
 80059a8:	a80b883a 	mov	r5,r21
 80059ac:	000d883a 	mov	r6,zero
 80059b0:	01d00534 	movhi	r7,16404
 80059b4:	800e01c0 	call	800e01c <__subdf3>
 80059b8:	d9c00e17 	ldw	r7,56(sp)
 80059bc:	1009883a 	mov	r4,r2
 80059c0:	180b883a 	mov	r5,r3
 80059c4:	880d883a 	mov	r6,r17
 80059c8:	102b883a 	mov	r21,r2
 80059cc:	1829883a 	mov	r20,r3
 80059d0:	800d5f00 	call	800d5f0 <__gedf2>
 80059d4:	00807716 	blt	zero,r2,8005bb4 <_dtoa_r+0x1388>
 80059d8:	d8800e17 	ldw	r2,56(sp)
 80059dc:	a809883a 	mov	r4,r21
 80059e0:	a00b883a 	mov	r5,r20
 80059e4:	11e0003c 	xorhi	r7,r2,32768
 80059e8:	880d883a 	mov	r6,r17
 80059ec:	800d6d00 	call	800d6d0 <__ledf2>
 80059f0:	103d6b0e 	bge	r2,zero,8004fa0 <__alt_data_end+0xfc004fa0>
 80059f4:	002b883a 	mov	r21,zero
 80059f8:	0023883a 	mov	r17,zero
 80059fc:	003f4c06 	br	8005730 <__alt_data_end+0xfc005730>
 8005a00:	d9800917 	ldw	r6,36(sp)
 8005a04:	e00b883a 	mov	r5,fp
 8005a08:	8009883a 	mov	r4,r16
 8005a0c:	800855c0 	call	800855c <__pow5mult>
 8005a10:	1039883a 	mov	fp,r2
 8005a14:	003e2706 	br	80052b4 <__alt_data_end+0xfc0052b4>
 8005a18:	d8000b15 	stw	zero,44(sp)
 8005a1c:	003c4906 	br	8004b44 <__alt_data_end+0xfc004b44>
 8005a20:	d9000917 	ldw	r4,36(sp)
 8005a24:	d9800a17 	ldw	r6,40(sp)
 8005a28:	dd400915 	stw	r21,36(sp)
 8005a2c:	a905c83a 	sub	r2,r21,r4
 8005a30:	308d883a 	add	r6,r6,r2
 8005a34:	d9800a15 	stw	r6,40(sp)
 8005a38:	002b883a 	mov	r21,zero
 8005a3c:	003df206 	br	8005208 <__alt_data_end+0xfc005208>
 8005a40:	dc800e15 	stw	r18,56(sp)
 8005a44:	982b883a 	mov	r21,r19
 8005a48:	04400084 	movi	r17,2
 8005a4c:	003c7406 	br	8004c20 <__alt_data_end+0xfc004c20>
 8005a50:	04400044 	movi	r17,1
 8005a54:	dc400d15 	stw	r17,52(sp)
 8005a58:	dc400615 	stw	r17,24(sp)
 8005a5c:	dc402215 	stw	r17,136(sp)
 8005a60:	80001115 	stw	zero,68(r16)
 8005a64:	000b883a 	mov	r5,zero
 8005a68:	003c4a06 	br	8004b94 <__alt_data_end+0xfc004b94>
 8005a6c:	3023883a 	mov	r17,r6
 8005a70:	003ffb06 	br	8005a60 <__alt_data_end+0xfc005a60>
 8005a74:	1000021e 	bne	r2,zero,8005a80 <_dtoa_r+0x1254>
 8005a78:	4200004c 	andi	r8,r8,1
 8005a7c:	403e8f1e 	bne	r8,zero,80054bc <__alt_data_end+0xfc0054bc>
 8005a80:	01000c04 	movi	r4,48
 8005a84:	00000106 	br	8005a8c <_dtoa_r+0x1260>
 8005a88:	102f883a 	mov	r23,r2
 8005a8c:	b8bfffc4 	addi	r2,r23,-1
 8005a90:	10c00007 	ldb	r3,0(r2)
 8005a94:	193ffc26 	beq	r3,r4,8005a88 <__alt_data_end+0xfc005a88>
 8005a98:	003e9906 	br	8005500 <__alt_data_end+0xfc005500>
 8005a9c:	d9000517 	ldw	r4,20(sp)
 8005aa0:	012fc83a 	sub	r23,zero,r4
 8005aa4:	b800ad26 	beq	r23,zero,8005d5c <_dtoa_r+0x1530>
 8005aa8:	b88003cc 	andi	r2,r23,15
 8005aac:	100490fa 	slli	r2,r2,3
 8005ab0:	00c20074 	movhi	r3,2049
 8005ab4:	18c6f204 	addi	r3,r3,7112
 8005ab8:	1885883a 	add	r2,r3,r2
 8005abc:	11800017 	ldw	r6,0(r2)
 8005ac0:	11c00117 	ldw	r7,4(r2)
 8005ac4:	b82fd13a 	srai	r23,r23,4
 8005ac8:	9009883a 	mov	r4,r18
 8005acc:	980b883a 	mov	r5,r19
 8005ad0:	800d7b00 	call	800d7b0 <__muldf3>
 8005ad4:	1029883a 	mov	r20,r2
 8005ad8:	182b883a 	mov	r21,r3
 8005adc:	b800f426 	beq	r23,zero,8005eb0 <_dtoa_r+0x1684>
 8005ae0:	02020074 	movhi	r8,2049
 8005ae4:	4206e804 	addi	r8,r8,7072
 8005ae8:	8029883a 	mov	r20,r16
 8005aec:	04400084 	movi	r17,2
 8005af0:	4021883a 	mov	r16,r8
 8005af4:	b980004c 	andi	r6,r23,1
 8005af8:	1009883a 	mov	r4,r2
 8005afc:	b82fd07a 	srai	r23,r23,1
 8005b00:	180b883a 	mov	r5,r3
 8005b04:	30000426 	beq	r6,zero,8005b18 <_dtoa_r+0x12ec>
 8005b08:	81800017 	ldw	r6,0(r16)
 8005b0c:	81c00117 	ldw	r7,4(r16)
 8005b10:	8c400044 	addi	r17,r17,1
 8005b14:	800d7b00 	call	800d7b0 <__muldf3>
 8005b18:	84000204 	addi	r16,r16,8
 8005b1c:	b83ff51e 	bne	r23,zero,8005af4 <__alt_data_end+0xfc005af4>
 8005b20:	a021883a 	mov	r16,r20
 8005b24:	182b883a 	mov	r21,r3
 8005b28:	1029883a 	mov	r20,r2
 8005b2c:	003c5506 	br	8004c84 <__alt_data_end+0xfc004c84>
 8005b30:	d9800517 	ldw	r6,20(sp)
 8005b34:	d9000717 	ldw	r4,28(sp)
 8005b38:	00c00c04 	movi	r3,48
 8005b3c:	31800044 	addi	r6,r6,1
 8005b40:	d9800515 	stw	r6,20(sp)
 8005b44:	20c00005 	stb	r3,0(r4)
 8005b48:	02000c44 	movi	r8,49
 8005b4c:	003da206 	br	80051d8 <__alt_data_end+0xfc0051d8>
 8005b50:	89400117 	ldw	r5,4(r17)
 8005b54:	8009883a 	mov	r4,r16
 8005b58:	8007e680 	call	8007e68 <_Balloc>
 8005b5c:	89800417 	ldw	r6,16(r17)
 8005b60:	11000304 	addi	r4,r2,12
 8005b64:	89400304 	addi	r5,r17,12
 8005b68:	31800084 	addi	r6,r6,2
 8005b6c:	318d883a 	add	r6,r6,r6
 8005b70:	318d883a 	add	r6,r6,r6
 8005b74:	1027883a 	mov	r19,r2
 8005b78:	8007ab00 	call	8007ab0 <memcpy>
 8005b7c:	8009883a 	mov	r4,r16
 8005b80:	980b883a 	mov	r5,r19
 8005b84:	01800044 	movi	r6,1
 8005b88:	800869c0 	call	800869c <__lshift>
 8005b8c:	1029883a 	mov	r20,r2
 8005b90:	003e8606 	br	80055ac <__alt_data_end+0xfc0055ac>
 8005b94:	00800e44 	movi	r2,57
 8005b98:	90809526 	beq	r18,r2,8005df0 <_dtoa_r+0x15c4>
 8005b9c:	92000044 	addi	r8,r18,1
 8005ba0:	003f2306 	br	8005830 <__alt_data_end+0xfc005830>
 8005ba4:	9011883a 	mov	r8,r18
 8005ba8:	8825883a 	mov	r18,r17
 8005bac:	a023883a 	mov	r17,r20
 8005bb0:	003e3706 	br	8005490 <__alt_data_end+0xfc005490>
 8005bb4:	002b883a 	mov	r21,zero
 8005bb8:	0023883a 	mov	r17,zero
 8005bbc:	003f5606 	br	8005918 <__alt_data_end+0xfc005918>
 8005bc0:	51bfffc4 	addi	r6,r10,-1
 8005bc4:	300490fa 	slli	r2,r6,3
 8005bc8:	00c20074 	movhi	r3,2049
 8005bcc:	18c6f204 	addi	r3,r3,7112
 8005bd0:	1885883a 	add	r2,r3,r2
 8005bd4:	d9c00e17 	ldw	r7,56(sp)
 8005bd8:	11000017 	ldw	r4,0(r2)
 8005bdc:	11400117 	ldw	r5,4(r2)
 8005be0:	d8800717 	ldw	r2,28(sp)
 8005be4:	d9801015 	stw	r6,64(sp)
 8005be8:	880d883a 	mov	r6,r17
 8005bec:	da801615 	stw	r10,88(sp)
 8005bf0:	15c00044 	addi	r23,r2,1
 8005bf4:	800d7b00 	call	800d7b0 <__muldf3>
 8005bf8:	a80b883a 	mov	r5,r21
 8005bfc:	a009883a 	mov	r4,r20
 8005c00:	d8c01115 	stw	r3,68(sp)
 8005c04:	d8800e15 	stw	r2,56(sp)
 8005c08:	800e8ec0 	call	800e8ec <__fixdfsi>
 8005c0c:	1009883a 	mov	r4,r2
 8005c10:	1023883a 	mov	r17,r2
 8005c14:	800e9740 	call	800e974 <__floatsidf>
 8005c18:	a009883a 	mov	r4,r20
 8005c1c:	a80b883a 	mov	r5,r21
 8005c20:	100d883a 	mov	r6,r2
 8005c24:	180f883a 	mov	r7,r3
 8005c28:	800e01c0 	call	800e01c <__subdf3>
 8005c2c:	1813883a 	mov	r9,r3
 8005c30:	d8c00717 	ldw	r3,28(sp)
 8005c34:	8c400c04 	addi	r17,r17,48
 8005c38:	1011883a 	mov	r8,r2
 8005c3c:	1c400005 	stb	r17,0(r3)
 8005c40:	da801617 	ldw	r10,88(sp)
 8005c44:	00800044 	movi	r2,1
 8005c48:	50802326 	beq	r10,r2,8005cd8 <_dtoa_r+0x14ac>
 8005c4c:	d8800717 	ldw	r2,28(sp)
 8005c50:	b82b883a 	mov	r21,r23
 8005c54:	dc001315 	stw	r16,76(sp)
 8005c58:	12a9883a 	add	r20,r2,r10
 8005c5c:	4807883a 	mov	r3,r9
 8005c60:	4005883a 	mov	r2,r8
 8005c64:	dc801415 	stw	r18,80(sp)
 8005c68:	000d883a 	mov	r6,zero
 8005c6c:	01d00934 	movhi	r7,16420
 8005c70:	1009883a 	mov	r4,r2
 8005c74:	180b883a 	mov	r5,r3
 8005c78:	800d7b00 	call	800d7b0 <__muldf3>
 8005c7c:	180b883a 	mov	r5,r3
 8005c80:	1009883a 	mov	r4,r2
 8005c84:	1821883a 	mov	r16,r3
 8005c88:	1025883a 	mov	r18,r2
 8005c8c:	800e8ec0 	call	800e8ec <__fixdfsi>
 8005c90:	1009883a 	mov	r4,r2
 8005c94:	1023883a 	mov	r17,r2
 8005c98:	800e9740 	call	800e974 <__floatsidf>
 8005c9c:	9009883a 	mov	r4,r18
 8005ca0:	800b883a 	mov	r5,r16
 8005ca4:	100d883a 	mov	r6,r2
 8005ca8:	180f883a 	mov	r7,r3
 8005cac:	8c400c04 	addi	r17,r17,48
 8005cb0:	800e01c0 	call	800e01c <__subdf3>
 8005cb4:	ad400044 	addi	r21,r21,1
 8005cb8:	ac7fffc5 	stb	r17,-1(r21)
 8005cbc:	ad3fea1e 	bne	r21,r20,8005c68 <__alt_data_end+0xfc005c68>
 8005cc0:	1813883a 	mov	r9,r3
 8005cc4:	d8c01017 	ldw	r3,64(sp)
 8005cc8:	dc001317 	ldw	r16,76(sp)
 8005ccc:	dc801417 	ldw	r18,80(sp)
 8005cd0:	1011883a 	mov	r8,r2
 8005cd4:	b8ef883a 	add	r23,r23,r3
 8005cd8:	d9000e17 	ldw	r4,56(sp)
 8005cdc:	d9401117 	ldw	r5,68(sp)
 8005ce0:	000d883a 	mov	r6,zero
 8005ce4:	01cff834 	movhi	r7,16352
 8005ce8:	da001715 	stw	r8,92(sp)
 8005cec:	da401515 	stw	r9,84(sp)
 8005cf0:	800c3500 	call	800c350 <__adddf3>
 8005cf4:	da001717 	ldw	r8,92(sp)
 8005cf8:	da401517 	ldw	r9,84(sp)
 8005cfc:	1009883a 	mov	r4,r2
 8005d00:	400d883a 	mov	r6,r8
 8005d04:	480f883a 	mov	r7,r9
 8005d08:	180b883a 	mov	r5,r3
 8005d0c:	800d6d00 	call	800d6d0 <__ledf2>
 8005d10:	da001717 	ldw	r8,92(sp)
 8005d14:	da401517 	ldw	r9,84(sp)
 8005d18:	10003b0e 	bge	r2,zero,8005e08 <_dtoa_r+0x15dc>
 8005d1c:	d9001217 	ldw	r4,72(sp)
 8005d20:	bd7fffc3 	ldbu	r21,-1(r23)
 8005d24:	d9000515 	stw	r4,20(sp)
 8005d28:	003d1c06 	br	800519c <__alt_data_end+0xfc00519c>
 8005d2c:	d8c00817 	ldw	r3,32(sp)
 8005d30:	18a9c83a 	sub	r20,r3,r2
 8005d34:	0005883a 	mov	r2,zero
 8005d38:	003d3706 	br	8005218 <__alt_data_end+0xfc005218>
 8005d3c:	00800044 	movi	r2,1
 8005d40:	003dd006 	br	8005484 <__alt_data_end+0xfc005484>
 8005d44:	d8c00217 	ldw	r3,8(sp)
 8005d48:	00800d84 	movi	r2,54
 8005d4c:	dd400917 	ldw	r21,36(sp)
 8005d50:	10c5c83a 	sub	r2,r2,r3
 8005d54:	dd000817 	ldw	r20,32(sp)
 8005d58:	003d2f06 	br	8005218 <__alt_data_end+0xfc005218>
 8005d5c:	9029883a 	mov	r20,r18
 8005d60:	982b883a 	mov	r21,r19
 8005d64:	04400084 	movi	r17,2
 8005d68:	003bc606 	br	8004c84 <__alt_data_end+0xfc004c84>
 8005d6c:	d8800617 	ldw	r2,24(sp)
 8005d70:	103efc26 	beq	r2,zero,8005964 <__alt_data_end+0xfc005964>
 8005d74:	d8c00d17 	ldw	r3,52(sp)
 8005d78:	00fc890e 	bge	zero,r3,8004fa0 <__alt_data_end+0xfc004fa0>
 8005d7c:	a80b883a 	mov	r5,r21
 8005d80:	a009883a 	mov	r4,r20
 8005d84:	000d883a 	mov	r6,zero
 8005d88:	01d00934 	movhi	r7,16420
 8005d8c:	800d7b00 	call	800d7b0 <__muldf3>
 8005d90:	89000044 	addi	r4,r17,1
 8005d94:	1029883a 	mov	r20,r2
 8005d98:	182b883a 	mov	r21,r3
 8005d9c:	800e9740 	call	800e974 <__floatsidf>
 8005da0:	a009883a 	mov	r4,r20
 8005da4:	a80b883a 	mov	r5,r21
 8005da8:	100d883a 	mov	r6,r2
 8005dac:	180f883a 	mov	r7,r3
 8005db0:	800d7b00 	call	800d7b0 <__muldf3>
 8005db4:	1009883a 	mov	r4,r2
 8005db8:	180b883a 	mov	r5,r3
 8005dbc:	000d883a 	mov	r6,zero
 8005dc0:	01d00734 	movhi	r7,16412
 8005dc4:	800c3500 	call	800c350 <__adddf3>
 8005dc8:	d9000517 	ldw	r4,20(sp)
 8005dcc:	1023883a 	mov	r17,r2
 8005dd0:	00bf3034 	movhi	r2,64704
 8005dd4:	213fffc4 	addi	r4,r4,-1
 8005dd8:	1885883a 	add	r2,r3,r2
 8005ddc:	d9001215 	stw	r4,72(sp)
 8005de0:	d8800e15 	stw	r2,56(sp)
 8005de4:	da800d17 	ldw	r10,52(sp)
 8005de8:	003bc306 	br	8004cf8 <__alt_data_end+0xfc004cf8>
 8005dec:	b039883a 	mov	fp,r22
 8005df0:	01000e44 	movi	r4,57
 8005df4:	8825883a 	mov	r18,r17
 8005df8:	9dc00044 	addi	r23,r19,1
 8005dfc:	99000005 	stb	r4,0(r19)
 8005e00:	a023883a 	mov	r17,r20
 8005e04:	003dae06 	br	80054c0 <__alt_data_end+0xfc0054c0>
 8005e08:	d9800e17 	ldw	r6,56(sp)
 8005e0c:	d9c01117 	ldw	r7,68(sp)
 8005e10:	0009883a 	mov	r4,zero
 8005e14:	014ff834 	movhi	r5,16352
 8005e18:	da001715 	stw	r8,92(sp)
 8005e1c:	da401515 	stw	r9,84(sp)
 8005e20:	800e01c0 	call	800e01c <__subdf3>
 8005e24:	da001717 	ldw	r8,92(sp)
 8005e28:	da401517 	ldw	r9,84(sp)
 8005e2c:	1009883a 	mov	r4,r2
 8005e30:	180b883a 	mov	r5,r3
 8005e34:	400d883a 	mov	r6,r8
 8005e38:	480f883a 	mov	r7,r9
 8005e3c:	800d5f00 	call	800d5f0 <__gedf2>
 8005e40:	00bc570e 	bge	zero,r2,8004fa0 <__alt_data_end+0xfc004fa0>
 8005e44:	01000c04 	movi	r4,48
 8005e48:	00000106 	br	8005e50 <_dtoa_r+0x1624>
 8005e4c:	102f883a 	mov	r23,r2
 8005e50:	b8bfffc4 	addi	r2,r23,-1
 8005e54:	10c00007 	ldb	r3,0(r2)
 8005e58:	193ffc26 	beq	r3,r4,8005e4c <__alt_data_end+0xfc005e4c>
 8005e5c:	d9801217 	ldw	r6,72(sp)
 8005e60:	d9800515 	stw	r6,20(sp)
 8005e64:	003c1f06 	br	8004ee4 <__alt_data_end+0xfc004ee4>
 8005e68:	d8801217 	ldw	r2,72(sp)
 8005e6c:	dc001117 	ldw	r16,68(sp)
 8005e70:	d8800515 	stw	r2,20(sp)
 8005e74:	003cc906 	br	800519c <__alt_data_end+0xfc00519c>
 8005e78:	dd801317 	ldw	r22,76(sp)
 8005e7c:	dc001117 	ldw	r16,68(sp)
 8005e80:	dcc01417 	ldw	r19,80(sp)
 8005e84:	dc801017 	ldw	r18,64(sp)
 8005e88:	003c4506 	br	8004fa0 <__alt_data_end+0xfc004fa0>
 8005e8c:	103e5d1e 	bne	r2,zero,8005804 <__alt_data_end+0xfc005804>
 8005e90:	4080004c 	andi	r2,r8,1
 8005e94:	103e5b26 	beq	r2,zero,8005804 <__alt_data_end+0xfc005804>
 8005e98:	003e5706 	br	80057f8 <__alt_data_end+0xfc0057f8>
 8005e9c:	d8c00317 	ldw	r3,12(sp)
 8005ea0:	00800084 	movi	r2,2
 8005ea4:	10c00a16 	blt	r2,r3,8005ed0 <_dtoa_r+0x16a4>
 8005ea8:	d9000d17 	ldw	r4,52(sp)
 8005eac:	003e8306 	br	80058bc <__alt_data_end+0xfc0058bc>
 8005eb0:	04400084 	movi	r17,2
 8005eb4:	003b7306 	br	8004c84 <__alt_data_end+0xfc004c84>
 8005eb8:	d9801217 	ldw	r6,72(sp)
 8005ebc:	d9800515 	stw	r6,20(sp)
 8005ec0:	003cb606 	br	800519c <__alt_data_end+0xfc00519c>
 8005ec4:	d9001217 	ldw	r4,72(sp)
 8005ec8:	d9000515 	stw	r4,20(sp)
 8005ecc:	003c0506 	br	8004ee4 <__alt_data_end+0xfc004ee4>
 8005ed0:	d9800d17 	ldw	r6,52(sp)
 8005ed4:	d9800615 	stw	r6,24(sp)
 8005ed8:	003e8306 	br	80058e8 <__alt_data_end+0xfc0058e8>
 8005edc:	d9800317 	ldw	r6,12(sp)
 8005ee0:	00800084 	movi	r2,2
 8005ee4:	11800216 	blt	r2,r6,8005ef0 <_dtoa_r+0x16c4>
 8005ee8:	d8800d17 	ldw	r2,52(sp)
 8005eec:	003da606 	br	8005588 <__alt_data_end+0xfc005588>
 8005ef0:	d8800d17 	ldw	r2,52(sp)
 8005ef4:	d8800615 	stw	r2,24(sp)
 8005ef8:	003e7b06 	br	80058e8 <__alt_data_end+0xfc0058e8>
 8005efc:	05000044 	movi	r20,1
 8005f00:	003b0506 	br	8004b18 <__alt_data_end+0xfc004b18>
 8005f04:	8009883a 	mov	r4,r16
 8005f08:	80001115 	stw	zero,68(r16)
 8005f0c:	000b883a 	mov	r5,zero
 8005f10:	8007e680 	call	8007e68 <_Balloc>
 8005f14:	d8800715 	stw	r2,28(sp)
 8005f18:	d8c00717 	ldw	r3,28(sp)
 8005f1c:	00bfffc4 	movi	r2,-1
 8005f20:	01000044 	movi	r4,1
 8005f24:	d8800615 	stw	r2,24(sp)
 8005f28:	80c01015 	stw	r3,64(r16)
 8005f2c:	d9000b15 	stw	r4,44(sp)
 8005f30:	d8002215 	stw	zero,136(sp)
 8005f34:	d8800d15 	stw	r2,52(sp)
 8005f38:	003c1906 	br	8004fa0 <__alt_data_end+0xfc004fa0>
 8005f3c:	193d2926 	beq	r3,r4,80053e4 <__alt_data_end+0xfc0053e4>
 8005f40:	00c00f04 	movi	r3,60
 8005f44:	1885c83a 	sub	r2,r3,r2
 8005f48:	003d7b06 	br	8005538 <__alt_data_end+0xfc005538>
 8005f4c:	000b883a 	mov	r5,zero
 8005f50:	003b1006 	br	8004b94 <__alt_data_end+0xfc004b94>

08005f54 <_fflush_r>:
 8005f54:	defffb04 	addi	sp,sp,-20
 8005f58:	dcc00315 	stw	r19,12(sp)
 8005f5c:	dc000015 	stw	r16,0(sp)
 8005f60:	dfc00415 	stw	ra,16(sp)
 8005f64:	dc800215 	stw	r18,8(sp)
 8005f68:	dc400115 	stw	r17,4(sp)
 8005f6c:	2027883a 	mov	r19,r4
 8005f70:	2821883a 	mov	r16,r5
 8005f74:	20000226 	beq	r4,zero,8005f80 <_fflush_r+0x2c>
 8005f78:	20800e17 	ldw	r2,56(r4)
 8005f7c:	10005326 	beq	r2,zero,80060cc <_fflush_r+0x178>
 8005f80:	8080030b 	ldhu	r2,12(r16)
 8005f84:	10ffffcc 	andi	r3,r2,65535
 8005f88:	18e0001c 	xori	r3,r3,32768
 8005f8c:	18e00004 	addi	r3,r3,-32768
 8005f90:	18002c26 	beq	r3,zero,8006044 <_fflush_r+0xf0>
 8005f94:	10c0020c 	andi	r3,r2,8
 8005f98:	1800321e 	bne	r3,zero,8006064 <_fflush_r+0x110>
 8005f9c:	80c00117 	ldw	r3,4(r16)
 8005fa0:	10820014 	ori	r2,r2,2048
 8005fa4:	8080030d 	sth	r2,12(r16)
 8005fa8:	00c0570e 	bge	zero,r3,8006108 <_fflush_r+0x1b4>
 8005fac:	82000a17 	ldw	r8,40(r16)
 8005fb0:	40002426 	beq	r8,zero,8006044 <_fflush_r+0xf0>
 8005fb4:	9c400017 	ldw	r17,0(r19)
 8005fb8:	10c4000c 	andi	r3,r2,4096
 8005fbc:	98000015 	stw	zero,0(r19)
 8005fc0:	18004626 	beq	r3,zero,80060dc <_fflush_r+0x188>
 8005fc4:	81801417 	ldw	r6,80(r16)
 8005fc8:	10c0010c 	andi	r3,r2,4
 8005fcc:	18000626 	beq	r3,zero,8005fe8 <_fflush_r+0x94>
 8005fd0:	80c00117 	ldw	r3,4(r16)
 8005fd4:	80800c17 	ldw	r2,48(r16)
 8005fd8:	30cdc83a 	sub	r6,r6,r3
 8005fdc:	10000226 	beq	r2,zero,8005fe8 <_fflush_r+0x94>
 8005fe0:	80800f17 	ldw	r2,60(r16)
 8005fe4:	308dc83a 	sub	r6,r6,r2
 8005fe8:	81400717 	ldw	r5,28(r16)
 8005fec:	9809883a 	mov	r4,r19
 8005ff0:	000f883a 	mov	r7,zero
 8005ff4:	403ee83a 	callr	r8
 8005ff8:	00ffffc4 	movi	r3,-1
 8005ffc:	10c04526 	beq	r2,r3,8006114 <_fflush_r+0x1c0>
 8006000:	80c0030b 	ldhu	r3,12(r16)
 8006004:	81000417 	ldw	r4,16(r16)
 8006008:	80000115 	stw	zero,4(r16)
 800600c:	197dffcc 	andi	r5,r3,63487
 8006010:	8140030d 	sth	r5,12(r16)
 8006014:	81000015 	stw	r4,0(r16)
 8006018:	18c4000c 	andi	r3,r3,4096
 800601c:	18000126 	beq	r3,zero,8006024 <_fflush_r+0xd0>
 8006020:	80801415 	stw	r2,80(r16)
 8006024:	81400c17 	ldw	r5,48(r16)
 8006028:	9c400015 	stw	r17,0(r19)
 800602c:	28000526 	beq	r5,zero,8006044 <_fflush_r+0xf0>
 8006030:	80801004 	addi	r2,r16,64
 8006034:	28800226 	beq	r5,r2,8006040 <_fflush_r+0xec>
 8006038:	9809883a 	mov	r4,r19
 800603c:	80066840 	call	8006684 <_free_r>
 8006040:	80000c15 	stw	zero,48(r16)
 8006044:	0005883a 	mov	r2,zero
 8006048:	dfc00417 	ldw	ra,16(sp)
 800604c:	dcc00317 	ldw	r19,12(sp)
 8006050:	dc800217 	ldw	r18,8(sp)
 8006054:	dc400117 	ldw	r17,4(sp)
 8006058:	dc000017 	ldw	r16,0(sp)
 800605c:	dec00504 	addi	sp,sp,20
 8006060:	f800283a 	ret
 8006064:	84800417 	ldw	r18,16(r16)
 8006068:	903ff626 	beq	r18,zero,8006044 <__alt_data_end+0xfc006044>
 800606c:	84400017 	ldw	r17,0(r16)
 8006070:	108000cc 	andi	r2,r2,3
 8006074:	84800015 	stw	r18,0(r16)
 8006078:	8ca3c83a 	sub	r17,r17,r18
 800607c:	10001526 	beq	r2,zero,80060d4 <_fflush_r+0x180>
 8006080:	0005883a 	mov	r2,zero
 8006084:	80800215 	stw	r2,8(r16)
 8006088:	04400316 	blt	zero,r17,8006098 <_fflush_r+0x144>
 800608c:	003fed06 	br	8006044 <__alt_data_end+0xfc006044>
 8006090:	90a5883a 	add	r18,r18,r2
 8006094:	047feb0e 	bge	zero,r17,8006044 <__alt_data_end+0xfc006044>
 8006098:	80800917 	ldw	r2,36(r16)
 800609c:	81400717 	ldw	r5,28(r16)
 80060a0:	880f883a 	mov	r7,r17
 80060a4:	900d883a 	mov	r6,r18
 80060a8:	9809883a 	mov	r4,r19
 80060ac:	103ee83a 	callr	r2
 80060b0:	88a3c83a 	sub	r17,r17,r2
 80060b4:	00bff616 	blt	zero,r2,8006090 <__alt_data_end+0xfc006090>
 80060b8:	80c0030b 	ldhu	r3,12(r16)
 80060bc:	00bfffc4 	movi	r2,-1
 80060c0:	18c01014 	ori	r3,r3,64
 80060c4:	80c0030d 	sth	r3,12(r16)
 80060c8:	003fdf06 	br	8006048 <__alt_data_end+0xfc006048>
 80060cc:	80065100 	call	8006510 <__sinit>
 80060d0:	003fab06 	br	8005f80 <__alt_data_end+0xfc005f80>
 80060d4:	80800517 	ldw	r2,20(r16)
 80060d8:	003fea06 	br	8006084 <__alt_data_end+0xfc006084>
 80060dc:	81400717 	ldw	r5,28(r16)
 80060e0:	000d883a 	mov	r6,zero
 80060e4:	9809883a 	mov	r4,r19
 80060e8:	01c00044 	movi	r7,1
 80060ec:	403ee83a 	callr	r8
 80060f0:	100d883a 	mov	r6,r2
 80060f4:	00bfffc4 	movi	r2,-1
 80060f8:	30801326 	beq	r6,r2,8006148 <_fflush_r+0x1f4>
 80060fc:	8080030b 	ldhu	r2,12(r16)
 8006100:	82000a17 	ldw	r8,40(r16)
 8006104:	003fb006 	br	8005fc8 <__alt_data_end+0xfc005fc8>
 8006108:	80c00f17 	ldw	r3,60(r16)
 800610c:	00ffa716 	blt	zero,r3,8005fac <__alt_data_end+0xfc005fac>
 8006110:	003fcc06 	br	8006044 <__alt_data_end+0xfc006044>
 8006114:	98c00017 	ldw	r3,0(r19)
 8006118:	183fb926 	beq	r3,zero,8006000 <__alt_data_end+0xfc006000>
 800611c:	01000744 	movi	r4,29
 8006120:	19000226 	beq	r3,r4,800612c <_fflush_r+0x1d8>
 8006124:	01000584 	movi	r4,22
 8006128:	1900101e 	bne	r3,r4,800616c <_fflush_r+0x218>
 800612c:	8080030b 	ldhu	r2,12(r16)
 8006130:	80c00417 	ldw	r3,16(r16)
 8006134:	80000115 	stw	zero,4(r16)
 8006138:	10bdffcc 	andi	r2,r2,63487
 800613c:	8080030d 	sth	r2,12(r16)
 8006140:	80c00015 	stw	r3,0(r16)
 8006144:	003fb706 	br	8006024 <__alt_data_end+0xfc006024>
 8006148:	98800017 	ldw	r2,0(r19)
 800614c:	103feb26 	beq	r2,zero,80060fc <__alt_data_end+0xfc0060fc>
 8006150:	00c00744 	movi	r3,29
 8006154:	10c00226 	beq	r2,r3,8006160 <_fflush_r+0x20c>
 8006158:	00c00584 	movi	r3,22
 800615c:	10ffd61e 	bne	r2,r3,80060b8 <__alt_data_end+0xfc0060b8>
 8006160:	9c400015 	stw	r17,0(r19)
 8006164:	0005883a 	mov	r2,zero
 8006168:	003fb706 	br	8006048 <__alt_data_end+0xfc006048>
 800616c:	80c0030b 	ldhu	r3,12(r16)
 8006170:	18c01014 	ori	r3,r3,64
 8006174:	80c0030d 	sth	r3,12(r16)
 8006178:	003fb306 	br	8006048 <__alt_data_end+0xfc006048>

0800617c <fflush>:
 800617c:	20000526 	beq	r4,zero,8006194 <fflush+0x18>
 8006180:	00820074 	movhi	r2,2049
 8006184:	108e2504 	addi	r2,r2,14484
 8006188:	200b883a 	mov	r5,r4
 800618c:	11000017 	ldw	r4,0(r2)
 8006190:	8005f541 	jmpi	8005f54 <_fflush_r>
 8006194:	00820074 	movhi	r2,2049
 8006198:	108e2404 	addi	r2,r2,14480
 800619c:	11000017 	ldw	r4,0(r2)
 80061a0:	01420034 	movhi	r5,2048
 80061a4:	2957d504 	addi	r5,r5,24404
 80061a8:	8006ed01 	jmpi	8006ed0 <_fwalk_reent>

080061ac <__fp_lock>:
 80061ac:	0005883a 	mov	r2,zero
 80061b0:	f800283a 	ret

080061b4 <__fp_unlock>:
 80061b4:	0005883a 	mov	r2,zero
 80061b8:	f800283a 	ret

080061bc <_cleanup_r>:
 80061bc:	01420074 	movhi	r5,2049
 80061c0:	296bb704 	addi	r5,r5,-20772
 80061c4:	8006e181 	jmpi	8006e18 <_fwalk>

080061c8 <__sinit.part.1>:
 80061c8:	defff604 	addi	sp,sp,-40
 80061cc:	00c20034 	movhi	r3,2048
 80061d0:	dfc00915 	stw	ra,36(sp)
 80061d4:	df000815 	stw	fp,32(sp)
 80061d8:	ddc00715 	stw	r23,28(sp)
 80061dc:	dd800615 	stw	r22,24(sp)
 80061e0:	dd400515 	stw	r21,20(sp)
 80061e4:	dd000415 	stw	r20,16(sp)
 80061e8:	dcc00315 	stw	r19,12(sp)
 80061ec:	dc800215 	stw	r18,8(sp)
 80061f0:	dc400115 	stw	r17,4(sp)
 80061f4:	dc000015 	stw	r16,0(sp)
 80061f8:	18d86f04 	addi	r3,r3,25020
 80061fc:	24000117 	ldw	r16,4(r4)
 8006200:	20c00f15 	stw	r3,60(r4)
 8006204:	07000044 	movi	fp,1
 8006208:	00c000c4 	movi	r3,3
 800620c:	2080bb04 	addi	r2,r4,748
 8006210:	20c0b915 	stw	r3,740(r4)
 8006214:	27000e15 	stw	fp,56(r4)
 8006218:	2080ba15 	stw	r2,744(r4)
 800621c:	2000b815 	stw	zero,736(r4)
 8006220:	05c00204 	movi	r23,8
 8006224:	00800104 	movi	r2,4
 8006228:	2025883a 	mov	r18,r4
 800622c:	b80d883a 	mov	r6,r23
 8006230:	81001704 	addi	r4,r16,92
 8006234:	000b883a 	mov	r5,zero
 8006238:	80000015 	stw	zero,0(r16)
 800623c:	80000115 	stw	zero,4(r16)
 8006240:	80000215 	stw	zero,8(r16)
 8006244:	8080030d 	sth	r2,12(r16)
 8006248:	80001915 	stw	zero,100(r16)
 800624c:	8000038d 	sth	zero,14(r16)
 8006250:	80000415 	stw	zero,16(r16)
 8006254:	80000515 	stw	zero,20(r16)
 8006258:	80000615 	stw	zero,24(r16)
 800625c:	8007d440 	call	8007d44 <memset>
 8006260:	05820074 	movhi	r22,2049
 8006264:	94400217 	ldw	r17,8(r18)
 8006268:	05420074 	movhi	r21,2049
 800626c:	05020074 	movhi	r20,2049
 8006270:	04c20074 	movhi	r19,2049
 8006274:	b5a54604 	addi	r22,r22,-27368
 8006278:	ad655d04 	addi	r21,r21,-27276
 800627c:	a5257c04 	addi	r20,r20,-27152
 8006280:	9ce59304 	addi	r19,r19,-27060
 8006284:	85800815 	stw	r22,32(r16)
 8006288:	85400915 	stw	r21,36(r16)
 800628c:	85000a15 	stw	r20,40(r16)
 8006290:	84c00b15 	stw	r19,44(r16)
 8006294:	84000715 	stw	r16,28(r16)
 8006298:	00800284 	movi	r2,10
 800629c:	89001704 	addi	r4,r17,92
 80062a0:	b80d883a 	mov	r6,r23
 80062a4:	000b883a 	mov	r5,zero
 80062a8:	88000015 	stw	zero,0(r17)
 80062ac:	88000115 	stw	zero,4(r17)
 80062b0:	88000215 	stw	zero,8(r17)
 80062b4:	8880030d 	sth	r2,12(r17)
 80062b8:	88001915 	stw	zero,100(r17)
 80062bc:	8f00038d 	sth	fp,14(r17)
 80062c0:	88000415 	stw	zero,16(r17)
 80062c4:	88000515 	stw	zero,20(r17)
 80062c8:	88000615 	stw	zero,24(r17)
 80062cc:	8007d440 	call	8007d44 <memset>
 80062d0:	94000317 	ldw	r16,12(r18)
 80062d4:	00800484 	movi	r2,18
 80062d8:	8c400715 	stw	r17,28(r17)
 80062dc:	8d800815 	stw	r22,32(r17)
 80062e0:	8d400915 	stw	r21,36(r17)
 80062e4:	8d000a15 	stw	r20,40(r17)
 80062e8:	8cc00b15 	stw	r19,44(r17)
 80062ec:	8080030d 	sth	r2,12(r16)
 80062f0:	00800084 	movi	r2,2
 80062f4:	80000015 	stw	zero,0(r16)
 80062f8:	80000115 	stw	zero,4(r16)
 80062fc:	80000215 	stw	zero,8(r16)
 8006300:	80001915 	stw	zero,100(r16)
 8006304:	8080038d 	sth	r2,14(r16)
 8006308:	80000415 	stw	zero,16(r16)
 800630c:	80000515 	stw	zero,20(r16)
 8006310:	80000615 	stw	zero,24(r16)
 8006314:	81001704 	addi	r4,r16,92
 8006318:	000b883a 	mov	r5,zero
 800631c:	b80d883a 	mov	r6,r23
 8006320:	8007d440 	call	8007d44 <memset>
 8006324:	84000715 	stw	r16,28(r16)
 8006328:	85800815 	stw	r22,32(r16)
 800632c:	85400915 	stw	r21,36(r16)
 8006330:	85000a15 	stw	r20,40(r16)
 8006334:	84c00b15 	stw	r19,44(r16)
 8006338:	dfc00917 	ldw	ra,36(sp)
 800633c:	df000817 	ldw	fp,32(sp)
 8006340:	ddc00717 	ldw	r23,28(sp)
 8006344:	dd800617 	ldw	r22,24(sp)
 8006348:	dd400517 	ldw	r21,20(sp)
 800634c:	dd000417 	ldw	r20,16(sp)
 8006350:	dcc00317 	ldw	r19,12(sp)
 8006354:	dc800217 	ldw	r18,8(sp)
 8006358:	dc400117 	ldw	r17,4(sp)
 800635c:	dc000017 	ldw	r16,0(sp)
 8006360:	dec00a04 	addi	sp,sp,40
 8006364:	f800283a 	ret

08006368 <__sfmoreglue>:
 8006368:	defffc04 	addi	sp,sp,-16
 800636c:	dc800215 	stw	r18,8(sp)
 8006370:	2825883a 	mov	r18,r5
 8006374:	dc000015 	stw	r16,0(sp)
 8006378:	01401a04 	movi	r5,104
 800637c:	2021883a 	mov	r16,r4
 8006380:	9009883a 	mov	r4,r18
 8006384:	dfc00315 	stw	ra,12(sp)
 8006388:	dc400115 	stw	r17,4(sp)
 800638c:	800c3280 	call	800c328 <__mulsi3>
 8006390:	8009883a 	mov	r4,r16
 8006394:	11400304 	addi	r5,r2,12
 8006398:	1023883a 	mov	r17,r2
 800639c:	80072200 	call	8007220 <_malloc_r>
 80063a0:	1021883a 	mov	r16,r2
 80063a4:	10000726 	beq	r2,zero,80063c4 <__sfmoreglue+0x5c>
 80063a8:	11000304 	addi	r4,r2,12
 80063ac:	10000015 	stw	zero,0(r2)
 80063b0:	14800115 	stw	r18,4(r2)
 80063b4:	11000215 	stw	r4,8(r2)
 80063b8:	000b883a 	mov	r5,zero
 80063bc:	880d883a 	mov	r6,r17
 80063c0:	8007d440 	call	8007d44 <memset>
 80063c4:	8005883a 	mov	r2,r16
 80063c8:	dfc00317 	ldw	ra,12(sp)
 80063cc:	dc800217 	ldw	r18,8(sp)
 80063d0:	dc400117 	ldw	r17,4(sp)
 80063d4:	dc000017 	ldw	r16,0(sp)
 80063d8:	dec00404 	addi	sp,sp,16
 80063dc:	f800283a 	ret

080063e0 <__sfp>:
 80063e0:	00820074 	movhi	r2,2049
 80063e4:	defffb04 	addi	sp,sp,-20
 80063e8:	108e2404 	addi	r2,r2,14480
 80063ec:	dc800215 	stw	r18,8(sp)
 80063f0:	14800017 	ldw	r18,0(r2)
 80063f4:	dcc00315 	stw	r19,12(sp)
 80063f8:	dfc00415 	stw	ra,16(sp)
 80063fc:	90800e17 	ldw	r2,56(r18)
 8006400:	dc400115 	stw	r17,4(sp)
 8006404:	dc000015 	stw	r16,0(sp)
 8006408:	2027883a 	mov	r19,r4
 800640c:	1000021e 	bne	r2,zero,8006418 <__sfp+0x38>
 8006410:	9009883a 	mov	r4,r18
 8006414:	80061c80 	call	80061c8 <__sinit.part.1>
 8006418:	9480b804 	addi	r18,r18,736
 800641c:	047fffc4 	movi	r17,-1
 8006420:	91400117 	ldw	r5,4(r18)
 8006424:	94000217 	ldw	r16,8(r18)
 8006428:	297fffc4 	addi	r5,r5,-1
 800642c:	28000a16 	blt	r5,zero,8006458 <__sfp+0x78>
 8006430:	8080030f 	ldh	r2,12(r16)
 8006434:	10000c26 	beq	r2,zero,8006468 <__sfp+0x88>
 8006438:	80c01d04 	addi	r3,r16,116
 800643c:	00000206 	br	8006448 <__sfp+0x68>
 8006440:	18bfe60f 	ldh	r2,-104(r3)
 8006444:	10000826 	beq	r2,zero,8006468 <__sfp+0x88>
 8006448:	297fffc4 	addi	r5,r5,-1
 800644c:	1c3ffd04 	addi	r16,r3,-12
 8006450:	18c01a04 	addi	r3,r3,104
 8006454:	2c7ffa1e 	bne	r5,r17,8006440 <__alt_data_end+0xfc006440>
 8006458:	90800017 	ldw	r2,0(r18)
 800645c:	10001d26 	beq	r2,zero,80064d4 <__sfp+0xf4>
 8006460:	1025883a 	mov	r18,r2
 8006464:	003fee06 	br	8006420 <__alt_data_end+0xfc006420>
 8006468:	00bfffc4 	movi	r2,-1
 800646c:	8080038d 	sth	r2,14(r16)
 8006470:	00800044 	movi	r2,1
 8006474:	8080030d 	sth	r2,12(r16)
 8006478:	80001915 	stw	zero,100(r16)
 800647c:	80000015 	stw	zero,0(r16)
 8006480:	80000215 	stw	zero,8(r16)
 8006484:	80000115 	stw	zero,4(r16)
 8006488:	80000415 	stw	zero,16(r16)
 800648c:	80000515 	stw	zero,20(r16)
 8006490:	80000615 	stw	zero,24(r16)
 8006494:	81001704 	addi	r4,r16,92
 8006498:	000b883a 	mov	r5,zero
 800649c:	01800204 	movi	r6,8
 80064a0:	8007d440 	call	8007d44 <memset>
 80064a4:	8005883a 	mov	r2,r16
 80064a8:	80000c15 	stw	zero,48(r16)
 80064ac:	80000d15 	stw	zero,52(r16)
 80064b0:	80001115 	stw	zero,68(r16)
 80064b4:	80001215 	stw	zero,72(r16)
 80064b8:	dfc00417 	ldw	ra,16(sp)
 80064bc:	dcc00317 	ldw	r19,12(sp)
 80064c0:	dc800217 	ldw	r18,8(sp)
 80064c4:	dc400117 	ldw	r17,4(sp)
 80064c8:	dc000017 	ldw	r16,0(sp)
 80064cc:	dec00504 	addi	sp,sp,20
 80064d0:	f800283a 	ret
 80064d4:	9809883a 	mov	r4,r19
 80064d8:	01400104 	movi	r5,4
 80064dc:	80063680 	call	8006368 <__sfmoreglue>
 80064e0:	90800015 	stw	r2,0(r18)
 80064e4:	103fde1e 	bne	r2,zero,8006460 <__alt_data_end+0xfc006460>
 80064e8:	00800304 	movi	r2,12
 80064ec:	98800015 	stw	r2,0(r19)
 80064f0:	0005883a 	mov	r2,zero
 80064f4:	003ff006 	br	80064b8 <__alt_data_end+0xfc0064b8>

080064f8 <_cleanup>:
 80064f8:	00820074 	movhi	r2,2049
 80064fc:	108e2404 	addi	r2,r2,14480
 8006500:	11000017 	ldw	r4,0(r2)
 8006504:	01420074 	movhi	r5,2049
 8006508:	296bb704 	addi	r5,r5,-20772
 800650c:	8006e181 	jmpi	8006e18 <_fwalk>

08006510 <__sinit>:
 8006510:	20800e17 	ldw	r2,56(r4)
 8006514:	10000126 	beq	r2,zero,800651c <__sinit+0xc>
 8006518:	f800283a 	ret
 800651c:	80061c81 	jmpi	80061c8 <__sinit.part.1>

08006520 <__sfp_lock_acquire>:
 8006520:	f800283a 	ret

08006524 <__sfp_lock_release>:
 8006524:	f800283a 	ret

08006528 <__sinit_lock_acquire>:
 8006528:	f800283a 	ret

0800652c <__sinit_lock_release>:
 800652c:	f800283a 	ret

08006530 <__fp_lock_all>:
 8006530:	00820074 	movhi	r2,2049
 8006534:	108e2504 	addi	r2,r2,14484
 8006538:	11000017 	ldw	r4,0(r2)
 800653c:	01420034 	movhi	r5,2048
 8006540:	29586b04 	addi	r5,r5,25004
 8006544:	8006e181 	jmpi	8006e18 <_fwalk>

08006548 <__fp_unlock_all>:
 8006548:	00820074 	movhi	r2,2049
 800654c:	108e2504 	addi	r2,r2,14484
 8006550:	11000017 	ldw	r4,0(r2)
 8006554:	01420034 	movhi	r5,2048
 8006558:	29586d04 	addi	r5,r5,25012
 800655c:	8006e181 	jmpi	8006e18 <_fwalk>

08006560 <_malloc_trim_r>:
 8006560:	defffb04 	addi	sp,sp,-20
 8006564:	dcc00315 	stw	r19,12(sp)
 8006568:	04c20074 	movhi	r19,2049
 800656c:	dc800215 	stw	r18,8(sp)
 8006570:	dc400115 	stw	r17,4(sp)
 8006574:	dc000015 	stw	r16,0(sp)
 8006578:	dfc00415 	stw	ra,16(sp)
 800657c:	2821883a 	mov	r16,r5
 8006580:	9cc8a004 	addi	r19,r19,8832
 8006584:	2025883a 	mov	r18,r4
 8006588:	800f12c0 	call	800f12c <__malloc_lock>
 800658c:	98800217 	ldw	r2,8(r19)
 8006590:	14400117 	ldw	r17,4(r2)
 8006594:	00bfff04 	movi	r2,-4
 8006598:	88a2703a 	and	r17,r17,r2
 800659c:	8c21c83a 	sub	r16,r17,r16
 80065a0:	8403fbc4 	addi	r16,r16,4079
 80065a4:	8020d33a 	srli	r16,r16,12
 80065a8:	0083ffc4 	movi	r2,4095
 80065ac:	843fffc4 	addi	r16,r16,-1
 80065b0:	8020933a 	slli	r16,r16,12
 80065b4:	1400060e 	bge	r2,r16,80065d0 <_malloc_trim_r+0x70>
 80065b8:	9009883a 	mov	r4,r18
 80065bc:	000b883a 	mov	r5,zero
 80065c0:	80094c40 	call	80094c4 <_sbrk_r>
 80065c4:	98c00217 	ldw	r3,8(r19)
 80065c8:	1c47883a 	add	r3,r3,r17
 80065cc:	10c00a26 	beq	r2,r3,80065f8 <_malloc_trim_r+0x98>
 80065d0:	9009883a 	mov	r4,r18
 80065d4:	800f14c0 	call	800f14c <__malloc_unlock>
 80065d8:	0005883a 	mov	r2,zero
 80065dc:	dfc00417 	ldw	ra,16(sp)
 80065e0:	dcc00317 	ldw	r19,12(sp)
 80065e4:	dc800217 	ldw	r18,8(sp)
 80065e8:	dc400117 	ldw	r17,4(sp)
 80065ec:	dc000017 	ldw	r16,0(sp)
 80065f0:	dec00504 	addi	sp,sp,20
 80065f4:	f800283a 	ret
 80065f8:	9009883a 	mov	r4,r18
 80065fc:	040bc83a 	sub	r5,zero,r16
 8006600:	80094c40 	call	80094c4 <_sbrk_r>
 8006604:	00ffffc4 	movi	r3,-1
 8006608:	10c00d26 	beq	r2,r3,8006640 <_malloc_trim_r+0xe0>
 800660c:	00c20074 	movhi	r3,2049
 8006610:	18d4fd04 	addi	r3,r3,21492
 8006614:	18800017 	ldw	r2,0(r3)
 8006618:	99000217 	ldw	r4,8(r19)
 800661c:	8c23c83a 	sub	r17,r17,r16
 8006620:	8c400054 	ori	r17,r17,1
 8006624:	1421c83a 	sub	r16,r2,r16
 8006628:	24400115 	stw	r17,4(r4)
 800662c:	9009883a 	mov	r4,r18
 8006630:	1c000015 	stw	r16,0(r3)
 8006634:	800f14c0 	call	800f14c <__malloc_unlock>
 8006638:	00800044 	movi	r2,1
 800663c:	003fe706 	br	80065dc <__alt_data_end+0xfc0065dc>
 8006640:	9009883a 	mov	r4,r18
 8006644:	000b883a 	mov	r5,zero
 8006648:	80094c40 	call	80094c4 <_sbrk_r>
 800664c:	99000217 	ldw	r4,8(r19)
 8006650:	014003c4 	movi	r5,15
 8006654:	1107c83a 	sub	r3,r2,r4
 8006658:	28ffdd0e 	bge	r5,r3,80065d0 <__alt_data_end+0xfc0065d0>
 800665c:	01420074 	movhi	r5,2049
 8006660:	294e2704 	addi	r5,r5,14492
 8006664:	29400017 	ldw	r5,0(r5)
 8006668:	18c00054 	ori	r3,r3,1
 800666c:	20c00115 	stw	r3,4(r4)
 8006670:	00c20074 	movhi	r3,2049
 8006674:	1145c83a 	sub	r2,r2,r5
 8006678:	18d4fd04 	addi	r3,r3,21492
 800667c:	18800015 	stw	r2,0(r3)
 8006680:	003fd306 	br	80065d0 <__alt_data_end+0xfc0065d0>

08006684 <_free_r>:
 8006684:	28004c26 	beq	r5,zero,80067b8 <_free_r+0x134>
 8006688:	defffd04 	addi	sp,sp,-12
 800668c:	dc400115 	stw	r17,4(sp)
 8006690:	dc000015 	stw	r16,0(sp)
 8006694:	2023883a 	mov	r17,r4
 8006698:	2821883a 	mov	r16,r5
 800669c:	dfc00215 	stw	ra,8(sp)
 80066a0:	800f12c0 	call	800f12c <__malloc_lock>
 80066a4:	813fff17 	ldw	r4,-4(r16)
 80066a8:	00bfff84 	movi	r2,-2
 80066ac:	02420074 	movhi	r9,2049
 80066b0:	81bffe04 	addi	r6,r16,-8
 80066b4:	2084703a 	and	r2,r4,r2
 80066b8:	4a48a004 	addi	r9,r9,8832
 80066bc:	308b883a 	add	r5,r6,r2
 80066c0:	2a000117 	ldw	r8,4(r5)
 80066c4:	49c00217 	ldw	r7,8(r9)
 80066c8:	00ffff04 	movi	r3,-4
 80066cc:	40c6703a 	and	r3,r8,r3
 80066d0:	39405326 	beq	r7,r5,8006820 <_free_r+0x19c>
 80066d4:	28c00115 	stw	r3,4(r5)
 80066d8:	2100004c 	andi	r4,r4,1
 80066dc:	2000091e 	bne	r4,zero,8006704 <_free_r+0x80>
 80066e0:	81fffe17 	ldw	r7,-8(r16)
 80066e4:	4a000204 	addi	r8,r9,8
 80066e8:	31cdc83a 	sub	r6,r6,r7
 80066ec:	31000217 	ldw	r4,8(r6)
 80066f0:	11c5883a 	add	r2,r2,r7
 80066f4:	22006126 	beq	r4,r8,800687c <_free_r+0x1f8>
 80066f8:	31c00317 	ldw	r7,12(r6)
 80066fc:	21c00315 	stw	r7,12(r4)
 8006700:	39000215 	stw	r4,8(r7)
 8006704:	28c9883a 	add	r4,r5,r3
 8006708:	21c00117 	ldw	r7,4(r4)
 800670c:	39c0004c 	andi	r7,r7,1
 8006710:	38000d1e 	bne	r7,zero,8006748 <_free_r+0xc4>
 8006714:	29000217 	ldw	r4,8(r5)
 8006718:	10c5883a 	add	r2,r2,r3
 800671c:	00c20074 	movhi	r3,2049
 8006720:	18c8a204 	addi	r3,r3,8840
 8006724:	20c07526 	beq	r4,r3,80068fc <_free_r+0x278>
 8006728:	29c00317 	ldw	r7,12(r5)
 800672c:	11400054 	ori	r5,r2,1
 8006730:	3087883a 	add	r3,r6,r2
 8006734:	21c00315 	stw	r7,12(r4)
 8006738:	39000215 	stw	r4,8(r7)
 800673c:	31400115 	stw	r5,4(r6)
 8006740:	18800015 	stw	r2,0(r3)
 8006744:	00000406 	br	8006758 <_free_r+0xd4>
 8006748:	10c00054 	ori	r3,r2,1
 800674c:	30c00115 	stw	r3,4(r6)
 8006750:	3087883a 	add	r3,r6,r2
 8006754:	18800015 	stw	r2,0(r3)
 8006758:	00c07fc4 	movi	r3,511
 800675c:	18801736 	bltu	r3,r2,80067bc <_free_r+0x138>
 8006760:	1004d0fa 	srli	r2,r2,3
 8006764:	01400044 	movi	r5,1
 8006768:	49000117 	ldw	r4,4(r9)
 800676c:	1087883a 	add	r3,r2,r2
 8006770:	18c7883a 	add	r3,r3,r3
 8006774:	1005d0ba 	srai	r2,r2,2
 8006778:	18c7883a 	add	r3,r3,r3
 800677c:	1a47883a 	add	r3,r3,r9
 8006780:	19c00217 	ldw	r7,8(r3)
 8006784:	2884983a 	sll	r2,r5,r2
 8006788:	30c00315 	stw	r3,12(r6)
 800678c:	31c00215 	stw	r7,8(r6)
 8006790:	1104b03a 	or	r2,r2,r4
 8006794:	19800215 	stw	r6,8(r3)
 8006798:	48800115 	stw	r2,4(r9)
 800679c:	39800315 	stw	r6,12(r7)
 80067a0:	8809883a 	mov	r4,r17
 80067a4:	dfc00217 	ldw	ra,8(sp)
 80067a8:	dc400117 	ldw	r17,4(sp)
 80067ac:	dc000017 	ldw	r16,0(sp)
 80067b0:	dec00304 	addi	sp,sp,12
 80067b4:	800f14c1 	jmpi	800f14c <__malloc_unlock>
 80067b8:	f800283a 	ret
 80067bc:	1006d27a 	srli	r3,r2,9
 80067c0:	01000104 	movi	r4,4
 80067c4:	20c04036 	bltu	r4,r3,80068c8 <_free_r+0x244>
 80067c8:	1006d1ba 	srli	r3,r2,6
 80067cc:	19400e04 	addi	r5,r3,56
 80067d0:	2947883a 	add	r3,r5,r5
 80067d4:	18c7883a 	add	r3,r3,r3
 80067d8:	18c7883a 	add	r3,r3,r3
 80067dc:	1a49883a 	add	r4,r3,r9
 80067e0:	20c00217 	ldw	r3,8(r4)
 80067e4:	01c20074 	movhi	r7,2049
 80067e8:	39c8a004 	addi	r7,r7,8832
 80067ec:	19003b26 	beq	r3,r4,80068dc <_free_r+0x258>
 80067f0:	01ffff04 	movi	r7,-4
 80067f4:	19400117 	ldw	r5,4(r3)
 80067f8:	29ca703a 	and	r5,r5,r7
 80067fc:	1140022e 	bgeu	r2,r5,8006808 <_free_r+0x184>
 8006800:	18c00217 	ldw	r3,8(r3)
 8006804:	20fffb1e 	bne	r4,r3,80067f4 <__alt_data_end+0xfc0067f4>
 8006808:	18800317 	ldw	r2,12(r3)
 800680c:	30800315 	stw	r2,12(r6)
 8006810:	30c00215 	stw	r3,8(r6)
 8006814:	11800215 	stw	r6,8(r2)
 8006818:	19800315 	stw	r6,12(r3)
 800681c:	003fe006 	br	80067a0 <__alt_data_end+0xfc0067a0>
 8006820:	2100004c 	andi	r4,r4,1
 8006824:	1885883a 	add	r2,r3,r2
 8006828:	2000071e 	bne	r4,zero,8006848 <_free_r+0x1c4>
 800682c:	817ffe17 	ldw	r5,-8(r16)
 8006830:	314dc83a 	sub	r6,r6,r5
 8006834:	30c00317 	ldw	r3,12(r6)
 8006838:	31000217 	ldw	r4,8(r6)
 800683c:	1145883a 	add	r2,r2,r5
 8006840:	20c00315 	stw	r3,12(r4)
 8006844:	19000215 	stw	r4,8(r3)
 8006848:	10c00054 	ori	r3,r2,1
 800684c:	30c00115 	stw	r3,4(r6)
 8006850:	00c20074 	movhi	r3,2049
 8006854:	18ce2804 	addi	r3,r3,14496
 8006858:	18c00017 	ldw	r3,0(r3)
 800685c:	49800215 	stw	r6,8(r9)
 8006860:	10ffcf36 	bltu	r2,r3,80067a0 <__alt_data_end+0xfc0067a0>
 8006864:	00820074 	movhi	r2,2049
 8006868:	1094f504 	addi	r2,r2,21460
 800686c:	11400017 	ldw	r5,0(r2)
 8006870:	8809883a 	mov	r4,r17
 8006874:	80065600 	call	8006560 <_malloc_trim_r>
 8006878:	003fc906 	br	80067a0 <__alt_data_end+0xfc0067a0>
 800687c:	28c9883a 	add	r4,r5,r3
 8006880:	21000117 	ldw	r4,4(r4)
 8006884:	2100004c 	andi	r4,r4,1
 8006888:	20000a1e 	bne	r4,zero,80068b4 <_free_r+0x230>
 800688c:	29000317 	ldw	r4,12(r5)
 8006890:	29400217 	ldw	r5,8(r5)
 8006894:	10c5883a 	add	r2,r2,r3
 8006898:	10c00054 	ori	r3,r2,1
 800689c:	29000315 	stw	r4,12(r5)
 80068a0:	21400215 	stw	r5,8(r4)
 80068a4:	30c00115 	stw	r3,4(r6)
 80068a8:	308d883a 	add	r6,r6,r2
 80068ac:	30800015 	stw	r2,0(r6)
 80068b0:	003fbb06 	br	80067a0 <__alt_data_end+0xfc0067a0>
 80068b4:	10c00054 	ori	r3,r2,1
 80068b8:	30c00115 	stw	r3,4(r6)
 80068bc:	308d883a 	add	r6,r6,r2
 80068c0:	30800015 	stw	r2,0(r6)
 80068c4:	003fb606 	br	80067a0 <__alt_data_end+0xfc0067a0>
 80068c8:	01000504 	movi	r4,20
 80068cc:	20c01436 	bltu	r4,r3,8006920 <_free_r+0x29c>
 80068d0:	194016c4 	addi	r5,r3,91
 80068d4:	2947883a 	add	r3,r5,r5
 80068d8:	003fbe06 	br	80067d4 <__alt_data_end+0xfc0067d4>
 80068dc:	280bd0ba 	srai	r5,r5,2
 80068e0:	00800044 	movi	r2,1
 80068e4:	39000117 	ldw	r4,4(r7)
 80068e8:	114a983a 	sll	r5,r2,r5
 80068ec:	1805883a 	mov	r2,r3
 80068f0:	2908b03a 	or	r4,r5,r4
 80068f4:	39000115 	stw	r4,4(r7)
 80068f8:	003fc406 	br	800680c <__alt_data_end+0xfc00680c>
 80068fc:	49800515 	stw	r6,20(r9)
 8006900:	49800415 	stw	r6,16(r9)
 8006904:	10c00054 	ori	r3,r2,1
 8006908:	31000315 	stw	r4,12(r6)
 800690c:	31000215 	stw	r4,8(r6)
 8006910:	30c00115 	stw	r3,4(r6)
 8006914:	308d883a 	add	r6,r6,r2
 8006918:	30800015 	stw	r2,0(r6)
 800691c:	003fa006 	br	80067a0 <__alt_data_end+0xfc0067a0>
 8006920:	01001504 	movi	r4,84
 8006924:	20c00436 	bltu	r4,r3,8006938 <_free_r+0x2b4>
 8006928:	1006d33a 	srli	r3,r2,12
 800692c:	19401b84 	addi	r5,r3,110
 8006930:	2947883a 	add	r3,r5,r5
 8006934:	003fa706 	br	80067d4 <__alt_data_end+0xfc0067d4>
 8006938:	01005504 	movi	r4,340
 800693c:	20c00436 	bltu	r4,r3,8006950 <_free_r+0x2cc>
 8006940:	1006d3fa 	srli	r3,r2,15
 8006944:	19401dc4 	addi	r5,r3,119
 8006948:	2947883a 	add	r3,r5,r5
 800694c:	003fa106 	br	80067d4 <__alt_data_end+0xfc0067d4>
 8006950:	01015504 	movi	r4,1364
 8006954:	20c00436 	bltu	r4,r3,8006968 <_free_r+0x2e4>
 8006958:	1006d4ba 	srli	r3,r2,18
 800695c:	19401f04 	addi	r5,r3,124
 8006960:	2947883a 	add	r3,r5,r5
 8006964:	003f9b06 	br	80067d4 <__alt_data_end+0xfc0067d4>
 8006968:	00c03f04 	movi	r3,252
 800696c:	01401f84 	movi	r5,126
 8006970:	003f9806 	br	80067d4 <__alt_data_end+0xfc0067d4>

08006974 <__sfvwrite_r>:
 8006974:	30800217 	ldw	r2,8(r6)
 8006978:	10004526 	beq	r2,zero,8006a90 <__sfvwrite_r+0x11c>
 800697c:	28c0030b 	ldhu	r3,12(r5)
 8006980:	defff404 	addi	sp,sp,-48
 8006984:	dd400715 	stw	r21,28(sp)
 8006988:	dcc00515 	stw	r19,20(sp)
 800698c:	dc000215 	stw	r16,8(sp)
 8006990:	dfc00b15 	stw	ra,44(sp)
 8006994:	df000a15 	stw	fp,40(sp)
 8006998:	ddc00915 	stw	r23,36(sp)
 800699c:	dd800815 	stw	r22,32(sp)
 80069a0:	dd000615 	stw	r20,24(sp)
 80069a4:	dc800415 	stw	r18,16(sp)
 80069a8:	dc400315 	stw	r17,12(sp)
 80069ac:	1880020c 	andi	r2,r3,8
 80069b0:	2821883a 	mov	r16,r5
 80069b4:	202b883a 	mov	r21,r4
 80069b8:	3027883a 	mov	r19,r6
 80069bc:	10002526 	beq	r2,zero,8006a54 <__sfvwrite_r+0xe0>
 80069c0:	28800417 	ldw	r2,16(r5)
 80069c4:	10002326 	beq	r2,zero,8006a54 <__sfvwrite_r+0xe0>
 80069c8:	1880008c 	andi	r2,r3,2
 80069cc:	9c400017 	ldw	r17,0(r19)
 80069d0:	10003126 	beq	r2,zero,8006a98 <__sfvwrite_r+0x124>
 80069d4:	0029883a 	mov	r20,zero
 80069d8:	0025883a 	mov	r18,zero
 80069dc:	05810004 	movi	r22,1024
 80069e0:	a00d883a 	mov	r6,r20
 80069e4:	a809883a 	mov	r4,r21
 80069e8:	90002526 	beq	r18,zero,8006a80 <__sfvwrite_r+0x10c>
 80069ec:	900f883a 	mov	r7,r18
 80069f0:	81400717 	ldw	r5,28(r16)
 80069f4:	b480012e 	bgeu	r22,r18,80069fc <__sfvwrite_r+0x88>
 80069f8:	01c10004 	movi	r7,1024
 80069fc:	80800917 	ldw	r2,36(r16)
 8006a00:	103ee83a 	callr	r2
 8006a04:	0080510e 	bge	zero,r2,8006b4c <__sfvwrite_r+0x1d8>
 8006a08:	98c00217 	ldw	r3,8(r19)
 8006a0c:	a0a9883a 	add	r20,r20,r2
 8006a10:	90a5c83a 	sub	r18,r18,r2
 8006a14:	1885c83a 	sub	r2,r3,r2
 8006a18:	98800215 	stw	r2,8(r19)
 8006a1c:	103ff01e 	bne	r2,zero,80069e0 <__alt_data_end+0xfc0069e0>
 8006a20:	0005883a 	mov	r2,zero
 8006a24:	dfc00b17 	ldw	ra,44(sp)
 8006a28:	df000a17 	ldw	fp,40(sp)
 8006a2c:	ddc00917 	ldw	r23,36(sp)
 8006a30:	dd800817 	ldw	r22,32(sp)
 8006a34:	dd400717 	ldw	r21,28(sp)
 8006a38:	dd000617 	ldw	r20,24(sp)
 8006a3c:	dcc00517 	ldw	r19,20(sp)
 8006a40:	dc800417 	ldw	r18,16(sp)
 8006a44:	dc400317 	ldw	r17,12(sp)
 8006a48:	dc000217 	ldw	r16,8(sp)
 8006a4c:	dec00c04 	addi	sp,sp,48
 8006a50:	f800283a 	ret
 8006a54:	a809883a 	mov	r4,r21
 8006a58:	800b883a 	mov	r5,r16
 8006a5c:	80044d40 	call	80044d4 <__swsetup_r>
 8006a60:	80c0030b 	ldhu	r3,12(r16)
 8006a64:	103fd826 	beq	r2,zero,80069c8 <__alt_data_end+0xfc0069c8>
 8006a68:	18c01014 	ori	r3,r3,64
 8006a6c:	80c0030d 	sth	r3,12(r16)
 8006a70:	00c00244 	movi	r3,9
 8006a74:	00bfffc4 	movi	r2,-1
 8006a78:	a8c00015 	stw	r3,0(r21)
 8006a7c:	003fe906 	br	8006a24 <__alt_data_end+0xfc006a24>
 8006a80:	8d000017 	ldw	r20,0(r17)
 8006a84:	8c800117 	ldw	r18,4(r17)
 8006a88:	8c400204 	addi	r17,r17,8
 8006a8c:	003fd406 	br	80069e0 <__alt_data_end+0xfc0069e0>
 8006a90:	0005883a 	mov	r2,zero
 8006a94:	f800283a 	ret
 8006a98:	1880004c 	andi	r2,r3,1
 8006a9c:	1000301e 	bne	r2,zero,8006b60 <__sfvwrite_r+0x1ec>
 8006aa0:	002f883a 	mov	r23,zero
 8006aa4:	0025883a 	mov	r18,zero
 8006aa8:	90001c26 	beq	r18,zero,8006b1c <__sfvwrite_r+0x1a8>
 8006aac:	1880800c 	andi	r2,r3,512
 8006ab0:	85000217 	ldw	r20,8(r16)
 8006ab4:	10006c26 	beq	r2,zero,8006c68 <__sfvwrite_r+0x2f4>
 8006ab8:	a02d883a 	mov	r22,r20
 8006abc:	95008536 	bltu	r18,r20,8006cd4 <__sfvwrite_r+0x360>
 8006ac0:	1881200c 	andi	r2,r3,1152
 8006ac4:	10009d1e 	bne	r2,zero,8006d3c <__sfvwrite_r+0x3c8>
 8006ac8:	81000017 	ldw	r4,0(r16)
 8006acc:	a039883a 	mov	fp,r20
 8006ad0:	9029883a 	mov	r20,r18
 8006ad4:	b80b883a 	mov	r5,r23
 8006ad8:	b00d883a 	mov	r6,r22
 8006adc:	8007be80 	call	8007be8 <memmove>
 8006ae0:	80c00217 	ldw	r3,8(r16)
 8006ae4:	81000017 	ldw	r4,0(r16)
 8006ae8:	9005883a 	mov	r2,r18
 8006aec:	1f39c83a 	sub	fp,r3,fp
 8006af0:	258f883a 	add	r7,r4,r22
 8006af4:	87000215 	stw	fp,8(r16)
 8006af8:	81c00015 	stw	r7,0(r16)
 8006afc:	98c00217 	ldw	r3,8(r19)
 8006b00:	b8af883a 	add	r23,r23,r2
 8006b04:	90a5c83a 	sub	r18,r18,r2
 8006b08:	1d05c83a 	sub	r2,r3,r20
 8006b0c:	98800215 	stw	r2,8(r19)
 8006b10:	103fc326 	beq	r2,zero,8006a20 <__alt_data_end+0xfc006a20>
 8006b14:	80c0030b 	ldhu	r3,12(r16)
 8006b18:	903fe41e 	bne	r18,zero,8006aac <__alt_data_end+0xfc006aac>
 8006b1c:	8dc00017 	ldw	r23,0(r17)
 8006b20:	8c800117 	ldw	r18,4(r17)
 8006b24:	8c400204 	addi	r17,r17,8
 8006b28:	003fdf06 	br	8006aa8 <__alt_data_end+0xfc006aa8>
 8006b2c:	8008eb00 	call	8008eb0 <_realloc_r>
 8006b30:	102d883a 	mov	r22,r2
 8006b34:	1000a01e 	bne	r2,zero,8006db8 <__sfvwrite_r+0x444>
 8006b38:	81400417 	ldw	r5,16(r16)
 8006b3c:	a809883a 	mov	r4,r21
 8006b40:	80066840 	call	8006684 <_free_r>
 8006b44:	00800304 	movi	r2,12
 8006b48:	a8800015 	stw	r2,0(r21)
 8006b4c:	80c0030b 	ldhu	r3,12(r16)
 8006b50:	00bfffc4 	movi	r2,-1
 8006b54:	18c01014 	ori	r3,r3,64
 8006b58:	80c0030d 	sth	r3,12(r16)
 8006b5c:	003fb106 	br	8006a24 <__alt_data_end+0xfc006a24>
 8006b60:	0029883a 	mov	r20,zero
 8006b64:	0011883a 	mov	r8,zero
 8006b68:	0039883a 	mov	fp,zero
 8006b6c:	0025883a 	mov	r18,zero
 8006b70:	90001f26 	beq	r18,zero,8006bf0 <__sfvwrite_r+0x27c>
 8006b74:	40006826 	beq	r8,zero,8006d18 <__sfvwrite_r+0x3a4>
 8006b78:	a02f883a 	mov	r23,r20
 8006b7c:	9500012e 	bgeu	r18,r20,8006b84 <__sfvwrite_r+0x210>
 8006b80:	902f883a 	mov	r23,r18
 8006b84:	81000017 	ldw	r4,0(r16)
 8006b88:	80800417 	ldw	r2,16(r16)
 8006b8c:	b82d883a 	mov	r22,r23
 8006b90:	81800217 	ldw	r6,8(r16)
 8006b94:	81c00517 	ldw	r7,20(r16)
 8006b98:	1100022e 	bgeu	r2,r4,8006ba4 <__sfvwrite_r+0x230>
 8006b9c:	31c7883a 	add	r3,r6,r7
 8006ba0:	1dc01816 	blt	r3,r23,8006c04 <__sfvwrite_r+0x290>
 8006ba4:	b9c03f16 	blt	r23,r7,8006ca4 <__sfvwrite_r+0x330>
 8006ba8:	80800917 	ldw	r2,36(r16)
 8006bac:	81400717 	ldw	r5,28(r16)
 8006bb0:	a809883a 	mov	r4,r21
 8006bb4:	da000115 	stw	r8,4(sp)
 8006bb8:	e00d883a 	mov	r6,fp
 8006bbc:	103ee83a 	callr	r2
 8006bc0:	102d883a 	mov	r22,r2
 8006bc4:	da000117 	ldw	r8,4(sp)
 8006bc8:	00bfe00e 	bge	zero,r2,8006b4c <__alt_data_end+0xfc006b4c>
 8006bcc:	a5a9c83a 	sub	r20,r20,r22
 8006bd0:	a0001f26 	beq	r20,zero,8006c50 <__sfvwrite_r+0x2dc>
 8006bd4:	98800217 	ldw	r2,8(r19)
 8006bd8:	e5b9883a 	add	fp,fp,r22
 8006bdc:	95a5c83a 	sub	r18,r18,r22
 8006be0:	15adc83a 	sub	r22,r2,r22
 8006be4:	9d800215 	stw	r22,8(r19)
 8006be8:	b03f8d26 	beq	r22,zero,8006a20 <__alt_data_end+0xfc006a20>
 8006bec:	903fe11e 	bne	r18,zero,8006b74 <__alt_data_end+0xfc006b74>
 8006bf0:	8f000017 	ldw	fp,0(r17)
 8006bf4:	8c800117 	ldw	r18,4(r17)
 8006bf8:	0011883a 	mov	r8,zero
 8006bfc:	8c400204 	addi	r17,r17,8
 8006c00:	003fdb06 	br	8006b70 <__alt_data_end+0xfc006b70>
 8006c04:	180d883a 	mov	r6,r3
 8006c08:	e00b883a 	mov	r5,fp
 8006c0c:	da000115 	stw	r8,4(sp)
 8006c10:	d8c00015 	stw	r3,0(sp)
 8006c14:	8007be80 	call	8007be8 <memmove>
 8006c18:	d8c00017 	ldw	r3,0(sp)
 8006c1c:	80800017 	ldw	r2,0(r16)
 8006c20:	a809883a 	mov	r4,r21
 8006c24:	800b883a 	mov	r5,r16
 8006c28:	10c5883a 	add	r2,r2,r3
 8006c2c:	80800015 	stw	r2,0(r16)
 8006c30:	d8c00015 	stw	r3,0(sp)
 8006c34:	8005f540 	call	8005f54 <_fflush_r>
 8006c38:	d8c00017 	ldw	r3,0(sp)
 8006c3c:	da000117 	ldw	r8,4(sp)
 8006c40:	103fc21e 	bne	r2,zero,8006b4c <__alt_data_end+0xfc006b4c>
 8006c44:	182d883a 	mov	r22,r3
 8006c48:	a5a9c83a 	sub	r20,r20,r22
 8006c4c:	a03fe11e 	bne	r20,zero,8006bd4 <__alt_data_end+0xfc006bd4>
 8006c50:	a809883a 	mov	r4,r21
 8006c54:	800b883a 	mov	r5,r16
 8006c58:	8005f540 	call	8005f54 <_fflush_r>
 8006c5c:	103fbb1e 	bne	r2,zero,8006b4c <__alt_data_end+0xfc006b4c>
 8006c60:	0011883a 	mov	r8,zero
 8006c64:	003fdb06 	br	8006bd4 <__alt_data_end+0xfc006bd4>
 8006c68:	81000017 	ldw	r4,0(r16)
 8006c6c:	80800417 	ldw	r2,16(r16)
 8006c70:	1100012e 	bgeu	r2,r4,8006c78 <__sfvwrite_r+0x304>
 8006c74:	a4805a36 	bltu	r20,r18,8006de0 <__sfvwrite_r+0x46c>
 8006c78:	81c00517 	ldw	r7,20(r16)
 8006c7c:	91c01a36 	bltu	r18,r7,8006ce8 <__sfvwrite_r+0x374>
 8006c80:	80800917 	ldw	r2,36(r16)
 8006c84:	81400717 	ldw	r5,28(r16)
 8006c88:	a809883a 	mov	r4,r21
 8006c8c:	b80d883a 	mov	r6,r23
 8006c90:	103ee83a 	callr	r2
 8006c94:	1029883a 	mov	r20,r2
 8006c98:	00bfac0e 	bge	zero,r2,8006b4c <__alt_data_end+0xfc006b4c>
 8006c9c:	a005883a 	mov	r2,r20
 8006ca0:	003f9606 	br	8006afc <__alt_data_end+0xfc006afc>
 8006ca4:	b80d883a 	mov	r6,r23
 8006ca8:	e00b883a 	mov	r5,fp
 8006cac:	da000115 	stw	r8,4(sp)
 8006cb0:	8007be80 	call	8007be8 <memmove>
 8006cb4:	80800217 	ldw	r2,8(r16)
 8006cb8:	80c00017 	ldw	r3,0(r16)
 8006cbc:	da000117 	ldw	r8,4(sp)
 8006cc0:	15c5c83a 	sub	r2,r2,r23
 8006cc4:	1def883a 	add	r23,r3,r23
 8006cc8:	80800215 	stw	r2,8(r16)
 8006ccc:	85c00015 	stw	r23,0(r16)
 8006cd0:	003fbe06 	br	8006bcc <__alt_data_end+0xfc006bcc>
 8006cd4:	81000017 	ldw	r4,0(r16)
 8006cd8:	9039883a 	mov	fp,r18
 8006cdc:	9029883a 	mov	r20,r18
 8006ce0:	902d883a 	mov	r22,r18
 8006ce4:	003f7b06 	br	8006ad4 <__alt_data_end+0xfc006ad4>
 8006ce8:	b80b883a 	mov	r5,r23
 8006cec:	900d883a 	mov	r6,r18
 8006cf0:	8007be80 	call	8007be8 <memmove>
 8006cf4:	80c00217 	ldw	r3,8(r16)
 8006cf8:	80800017 	ldw	r2,0(r16)
 8006cfc:	9029883a 	mov	r20,r18
 8006d00:	1c87c83a 	sub	r3,r3,r18
 8006d04:	1485883a 	add	r2,r2,r18
 8006d08:	80800015 	stw	r2,0(r16)
 8006d0c:	80c00215 	stw	r3,8(r16)
 8006d10:	9005883a 	mov	r2,r18
 8006d14:	003f7906 	br	8006afc <__alt_data_end+0xfc006afc>
 8006d18:	e009883a 	mov	r4,fp
 8006d1c:	01400284 	movi	r5,10
 8006d20:	900d883a 	mov	r6,r18
 8006d24:	80079c80 	call	80079c8 <memchr>
 8006d28:	10003826 	beq	r2,zero,8006e0c <__sfvwrite_r+0x498>
 8006d2c:	10800044 	addi	r2,r2,1
 8006d30:	1729c83a 	sub	r20,r2,fp
 8006d34:	02000044 	movi	r8,1
 8006d38:	003f8f06 	br	8006b78 <__alt_data_end+0xfc006b78>
 8006d3c:	80800517 	ldw	r2,20(r16)
 8006d40:	81400417 	ldw	r5,16(r16)
 8006d44:	87000017 	ldw	fp,0(r16)
 8006d48:	10a9883a 	add	r20,r2,r2
 8006d4c:	a085883a 	add	r2,r20,r2
 8006d50:	1028d7fa 	srli	r20,r2,31
 8006d54:	e179c83a 	sub	fp,fp,r5
 8006d58:	e1000044 	addi	r4,fp,1
 8006d5c:	a085883a 	add	r2,r20,r2
 8006d60:	1029d07a 	srai	r20,r2,1
 8006d64:	2485883a 	add	r2,r4,r18
 8006d68:	a00d883a 	mov	r6,r20
 8006d6c:	a080022e 	bgeu	r20,r2,8006d78 <__sfvwrite_r+0x404>
 8006d70:	1029883a 	mov	r20,r2
 8006d74:	100d883a 	mov	r6,r2
 8006d78:	18c1000c 	andi	r3,r3,1024
 8006d7c:	a809883a 	mov	r4,r21
 8006d80:	183f6a26 	beq	r3,zero,8006b2c <__alt_data_end+0xfc006b2c>
 8006d84:	300b883a 	mov	r5,r6
 8006d88:	80072200 	call	8007220 <_malloc_r>
 8006d8c:	102d883a 	mov	r22,r2
 8006d90:	103f6c26 	beq	r2,zero,8006b44 <__alt_data_end+0xfc006b44>
 8006d94:	81400417 	ldw	r5,16(r16)
 8006d98:	1009883a 	mov	r4,r2
 8006d9c:	e00d883a 	mov	r6,fp
 8006da0:	8007ab00 	call	8007ab0 <memcpy>
 8006da4:	8080030b 	ldhu	r2,12(r16)
 8006da8:	00fedfc4 	movi	r3,-1153
 8006dac:	10c4703a 	and	r2,r2,r3
 8006db0:	10802014 	ori	r2,r2,128
 8006db4:	8080030d 	sth	r2,12(r16)
 8006db8:	b709883a 	add	r4,r22,fp
 8006dbc:	a707c83a 	sub	r3,r20,fp
 8006dc0:	85800415 	stw	r22,16(r16)
 8006dc4:	85000515 	stw	r20,20(r16)
 8006dc8:	81000015 	stw	r4,0(r16)
 8006dcc:	9039883a 	mov	fp,r18
 8006dd0:	80c00215 	stw	r3,8(r16)
 8006dd4:	9029883a 	mov	r20,r18
 8006dd8:	902d883a 	mov	r22,r18
 8006ddc:	003f3d06 	br	8006ad4 <__alt_data_end+0xfc006ad4>
 8006de0:	b80b883a 	mov	r5,r23
 8006de4:	a00d883a 	mov	r6,r20
 8006de8:	8007be80 	call	8007be8 <memmove>
 8006dec:	80800017 	ldw	r2,0(r16)
 8006df0:	a809883a 	mov	r4,r21
 8006df4:	800b883a 	mov	r5,r16
 8006df8:	1505883a 	add	r2,r2,r20
 8006dfc:	80800015 	stw	r2,0(r16)
 8006e00:	8005f540 	call	8005f54 <_fflush_r>
 8006e04:	103fa526 	beq	r2,zero,8006c9c <__alt_data_end+0xfc006c9c>
 8006e08:	003f5006 	br	8006b4c <__alt_data_end+0xfc006b4c>
 8006e0c:	95000044 	addi	r20,r18,1
 8006e10:	02000044 	movi	r8,1
 8006e14:	003f5806 	br	8006b78 <__alt_data_end+0xfc006b78>

08006e18 <_fwalk>:
 8006e18:	defff804 	addi	sp,sp,-32
 8006e1c:	dd400515 	stw	r21,20(sp)
 8006e20:	2540b804 	addi	r21,r4,736
 8006e24:	dd800615 	stw	r22,24(sp)
 8006e28:	dd000415 	stw	r20,16(sp)
 8006e2c:	dfc00715 	stw	ra,28(sp)
 8006e30:	dcc00315 	stw	r19,12(sp)
 8006e34:	dc800215 	stw	r18,8(sp)
 8006e38:	dc400115 	stw	r17,4(sp)
 8006e3c:	dc000015 	stw	r16,0(sp)
 8006e40:	2829883a 	mov	r20,r5
 8006e44:	002d883a 	mov	r22,zero
 8006e48:	80065200 	call	8006520 <__sfp_lock_acquire>
 8006e4c:	a8001426 	beq	r21,zero,8006ea0 <_fwalk+0x88>
 8006e50:	04ffffc4 	movi	r19,-1
 8006e54:	ac400117 	ldw	r17,4(r21)
 8006e58:	ac800217 	ldw	r18,8(r21)
 8006e5c:	8c7fffc4 	addi	r17,r17,-1
 8006e60:	88000d16 	blt	r17,zero,8006e98 <_fwalk+0x80>
 8006e64:	94000304 	addi	r16,r18,12
 8006e68:	94800384 	addi	r18,r18,14
 8006e6c:	80c0000f 	ldh	r3,0(r16)
 8006e70:	8c7fffc4 	addi	r17,r17,-1
 8006e74:	813ffd04 	addi	r4,r16,-12
 8006e78:	18000426 	beq	r3,zero,8006e8c <_fwalk+0x74>
 8006e7c:	90c0000f 	ldh	r3,0(r18)
 8006e80:	1cc00226 	beq	r3,r19,8006e8c <_fwalk+0x74>
 8006e84:	a03ee83a 	callr	r20
 8006e88:	b0acb03a 	or	r22,r22,r2
 8006e8c:	84001a04 	addi	r16,r16,104
 8006e90:	94801a04 	addi	r18,r18,104
 8006e94:	8cfff51e 	bne	r17,r19,8006e6c <__alt_data_end+0xfc006e6c>
 8006e98:	ad400017 	ldw	r21,0(r21)
 8006e9c:	a83fed1e 	bne	r21,zero,8006e54 <__alt_data_end+0xfc006e54>
 8006ea0:	80065240 	call	8006524 <__sfp_lock_release>
 8006ea4:	b005883a 	mov	r2,r22
 8006ea8:	dfc00717 	ldw	ra,28(sp)
 8006eac:	dd800617 	ldw	r22,24(sp)
 8006eb0:	dd400517 	ldw	r21,20(sp)
 8006eb4:	dd000417 	ldw	r20,16(sp)
 8006eb8:	dcc00317 	ldw	r19,12(sp)
 8006ebc:	dc800217 	ldw	r18,8(sp)
 8006ec0:	dc400117 	ldw	r17,4(sp)
 8006ec4:	dc000017 	ldw	r16,0(sp)
 8006ec8:	dec00804 	addi	sp,sp,32
 8006ecc:	f800283a 	ret

08006ed0 <_fwalk_reent>:
 8006ed0:	defff804 	addi	sp,sp,-32
 8006ed4:	dd400515 	stw	r21,20(sp)
 8006ed8:	2540b804 	addi	r21,r4,736
 8006edc:	dd800615 	stw	r22,24(sp)
 8006ee0:	dd000415 	stw	r20,16(sp)
 8006ee4:	dcc00315 	stw	r19,12(sp)
 8006ee8:	dfc00715 	stw	ra,28(sp)
 8006eec:	dc800215 	stw	r18,8(sp)
 8006ef0:	dc400115 	stw	r17,4(sp)
 8006ef4:	dc000015 	stw	r16,0(sp)
 8006ef8:	2027883a 	mov	r19,r4
 8006efc:	2829883a 	mov	r20,r5
 8006f00:	002d883a 	mov	r22,zero
 8006f04:	80065200 	call	8006520 <__sfp_lock_acquire>
 8006f08:	a8001326 	beq	r21,zero,8006f58 <_fwalk_reent+0x88>
 8006f0c:	04bfffc4 	movi	r18,-1
 8006f10:	ac400117 	ldw	r17,4(r21)
 8006f14:	ac000217 	ldw	r16,8(r21)
 8006f18:	8c7fffc4 	addi	r17,r17,-1
 8006f1c:	88000c16 	blt	r17,zero,8006f50 <_fwalk_reent+0x80>
 8006f20:	84000304 	addi	r16,r16,12
 8006f24:	80c0000f 	ldh	r3,0(r16)
 8006f28:	8c7fffc4 	addi	r17,r17,-1
 8006f2c:	817ffd04 	addi	r5,r16,-12
 8006f30:	18000526 	beq	r3,zero,8006f48 <_fwalk_reent+0x78>
 8006f34:	80c0008f 	ldh	r3,2(r16)
 8006f38:	9809883a 	mov	r4,r19
 8006f3c:	1c800226 	beq	r3,r18,8006f48 <_fwalk_reent+0x78>
 8006f40:	a03ee83a 	callr	r20
 8006f44:	b0acb03a 	or	r22,r22,r2
 8006f48:	84001a04 	addi	r16,r16,104
 8006f4c:	8cbff51e 	bne	r17,r18,8006f24 <__alt_data_end+0xfc006f24>
 8006f50:	ad400017 	ldw	r21,0(r21)
 8006f54:	a83fee1e 	bne	r21,zero,8006f10 <__alt_data_end+0xfc006f10>
 8006f58:	80065240 	call	8006524 <__sfp_lock_release>
 8006f5c:	b005883a 	mov	r2,r22
 8006f60:	dfc00717 	ldw	ra,28(sp)
 8006f64:	dd800617 	ldw	r22,24(sp)
 8006f68:	dd400517 	ldw	r21,20(sp)
 8006f6c:	dd000417 	ldw	r20,16(sp)
 8006f70:	dcc00317 	ldw	r19,12(sp)
 8006f74:	dc800217 	ldw	r18,8(sp)
 8006f78:	dc400117 	ldw	r17,4(sp)
 8006f7c:	dc000017 	ldw	r16,0(sp)
 8006f80:	dec00804 	addi	sp,sp,32
 8006f84:	f800283a 	ret

08006f88 <_setlocale_r>:
 8006f88:	30001b26 	beq	r6,zero,8006ff8 <_setlocale_r+0x70>
 8006f8c:	01420074 	movhi	r5,2049
 8006f90:	defffe04 	addi	sp,sp,-8
 8006f94:	2946d804 	addi	r5,r5,7008
 8006f98:	3009883a 	mov	r4,r6
 8006f9c:	dc000015 	stw	r16,0(sp)
 8006fa0:	dfc00115 	stw	ra,4(sp)
 8006fa4:	3021883a 	mov	r16,r6
 8006fa8:	80096540 	call	8009654 <strcmp>
 8006fac:	1000061e 	bne	r2,zero,8006fc8 <_setlocale_r+0x40>
 8006fb0:	00820074 	movhi	r2,2049
 8006fb4:	1086d704 	addi	r2,r2,7004
 8006fb8:	dfc00117 	ldw	ra,4(sp)
 8006fbc:	dc000017 	ldw	r16,0(sp)
 8006fc0:	dec00204 	addi	sp,sp,8
 8006fc4:	f800283a 	ret
 8006fc8:	01420074 	movhi	r5,2049
 8006fcc:	2946d704 	addi	r5,r5,7004
 8006fd0:	8009883a 	mov	r4,r16
 8006fd4:	80096540 	call	8009654 <strcmp>
 8006fd8:	103ff526 	beq	r2,zero,8006fb0 <__alt_data_end+0xfc006fb0>
 8006fdc:	01420074 	movhi	r5,2049
 8006fe0:	2946c204 	addi	r5,r5,6920
 8006fe4:	8009883a 	mov	r4,r16
 8006fe8:	80096540 	call	8009654 <strcmp>
 8006fec:	103ff026 	beq	r2,zero,8006fb0 <__alt_data_end+0xfc006fb0>
 8006ff0:	0005883a 	mov	r2,zero
 8006ff4:	003ff006 	br	8006fb8 <__alt_data_end+0xfc006fb8>
 8006ff8:	00820074 	movhi	r2,2049
 8006ffc:	1086d704 	addi	r2,r2,7004
 8007000:	f800283a 	ret

08007004 <__locale_charset>:
 8007004:	00820074 	movhi	r2,2049
 8007008:	10888a04 	addi	r2,r2,8744
 800700c:	f800283a 	ret

08007010 <__locale_mb_cur_max>:
 8007010:	00820074 	movhi	r2,2049
 8007014:	108e2604 	addi	r2,r2,14488
 8007018:	10800017 	ldw	r2,0(r2)
 800701c:	f800283a 	ret

08007020 <__locale_msgcharset>:
 8007020:	00820074 	movhi	r2,2049
 8007024:	10888204 	addi	r2,r2,8712
 8007028:	f800283a 	ret

0800702c <__locale_cjk_lang>:
 800702c:	0005883a 	mov	r2,zero
 8007030:	f800283a 	ret

08007034 <_localeconv_r>:
 8007034:	00820074 	movhi	r2,2049
 8007038:	10889204 	addi	r2,r2,8776
 800703c:	f800283a 	ret

08007040 <setlocale>:
 8007040:	00c20074 	movhi	r3,2049
 8007044:	18ce2504 	addi	r3,r3,14484
 8007048:	2005883a 	mov	r2,r4
 800704c:	19000017 	ldw	r4,0(r3)
 8007050:	280d883a 	mov	r6,r5
 8007054:	100b883a 	mov	r5,r2
 8007058:	8006f881 	jmpi	8006f88 <_setlocale_r>

0800705c <localeconv>:
 800705c:	00820074 	movhi	r2,2049
 8007060:	10889204 	addi	r2,r2,8776
 8007064:	f800283a 	ret

08007068 <__smakebuf_r>:
 8007068:	2880030b 	ldhu	r2,12(r5)
 800706c:	10c0008c 	andi	r3,r2,2
 8007070:	1800401e 	bne	r3,zero,8007174 <__smakebuf_r+0x10c>
 8007074:	deffec04 	addi	sp,sp,-80
 8007078:	dc000f15 	stw	r16,60(sp)
 800707c:	2821883a 	mov	r16,r5
 8007080:	2940038f 	ldh	r5,14(r5)
 8007084:	dc401015 	stw	r17,64(sp)
 8007088:	dfc01315 	stw	ra,76(sp)
 800708c:	dcc01215 	stw	r19,72(sp)
 8007090:	dc801115 	stw	r18,68(sp)
 8007094:	2023883a 	mov	r17,r4
 8007098:	28001b16 	blt	r5,zero,8007108 <__smakebuf_r+0xa0>
 800709c:	d80d883a 	mov	r6,sp
 80070a0:	800b0cc0 	call	800b0cc <_fstat_r>
 80070a4:	10001716 	blt	r2,zero,8007104 <__smakebuf_r+0x9c>
 80070a8:	d8800117 	ldw	r2,4(sp)
 80070ac:	00e00014 	movui	r3,32768
 80070b0:	10bc000c 	andi	r2,r2,61440
 80070b4:	10c03726 	beq	r2,r3,8007194 <__smakebuf_r+0x12c>
 80070b8:	80c0030b 	ldhu	r3,12(r16)
 80070bc:	18c20014 	ori	r3,r3,2048
 80070c0:	80c0030d 	sth	r3,12(r16)
 80070c4:	00c80004 	movi	r3,8192
 80070c8:	10c03c1e 	bne	r2,r3,80071bc <__smakebuf_r+0x154>
 80070cc:	8140038f 	ldh	r5,14(r16)
 80070d0:	8809883a 	mov	r4,r17
 80070d4:	800b1240 	call	800b124 <_isatty_r>
 80070d8:	10004e26 	beq	r2,zero,8007214 <__smakebuf_r+0x1ac>
 80070dc:	8080030b 	ldhu	r2,12(r16)
 80070e0:	04c00044 	movi	r19,1
 80070e4:	80c010c4 	addi	r3,r16,67
 80070e8:	14c4b03a 	or	r2,r2,r19
 80070ec:	8080030d 	sth	r2,12(r16)
 80070f0:	80c00015 	stw	r3,0(r16)
 80070f4:	80c00415 	stw	r3,16(r16)
 80070f8:	84c00515 	stw	r19,20(r16)
 80070fc:	04810004 	movi	r18,1024
 8007100:	00000706 	br	8007120 <__smakebuf_r+0xb8>
 8007104:	8080030b 	ldhu	r2,12(r16)
 8007108:	10c0200c 	andi	r3,r2,128
 800710c:	18001f1e 	bne	r3,zero,800718c <__smakebuf_r+0x124>
 8007110:	04810004 	movi	r18,1024
 8007114:	10820014 	ori	r2,r2,2048
 8007118:	8080030d 	sth	r2,12(r16)
 800711c:	0027883a 	mov	r19,zero
 8007120:	8809883a 	mov	r4,r17
 8007124:	900b883a 	mov	r5,r18
 8007128:	80072200 	call	8007220 <_malloc_r>
 800712c:	10002e26 	beq	r2,zero,80071e8 <__smakebuf_r+0x180>
 8007130:	80c0030b 	ldhu	r3,12(r16)
 8007134:	01020034 	movhi	r4,2048
 8007138:	21186f04 	addi	r4,r4,25020
 800713c:	89000f15 	stw	r4,60(r17)
 8007140:	18c02014 	ori	r3,r3,128
 8007144:	80c0030d 	sth	r3,12(r16)
 8007148:	80800015 	stw	r2,0(r16)
 800714c:	80800415 	stw	r2,16(r16)
 8007150:	84800515 	stw	r18,20(r16)
 8007154:	98001c1e 	bne	r19,zero,80071c8 <__smakebuf_r+0x160>
 8007158:	dfc01317 	ldw	ra,76(sp)
 800715c:	dcc01217 	ldw	r19,72(sp)
 8007160:	dc801117 	ldw	r18,68(sp)
 8007164:	dc401017 	ldw	r17,64(sp)
 8007168:	dc000f17 	ldw	r16,60(sp)
 800716c:	dec01404 	addi	sp,sp,80
 8007170:	f800283a 	ret
 8007174:	288010c4 	addi	r2,r5,67
 8007178:	28800015 	stw	r2,0(r5)
 800717c:	28800415 	stw	r2,16(r5)
 8007180:	00800044 	movi	r2,1
 8007184:	28800515 	stw	r2,20(r5)
 8007188:	f800283a 	ret
 800718c:	04801004 	movi	r18,64
 8007190:	003fe006 	br	8007114 <__alt_data_end+0xfc007114>
 8007194:	81000a17 	ldw	r4,40(r16)
 8007198:	00c20074 	movhi	r3,2049
 800719c:	18e57c04 	addi	r3,r3,-27152
 80071a0:	20ffc51e 	bne	r4,r3,80070b8 <__alt_data_end+0xfc0070b8>
 80071a4:	80c0030b 	ldhu	r3,12(r16)
 80071a8:	01010004 	movi	r4,1024
 80071ac:	81001315 	stw	r4,76(r16)
 80071b0:	1906b03a 	or	r3,r3,r4
 80071b4:	80c0030d 	sth	r3,12(r16)
 80071b8:	003fc206 	br	80070c4 <__alt_data_end+0xfc0070c4>
 80071bc:	0027883a 	mov	r19,zero
 80071c0:	04810004 	movi	r18,1024
 80071c4:	003fd606 	br	8007120 <__alt_data_end+0xfc007120>
 80071c8:	8140038f 	ldh	r5,14(r16)
 80071cc:	8809883a 	mov	r4,r17
 80071d0:	800b1240 	call	800b124 <_isatty_r>
 80071d4:	103fe026 	beq	r2,zero,8007158 <__alt_data_end+0xfc007158>
 80071d8:	8080030b 	ldhu	r2,12(r16)
 80071dc:	10800054 	ori	r2,r2,1
 80071e0:	8080030d 	sth	r2,12(r16)
 80071e4:	003fdc06 	br	8007158 <__alt_data_end+0xfc007158>
 80071e8:	8080030b 	ldhu	r2,12(r16)
 80071ec:	10c0800c 	andi	r3,r2,512
 80071f0:	183fd91e 	bne	r3,zero,8007158 <__alt_data_end+0xfc007158>
 80071f4:	10800094 	ori	r2,r2,2
 80071f8:	80c010c4 	addi	r3,r16,67
 80071fc:	8080030d 	sth	r2,12(r16)
 8007200:	00800044 	movi	r2,1
 8007204:	80c00015 	stw	r3,0(r16)
 8007208:	80c00415 	stw	r3,16(r16)
 800720c:	80800515 	stw	r2,20(r16)
 8007210:	003fd106 	br	8007158 <__alt_data_end+0xfc007158>
 8007214:	04c00044 	movi	r19,1
 8007218:	04810004 	movi	r18,1024
 800721c:	003fc006 	br	8007120 <__alt_data_end+0xfc007120>

08007220 <_malloc_r>:
 8007220:	defff504 	addi	sp,sp,-44
 8007224:	dc800315 	stw	r18,12(sp)
 8007228:	dfc00a15 	stw	ra,40(sp)
 800722c:	df000915 	stw	fp,36(sp)
 8007230:	ddc00815 	stw	r23,32(sp)
 8007234:	dd800715 	stw	r22,28(sp)
 8007238:	dd400615 	stw	r21,24(sp)
 800723c:	dd000515 	stw	r20,20(sp)
 8007240:	dcc00415 	stw	r19,16(sp)
 8007244:	dc400215 	stw	r17,8(sp)
 8007248:	dc000115 	stw	r16,4(sp)
 800724c:	288002c4 	addi	r2,r5,11
 8007250:	00c00584 	movi	r3,22
 8007254:	2025883a 	mov	r18,r4
 8007258:	18802a2e 	bgeu	r3,r2,8007304 <_malloc_r+0xe4>
 800725c:	047ffe04 	movi	r17,-8
 8007260:	1462703a 	and	r17,r2,r17
 8007264:	88009e16 	blt	r17,zero,80074e0 <_malloc_r+0x2c0>
 8007268:	89409d36 	bltu	r17,r5,80074e0 <_malloc_r+0x2c0>
 800726c:	800f12c0 	call	800f12c <__malloc_lock>
 8007270:	00807dc4 	movi	r2,503
 8007274:	14402736 	bltu	r2,r17,8007314 <_malloc_r+0xf4>
 8007278:	8806d0fa 	srli	r3,r17,3
 800727c:	04c20074 	movhi	r19,2049
 8007280:	9cc8a004 	addi	r19,r19,8832
 8007284:	18c5883a 	add	r2,r3,r3
 8007288:	1085883a 	add	r2,r2,r2
 800728c:	1085883a 	add	r2,r2,r2
 8007290:	9885883a 	add	r2,r19,r2
 8007294:	14000317 	ldw	r16,12(r2)
 8007298:	80814a26 	beq	r16,r2,80077c4 <_malloc_r+0x5a4>
 800729c:	80c00117 	ldw	r3,4(r16)
 80072a0:	81000317 	ldw	r4,12(r16)
 80072a4:	00bfff04 	movi	r2,-4
 80072a8:	1884703a 	and	r2,r3,r2
 80072ac:	81400217 	ldw	r5,8(r16)
 80072b0:	8085883a 	add	r2,r16,r2
 80072b4:	10c00117 	ldw	r3,4(r2)
 80072b8:	29000315 	stw	r4,12(r5)
 80072bc:	21400215 	stw	r5,8(r4)
 80072c0:	18c00054 	ori	r3,r3,1
 80072c4:	10c00115 	stw	r3,4(r2)
 80072c8:	9009883a 	mov	r4,r18
 80072cc:	800f14c0 	call	800f14c <__malloc_unlock>
 80072d0:	80800204 	addi	r2,r16,8
 80072d4:	dfc00a17 	ldw	ra,40(sp)
 80072d8:	df000917 	ldw	fp,36(sp)
 80072dc:	ddc00817 	ldw	r23,32(sp)
 80072e0:	dd800717 	ldw	r22,28(sp)
 80072e4:	dd400617 	ldw	r21,24(sp)
 80072e8:	dd000517 	ldw	r20,20(sp)
 80072ec:	dcc00417 	ldw	r19,16(sp)
 80072f0:	dc800317 	ldw	r18,12(sp)
 80072f4:	dc400217 	ldw	r17,8(sp)
 80072f8:	dc000117 	ldw	r16,4(sp)
 80072fc:	dec00b04 	addi	sp,sp,44
 8007300:	f800283a 	ret
 8007304:	04400404 	movi	r17,16
 8007308:	89407536 	bltu	r17,r5,80074e0 <_malloc_r+0x2c0>
 800730c:	800f12c0 	call	800f12c <__malloc_lock>
 8007310:	003fd906 	br	8007278 <__alt_data_end+0xfc007278>
 8007314:	8806d27a 	srli	r3,r17,9
 8007318:	18007526 	beq	r3,zero,80074f0 <_malloc_r+0x2d0>
 800731c:	00800104 	movi	r2,4
 8007320:	10c0ef36 	bltu	r2,r3,80076e0 <_malloc_r+0x4c0>
 8007324:	8806d1ba 	srli	r3,r17,6
 8007328:	19c00e04 	addi	r7,r3,56
 800732c:	39cb883a 	add	r5,r7,r7
 8007330:	04c20074 	movhi	r19,2049
 8007334:	294b883a 	add	r5,r5,r5
 8007338:	9cc8a004 	addi	r19,r19,8832
 800733c:	294b883a 	add	r5,r5,r5
 8007340:	994b883a 	add	r5,r19,r5
 8007344:	2c000317 	ldw	r16,12(r5)
 8007348:	2c000e26 	beq	r5,r16,8007384 <_malloc_r+0x164>
 800734c:	80800117 	ldw	r2,4(r16)
 8007350:	01bfff04 	movi	r6,-4
 8007354:	010003c4 	movi	r4,15
 8007358:	1184703a 	and	r2,r2,r6
 800735c:	1447c83a 	sub	r3,r2,r17
 8007360:	20c00716 	blt	r4,r3,8007380 <_malloc_r+0x160>
 8007364:	1800650e 	bge	r3,zero,80074fc <_malloc_r+0x2dc>
 8007368:	84000317 	ldw	r16,12(r16)
 800736c:	2c000526 	beq	r5,r16,8007384 <_malloc_r+0x164>
 8007370:	80800117 	ldw	r2,4(r16)
 8007374:	1184703a 	and	r2,r2,r6
 8007378:	1447c83a 	sub	r3,r2,r17
 800737c:	20fff90e 	bge	r4,r3,8007364 <__alt_data_end+0xfc007364>
 8007380:	39ffffc4 	addi	r7,r7,-1
 8007384:	38c00044 	addi	r3,r7,1
 8007388:	01820074 	movhi	r6,2049
 800738c:	9c000417 	ldw	r16,16(r19)
 8007390:	3188a004 	addi	r6,r6,8832
 8007394:	32400204 	addi	r9,r6,8
 8007398:	82410326 	beq	r16,r9,80077a8 <_malloc_r+0x588>
 800739c:	81000117 	ldw	r4,4(r16)
 80073a0:	00bfff04 	movi	r2,-4
 80073a4:	208e703a 	and	r7,r4,r2
 80073a8:	3c45c83a 	sub	r2,r7,r17
 80073ac:	010003c4 	movi	r4,15
 80073b0:	2080ee16 	blt	r4,r2,800776c <_malloc_r+0x54c>
 80073b4:	32400515 	stw	r9,20(r6)
 80073b8:	32400415 	stw	r9,16(r6)
 80073bc:	1000510e 	bge	r2,zero,8007504 <_malloc_r+0x2e4>
 80073c0:	00807fc4 	movi	r2,511
 80073c4:	11c0ce36 	bltu	r2,r7,8007700 <_malloc_r+0x4e0>
 80073c8:	3808d0fa 	srli	r4,r7,3
 80073cc:	01c00044 	movi	r7,1
 80073d0:	30800117 	ldw	r2,4(r6)
 80073d4:	210b883a 	add	r5,r4,r4
 80073d8:	294b883a 	add	r5,r5,r5
 80073dc:	2009d0ba 	srai	r4,r4,2
 80073e0:	294b883a 	add	r5,r5,r5
 80073e4:	298b883a 	add	r5,r5,r6
 80073e8:	2a000217 	ldw	r8,8(r5)
 80073ec:	3908983a 	sll	r4,r7,r4
 80073f0:	81400315 	stw	r5,12(r16)
 80073f4:	82000215 	stw	r8,8(r16)
 80073f8:	2088b03a 	or	r4,r4,r2
 80073fc:	2c000215 	stw	r16,8(r5)
 8007400:	31000115 	stw	r4,4(r6)
 8007404:	44000315 	stw	r16,12(r8)
 8007408:	1805d0ba 	srai	r2,r3,2
 800740c:	01400044 	movi	r5,1
 8007410:	288a983a 	sll	r5,r5,r2
 8007414:	21404336 	bltu	r4,r5,8007524 <_malloc_r+0x304>
 8007418:	2144703a 	and	r2,r4,r5
 800741c:	10000a1e 	bne	r2,zero,8007448 <_malloc_r+0x228>
 8007420:	00bfff04 	movi	r2,-4
 8007424:	294b883a 	add	r5,r5,r5
 8007428:	1886703a 	and	r3,r3,r2
 800742c:	2144703a 	and	r2,r4,r5
 8007430:	18c00104 	addi	r3,r3,4
 8007434:	1000041e 	bne	r2,zero,8007448 <_malloc_r+0x228>
 8007438:	294b883a 	add	r5,r5,r5
 800743c:	2144703a 	and	r2,r4,r5
 8007440:	18c00104 	addi	r3,r3,4
 8007444:	103ffc26 	beq	r2,zero,8007438 <__alt_data_end+0xfc007438>
 8007448:	023fff04 	movi	r8,-4
 800744c:	01c003c4 	movi	r7,15
 8007450:	18c5883a 	add	r2,r3,r3
 8007454:	1085883a 	add	r2,r2,r2
 8007458:	1085883a 	add	r2,r2,r2
 800745c:	9895883a 	add	r10,r19,r2
 8007460:	52c00304 	addi	r11,r10,12
 8007464:	1819883a 	mov	r12,r3
 8007468:	5c000017 	ldw	r16,0(r11)
 800746c:	59bffd04 	addi	r6,r11,-12
 8007470:	8180041e 	bne	r16,r6,8007484 <_malloc_r+0x264>
 8007474:	0000ce06 	br	80077b0 <_malloc_r+0x590>
 8007478:	2000d70e 	bge	r4,zero,80077d8 <_malloc_r+0x5b8>
 800747c:	84000317 	ldw	r16,12(r16)
 8007480:	8180cb26 	beq	r16,r6,80077b0 <_malloc_r+0x590>
 8007484:	80800117 	ldw	r2,4(r16)
 8007488:	1204703a 	and	r2,r2,r8
 800748c:	1449c83a 	sub	r4,r2,r17
 8007490:	393ff90e 	bge	r7,r4,8007478 <__alt_data_end+0xfc007478>
 8007494:	80800317 	ldw	r2,12(r16)
 8007498:	80c00217 	ldw	r3,8(r16)
 800749c:	89400054 	ori	r5,r17,1
 80074a0:	81400115 	stw	r5,4(r16)
 80074a4:	18800315 	stw	r2,12(r3)
 80074a8:	10c00215 	stw	r3,8(r2)
 80074ac:	8463883a 	add	r17,r16,r17
 80074b0:	9c400515 	stw	r17,20(r19)
 80074b4:	9c400415 	stw	r17,16(r19)
 80074b8:	20800054 	ori	r2,r4,1
 80074bc:	88800115 	stw	r2,4(r17)
 80074c0:	8a400315 	stw	r9,12(r17)
 80074c4:	8a400215 	stw	r9,8(r17)
 80074c8:	8923883a 	add	r17,r17,r4
 80074cc:	89000015 	stw	r4,0(r17)
 80074d0:	9009883a 	mov	r4,r18
 80074d4:	800f14c0 	call	800f14c <__malloc_unlock>
 80074d8:	80800204 	addi	r2,r16,8
 80074dc:	003f7d06 	br	80072d4 <__alt_data_end+0xfc0072d4>
 80074e0:	00800304 	movi	r2,12
 80074e4:	90800015 	stw	r2,0(r18)
 80074e8:	0005883a 	mov	r2,zero
 80074ec:	003f7906 	br	80072d4 <__alt_data_end+0xfc0072d4>
 80074f0:	01401f84 	movi	r5,126
 80074f4:	01c00fc4 	movi	r7,63
 80074f8:	003f8d06 	br	8007330 <__alt_data_end+0xfc007330>
 80074fc:	81000317 	ldw	r4,12(r16)
 8007500:	003f6a06 	br	80072ac <__alt_data_end+0xfc0072ac>
 8007504:	81c5883a 	add	r2,r16,r7
 8007508:	10c00117 	ldw	r3,4(r2)
 800750c:	9009883a 	mov	r4,r18
 8007510:	18c00054 	ori	r3,r3,1
 8007514:	10c00115 	stw	r3,4(r2)
 8007518:	800f14c0 	call	800f14c <__malloc_unlock>
 800751c:	80800204 	addi	r2,r16,8
 8007520:	003f6c06 	br	80072d4 <__alt_data_end+0xfc0072d4>
 8007524:	9c000217 	ldw	r16,8(r19)
 8007528:	00bfff04 	movi	r2,-4
 800752c:	85800117 	ldw	r22,4(r16)
 8007530:	b0ac703a 	and	r22,r22,r2
 8007534:	b4400336 	bltu	r22,r17,8007544 <_malloc_r+0x324>
 8007538:	b445c83a 	sub	r2,r22,r17
 800753c:	00c003c4 	movi	r3,15
 8007540:	18805d16 	blt	r3,r2,80076b8 <_malloc_r+0x498>
 8007544:	05c20074 	movhi	r23,2049
 8007548:	00820074 	movhi	r2,2049
 800754c:	bdce2704 	addi	r23,r23,14492
 8007550:	1094f504 	addi	r2,r2,21460
 8007554:	15400017 	ldw	r21,0(r2)
 8007558:	b9000017 	ldw	r4,0(r23)
 800755c:	00ffffc4 	movi	r3,-1
 8007560:	858d883a 	add	r6,r16,r22
 8007564:	8d6b883a 	add	r21,r17,r21
 8007568:	20c0e426 	beq	r4,r3,80078fc <_malloc_r+0x6dc>
 800756c:	ad4403c4 	addi	r21,r21,4111
 8007570:	00fc0004 	movi	r3,-4096
 8007574:	a8ea703a 	and	r21,r21,r3
 8007578:	9009883a 	mov	r4,r18
 800757c:	a80b883a 	mov	r5,r21
 8007580:	d9800015 	stw	r6,0(sp)
 8007584:	80094c40 	call	80094c4 <_sbrk_r>
 8007588:	00ffffc4 	movi	r3,-1
 800758c:	1029883a 	mov	r20,r2
 8007590:	d9800017 	ldw	r6,0(sp)
 8007594:	10c0a426 	beq	r2,r3,8007828 <_malloc_r+0x608>
 8007598:	1180a236 	bltu	r2,r6,8007824 <_malloc_r+0x604>
 800759c:	07020074 	movhi	fp,2049
 80075a0:	e714fd04 	addi	fp,fp,21492
 80075a4:	e0c00017 	ldw	r3,0(fp)
 80075a8:	a8c7883a 	add	r3,r21,r3
 80075ac:	e0c00015 	stw	r3,0(fp)
 80075b0:	3500da26 	beq	r6,r20,800791c <_malloc_r+0x6fc>
 80075b4:	b9000017 	ldw	r4,0(r23)
 80075b8:	00bfffc4 	movi	r2,-1
 80075bc:	2080e426 	beq	r4,r2,8007950 <_malloc_r+0x730>
 80075c0:	a185c83a 	sub	r2,r20,r6
 80075c4:	1885883a 	add	r2,r3,r2
 80075c8:	e0800015 	stw	r2,0(fp)
 80075cc:	a0c001cc 	andi	r3,r20,7
 80075d0:	1800b526 	beq	r3,zero,80078a8 <_malloc_r+0x688>
 80075d4:	a0e9c83a 	sub	r20,r20,r3
 80075d8:	00840204 	movi	r2,4104
 80075dc:	a5000204 	addi	r20,r20,8
 80075e0:	10c7c83a 	sub	r3,r2,r3
 80075e4:	a545883a 	add	r2,r20,r21
 80075e8:	1083ffcc 	andi	r2,r2,4095
 80075ec:	18abc83a 	sub	r21,r3,r2
 80075f0:	9009883a 	mov	r4,r18
 80075f4:	a80b883a 	mov	r5,r21
 80075f8:	80094c40 	call	80094c4 <_sbrk_r>
 80075fc:	00ffffc4 	movi	r3,-1
 8007600:	10c0d026 	beq	r2,r3,8007944 <_malloc_r+0x724>
 8007604:	1507c83a 	sub	r3,r2,r20
 8007608:	a8c7883a 	add	r3,r21,r3
 800760c:	18c00054 	ori	r3,r3,1
 8007610:	e0800017 	ldw	r2,0(fp)
 8007614:	9d000215 	stw	r20,8(r19)
 8007618:	a0c00115 	stw	r3,4(r20)
 800761c:	a887883a 	add	r3,r21,r2
 8007620:	e0c00015 	stw	r3,0(fp)
 8007624:	84c00e26 	beq	r16,r19,8007660 <_malloc_r+0x440>
 8007628:	018003c4 	movi	r6,15
 800762c:	3580a02e 	bgeu	r6,r22,80078b0 <_malloc_r+0x690>
 8007630:	81400117 	ldw	r5,4(r16)
 8007634:	013ffe04 	movi	r4,-8
 8007638:	b0bffd04 	addi	r2,r22,-12
 800763c:	1104703a 	and	r2,r2,r4
 8007640:	2900004c 	andi	r4,r5,1
 8007644:	1108b03a 	or	r4,r2,r4
 8007648:	81000115 	stw	r4,4(r16)
 800764c:	01400144 	movi	r5,5
 8007650:	8089883a 	add	r4,r16,r2
 8007654:	21400115 	stw	r5,4(r4)
 8007658:	21400215 	stw	r5,8(r4)
 800765c:	3080c036 	bltu	r6,r2,8007960 <_malloc_r+0x740>
 8007660:	00820074 	movhi	r2,2049
 8007664:	1094f404 	addi	r2,r2,21456
 8007668:	11000017 	ldw	r4,0(r2)
 800766c:	20c0012e 	bgeu	r4,r3,8007674 <_malloc_r+0x454>
 8007670:	10c00015 	stw	r3,0(r2)
 8007674:	00820074 	movhi	r2,2049
 8007678:	1094f304 	addi	r2,r2,21452
 800767c:	11000017 	ldw	r4,0(r2)
 8007680:	9c000217 	ldw	r16,8(r19)
 8007684:	20c0012e 	bgeu	r4,r3,800768c <_malloc_r+0x46c>
 8007688:	10c00015 	stw	r3,0(r2)
 800768c:	80c00117 	ldw	r3,4(r16)
 8007690:	00bfff04 	movi	r2,-4
 8007694:	1886703a 	and	r3,r3,r2
 8007698:	1c45c83a 	sub	r2,r3,r17
 800769c:	1c400236 	bltu	r3,r17,80076a8 <_malloc_r+0x488>
 80076a0:	00c003c4 	movi	r3,15
 80076a4:	18800416 	blt	r3,r2,80076b8 <_malloc_r+0x498>
 80076a8:	9009883a 	mov	r4,r18
 80076ac:	800f14c0 	call	800f14c <__malloc_unlock>
 80076b0:	0005883a 	mov	r2,zero
 80076b4:	003f0706 	br	80072d4 <__alt_data_end+0xfc0072d4>
 80076b8:	88c00054 	ori	r3,r17,1
 80076bc:	80c00115 	stw	r3,4(r16)
 80076c0:	8463883a 	add	r17,r16,r17
 80076c4:	10800054 	ori	r2,r2,1
 80076c8:	9c400215 	stw	r17,8(r19)
 80076cc:	88800115 	stw	r2,4(r17)
 80076d0:	9009883a 	mov	r4,r18
 80076d4:	800f14c0 	call	800f14c <__malloc_unlock>
 80076d8:	80800204 	addi	r2,r16,8
 80076dc:	003efd06 	br	80072d4 <__alt_data_end+0xfc0072d4>
 80076e0:	00800504 	movi	r2,20
 80076e4:	10c0482e 	bgeu	r2,r3,8007808 <_malloc_r+0x5e8>
 80076e8:	00801504 	movi	r2,84
 80076ec:	10c06836 	bltu	r2,r3,8007890 <_malloc_r+0x670>
 80076f0:	8806d33a 	srli	r3,r17,12
 80076f4:	19c01b84 	addi	r7,r3,110
 80076f8:	39cb883a 	add	r5,r7,r7
 80076fc:	003f0c06 	br	8007330 <__alt_data_end+0xfc007330>
 8007700:	3804d27a 	srli	r2,r7,9
 8007704:	01000104 	movi	r4,4
 8007708:	2080422e 	bgeu	r4,r2,8007814 <_malloc_r+0x5f4>
 800770c:	01000504 	movi	r4,20
 8007710:	20807c36 	bltu	r4,r2,8007904 <_malloc_r+0x6e4>
 8007714:	110016c4 	addi	r4,r2,91
 8007718:	210b883a 	add	r5,r4,r4
 800771c:	294b883a 	add	r5,r5,r5
 8007720:	294b883a 	add	r5,r5,r5
 8007724:	994b883a 	add	r5,r19,r5
 8007728:	28800217 	ldw	r2,8(r5)
 800772c:	02020074 	movhi	r8,2049
 8007730:	4208a004 	addi	r8,r8,8832
 8007734:	11406326 	beq	r2,r5,80078c4 <_malloc_r+0x6a4>
 8007738:	01bfff04 	movi	r6,-4
 800773c:	11000117 	ldw	r4,4(r2)
 8007740:	2188703a 	and	r4,r4,r6
 8007744:	3900022e 	bgeu	r7,r4,8007750 <_malloc_r+0x530>
 8007748:	10800217 	ldw	r2,8(r2)
 800774c:	28bffb1e 	bne	r5,r2,800773c <__alt_data_end+0xfc00773c>
 8007750:	11800317 	ldw	r6,12(r2)
 8007754:	99000117 	ldw	r4,4(r19)
 8007758:	81800315 	stw	r6,12(r16)
 800775c:	80800215 	stw	r2,8(r16)
 8007760:	34000215 	stw	r16,8(r6)
 8007764:	14000315 	stw	r16,12(r2)
 8007768:	003f2706 	br	8007408 <__alt_data_end+0xfc007408>
 800776c:	88c00054 	ori	r3,r17,1
 8007770:	80c00115 	stw	r3,4(r16)
 8007774:	8463883a 	add	r17,r16,r17
 8007778:	34400515 	stw	r17,20(r6)
 800777c:	34400415 	stw	r17,16(r6)
 8007780:	10c00054 	ori	r3,r2,1
 8007784:	8a400315 	stw	r9,12(r17)
 8007788:	8a400215 	stw	r9,8(r17)
 800778c:	88c00115 	stw	r3,4(r17)
 8007790:	88a3883a 	add	r17,r17,r2
 8007794:	88800015 	stw	r2,0(r17)
 8007798:	9009883a 	mov	r4,r18
 800779c:	800f14c0 	call	800f14c <__malloc_unlock>
 80077a0:	80800204 	addi	r2,r16,8
 80077a4:	003ecb06 	br	80072d4 <__alt_data_end+0xfc0072d4>
 80077a8:	31000117 	ldw	r4,4(r6)
 80077ac:	003f1606 	br	8007408 <__alt_data_end+0xfc007408>
 80077b0:	63000044 	addi	r12,r12,1
 80077b4:	608000cc 	andi	r2,r12,3
 80077b8:	5ac00204 	addi	r11,r11,8
 80077bc:	103f2a1e 	bne	r2,zero,8007468 <__alt_data_end+0xfc007468>
 80077c0:	00002106 	br	8007848 <_malloc_r+0x628>
 80077c4:	80800204 	addi	r2,r16,8
 80077c8:	84000517 	ldw	r16,20(r16)
 80077cc:	143eb31e 	bne	r2,r16,800729c <__alt_data_end+0xfc00729c>
 80077d0:	18c00084 	addi	r3,r3,2
 80077d4:	003eec06 	br	8007388 <__alt_data_end+0xfc007388>
 80077d8:	8085883a 	add	r2,r16,r2
 80077dc:	10c00117 	ldw	r3,4(r2)
 80077e0:	81000317 	ldw	r4,12(r16)
 80077e4:	81400217 	ldw	r5,8(r16)
 80077e8:	18c00054 	ori	r3,r3,1
 80077ec:	10c00115 	stw	r3,4(r2)
 80077f0:	29000315 	stw	r4,12(r5)
 80077f4:	21400215 	stw	r5,8(r4)
 80077f8:	9009883a 	mov	r4,r18
 80077fc:	800f14c0 	call	800f14c <__malloc_unlock>
 8007800:	80800204 	addi	r2,r16,8
 8007804:	003eb306 	br	80072d4 <__alt_data_end+0xfc0072d4>
 8007808:	19c016c4 	addi	r7,r3,91
 800780c:	39cb883a 	add	r5,r7,r7
 8007810:	003ec706 	br	8007330 <__alt_data_end+0xfc007330>
 8007814:	3804d1ba 	srli	r2,r7,6
 8007818:	11000e04 	addi	r4,r2,56
 800781c:	210b883a 	add	r5,r4,r4
 8007820:	003fbe06 	br	800771c <__alt_data_end+0xfc00771c>
 8007824:	84ff5d26 	beq	r16,r19,800759c <__alt_data_end+0xfc00759c>
 8007828:	9c000217 	ldw	r16,8(r19)
 800782c:	00bfff04 	movi	r2,-4
 8007830:	80c00117 	ldw	r3,4(r16)
 8007834:	1886703a 	and	r3,r3,r2
 8007838:	003f9706 	br	8007698 <__alt_data_end+0xfc007698>
 800783c:	52800017 	ldw	r10,0(r10)
 8007840:	18ffffc4 	addi	r3,r3,-1
 8007844:	50805c1e 	bne	r10,r2,80079b8 <_malloc_r+0x798>
 8007848:	190000cc 	andi	r4,r3,3
 800784c:	50bffe04 	addi	r2,r10,-8
 8007850:	203ffa1e 	bne	r4,zero,800783c <__alt_data_end+0xfc00783c>
 8007854:	98800117 	ldw	r2,4(r19)
 8007858:	0146303a 	nor	r3,zero,r5
 800785c:	1884703a 	and	r2,r3,r2
 8007860:	98800115 	stw	r2,4(r19)
 8007864:	294b883a 	add	r5,r5,r5
 8007868:	117f2e36 	bltu	r2,r5,8007524 <__alt_data_end+0xfc007524>
 800786c:	283f2d26 	beq	r5,zero,8007524 <__alt_data_end+0xfc007524>
 8007870:	1146703a 	and	r3,r2,r5
 8007874:	1800521e 	bne	r3,zero,80079c0 <_malloc_r+0x7a0>
 8007878:	6007883a 	mov	r3,r12
 800787c:	294b883a 	add	r5,r5,r5
 8007880:	1148703a 	and	r4,r2,r5
 8007884:	18c00104 	addi	r3,r3,4
 8007888:	203ffc26 	beq	r4,zero,800787c <__alt_data_end+0xfc00787c>
 800788c:	003ef006 	br	8007450 <__alt_data_end+0xfc007450>
 8007890:	00805504 	movi	r2,340
 8007894:	10c01336 	bltu	r2,r3,80078e4 <_malloc_r+0x6c4>
 8007898:	8806d3fa 	srli	r3,r17,15
 800789c:	19c01dc4 	addi	r7,r3,119
 80078a0:	39cb883a 	add	r5,r7,r7
 80078a4:	003ea206 	br	8007330 <__alt_data_end+0xfc007330>
 80078a8:	00c40004 	movi	r3,4096
 80078ac:	003f4d06 	br	80075e4 <__alt_data_end+0xfc0075e4>
 80078b0:	00800044 	movi	r2,1
 80078b4:	a0800115 	stw	r2,4(r20)
 80078b8:	a021883a 	mov	r16,r20
 80078bc:	0007883a 	mov	r3,zero
 80078c0:	003f7506 	br	8007698 <__alt_data_end+0xfc007698>
 80078c4:	200bd0ba 	srai	r5,r4,2
 80078c8:	01800044 	movi	r6,1
 80078cc:	41000117 	ldw	r4,4(r8)
 80078d0:	314a983a 	sll	r5,r6,r5
 80078d4:	100d883a 	mov	r6,r2
 80078d8:	2908b03a 	or	r4,r5,r4
 80078dc:	41000115 	stw	r4,4(r8)
 80078e0:	003f9d06 	br	8007758 <__alt_data_end+0xfc007758>
 80078e4:	00815504 	movi	r2,1364
 80078e8:	10c01336 	bltu	r2,r3,8007938 <_malloc_r+0x718>
 80078ec:	8806d4ba 	srli	r3,r17,18
 80078f0:	19c01f04 	addi	r7,r3,124
 80078f4:	39cb883a 	add	r5,r7,r7
 80078f8:	003e8d06 	br	8007330 <__alt_data_end+0xfc007330>
 80078fc:	ad400404 	addi	r21,r21,16
 8007900:	003f1d06 	br	8007578 <__alt_data_end+0xfc007578>
 8007904:	01001504 	movi	r4,84
 8007908:	20801c36 	bltu	r4,r2,800797c <_malloc_r+0x75c>
 800790c:	3804d33a 	srli	r2,r7,12
 8007910:	11001b84 	addi	r4,r2,110
 8007914:	210b883a 	add	r5,r4,r4
 8007918:	003f8006 	br	800771c <__alt_data_end+0xfc00771c>
 800791c:	3083ffcc 	andi	r2,r6,4095
 8007920:	103f241e 	bne	r2,zero,80075b4 <__alt_data_end+0xfc0075b4>
 8007924:	99000217 	ldw	r4,8(r19)
 8007928:	ad85883a 	add	r2,r21,r22
 800792c:	10800054 	ori	r2,r2,1
 8007930:	20800115 	stw	r2,4(r4)
 8007934:	003f4a06 	br	8007660 <__alt_data_end+0xfc007660>
 8007938:	01403f04 	movi	r5,252
 800793c:	01c01f84 	movi	r7,126
 8007940:	003e7b06 	br	8007330 <__alt_data_end+0xfc007330>
 8007944:	00c00044 	movi	r3,1
 8007948:	002b883a 	mov	r21,zero
 800794c:	003f3006 	br	8007610 <__alt_data_end+0xfc007610>
 8007950:	00820074 	movhi	r2,2049
 8007954:	108e2704 	addi	r2,r2,14492
 8007958:	15000015 	stw	r20,0(r2)
 800795c:	003f1b06 	br	80075cc <__alt_data_end+0xfc0075cc>
 8007960:	9009883a 	mov	r4,r18
 8007964:	81400204 	addi	r5,r16,8
 8007968:	80066840 	call	8006684 <_free_r>
 800796c:	00820074 	movhi	r2,2049
 8007970:	1094fd04 	addi	r2,r2,21492
 8007974:	10c00017 	ldw	r3,0(r2)
 8007978:	003f3906 	br	8007660 <__alt_data_end+0xfc007660>
 800797c:	01005504 	movi	r4,340
 8007980:	20800436 	bltu	r4,r2,8007994 <_malloc_r+0x774>
 8007984:	3804d3fa 	srli	r2,r7,15
 8007988:	11001dc4 	addi	r4,r2,119
 800798c:	210b883a 	add	r5,r4,r4
 8007990:	003f6206 	br	800771c <__alt_data_end+0xfc00771c>
 8007994:	01015504 	movi	r4,1364
 8007998:	20800436 	bltu	r4,r2,80079ac <_malloc_r+0x78c>
 800799c:	3804d4ba 	srli	r2,r7,18
 80079a0:	11001f04 	addi	r4,r2,124
 80079a4:	210b883a 	add	r5,r4,r4
 80079a8:	003f5c06 	br	800771c <__alt_data_end+0xfc00771c>
 80079ac:	01403f04 	movi	r5,252
 80079b0:	01001f84 	movi	r4,126
 80079b4:	003f5906 	br	800771c <__alt_data_end+0xfc00771c>
 80079b8:	98800117 	ldw	r2,4(r19)
 80079bc:	003fa906 	br	8007864 <__alt_data_end+0xfc007864>
 80079c0:	6007883a 	mov	r3,r12
 80079c4:	003ea206 	br	8007450 <__alt_data_end+0xfc007450>

080079c8 <memchr>:
 80079c8:	208000cc 	andi	r2,r4,3
 80079cc:	280f883a 	mov	r7,r5
 80079d0:	10003526 	beq	r2,zero,8007aa8 <memchr+0xe0>
 80079d4:	30bfffc4 	addi	r2,r6,-1
 80079d8:	30001b26 	beq	r6,zero,8007a48 <memchr+0x80>
 80079dc:	21800003 	ldbu	r6,0(r4)
 80079e0:	28c03fcc 	andi	r3,r5,255
 80079e4:	30c01a26 	beq	r6,r3,8007a50 <memchr+0x88>
 80079e8:	180d883a 	mov	r6,r3
 80079ec:	00000406 	br	8007a00 <memchr+0x38>
 80079f0:	10001526 	beq	r2,zero,8007a48 <memchr+0x80>
 80079f4:	20c00003 	ldbu	r3,0(r4)
 80079f8:	10bfffc4 	addi	r2,r2,-1
 80079fc:	19801426 	beq	r3,r6,8007a50 <memchr+0x88>
 8007a00:	21000044 	addi	r4,r4,1
 8007a04:	20c000cc 	andi	r3,r4,3
 8007a08:	183ff91e 	bne	r3,zero,80079f0 <__alt_data_end+0xfc0079f0>
 8007a0c:	024000c4 	movi	r9,3
 8007a10:	48801136 	bltu	r9,r2,8007a58 <memchr+0x90>
 8007a14:	10000c26 	beq	r2,zero,8007a48 <memchr+0x80>
 8007a18:	20c00003 	ldbu	r3,0(r4)
 8007a1c:	29403fcc 	andi	r5,r5,255
 8007a20:	19400b26 	beq	r3,r5,8007a50 <memchr+0x88>
 8007a24:	20c00044 	addi	r3,r4,1
 8007a28:	2085883a 	add	r2,r4,r2
 8007a2c:	39803fcc 	andi	r6,r7,255
 8007a30:	00000306 	br	8007a40 <memchr+0x78>
 8007a34:	18c00044 	addi	r3,r3,1
 8007a38:	197fffc3 	ldbu	r5,-1(r3)
 8007a3c:	29800426 	beq	r5,r6,8007a50 <memchr+0x88>
 8007a40:	1809883a 	mov	r4,r3
 8007a44:	18bffb1e 	bne	r3,r2,8007a34 <__alt_data_end+0xfc007a34>
 8007a48:	0005883a 	mov	r2,zero
 8007a4c:	f800283a 	ret
 8007a50:	2005883a 	mov	r2,r4
 8007a54:	f800283a 	ret
 8007a58:	28c03fcc 	andi	r3,r5,255
 8007a5c:	1810923a 	slli	r8,r3,8
 8007a60:	02ffbff4 	movhi	r11,65279
 8007a64:	02a02074 	movhi	r10,32897
 8007a68:	40c6b03a 	or	r3,r8,r3
 8007a6c:	1810943a 	slli	r8,r3,16
 8007a70:	5affbfc4 	addi	r11,r11,-257
 8007a74:	52a02004 	addi	r10,r10,-32640
 8007a78:	40d0b03a 	or	r8,r8,r3
 8007a7c:	20c00017 	ldw	r3,0(r4)
 8007a80:	40c6f03a 	xor	r3,r8,r3
 8007a84:	1acd883a 	add	r6,r3,r11
 8007a88:	00c6303a 	nor	r3,zero,r3
 8007a8c:	30c6703a 	and	r3,r6,r3
 8007a90:	1a86703a 	and	r3,r3,r10
 8007a94:	183fdf1e 	bne	r3,zero,8007a14 <__alt_data_end+0xfc007a14>
 8007a98:	10bfff04 	addi	r2,r2,-4
 8007a9c:	21000104 	addi	r4,r4,4
 8007aa0:	48bff636 	bltu	r9,r2,8007a7c <__alt_data_end+0xfc007a7c>
 8007aa4:	003fdb06 	br	8007a14 <__alt_data_end+0xfc007a14>
 8007aa8:	3005883a 	mov	r2,r6
 8007aac:	003fd706 	br	8007a0c <__alt_data_end+0xfc007a0c>

08007ab0 <memcpy>:
 8007ab0:	deffff04 	addi	sp,sp,-4
 8007ab4:	dc000015 	stw	r16,0(sp)
 8007ab8:	00c003c4 	movi	r3,15
 8007abc:	2005883a 	mov	r2,r4
 8007ac0:	1980432e 	bgeu	r3,r6,8007bd0 <memcpy+0x120>
 8007ac4:	2146b03a 	or	r3,r4,r5
 8007ac8:	18c000cc 	andi	r3,r3,3
 8007acc:	1800421e 	bne	r3,zero,8007bd8 <memcpy+0x128>
 8007ad0:	343ffc04 	addi	r16,r6,-16
 8007ad4:	8020d13a 	srli	r16,r16,4
 8007ad8:	28c00104 	addi	r3,r5,4
 8007adc:	23400104 	addi	r13,r4,4
 8007ae0:	801e913a 	slli	r15,r16,4
 8007ae4:	2b000204 	addi	r12,r5,8
 8007ae8:	22c00204 	addi	r11,r4,8
 8007aec:	7bc00504 	addi	r15,r15,20
 8007af0:	2a800304 	addi	r10,r5,12
 8007af4:	22400304 	addi	r9,r4,12
 8007af8:	2bdf883a 	add	r15,r5,r15
 8007afc:	2811883a 	mov	r8,r5
 8007b00:	200f883a 	mov	r7,r4
 8007b04:	41000017 	ldw	r4,0(r8)
 8007b08:	39c00404 	addi	r7,r7,16
 8007b0c:	18c00404 	addi	r3,r3,16
 8007b10:	393ffc15 	stw	r4,-16(r7)
 8007b14:	1bbffc17 	ldw	r14,-16(r3)
 8007b18:	6b400404 	addi	r13,r13,16
 8007b1c:	5ac00404 	addi	r11,r11,16
 8007b20:	6bbffc15 	stw	r14,-16(r13)
 8007b24:	63800017 	ldw	r14,0(r12)
 8007b28:	4a400404 	addi	r9,r9,16
 8007b2c:	42000404 	addi	r8,r8,16
 8007b30:	5bbffc15 	stw	r14,-16(r11)
 8007b34:	53800017 	ldw	r14,0(r10)
 8007b38:	63000404 	addi	r12,r12,16
 8007b3c:	52800404 	addi	r10,r10,16
 8007b40:	4bbffc15 	stw	r14,-16(r9)
 8007b44:	1bffef1e 	bne	r3,r15,8007b04 <__alt_data_end+0xfc007b04>
 8007b48:	81c00044 	addi	r7,r16,1
 8007b4c:	380e913a 	slli	r7,r7,4
 8007b50:	310003cc 	andi	r4,r6,15
 8007b54:	02c000c4 	movi	r11,3
 8007b58:	11c7883a 	add	r3,r2,r7
 8007b5c:	29cb883a 	add	r5,r5,r7
 8007b60:	59001f2e 	bgeu	r11,r4,8007be0 <memcpy+0x130>
 8007b64:	1813883a 	mov	r9,r3
 8007b68:	2811883a 	mov	r8,r5
 8007b6c:	200f883a 	mov	r7,r4
 8007b70:	42800017 	ldw	r10,0(r8)
 8007b74:	4a400104 	addi	r9,r9,4
 8007b78:	39ffff04 	addi	r7,r7,-4
 8007b7c:	4abfff15 	stw	r10,-4(r9)
 8007b80:	42000104 	addi	r8,r8,4
 8007b84:	59fffa36 	bltu	r11,r7,8007b70 <__alt_data_end+0xfc007b70>
 8007b88:	213fff04 	addi	r4,r4,-4
 8007b8c:	2008d0ba 	srli	r4,r4,2
 8007b90:	318000cc 	andi	r6,r6,3
 8007b94:	21000044 	addi	r4,r4,1
 8007b98:	2109883a 	add	r4,r4,r4
 8007b9c:	2109883a 	add	r4,r4,r4
 8007ba0:	1907883a 	add	r3,r3,r4
 8007ba4:	290b883a 	add	r5,r5,r4
 8007ba8:	30000626 	beq	r6,zero,8007bc4 <memcpy+0x114>
 8007bac:	198d883a 	add	r6,r3,r6
 8007bb0:	29c00003 	ldbu	r7,0(r5)
 8007bb4:	18c00044 	addi	r3,r3,1
 8007bb8:	29400044 	addi	r5,r5,1
 8007bbc:	19ffffc5 	stb	r7,-1(r3)
 8007bc0:	19bffb1e 	bne	r3,r6,8007bb0 <__alt_data_end+0xfc007bb0>
 8007bc4:	dc000017 	ldw	r16,0(sp)
 8007bc8:	dec00104 	addi	sp,sp,4
 8007bcc:	f800283a 	ret
 8007bd0:	2007883a 	mov	r3,r4
 8007bd4:	003ff406 	br	8007ba8 <__alt_data_end+0xfc007ba8>
 8007bd8:	2007883a 	mov	r3,r4
 8007bdc:	003ff306 	br	8007bac <__alt_data_end+0xfc007bac>
 8007be0:	200d883a 	mov	r6,r4
 8007be4:	003ff006 	br	8007ba8 <__alt_data_end+0xfc007ba8>

08007be8 <memmove>:
 8007be8:	2005883a 	mov	r2,r4
 8007bec:	29000b2e 	bgeu	r5,r4,8007c1c <memmove+0x34>
 8007bf0:	298f883a 	add	r7,r5,r6
 8007bf4:	21c0092e 	bgeu	r4,r7,8007c1c <memmove+0x34>
 8007bf8:	2187883a 	add	r3,r4,r6
 8007bfc:	198bc83a 	sub	r5,r3,r6
 8007c00:	30004b26 	beq	r6,zero,8007d30 <memmove+0x148>
 8007c04:	39ffffc4 	addi	r7,r7,-1
 8007c08:	39000003 	ldbu	r4,0(r7)
 8007c0c:	18ffffc4 	addi	r3,r3,-1
 8007c10:	19000005 	stb	r4,0(r3)
 8007c14:	197ffb1e 	bne	r3,r5,8007c04 <__alt_data_end+0xfc007c04>
 8007c18:	f800283a 	ret
 8007c1c:	00c003c4 	movi	r3,15
 8007c20:	1980412e 	bgeu	r3,r6,8007d28 <memmove+0x140>
 8007c24:	1146b03a 	or	r3,r2,r5
 8007c28:	18c000cc 	andi	r3,r3,3
 8007c2c:	1800411e 	bne	r3,zero,8007d34 <memmove+0x14c>
 8007c30:	33fffc04 	addi	r15,r6,-16
 8007c34:	781ed13a 	srli	r15,r15,4
 8007c38:	28c00104 	addi	r3,r5,4
 8007c3c:	13400104 	addi	r13,r2,4
 8007c40:	781c913a 	slli	r14,r15,4
 8007c44:	2b000204 	addi	r12,r5,8
 8007c48:	12c00204 	addi	r11,r2,8
 8007c4c:	73800504 	addi	r14,r14,20
 8007c50:	2a800304 	addi	r10,r5,12
 8007c54:	12400304 	addi	r9,r2,12
 8007c58:	2b9d883a 	add	r14,r5,r14
 8007c5c:	2811883a 	mov	r8,r5
 8007c60:	100f883a 	mov	r7,r2
 8007c64:	41000017 	ldw	r4,0(r8)
 8007c68:	39c00404 	addi	r7,r7,16
 8007c6c:	18c00404 	addi	r3,r3,16
 8007c70:	393ffc15 	stw	r4,-16(r7)
 8007c74:	193ffc17 	ldw	r4,-16(r3)
 8007c78:	6b400404 	addi	r13,r13,16
 8007c7c:	5ac00404 	addi	r11,r11,16
 8007c80:	693ffc15 	stw	r4,-16(r13)
 8007c84:	61000017 	ldw	r4,0(r12)
 8007c88:	4a400404 	addi	r9,r9,16
 8007c8c:	42000404 	addi	r8,r8,16
 8007c90:	593ffc15 	stw	r4,-16(r11)
 8007c94:	51000017 	ldw	r4,0(r10)
 8007c98:	63000404 	addi	r12,r12,16
 8007c9c:	52800404 	addi	r10,r10,16
 8007ca0:	493ffc15 	stw	r4,-16(r9)
 8007ca4:	1bbfef1e 	bne	r3,r14,8007c64 <__alt_data_end+0xfc007c64>
 8007ca8:	79000044 	addi	r4,r15,1
 8007cac:	2008913a 	slli	r4,r4,4
 8007cb0:	328003cc 	andi	r10,r6,15
 8007cb4:	02c000c4 	movi	r11,3
 8007cb8:	1107883a 	add	r3,r2,r4
 8007cbc:	290b883a 	add	r5,r5,r4
 8007cc0:	5a801e2e 	bgeu	r11,r10,8007d3c <memmove+0x154>
 8007cc4:	1813883a 	mov	r9,r3
 8007cc8:	2811883a 	mov	r8,r5
 8007ccc:	500f883a 	mov	r7,r10
 8007cd0:	41000017 	ldw	r4,0(r8)
 8007cd4:	4a400104 	addi	r9,r9,4
 8007cd8:	39ffff04 	addi	r7,r7,-4
 8007cdc:	493fff15 	stw	r4,-4(r9)
 8007ce0:	42000104 	addi	r8,r8,4
 8007ce4:	59fffa36 	bltu	r11,r7,8007cd0 <__alt_data_end+0xfc007cd0>
 8007ce8:	513fff04 	addi	r4,r10,-4
 8007cec:	2008d0ba 	srli	r4,r4,2
 8007cf0:	318000cc 	andi	r6,r6,3
 8007cf4:	21000044 	addi	r4,r4,1
 8007cf8:	2109883a 	add	r4,r4,r4
 8007cfc:	2109883a 	add	r4,r4,r4
 8007d00:	1907883a 	add	r3,r3,r4
 8007d04:	290b883a 	add	r5,r5,r4
 8007d08:	30000926 	beq	r6,zero,8007d30 <memmove+0x148>
 8007d0c:	198d883a 	add	r6,r3,r6
 8007d10:	29c00003 	ldbu	r7,0(r5)
 8007d14:	18c00044 	addi	r3,r3,1
 8007d18:	29400044 	addi	r5,r5,1
 8007d1c:	19ffffc5 	stb	r7,-1(r3)
 8007d20:	19bffb1e 	bne	r3,r6,8007d10 <__alt_data_end+0xfc007d10>
 8007d24:	f800283a 	ret
 8007d28:	1007883a 	mov	r3,r2
 8007d2c:	003ff606 	br	8007d08 <__alt_data_end+0xfc007d08>
 8007d30:	f800283a 	ret
 8007d34:	1007883a 	mov	r3,r2
 8007d38:	003ff406 	br	8007d0c <__alt_data_end+0xfc007d0c>
 8007d3c:	500d883a 	mov	r6,r10
 8007d40:	003ff106 	br	8007d08 <__alt_data_end+0xfc007d08>

08007d44 <memset>:
 8007d44:	20c000cc 	andi	r3,r4,3
 8007d48:	2005883a 	mov	r2,r4
 8007d4c:	18004326 	beq	r3,zero,8007e5c <memset+0x118>
 8007d50:	31ffffc4 	addi	r7,r6,-1
 8007d54:	30004026 	beq	r6,zero,8007e58 <memset+0x114>
 8007d58:	2813883a 	mov	r9,r5
 8007d5c:	200d883a 	mov	r6,r4
 8007d60:	2007883a 	mov	r3,r4
 8007d64:	00000406 	br	8007d78 <memset+0x34>
 8007d68:	3a3fffc4 	addi	r8,r7,-1
 8007d6c:	31800044 	addi	r6,r6,1
 8007d70:	38003926 	beq	r7,zero,8007e58 <memset+0x114>
 8007d74:	400f883a 	mov	r7,r8
 8007d78:	18c00044 	addi	r3,r3,1
 8007d7c:	32400005 	stb	r9,0(r6)
 8007d80:	1a0000cc 	andi	r8,r3,3
 8007d84:	403ff81e 	bne	r8,zero,8007d68 <__alt_data_end+0xfc007d68>
 8007d88:	010000c4 	movi	r4,3
 8007d8c:	21c02d2e 	bgeu	r4,r7,8007e44 <memset+0x100>
 8007d90:	29803fcc 	andi	r6,r5,255
 8007d94:	3008923a 	slli	r4,r6,8
 8007d98:	218cb03a 	or	r6,r4,r6
 8007d9c:	3008943a 	slli	r4,r6,16
 8007da0:	218cb03a 	or	r6,r4,r6
 8007da4:	010003c4 	movi	r4,15
 8007da8:	21c0182e 	bgeu	r4,r7,8007e0c <memset+0xc8>
 8007dac:	3b3ffc04 	addi	r12,r7,-16
 8007db0:	6018d13a 	srli	r12,r12,4
 8007db4:	1a000104 	addi	r8,r3,4
 8007db8:	1ac00204 	addi	r11,r3,8
 8007dbc:	6008913a 	slli	r4,r12,4
 8007dc0:	1a800304 	addi	r10,r3,12
 8007dc4:	1813883a 	mov	r9,r3
 8007dc8:	21000504 	addi	r4,r4,20
 8007dcc:	1909883a 	add	r4,r3,r4
 8007dd0:	49800015 	stw	r6,0(r9)
 8007dd4:	41800015 	stw	r6,0(r8)
 8007dd8:	59800015 	stw	r6,0(r11)
 8007ddc:	51800015 	stw	r6,0(r10)
 8007de0:	42000404 	addi	r8,r8,16
 8007de4:	4a400404 	addi	r9,r9,16
 8007de8:	5ac00404 	addi	r11,r11,16
 8007dec:	52800404 	addi	r10,r10,16
 8007df0:	413ff71e 	bne	r8,r4,8007dd0 <__alt_data_end+0xfc007dd0>
 8007df4:	63000044 	addi	r12,r12,1
 8007df8:	6018913a 	slli	r12,r12,4
 8007dfc:	39c003cc 	andi	r7,r7,15
 8007e00:	010000c4 	movi	r4,3
 8007e04:	1b07883a 	add	r3,r3,r12
 8007e08:	21c00e2e 	bgeu	r4,r7,8007e44 <memset+0x100>
 8007e0c:	1813883a 	mov	r9,r3
 8007e10:	3811883a 	mov	r8,r7
 8007e14:	010000c4 	movi	r4,3
 8007e18:	49800015 	stw	r6,0(r9)
 8007e1c:	423fff04 	addi	r8,r8,-4
 8007e20:	4a400104 	addi	r9,r9,4
 8007e24:	223ffc36 	bltu	r4,r8,8007e18 <__alt_data_end+0xfc007e18>
 8007e28:	393fff04 	addi	r4,r7,-4
 8007e2c:	2008d0ba 	srli	r4,r4,2
 8007e30:	39c000cc 	andi	r7,r7,3
 8007e34:	21000044 	addi	r4,r4,1
 8007e38:	2109883a 	add	r4,r4,r4
 8007e3c:	2109883a 	add	r4,r4,r4
 8007e40:	1907883a 	add	r3,r3,r4
 8007e44:	38000426 	beq	r7,zero,8007e58 <memset+0x114>
 8007e48:	19cf883a 	add	r7,r3,r7
 8007e4c:	19400005 	stb	r5,0(r3)
 8007e50:	18c00044 	addi	r3,r3,1
 8007e54:	19fffd1e 	bne	r3,r7,8007e4c <__alt_data_end+0xfc007e4c>
 8007e58:	f800283a 	ret
 8007e5c:	2007883a 	mov	r3,r4
 8007e60:	300f883a 	mov	r7,r6
 8007e64:	003fc806 	br	8007d88 <__alt_data_end+0xfc007d88>

08007e68 <_Balloc>:
 8007e68:	20801317 	ldw	r2,76(r4)
 8007e6c:	defffc04 	addi	sp,sp,-16
 8007e70:	dc400115 	stw	r17,4(sp)
 8007e74:	dc000015 	stw	r16,0(sp)
 8007e78:	dfc00315 	stw	ra,12(sp)
 8007e7c:	dc800215 	stw	r18,8(sp)
 8007e80:	2023883a 	mov	r17,r4
 8007e84:	2821883a 	mov	r16,r5
 8007e88:	10000f26 	beq	r2,zero,8007ec8 <_Balloc+0x60>
 8007e8c:	8407883a 	add	r3,r16,r16
 8007e90:	18c7883a 	add	r3,r3,r3
 8007e94:	10c7883a 	add	r3,r2,r3
 8007e98:	18800017 	ldw	r2,0(r3)
 8007e9c:	10001126 	beq	r2,zero,8007ee4 <_Balloc+0x7c>
 8007ea0:	11000017 	ldw	r4,0(r2)
 8007ea4:	19000015 	stw	r4,0(r3)
 8007ea8:	10000415 	stw	zero,16(r2)
 8007eac:	10000315 	stw	zero,12(r2)
 8007eb0:	dfc00317 	ldw	ra,12(sp)
 8007eb4:	dc800217 	ldw	r18,8(sp)
 8007eb8:	dc400117 	ldw	r17,4(sp)
 8007ebc:	dc000017 	ldw	r16,0(sp)
 8007ec0:	dec00404 	addi	sp,sp,16
 8007ec4:	f800283a 	ret
 8007ec8:	01400104 	movi	r5,4
 8007ecc:	01800844 	movi	r6,33
 8007ed0:	800ad040 	call	800ad04 <_calloc_r>
 8007ed4:	88801315 	stw	r2,76(r17)
 8007ed8:	103fec1e 	bne	r2,zero,8007e8c <__alt_data_end+0xfc007e8c>
 8007edc:	0005883a 	mov	r2,zero
 8007ee0:	003ff306 	br	8007eb0 <__alt_data_end+0xfc007eb0>
 8007ee4:	01400044 	movi	r5,1
 8007ee8:	2c24983a 	sll	r18,r5,r16
 8007eec:	8809883a 	mov	r4,r17
 8007ef0:	91800144 	addi	r6,r18,5
 8007ef4:	318d883a 	add	r6,r6,r6
 8007ef8:	318d883a 	add	r6,r6,r6
 8007efc:	800ad040 	call	800ad04 <_calloc_r>
 8007f00:	103ff626 	beq	r2,zero,8007edc <__alt_data_end+0xfc007edc>
 8007f04:	14000115 	stw	r16,4(r2)
 8007f08:	14800215 	stw	r18,8(r2)
 8007f0c:	003fe606 	br	8007ea8 <__alt_data_end+0xfc007ea8>

08007f10 <_Bfree>:
 8007f10:	28000826 	beq	r5,zero,8007f34 <_Bfree+0x24>
 8007f14:	28c00117 	ldw	r3,4(r5)
 8007f18:	20801317 	ldw	r2,76(r4)
 8007f1c:	18c7883a 	add	r3,r3,r3
 8007f20:	18c7883a 	add	r3,r3,r3
 8007f24:	10c5883a 	add	r2,r2,r3
 8007f28:	10c00017 	ldw	r3,0(r2)
 8007f2c:	28c00015 	stw	r3,0(r5)
 8007f30:	11400015 	stw	r5,0(r2)
 8007f34:	f800283a 	ret

08007f38 <__multadd>:
 8007f38:	defff704 	addi	sp,sp,-36
 8007f3c:	dc800215 	stw	r18,8(sp)
 8007f40:	2c800417 	ldw	r18,16(r5)
 8007f44:	ddc00715 	stw	r23,28(sp)
 8007f48:	dd800615 	stw	r22,24(sp)
 8007f4c:	dd000415 	stw	r20,16(sp)
 8007f50:	dcc00315 	stw	r19,12(sp)
 8007f54:	dc400115 	stw	r17,4(sp)
 8007f58:	dc000015 	stw	r16,0(sp)
 8007f5c:	dfc00815 	stw	ra,32(sp)
 8007f60:	dd400515 	stw	r21,20(sp)
 8007f64:	2827883a 	mov	r19,r5
 8007f68:	2029883a 	mov	r20,r4
 8007f6c:	3023883a 	mov	r17,r6
 8007f70:	3821883a 	mov	r16,r7
 8007f74:	2d800504 	addi	r22,r5,20
 8007f78:	002f883a 	mov	r23,zero
 8007f7c:	b5400017 	ldw	r21,0(r22)
 8007f80:	880b883a 	mov	r5,r17
 8007f84:	bdc00044 	addi	r23,r23,1
 8007f88:	a93fffcc 	andi	r4,r21,65535
 8007f8c:	800c3280 	call	800c328 <__mulsi3>
 8007f90:	1421883a 	add	r16,r2,r16
 8007f94:	a808d43a 	srli	r4,r21,16
 8007f98:	802ad43a 	srli	r21,r16,16
 8007f9c:	880b883a 	mov	r5,r17
 8007fa0:	800c3280 	call	800c328 <__mulsi3>
 8007fa4:	a88f883a 	add	r7,r21,r2
 8007fa8:	3804943a 	slli	r2,r7,16
 8007fac:	80ffffcc 	andi	r3,r16,65535
 8007fb0:	b5800104 	addi	r22,r22,4
 8007fb4:	10c7883a 	add	r3,r2,r3
 8007fb8:	b0ffff15 	stw	r3,-4(r22)
 8007fbc:	3820d43a 	srli	r16,r7,16
 8007fc0:	bcbfee16 	blt	r23,r18,8007f7c <__alt_data_end+0xfc007f7c>
 8007fc4:	80000926 	beq	r16,zero,8007fec <__multadd+0xb4>
 8007fc8:	98800217 	ldw	r2,8(r19)
 8007fcc:	9080130e 	bge	r18,r2,800801c <__multadd+0xe4>
 8007fd0:	90800144 	addi	r2,r18,5
 8007fd4:	1085883a 	add	r2,r2,r2
 8007fd8:	1085883a 	add	r2,r2,r2
 8007fdc:	9885883a 	add	r2,r19,r2
 8007fe0:	14000015 	stw	r16,0(r2)
 8007fe4:	94800044 	addi	r18,r18,1
 8007fe8:	9c800415 	stw	r18,16(r19)
 8007fec:	9805883a 	mov	r2,r19
 8007ff0:	dfc00817 	ldw	ra,32(sp)
 8007ff4:	ddc00717 	ldw	r23,28(sp)
 8007ff8:	dd800617 	ldw	r22,24(sp)
 8007ffc:	dd400517 	ldw	r21,20(sp)
 8008000:	dd000417 	ldw	r20,16(sp)
 8008004:	dcc00317 	ldw	r19,12(sp)
 8008008:	dc800217 	ldw	r18,8(sp)
 800800c:	dc400117 	ldw	r17,4(sp)
 8008010:	dc000017 	ldw	r16,0(sp)
 8008014:	dec00904 	addi	sp,sp,36
 8008018:	f800283a 	ret
 800801c:	99400117 	ldw	r5,4(r19)
 8008020:	a009883a 	mov	r4,r20
 8008024:	29400044 	addi	r5,r5,1
 8008028:	8007e680 	call	8007e68 <_Balloc>
 800802c:	99800417 	ldw	r6,16(r19)
 8008030:	99400304 	addi	r5,r19,12
 8008034:	11000304 	addi	r4,r2,12
 8008038:	31800084 	addi	r6,r6,2
 800803c:	318d883a 	add	r6,r6,r6
 8008040:	318d883a 	add	r6,r6,r6
 8008044:	1023883a 	mov	r17,r2
 8008048:	8007ab00 	call	8007ab0 <memcpy>
 800804c:	99000117 	ldw	r4,4(r19)
 8008050:	a0c01317 	ldw	r3,76(r20)
 8008054:	2109883a 	add	r4,r4,r4
 8008058:	2109883a 	add	r4,r4,r4
 800805c:	1907883a 	add	r3,r3,r4
 8008060:	18800017 	ldw	r2,0(r3)
 8008064:	98800015 	stw	r2,0(r19)
 8008068:	1cc00015 	stw	r19,0(r3)
 800806c:	8827883a 	mov	r19,r17
 8008070:	003fd706 	br	8007fd0 <__alt_data_end+0xfc007fd0>

08008074 <__s2b>:
 8008074:	defff904 	addi	sp,sp,-28
 8008078:	dc400115 	stw	r17,4(sp)
 800807c:	dc000015 	stw	r16,0(sp)
 8008080:	2023883a 	mov	r17,r4
 8008084:	2821883a 	mov	r16,r5
 8008088:	39000204 	addi	r4,r7,8
 800808c:	01400244 	movi	r5,9
 8008090:	dcc00315 	stw	r19,12(sp)
 8008094:	dc800215 	stw	r18,8(sp)
 8008098:	dfc00615 	stw	ra,24(sp)
 800809c:	dd400515 	stw	r21,20(sp)
 80080a0:	dd000415 	stw	r20,16(sp)
 80080a4:	3825883a 	mov	r18,r7
 80080a8:	3027883a 	mov	r19,r6
 80080ac:	800c2680 	call	800c268 <__divsi3>
 80080b0:	00c00044 	movi	r3,1
 80080b4:	000b883a 	mov	r5,zero
 80080b8:	1880030e 	bge	r3,r2,80080c8 <__s2b+0x54>
 80080bc:	18c7883a 	add	r3,r3,r3
 80080c0:	29400044 	addi	r5,r5,1
 80080c4:	18bffd16 	blt	r3,r2,80080bc <__alt_data_end+0xfc0080bc>
 80080c8:	8809883a 	mov	r4,r17
 80080cc:	8007e680 	call	8007e68 <_Balloc>
 80080d0:	d8c00717 	ldw	r3,28(sp)
 80080d4:	10c00515 	stw	r3,20(r2)
 80080d8:	00c00044 	movi	r3,1
 80080dc:	10c00415 	stw	r3,16(r2)
 80080e0:	00c00244 	movi	r3,9
 80080e4:	1cc0210e 	bge	r3,r19,800816c <__s2b+0xf8>
 80080e8:	80eb883a 	add	r21,r16,r3
 80080ec:	a829883a 	mov	r20,r21
 80080f0:	84e1883a 	add	r16,r16,r19
 80080f4:	a1c00007 	ldb	r7,0(r20)
 80080f8:	8809883a 	mov	r4,r17
 80080fc:	a5000044 	addi	r20,r20,1
 8008100:	100b883a 	mov	r5,r2
 8008104:	01800284 	movi	r6,10
 8008108:	39fff404 	addi	r7,r7,-48
 800810c:	8007f380 	call	8007f38 <__multadd>
 8008110:	a43ff81e 	bne	r20,r16,80080f4 <__alt_data_end+0xfc0080f4>
 8008114:	ace1883a 	add	r16,r21,r19
 8008118:	843ffe04 	addi	r16,r16,-8
 800811c:	9c800a0e 	bge	r19,r18,8008148 <__s2b+0xd4>
 8008120:	94e5c83a 	sub	r18,r18,r19
 8008124:	84a5883a 	add	r18,r16,r18
 8008128:	81c00007 	ldb	r7,0(r16)
 800812c:	8809883a 	mov	r4,r17
 8008130:	84000044 	addi	r16,r16,1
 8008134:	100b883a 	mov	r5,r2
 8008138:	01800284 	movi	r6,10
 800813c:	39fff404 	addi	r7,r7,-48
 8008140:	8007f380 	call	8007f38 <__multadd>
 8008144:	84bff81e 	bne	r16,r18,8008128 <__alt_data_end+0xfc008128>
 8008148:	dfc00617 	ldw	ra,24(sp)
 800814c:	dd400517 	ldw	r21,20(sp)
 8008150:	dd000417 	ldw	r20,16(sp)
 8008154:	dcc00317 	ldw	r19,12(sp)
 8008158:	dc800217 	ldw	r18,8(sp)
 800815c:	dc400117 	ldw	r17,4(sp)
 8008160:	dc000017 	ldw	r16,0(sp)
 8008164:	dec00704 	addi	sp,sp,28
 8008168:	f800283a 	ret
 800816c:	84000284 	addi	r16,r16,10
 8008170:	1827883a 	mov	r19,r3
 8008174:	003fe906 	br	800811c <__alt_data_end+0xfc00811c>

08008178 <__hi0bits>:
 8008178:	20bfffec 	andhi	r2,r4,65535
 800817c:	1000141e 	bne	r2,zero,80081d0 <__hi0bits+0x58>
 8008180:	2008943a 	slli	r4,r4,16
 8008184:	00800404 	movi	r2,16
 8008188:	20ffc02c 	andhi	r3,r4,65280
 800818c:	1800021e 	bne	r3,zero,8008198 <__hi0bits+0x20>
 8008190:	2008923a 	slli	r4,r4,8
 8008194:	10800204 	addi	r2,r2,8
 8008198:	20fc002c 	andhi	r3,r4,61440
 800819c:	1800021e 	bne	r3,zero,80081a8 <__hi0bits+0x30>
 80081a0:	2008913a 	slli	r4,r4,4
 80081a4:	10800104 	addi	r2,r2,4
 80081a8:	20f0002c 	andhi	r3,r4,49152
 80081ac:	1800031e 	bne	r3,zero,80081bc <__hi0bits+0x44>
 80081b0:	2109883a 	add	r4,r4,r4
 80081b4:	10800084 	addi	r2,r2,2
 80081b8:	2109883a 	add	r4,r4,r4
 80081bc:	20000316 	blt	r4,zero,80081cc <__hi0bits+0x54>
 80081c0:	2110002c 	andhi	r4,r4,16384
 80081c4:	2000041e 	bne	r4,zero,80081d8 <__hi0bits+0x60>
 80081c8:	00800804 	movi	r2,32
 80081cc:	f800283a 	ret
 80081d0:	0005883a 	mov	r2,zero
 80081d4:	003fec06 	br	8008188 <__alt_data_end+0xfc008188>
 80081d8:	10800044 	addi	r2,r2,1
 80081dc:	f800283a 	ret

080081e0 <__lo0bits>:
 80081e0:	20c00017 	ldw	r3,0(r4)
 80081e4:	188001cc 	andi	r2,r3,7
 80081e8:	10000826 	beq	r2,zero,800820c <__lo0bits+0x2c>
 80081ec:	1880004c 	andi	r2,r3,1
 80081f0:	1000211e 	bne	r2,zero,8008278 <__lo0bits+0x98>
 80081f4:	1880008c 	andi	r2,r3,2
 80081f8:	1000211e 	bne	r2,zero,8008280 <__lo0bits+0xa0>
 80081fc:	1806d0ba 	srli	r3,r3,2
 8008200:	00800084 	movi	r2,2
 8008204:	20c00015 	stw	r3,0(r4)
 8008208:	f800283a 	ret
 800820c:	18bfffcc 	andi	r2,r3,65535
 8008210:	10001326 	beq	r2,zero,8008260 <__lo0bits+0x80>
 8008214:	0005883a 	mov	r2,zero
 8008218:	19403fcc 	andi	r5,r3,255
 800821c:	2800021e 	bne	r5,zero,8008228 <__lo0bits+0x48>
 8008220:	1806d23a 	srli	r3,r3,8
 8008224:	10800204 	addi	r2,r2,8
 8008228:	194003cc 	andi	r5,r3,15
 800822c:	2800021e 	bne	r5,zero,8008238 <__lo0bits+0x58>
 8008230:	1806d13a 	srli	r3,r3,4
 8008234:	10800104 	addi	r2,r2,4
 8008238:	194000cc 	andi	r5,r3,3
 800823c:	2800021e 	bne	r5,zero,8008248 <__lo0bits+0x68>
 8008240:	1806d0ba 	srli	r3,r3,2
 8008244:	10800084 	addi	r2,r2,2
 8008248:	1940004c 	andi	r5,r3,1
 800824c:	2800081e 	bne	r5,zero,8008270 <__lo0bits+0x90>
 8008250:	1806d07a 	srli	r3,r3,1
 8008254:	1800051e 	bne	r3,zero,800826c <__lo0bits+0x8c>
 8008258:	00800804 	movi	r2,32
 800825c:	f800283a 	ret
 8008260:	1806d43a 	srli	r3,r3,16
 8008264:	00800404 	movi	r2,16
 8008268:	003feb06 	br	8008218 <__alt_data_end+0xfc008218>
 800826c:	10800044 	addi	r2,r2,1
 8008270:	20c00015 	stw	r3,0(r4)
 8008274:	f800283a 	ret
 8008278:	0005883a 	mov	r2,zero
 800827c:	f800283a 	ret
 8008280:	1806d07a 	srli	r3,r3,1
 8008284:	00800044 	movi	r2,1
 8008288:	20c00015 	stw	r3,0(r4)
 800828c:	f800283a 	ret

08008290 <__i2b>:
 8008290:	defffd04 	addi	sp,sp,-12
 8008294:	dc000015 	stw	r16,0(sp)
 8008298:	04000044 	movi	r16,1
 800829c:	dc400115 	stw	r17,4(sp)
 80082a0:	2823883a 	mov	r17,r5
 80082a4:	800b883a 	mov	r5,r16
 80082a8:	dfc00215 	stw	ra,8(sp)
 80082ac:	8007e680 	call	8007e68 <_Balloc>
 80082b0:	14400515 	stw	r17,20(r2)
 80082b4:	14000415 	stw	r16,16(r2)
 80082b8:	dfc00217 	ldw	ra,8(sp)
 80082bc:	dc400117 	ldw	r17,4(sp)
 80082c0:	dc000017 	ldw	r16,0(sp)
 80082c4:	dec00304 	addi	sp,sp,12
 80082c8:	f800283a 	ret

080082cc <__multiply>:
 80082cc:	deffef04 	addi	sp,sp,-68
 80082d0:	dc400815 	stw	r17,32(sp)
 80082d4:	dc000715 	stw	r16,28(sp)
 80082d8:	2c400417 	ldw	r17,16(r5)
 80082dc:	34000417 	ldw	r16,16(r6)
 80082e0:	dd800d15 	stw	r22,52(sp)
 80082e4:	dc800915 	stw	r18,36(sp)
 80082e8:	dfc01015 	stw	ra,64(sp)
 80082ec:	df000f15 	stw	fp,60(sp)
 80082f0:	ddc00e15 	stw	r23,56(sp)
 80082f4:	dd400c15 	stw	r21,48(sp)
 80082f8:	dd000b15 	stw	r20,44(sp)
 80082fc:	dcc00a15 	stw	r19,40(sp)
 8008300:	2825883a 	mov	r18,r5
 8008304:	302d883a 	mov	r22,r6
 8008308:	8c009116 	blt	r17,r16,8008550 <__multiply+0x284>
 800830c:	8005883a 	mov	r2,r16
 8008310:	8821883a 	mov	r16,r17
 8008314:	1023883a 	mov	r17,r2
 8008318:	90800217 	ldw	r2,8(r18)
 800831c:	8447883a 	add	r3,r16,r17
 8008320:	d8c00215 	stw	r3,8(sp)
 8008324:	91400117 	ldw	r5,4(r18)
 8008328:	10c0010e 	bge	r2,r3,8008330 <__multiply+0x64>
 800832c:	29400044 	addi	r5,r5,1
 8008330:	8007e680 	call	8007e68 <_Balloc>
 8008334:	d8c00217 	ldw	r3,8(sp)
 8008338:	d8800615 	stw	r2,24(sp)
 800833c:	18eb883a 	add	r21,r3,r3
 8008340:	ad6b883a 	add	r21,r21,r21
 8008344:	10c00504 	addi	r3,r2,20
 8008348:	1d6b883a 	add	r21,r3,r21
 800834c:	d8c00115 	stw	r3,4(sp)
 8008350:	dd400315 	stw	r21,12(sp)
 8008354:	1805883a 	mov	r2,r3
 8008358:	1d40042e 	bgeu	r3,r21,800836c <__multiply+0xa0>
 800835c:	d8c00317 	ldw	r3,12(sp)
 8008360:	10000015 	stw	zero,0(r2)
 8008364:	10800104 	addi	r2,r2,4
 8008368:	10fffc36 	bltu	r2,r3,800835c <__alt_data_end+0xfc00835c>
 800836c:	8c63883a 	add	r17,r17,r17
 8008370:	b5800504 	addi	r22,r22,20
 8008374:	8c63883a 	add	r17,r17,r17
 8008378:	94800504 	addi	r18,r18,20
 800837c:	8421883a 	add	r16,r16,r16
 8008380:	b463883a 	add	r17,r22,r17
 8008384:	8421883a 	add	r16,r16,r16
 8008388:	dd800015 	stw	r22,0(sp)
 800838c:	dc800415 	stw	r18,16(sp)
 8008390:	dc400515 	stw	r17,20(sp)
 8008394:	9429883a 	add	r20,r18,r16
 8008398:	b4404f2e 	bgeu	r22,r17,80084d8 <__multiply+0x20c>
 800839c:	d8c00017 	ldw	r3,0(sp)
 80083a0:	1c800017 	ldw	r18,0(r3)
 80083a4:	943fffcc 	andi	r16,r18,65535
 80083a8:	80001e26 	beq	r16,zero,8008424 <__multiply+0x158>
 80083ac:	dd800117 	ldw	r22,4(sp)
 80083b0:	dd400417 	ldw	r21,16(sp)
 80083b4:	0025883a 	mov	r18,zero
 80083b8:	adc00017 	ldw	r23,0(r21)
 80083bc:	b4c00017 	ldw	r19,0(r22)
 80083c0:	800b883a 	mov	r5,r16
 80083c4:	b93fffcc 	andi	r4,r23,65535
 80083c8:	800c3280 	call	800c328 <__mulsi3>
 80083cc:	9c7fffcc 	andi	r17,r19,65535
 80083d0:	8885883a 	add	r2,r17,r2
 80083d4:	b808d43a 	srli	r4,r23,16
 80083d8:	14a3883a 	add	r17,r2,r18
 80083dc:	9826d43a 	srli	r19,r19,16
 80083e0:	8824d43a 	srli	r18,r17,16
 80083e4:	800b883a 	mov	r5,r16
 80083e8:	800c3280 	call	800c328 <__mulsi3>
 80083ec:	9885883a 	add	r2,r19,r2
 80083f0:	14a7883a 	add	r19,r2,r18
 80083f4:	88ffffcc 	andi	r3,r17,65535
 80083f8:	9822943a 	slli	r17,r19,16
 80083fc:	ad400104 	addi	r21,r21,4
 8008400:	b005883a 	mov	r2,r22
 8008404:	88c6b03a 	or	r3,r17,r3
 8008408:	b0c00015 	stw	r3,0(r22)
 800840c:	9824d43a 	srli	r18,r19,16
 8008410:	b5800104 	addi	r22,r22,4
 8008414:	ad3fe836 	bltu	r21,r20,80083b8 <__alt_data_end+0xfc0083b8>
 8008418:	d8c00017 	ldw	r3,0(sp)
 800841c:	14800115 	stw	r18,4(r2)
 8008420:	1c800017 	ldw	r18,0(r3)
 8008424:	9024d43a 	srli	r18,r18,16
 8008428:	90002226 	beq	r18,zero,80084b4 <__multiply+0x1e8>
 800842c:	d8c00117 	ldw	r3,4(sp)
 8008430:	dd800417 	ldw	r22,16(sp)
 8008434:	002f883a 	mov	r23,zero
 8008438:	1f000017 	ldw	fp,0(r3)
 800843c:	1823883a 	mov	r17,r3
 8008440:	182b883a 	mov	r21,r3
 8008444:	e021883a 	mov	r16,fp
 8008448:	00000106 	br	8008450 <__multiply+0x184>
 800844c:	982b883a 	mov	r21,r19
 8008450:	b100000b 	ldhu	r4,0(r22)
 8008454:	8020d43a 	srli	r16,r16,16
 8008458:	900b883a 	mov	r5,r18
 800845c:	800c3280 	call	800c328 <__mulsi3>
 8008460:	1405883a 	add	r2,r2,r16
 8008464:	15ef883a 	add	r23,r2,r23
 8008468:	b804943a 	slli	r2,r23,16
 800846c:	e0ffffcc 	andi	r3,fp,65535
 8008470:	8c400104 	addi	r17,r17,4
 8008474:	10c6b03a 	or	r3,r2,r3
 8008478:	88ffff15 	stw	r3,-4(r17)
 800847c:	b5800104 	addi	r22,r22,4
 8008480:	b13fff17 	ldw	r4,-4(r22)
 8008484:	acc00104 	addi	r19,r21,4
 8008488:	900b883a 	mov	r5,r18
 800848c:	2008d43a 	srli	r4,r4,16
 8008490:	9c000017 	ldw	r16,0(r19)
 8008494:	800c3280 	call	800c328 <__mulsi3>
 8008498:	b806d43a 	srli	r3,r23,16
 800849c:	813fffcc 	andi	r4,r16,65535
 80084a0:	1105883a 	add	r2,r2,r4
 80084a4:	10f9883a 	add	fp,r2,r3
 80084a8:	e02ed43a 	srli	r23,fp,16
 80084ac:	b53fe736 	bltu	r22,r20,800844c <__alt_data_end+0xfc00844c>
 80084b0:	af000115 	stw	fp,4(r21)
 80084b4:	d8c00017 	ldw	r3,0(sp)
 80084b8:	d9000517 	ldw	r4,20(sp)
 80084bc:	18c00104 	addi	r3,r3,4
 80084c0:	d8c00015 	stw	r3,0(sp)
 80084c4:	d8c00117 	ldw	r3,4(sp)
 80084c8:	18c00104 	addi	r3,r3,4
 80084cc:	d8c00115 	stw	r3,4(sp)
 80084d0:	d8c00017 	ldw	r3,0(sp)
 80084d4:	193fb136 	bltu	r3,r4,800839c <__alt_data_end+0xfc00839c>
 80084d8:	d8c00217 	ldw	r3,8(sp)
 80084dc:	00c00c0e 	bge	zero,r3,8008510 <__multiply+0x244>
 80084e0:	d8c00317 	ldw	r3,12(sp)
 80084e4:	18bfff17 	ldw	r2,-4(r3)
 80084e8:	1d7fff04 	addi	r21,r3,-4
 80084ec:	10000326 	beq	r2,zero,80084fc <__multiply+0x230>
 80084f0:	00000706 	br	8008510 <__multiply+0x244>
 80084f4:	a8800017 	ldw	r2,0(r21)
 80084f8:	1000051e 	bne	r2,zero,8008510 <__multiply+0x244>
 80084fc:	d8c00217 	ldw	r3,8(sp)
 8008500:	ad7fff04 	addi	r21,r21,-4
 8008504:	18ffffc4 	addi	r3,r3,-1
 8008508:	d8c00215 	stw	r3,8(sp)
 800850c:	183ff91e 	bne	r3,zero,80084f4 <__alt_data_end+0xfc0084f4>
 8008510:	d8c00617 	ldw	r3,24(sp)
 8008514:	d9000217 	ldw	r4,8(sp)
 8008518:	1805883a 	mov	r2,r3
 800851c:	19000415 	stw	r4,16(r3)
 8008520:	dfc01017 	ldw	ra,64(sp)
 8008524:	df000f17 	ldw	fp,60(sp)
 8008528:	ddc00e17 	ldw	r23,56(sp)
 800852c:	dd800d17 	ldw	r22,52(sp)
 8008530:	dd400c17 	ldw	r21,48(sp)
 8008534:	dd000b17 	ldw	r20,44(sp)
 8008538:	dcc00a17 	ldw	r19,40(sp)
 800853c:	dc800917 	ldw	r18,36(sp)
 8008540:	dc400817 	ldw	r17,32(sp)
 8008544:	dc000717 	ldw	r16,28(sp)
 8008548:	dec01104 	addi	sp,sp,68
 800854c:	f800283a 	ret
 8008550:	3025883a 	mov	r18,r6
 8008554:	282d883a 	mov	r22,r5
 8008558:	003f6f06 	br	8008318 <__alt_data_end+0xfc008318>

0800855c <__pow5mult>:
 800855c:	defffa04 	addi	sp,sp,-24
 8008560:	dcc00315 	stw	r19,12(sp)
 8008564:	dc800215 	stw	r18,8(sp)
 8008568:	dc000015 	stw	r16,0(sp)
 800856c:	dfc00515 	stw	ra,20(sp)
 8008570:	dd000415 	stw	r20,16(sp)
 8008574:	dc400115 	stw	r17,4(sp)
 8008578:	308000cc 	andi	r2,r6,3
 800857c:	3021883a 	mov	r16,r6
 8008580:	2027883a 	mov	r19,r4
 8008584:	2825883a 	mov	r18,r5
 8008588:	10002e1e 	bne	r2,zero,8008644 <__pow5mult+0xe8>
 800858c:	8021d0ba 	srai	r16,r16,2
 8008590:	80001a26 	beq	r16,zero,80085fc <__pow5mult+0xa0>
 8008594:	9c401217 	ldw	r17,72(r19)
 8008598:	8800061e 	bne	r17,zero,80085b4 <__pow5mult+0x58>
 800859c:	00003406 	br	8008670 <__pow5mult+0x114>
 80085a0:	8021d07a 	srai	r16,r16,1
 80085a4:	80001526 	beq	r16,zero,80085fc <__pow5mult+0xa0>
 80085a8:	88800017 	ldw	r2,0(r17)
 80085ac:	10001c26 	beq	r2,zero,8008620 <__pow5mult+0xc4>
 80085b0:	1023883a 	mov	r17,r2
 80085b4:	80c0004c 	andi	r3,r16,1
 80085b8:	183ff926 	beq	r3,zero,80085a0 <__alt_data_end+0xfc0085a0>
 80085bc:	900b883a 	mov	r5,r18
 80085c0:	880d883a 	mov	r6,r17
 80085c4:	9809883a 	mov	r4,r19
 80085c8:	80082cc0 	call	80082cc <__multiply>
 80085cc:	90001b26 	beq	r18,zero,800863c <__pow5mult+0xe0>
 80085d0:	91c00117 	ldw	r7,4(r18)
 80085d4:	98c01317 	ldw	r3,76(r19)
 80085d8:	8021d07a 	srai	r16,r16,1
 80085dc:	39cf883a 	add	r7,r7,r7
 80085e0:	39cf883a 	add	r7,r7,r7
 80085e4:	19c7883a 	add	r3,r3,r7
 80085e8:	19000017 	ldw	r4,0(r3)
 80085ec:	91000015 	stw	r4,0(r18)
 80085f0:	1c800015 	stw	r18,0(r3)
 80085f4:	1025883a 	mov	r18,r2
 80085f8:	803feb1e 	bne	r16,zero,80085a8 <__alt_data_end+0xfc0085a8>
 80085fc:	9005883a 	mov	r2,r18
 8008600:	dfc00517 	ldw	ra,20(sp)
 8008604:	dd000417 	ldw	r20,16(sp)
 8008608:	dcc00317 	ldw	r19,12(sp)
 800860c:	dc800217 	ldw	r18,8(sp)
 8008610:	dc400117 	ldw	r17,4(sp)
 8008614:	dc000017 	ldw	r16,0(sp)
 8008618:	dec00604 	addi	sp,sp,24
 800861c:	f800283a 	ret
 8008620:	9809883a 	mov	r4,r19
 8008624:	880b883a 	mov	r5,r17
 8008628:	880d883a 	mov	r6,r17
 800862c:	80082cc0 	call	80082cc <__multiply>
 8008630:	88800015 	stw	r2,0(r17)
 8008634:	10000015 	stw	zero,0(r2)
 8008638:	003fdd06 	br	80085b0 <__alt_data_end+0xfc0085b0>
 800863c:	1025883a 	mov	r18,r2
 8008640:	003fd706 	br	80085a0 <__alt_data_end+0xfc0085a0>
 8008644:	10bfffc4 	addi	r2,r2,-1
 8008648:	1085883a 	add	r2,r2,r2
 800864c:	00c20074 	movhi	r3,2049
 8008650:	18c6db04 	addi	r3,r3,7020
 8008654:	1085883a 	add	r2,r2,r2
 8008658:	1885883a 	add	r2,r3,r2
 800865c:	11800017 	ldw	r6,0(r2)
 8008660:	000f883a 	mov	r7,zero
 8008664:	8007f380 	call	8007f38 <__multadd>
 8008668:	1025883a 	mov	r18,r2
 800866c:	003fc706 	br	800858c <__alt_data_end+0xfc00858c>
 8008670:	05000044 	movi	r20,1
 8008674:	9809883a 	mov	r4,r19
 8008678:	a00b883a 	mov	r5,r20
 800867c:	8007e680 	call	8007e68 <_Balloc>
 8008680:	1023883a 	mov	r17,r2
 8008684:	00809c44 	movi	r2,625
 8008688:	88800515 	stw	r2,20(r17)
 800868c:	8d000415 	stw	r20,16(r17)
 8008690:	9c401215 	stw	r17,72(r19)
 8008694:	88000015 	stw	zero,0(r17)
 8008698:	003fc606 	br	80085b4 <__alt_data_end+0xfc0085b4>

0800869c <__lshift>:
 800869c:	defff904 	addi	sp,sp,-28
 80086a0:	dd000415 	stw	r20,16(sp)
 80086a4:	dcc00315 	stw	r19,12(sp)
 80086a8:	3029d17a 	srai	r20,r6,5
 80086ac:	2cc00417 	ldw	r19,16(r5)
 80086b0:	28800217 	ldw	r2,8(r5)
 80086b4:	dd400515 	stw	r21,20(sp)
 80086b8:	a4e7883a 	add	r19,r20,r19
 80086bc:	dc800215 	stw	r18,8(sp)
 80086c0:	dc400115 	stw	r17,4(sp)
 80086c4:	dc000015 	stw	r16,0(sp)
 80086c8:	dfc00615 	stw	ra,24(sp)
 80086cc:	9c000044 	addi	r16,r19,1
 80086d0:	2823883a 	mov	r17,r5
 80086d4:	302b883a 	mov	r21,r6
 80086d8:	2025883a 	mov	r18,r4
 80086dc:	29400117 	ldw	r5,4(r5)
 80086e0:	1400030e 	bge	r2,r16,80086f0 <__lshift+0x54>
 80086e4:	1085883a 	add	r2,r2,r2
 80086e8:	29400044 	addi	r5,r5,1
 80086ec:	143ffd16 	blt	r2,r16,80086e4 <__alt_data_end+0xfc0086e4>
 80086f0:	9009883a 	mov	r4,r18
 80086f4:	8007e680 	call	8007e68 <_Balloc>
 80086f8:	11c00504 	addi	r7,r2,20
 80086fc:	0500090e 	bge	zero,r20,8008724 <__lshift+0x88>
 8008700:	3811883a 	mov	r8,r7
 8008704:	0007883a 	mov	r3,zero
 8008708:	40000015 	stw	zero,0(r8)
 800870c:	18c00044 	addi	r3,r3,1
 8008710:	42000104 	addi	r8,r8,4
 8008714:	1d3ffc1e 	bne	r3,r20,8008708 <__alt_data_end+0xfc008708>
 8008718:	18c7883a 	add	r3,r3,r3
 800871c:	18c7883a 	add	r3,r3,r3
 8008720:	38cf883a 	add	r7,r7,r3
 8008724:	89000417 	ldw	r4,16(r17)
 8008728:	88c00504 	addi	r3,r17,20
 800872c:	a98007cc 	andi	r6,r21,31
 8008730:	2109883a 	add	r4,r4,r4
 8008734:	2109883a 	add	r4,r4,r4
 8008738:	1909883a 	add	r4,r3,r4
 800873c:	30002326 	beq	r6,zero,80087cc <__lshift+0x130>
 8008740:	01400804 	movi	r5,32
 8008744:	298bc83a 	sub	r5,r5,r6
 8008748:	0013883a 	mov	r9,zero
 800874c:	1a000017 	ldw	r8,0(r3)
 8008750:	3815883a 	mov	r10,r7
 8008754:	39c00104 	addi	r7,r7,4
 8008758:	4190983a 	sll	r8,r8,r6
 800875c:	18c00104 	addi	r3,r3,4
 8008760:	4a10b03a 	or	r8,r9,r8
 8008764:	3a3fff15 	stw	r8,-4(r7)
 8008768:	1a3fff17 	ldw	r8,-4(r3)
 800876c:	4152d83a 	srl	r9,r8,r5
 8008770:	193ff636 	bltu	r3,r4,800874c <__alt_data_end+0xfc00874c>
 8008774:	52400115 	stw	r9,4(r10)
 8008778:	48000126 	beq	r9,zero,8008780 <__lshift+0xe4>
 800877c:	9c000084 	addi	r16,r19,2
 8008780:	89000117 	ldw	r4,4(r17)
 8008784:	90c01317 	ldw	r3,76(r18)
 8008788:	843fffc4 	addi	r16,r16,-1
 800878c:	2109883a 	add	r4,r4,r4
 8008790:	2109883a 	add	r4,r4,r4
 8008794:	1907883a 	add	r3,r3,r4
 8008798:	19000017 	ldw	r4,0(r3)
 800879c:	14000415 	stw	r16,16(r2)
 80087a0:	89000015 	stw	r4,0(r17)
 80087a4:	1c400015 	stw	r17,0(r3)
 80087a8:	dfc00617 	ldw	ra,24(sp)
 80087ac:	dd400517 	ldw	r21,20(sp)
 80087b0:	dd000417 	ldw	r20,16(sp)
 80087b4:	dcc00317 	ldw	r19,12(sp)
 80087b8:	dc800217 	ldw	r18,8(sp)
 80087bc:	dc400117 	ldw	r17,4(sp)
 80087c0:	dc000017 	ldw	r16,0(sp)
 80087c4:	dec00704 	addi	sp,sp,28
 80087c8:	f800283a 	ret
 80087cc:	19400017 	ldw	r5,0(r3)
 80087d0:	39c00104 	addi	r7,r7,4
 80087d4:	18c00104 	addi	r3,r3,4
 80087d8:	397fff15 	stw	r5,-4(r7)
 80087dc:	193ffb36 	bltu	r3,r4,80087cc <__alt_data_end+0xfc0087cc>
 80087e0:	003fe706 	br	8008780 <__alt_data_end+0xfc008780>

080087e4 <__mcmp>:
 80087e4:	20800417 	ldw	r2,16(r4)
 80087e8:	28c00417 	ldw	r3,16(r5)
 80087ec:	10c5c83a 	sub	r2,r2,r3
 80087f0:	1000111e 	bne	r2,zero,8008838 <__mcmp+0x54>
 80087f4:	18c7883a 	add	r3,r3,r3
 80087f8:	18c7883a 	add	r3,r3,r3
 80087fc:	21000504 	addi	r4,r4,20
 8008800:	29400504 	addi	r5,r5,20
 8008804:	20c5883a 	add	r2,r4,r3
 8008808:	28cb883a 	add	r5,r5,r3
 800880c:	00000106 	br	8008814 <__mcmp+0x30>
 8008810:	20800a2e 	bgeu	r4,r2,800883c <__mcmp+0x58>
 8008814:	10bfff04 	addi	r2,r2,-4
 8008818:	297fff04 	addi	r5,r5,-4
 800881c:	11800017 	ldw	r6,0(r2)
 8008820:	28c00017 	ldw	r3,0(r5)
 8008824:	30fffa26 	beq	r6,r3,8008810 <__alt_data_end+0xfc008810>
 8008828:	30c00236 	bltu	r6,r3,8008834 <__mcmp+0x50>
 800882c:	00800044 	movi	r2,1
 8008830:	f800283a 	ret
 8008834:	00bfffc4 	movi	r2,-1
 8008838:	f800283a 	ret
 800883c:	0005883a 	mov	r2,zero
 8008840:	f800283a 	ret

08008844 <__mdiff>:
 8008844:	defffb04 	addi	sp,sp,-20
 8008848:	dc000015 	stw	r16,0(sp)
 800884c:	2821883a 	mov	r16,r5
 8008850:	dcc00315 	stw	r19,12(sp)
 8008854:	300b883a 	mov	r5,r6
 8008858:	2027883a 	mov	r19,r4
 800885c:	8009883a 	mov	r4,r16
 8008860:	dc800215 	stw	r18,8(sp)
 8008864:	dfc00415 	stw	ra,16(sp)
 8008868:	dc400115 	stw	r17,4(sp)
 800886c:	3025883a 	mov	r18,r6
 8008870:	80087e40 	call	80087e4 <__mcmp>
 8008874:	10005226 	beq	r2,zero,80089c0 <__mdiff+0x17c>
 8008878:	10004c16 	blt	r2,zero,80089ac <__mdiff+0x168>
 800887c:	0023883a 	mov	r17,zero
 8008880:	81400117 	ldw	r5,4(r16)
 8008884:	9809883a 	mov	r4,r19
 8008888:	8007e680 	call	8007e68 <_Balloc>
 800888c:	83400417 	ldw	r13,16(r16)
 8008890:	93800417 	ldw	r14,16(r18)
 8008894:	81000504 	addi	r4,r16,20
 8008898:	6b59883a 	add	r12,r13,r13
 800889c:	739d883a 	add	r14,r14,r14
 80088a0:	6319883a 	add	r12,r12,r12
 80088a4:	91800504 	addi	r6,r18,20
 80088a8:	739d883a 	add	r14,r14,r14
 80088ac:	14400315 	stw	r17,12(r2)
 80088b0:	2319883a 	add	r12,r4,r12
 80088b4:	339d883a 	add	r14,r6,r14
 80088b8:	12400504 	addi	r9,r2,20
 80088bc:	0007883a 	mov	r3,zero
 80088c0:	22000017 	ldw	r8,0(r4)
 80088c4:	32800017 	ldw	r10,0(r6)
 80088c8:	4ac00104 	addi	r11,r9,4
 80088cc:	41ffffcc 	andi	r7,r8,65535
 80088d0:	38c7883a 	add	r3,r7,r3
 80088d4:	51ffffcc 	andi	r7,r10,65535
 80088d8:	19cfc83a 	sub	r7,r3,r7
 80088dc:	4010d43a 	srli	r8,r8,16
 80088e0:	5014d43a 	srli	r10,r10,16
 80088e4:	3807d43a 	srai	r3,r7,16
 80088e8:	39ffffcc 	andi	r7,r7,65535
 80088ec:	4291c83a 	sub	r8,r8,r10
 80088f0:	40c7883a 	add	r3,r8,r3
 80088f4:	1810943a 	slli	r8,r3,16
 80088f8:	31800104 	addi	r6,r6,4
 80088fc:	21000104 	addi	r4,r4,4
 8008900:	41ceb03a 	or	r7,r8,r7
 8008904:	49c00015 	stw	r7,0(r9)
 8008908:	1807d43a 	srai	r3,r3,16
 800890c:	580b883a 	mov	r5,r11
 8008910:	5813883a 	mov	r9,r11
 8008914:	33bfea36 	bltu	r6,r14,80088c0 <__alt_data_end+0xfc0088c0>
 8008918:	2011883a 	mov	r8,r4
 800891c:	2300152e 	bgeu	r4,r12,8008974 <__mdiff+0x130>
 8008920:	21400017 	ldw	r5,0(r4)
 8008924:	4a400104 	addi	r9,r9,4
 8008928:	21000104 	addi	r4,r4,4
 800892c:	29ffffcc 	andi	r7,r5,65535
 8008930:	38c7883a 	add	r3,r7,r3
 8008934:	280ad43a 	srli	r5,r5,16
 8008938:	180dd43a 	srai	r6,r3,16
 800893c:	19ffffcc 	andi	r7,r3,65535
 8008940:	3147883a 	add	r3,r6,r5
 8008944:	180a943a 	slli	r5,r3,16
 8008948:	1807d43a 	srai	r3,r3,16
 800894c:	29ceb03a 	or	r7,r5,r7
 8008950:	49ffff15 	stw	r7,-4(r9)
 8008954:	233ff236 	bltu	r4,r12,8008920 <__alt_data_end+0xfc008920>
 8008958:	0206303a 	nor	r3,zero,r8
 800895c:	1b07883a 	add	r3,r3,r12
 8008960:	1806d0ba 	srli	r3,r3,2
 8008964:	18c00044 	addi	r3,r3,1
 8008968:	18c7883a 	add	r3,r3,r3
 800896c:	18c7883a 	add	r3,r3,r3
 8008970:	58cb883a 	add	r5,r11,r3
 8008974:	28ffff04 	addi	r3,r5,-4
 8008978:	3800041e 	bne	r7,zero,800898c <__mdiff+0x148>
 800897c:	18ffff04 	addi	r3,r3,-4
 8008980:	19000017 	ldw	r4,0(r3)
 8008984:	6b7fffc4 	addi	r13,r13,-1
 8008988:	203ffc26 	beq	r4,zero,800897c <__alt_data_end+0xfc00897c>
 800898c:	13400415 	stw	r13,16(r2)
 8008990:	dfc00417 	ldw	ra,16(sp)
 8008994:	dcc00317 	ldw	r19,12(sp)
 8008998:	dc800217 	ldw	r18,8(sp)
 800899c:	dc400117 	ldw	r17,4(sp)
 80089a0:	dc000017 	ldw	r16,0(sp)
 80089a4:	dec00504 	addi	sp,sp,20
 80089a8:	f800283a 	ret
 80089ac:	8005883a 	mov	r2,r16
 80089b0:	04400044 	movi	r17,1
 80089b4:	9021883a 	mov	r16,r18
 80089b8:	1025883a 	mov	r18,r2
 80089bc:	003fb006 	br	8008880 <__alt_data_end+0xfc008880>
 80089c0:	9809883a 	mov	r4,r19
 80089c4:	000b883a 	mov	r5,zero
 80089c8:	8007e680 	call	8007e68 <_Balloc>
 80089cc:	00c00044 	movi	r3,1
 80089d0:	10c00415 	stw	r3,16(r2)
 80089d4:	10000515 	stw	zero,20(r2)
 80089d8:	003fed06 	br	8008990 <__alt_data_end+0xfc008990>

080089dc <__ulp>:
 80089dc:	295ffc2c 	andhi	r5,r5,32752
 80089e0:	00bf3034 	movhi	r2,64704
 80089e4:	2887883a 	add	r3,r5,r2
 80089e8:	00c0020e 	bge	zero,r3,80089f4 <__ulp+0x18>
 80089ec:	0005883a 	mov	r2,zero
 80089f0:	f800283a 	ret
 80089f4:	00c7c83a 	sub	r3,zero,r3
 80089f8:	180bd53a 	srai	r5,r3,20
 80089fc:	008004c4 	movi	r2,19
 8008a00:	11400a0e 	bge	r2,r5,8008a2c <__ulp+0x50>
 8008a04:	00800c84 	movi	r2,50
 8008a08:	0007883a 	mov	r3,zero
 8008a0c:	11400516 	blt	r2,r5,8008a24 <__ulp+0x48>
 8008a10:	00800cc4 	movi	r2,51
 8008a14:	114bc83a 	sub	r5,r2,r5
 8008a18:	00800044 	movi	r2,1
 8008a1c:	1144983a 	sll	r2,r2,r5
 8008a20:	f800283a 	ret
 8008a24:	00800044 	movi	r2,1
 8008a28:	f800283a 	ret
 8008a2c:	00800234 	movhi	r2,8
 8008a30:	1147d83a 	sra	r3,r2,r5
 8008a34:	0005883a 	mov	r2,zero
 8008a38:	f800283a 	ret

08008a3c <__b2d>:
 8008a3c:	defffa04 	addi	sp,sp,-24
 8008a40:	dc000015 	stw	r16,0(sp)
 8008a44:	24000417 	ldw	r16,16(r4)
 8008a48:	dc400115 	stw	r17,4(sp)
 8008a4c:	24400504 	addi	r17,r4,20
 8008a50:	8421883a 	add	r16,r16,r16
 8008a54:	8421883a 	add	r16,r16,r16
 8008a58:	8c21883a 	add	r16,r17,r16
 8008a5c:	dc800215 	stw	r18,8(sp)
 8008a60:	84bfff17 	ldw	r18,-4(r16)
 8008a64:	dd000415 	stw	r20,16(sp)
 8008a68:	dcc00315 	stw	r19,12(sp)
 8008a6c:	9009883a 	mov	r4,r18
 8008a70:	2829883a 	mov	r20,r5
 8008a74:	dfc00515 	stw	ra,20(sp)
 8008a78:	80081780 	call	8008178 <__hi0bits>
 8008a7c:	00c00804 	movi	r3,32
 8008a80:	1887c83a 	sub	r3,r3,r2
 8008a84:	a0c00015 	stw	r3,0(r20)
 8008a88:	00c00284 	movi	r3,10
 8008a8c:	84ffff04 	addi	r19,r16,-4
 8008a90:	18801216 	blt	r3,r2,8008adc <__b2d+0xa0>
 8008a94:	014002c4 	movi	r5,11
 8008a98:	2889c83a 	sub	r4,r5,r2
 8008a9c:	9106d83a 	srl	r3,r18,r4
 8008aa0:	18cffc34 	orhi	r3,r3,16368
 8008aa4:	8cc0282e 	bgeu	r17,r19,8008b48 <__b2d+0x10c>
 8008aa8:	817ffe17 	ldw	r5,-8(r16)
 8008aac:	290ad83a 	srl	r5,r5,r4
 8008ab0:	10800544 	addi	r2,r2,21
 8008ab4:	9084983a 	sll	r2,r18,r2
 8008ab8:	2884b03a 	or	r2,r5,r2
 8008abc:	dfc00517 	ldw	ra,20(sp)
 8008ac0:	dd000417 	ldw	r20,16(sp)
 8008ac4:	dcc00317 	ldw	r19,12(sp)
 8008ac8:	dc800217 	ldw	r18,8(sp)
 8008acc:	dc400117 	ldw	r17,4(sp)
 8008ad0:	dc000017 	ldw	r16,0(sp)
 8008ad4:	dec00604 	addi	sp,sp,24
 8008ad8:	f800283a 	ret
 8008adc:	113ffd44 	addi	r4,r2,-11
 8008ae0:	8cc00f2e 	bgeu	r17,r19,8008b20 <__b2d+0xe4>
 8008ae4:	81bffe04 	addi	r6,r16,-8
 8008ae8:	817ffe17 	ldw	r5,-8(r16)
 8008aec:	20001326 	beq	r4,zero,8008b3c <__b2d+0x100>
 8008af0:	00c00ac4 	movi	r3,43
 8008af4:	1885c83a 	sub	r2,r3,r2
 8008af8:	2886d83a 	srl	r3,r5,r2
 8008afc:	9124983a 	sll	r18,r18,r4
 8008b00:	90e4b03a 	or	r18,r18,r3
 8008b04:	90cffc34 	orhi	r3,r18,16368
 8008b08:	8980112e 	bgeu	r17,r6,8008b50 <__b2d+0x114>
 8008b0c:	81bffd17 	ldw	r6,-12(r16)
 8008b10:	308cd83a 	srl	r6,r6,r2
 8008b14:	2904983a 	sll	r2,r5,r4
 8008b18:	1184b03a 	or	r2,r2,r6
 8008b1c:	003fe706 	br	8008abc <__alt_data_end+0xfc008abc>
 8008b20:	20000526 	beq	r4,zero,8008b38 <__b2d+0xfc>
 8008b24:	9124983a 	sll	r18,r18,r4
 8008b28:	000d883a 	mov	r6,zero
 8008b2c:	000b883a 	mov	r5,zero
 8008b30:	90cffc34 	orhi	r3,r18,16368
 8008b34:	003ff706 	br	8008b14 <__alt_data_end+0xfc008b14>
 8008b38:	000b883a 	mov	r5,zero
 8008b3c:	90cffc34 	orhi	r3,r18,16368
 8008b40:	2805883a 	mov	r2,r5
 8008b44:	003fdd06 	br	8008abc <__alt_data_end+0xfc008abc>
 8008b48:	000b883a 	mov	r5,zero
 8008b4c:	003fd806 	br	8008ab0 <__alt_data_end+0xfc008ab0>
 8008b50:	000d883a 	mov	r6,zero
 8008b54:	003fef06 	br	8008b14 <__alt_data_end+0xfc008b14>

08008b58 <__d2b>:
 8008b58:	defff704 	addi	sp,sp,-36
 8008b5c:	dc000215 	stw	r16,8(sp)
 8008b60:	3021883a 	mov	r16,r6
 8008b64:	dc400315 	stw	r17,12(sp)
 8008b68:	8022907a 	slli	r17,r16,1
 8008b6c:	dd400715 	stw	r21,28(sp)
 8008b70:	282b883a 	mov	r21,r5
 8008b74:	01400044 	movi	r5,1
 8008b78:	dd000615 	stw	r20,24(sp)
 8008b7c:	dcc00515 	stw	r19,20(sp)
 8008b80:	dc800415 	stw	r18,16(sp)
 8008b84:	dfc00815 	stw	ra,32(sp)
 8008b88:	3829883a 	mov	r20,r7
 8008b8c:	dc800917 	ldw	r18,36(sp)
 8008b90:	8822d57a 	srli	r17,r17,21
 8008b94:	8007e680 	call	8007e68 <_Balloc>
 8008b98:	1027883a 	mov	r19,r2
 8008b9c:	00800434 	movhi	r2,16
 8008ba0:	10bfffc4 	addi	r2,r2,-1
 8008ba4:	808c703a 	and	r6,r16,r2
 8008ba8:	88000126 	beq	r17,zero,8008bb0 <__d2b+0x58>
 8008bac:	31800434 	orhi	r6,r6,16
 8008bb0:	d9800015 	stw	r6,0(sp)
 8008bb4:	a8001f26 	beq	r21,zero,8008c34 <__d2b+0xdc>
 8008bb8:	d9000104 	addi	r4,sp,4
 8008bbc:	dd400115 	stw	r21,4(sp)
 8008bc0:	80081e00 	call	80081e0 <__lo0bits>
 8008bc4:	d8c00017 	ldw	r3,0(sp)
 8008bc8:	1000291e 	bne	r2,zero,8008c70 <__d2b+0x118>
 8008bcc:	d9000117 	ldw	r4,4(sp)
 8008bd0:	99000515 	stw	r4,20(r19)
 8008bd4:	1820c03a 	cmpne	r16,r3,zero
 8008bd8:	84000044 	addi	r16,r16,1
 8008bdc:	98c00615 	stw	r3,24(r19)
 8008be0:	9c000415 	stw	r16,16(r19)
 8008be4:	88001b1e 	bne	r17,zero,8008c54 <__d2b+0xfc>
 8008be8:	800690ba 	slli	r3,r16,2
 8008bec:	10bef384 	addi	r2,r2,-1074
 8008bf0:	a0800015 	stw	r2,0(r20)
 8008bf4:	98c5883a 	add	r2,r19,r3
 8008bf8:	11000417 	ldw	r4,16(r2)
 8008bfc:	8020917a 	slli	r16,r16,5
 8008c00:	80081780 	call	8008178 <__hi0bits>
 8008c04:	8085c83a 	sub	r2,r16,r2
 8008c08:	90800015 	stw	r2,0(r18)
 8008c0c:	9805883a 	mov	r2,r19
 8008c10:	dfc00817 	ldw	ra,32(sp)
 8008c14:	dd400717 	ldw	r21,28(sp)
 8008c18:	dd000617 	ldw	r20,24(sp)
 8008c1c:	dcc00517 	ldw	r19,20(sp)
 8008c20:	dc800417 	ldw	r18,16(sp)
 8008c24:	dc400317 	ldw	r17,12(sp)
 8008c28:	dc000217 	ldw	r16,8(sp)
 8008c2c:	dec00904 	addi	sp,sp,36
 8008c30:	f800283a 	ret
 8008c34:	d809883a 	mov	r4,sp
 8008c38:	80081e00 	call	80081e0 <__lo0bits>
 8008c3c:	d8c00017 	ldw	r3,0(sp)
 8008c40:	04000044 	movi	r16,1
 8008c44:	9c000415 	stw	r16,16(r19)
 8008c48:	98c00515 	stw	r3,20(r19)
 8008c4c:	10800804 	addi	r2,r2,32
 8008c50:	883fe526 	beq	r17,zero,8008be8 <__alt_data_end+0xfc008be8>
 8008c54:	8c7ef344 	addi	r17,r17,-1075
 8008c58:	88a3883a 	add	r17,r17,r2
 8008c5c:	00c00d44 	movi	r3,53
 8008c60:	a4400015 	stw	r17,0(r20)
 8008c64:	1885c83a 	sub	r2,r3,r2
 8008c68:	90800015 	stw	r2,0(r18)
 8008c6c:	003fe706 	br	8008c0c <__alt_data_end+0xfc008c0c>
 8008c70:	01000804 	movi	r4,32
 8008c74:	2089c83a 	sub	r4,r4,r2
 8008c78:	1908983a 	sll	r4,r3,r4
 8008c7c:	d9400117 	ldw	r5,4(sp)
 8008c80:	1886d83a 	srl	r3,r3,r2
 8008c84:	2148b03a 	or	r4,r4,r5
 8008c88:	99000515 	stw	r4,20(r19)
 8008c8c:	d8c00015 	stw	r3,0(sp)
 8008c90:	003fd006 	br	8008bd4 <__alt_data_end+0xfc008bd4>

08008c94 <__ratio>:
 8008c94:	defff904 	addi	sp,sp,-28
 8008c98:	dc400315 	stw	r17,12(sp)
 8008c9c:	2823883a 	mov	r17,r5
 8008ca0:	d9400104 	addi	r5,sp,4
 8008ca4:	dfc00615 	stw	ra,24(sp)
 8008ca8:	dcc00515 	stw	r19,20(sp)
 8008cac:	dc800415 	stw	r18,16(sp)
 8008cb0:	2027883a 	mov	r19,r4
 8008cb4:	dc000215 	stw	r16,8(sp)
 8008cb8:	8008a3c0 	call	8008a3c <__b2d>
 8008cbc:	8809883a 	mov	r4,r17
 8008cc0:	d80b883a 	mov	r5,sp
 8008cc4:	1025883a 	mov	r18,r2
 8008cc8:	1821883a 	mov	r16,r3
 8008ccc:	8008a3c0 	call	8008a3c <__b2d>
 8008cd0:	8a400417 	ldw	r9,16(r17)
 8008cd4:	9a000417 	ldw	r8,16(r19)
 8008cd8:	100d883a 	mov	r6,r2
 8008cdc:	d8800017 	ldw	r2,0(sp)
 8008ce0:	4251c83a 	sub	r8,r8,r9
 8008ce4:	4012917a 	slli	r9,r8,5
 8008ce8:	da000117 	ldw	r8,4(sp)
 8008cec:	4091c83a 	sub	r8,r8,r2
 8008cf0:	4251883a 	add	r8,r8,r9
 8008cf4:	02000d0e 	bge	zero,r8,8008d2c <__ratio+0x98>
 8008cf8:	4010953a 	slli	r8,r8,20
 8008cfc:	4421883a 	add	r16,r8,r16
 8008d00:	9009883a 	mov	r4,r18
 8008d04:	800b883a 	mov	r5,r16
 8008d08:	180f883a 	mov	r7,r3
 8008d0c:	800cbec0 	call	800cbec <__divdf3>
 8008d10:	dfc00617 	ldw	ra,24(sp)
 8008d14:	dcc00517 	ldw	r19,20(sp)
 8008d18:	dc800417 	ldw	r18,16(sp)
 8008d1c:	dc400317 	ldw	r17,12(sp)
 8008d20:	dc000217 	ldw	r16,8(sp)
 8008d24:	dec00704 	addi	sp,sp,28
 8008d28:	f800283a 	ret
 8008d2c:	4010953a 	slli	r8,r8,20
 8008d30:	1a07c83a 	sub	r3,r3,r8
 8008d34:	003ff206 	br	8008d00 <__alt_data_end+0xfc008d00>

08008d38 <_mprec_log10>:
 8008d38:	defffe04 	addi	sp,sp,-8
 8008d3c:	dc000015 	stw	r16,0(sp)
 8008d40:	dfc00115 	stw	ra,4(sp)
 8008d44:	008005c4 	movi	r2,23
 8008d48:	2021883a 	mov	r16,r4
 8008d4c:	11000d0e 	bge	r2,r4,8008d84 <_mprec_log10+0x4c>
 8008d50:	0005883a 	mov	r2,zero
 8008d54:	00cffc34 	movhi	r3,16368
 8008d58:	843fffc4 	addi	r16,r16,-1
 8008d5c:	1009883a 	mov	r4,r2
 8008d60:	180b883a 	mov	r5,r3
 8008d64:	000d883a 	mov	r6,zero
 8008d68:	01d00934 	movhi	r7,16420
 8008d6c:	800d7b00 	call	800d7b0 <__muldf3>
 8008d70:	803ff91e 	bne	r16,zero,8008d58 <__alt_data_end+0xfc008d58>
 8008d74:	dfc00117 	ldw	ra,4(sp)
 8008d78:	dc000017 	ldw	r16,0(sp)
 8008d7c:	dec00204 	addi	sp,sp,8
 8008d80:	f800283a 	ret
 8008d84:	202090fa 	slli	r16,r4,3
 8008d88:	00820074 	movhi	r2,2049
 8008d8c:	1086f204 	addi	r2,r2,7112
 8008d90:	1421883a 	add	r16,r2,r16
 8008d94:	80800017 	ldw	r2,0(r16)
 8008d98:	80c00117 	ldw	r3,4(r16)
 8008d9c:	dfc00117 	ldw	ra,4(sp)
 8008da0:	dc000017 	ldw	r16,0(sp)
 8008da4:	dec00204 	addi	sp,sp,8
 8008da8:	f800283a 	ret

08008dac <__copybits>:
 8008dac:	297fffc4 	addi	r5,r5,-1
 8008db0:	280fd17a 	srai	r7,r5,5
 8008db4:	30c00417 	ldw	r3,16(r6)
 8008db8:	30800504 	addi	r2,r6,20
 8008dbc:	39c00044 	addi	r7,r7,1
 8008dc0:	18c7883a 	add	r3,r3,r3
 8008dc4:	39cf883a 	add	r7,r7,r7
 8008dc8:	18c7883a 	add	r3,r3,r3
 8008dcc:	39cf883a 	add	r7,r7,r7
 8008dd0:	10c7883a 	add	r3,r2,r3
 8008dd4:	21cf883a 	add	r7,r4,r7
 8008dd8:	10c00d2e 	bgeu	r2,r3,8008e10 <__copybits+0x64>
 8008ddc:	200b883a 	mov	r5,r4
 8008de0:	12000017 	ldw	r8,0(r2)
 8008de4:	29400104 	addi	r5,r5,4
 8008de8:	10800104 	addi	r2,r2,4
 8008dec:	2a3fff15 	stw	r8,-4(r5)
 8008df0:	10fffb36 	bltu	r2,r3,8008de0 <__alt_data_end+0xfc008de0>
 8008df4:	1985c83a 	sub	r2,r3,r6
 8008df8:	10bffac4 	addi	r2,r2,-21
 8008dfc:	1004d0ba 	srli	r2,r2,2
 8008e00:	10800044 	addi	r2,r2,1
 8008e04:	1085883a 	add	r2,r2,r2
 8008e08:	1085883a 	add	r2,r2,r2
 8008e0c:	2089883a 	add	r4,r4,r2
 8008e10:	21c0032e 	bgeu	r4,r7,8008e20 <__copybits+0x74>
 8008e14:	20000015 	stw	zero,0(r4)
 8008e18:	21000104 	addi	r4,r4,4
 8008e1c:	21fffd36 	bltu	r4,r7,8008e14 <__alt_data_end+0xfc008e14>
 8008e20:	f800283a 	ret

08008e24 <__any_on>:
 8008e24:	20c00417 	ldw	r3,16(r4)
 8008e28:	2805d17a 	srai	r2,r5,5
 8008e2c:	21000504 	addi	r4,r4,20
 8008e30:	18800d0e 	bge	r3,r2,8008e68 <__any_on+0x44>
 8008e34:	18c7883a 	add	r3,r3,r3
 8008e38:	18c7883a 	add	r3,r3,r3
 8008e3c:	20c7883a 	add	r3,r4,r3
 8008e40:	20c0192e 	bgeu	r4,r3,8008ea8 <__any_on+0x84>
 8008e44:	18bfff17 	ldw	r2,-4(r3)
 8008e48:	18ffff04 	addi	r3,r3,-4
 8008e4c:	1000041e 	bne	r2,zero,8008e60 <__any_on+0x3c>
 8008e50:	20c0142e 	bgeu	r4,r3,8008ea4 <__any_on+0x80>
 8008e54:	18ffff04 	addi	r3,r3,-4
 8008e58:	19400017 	ldw	r5,0(r3)
 8008e5c:	283ffc26 	beq	r5,zero,8008e50 <__alt_data_end+0xfc008e50>
 8008e60:	00800044 	movi	r2,1
 8008e64:	f800283a 	ret
 8008e68:	10c00a0e 	bge	r2,r3,8008e94 <__any_on+0x70>
 8008e6c:	1085883a 	add	r2,r2,r2
 8008e70:	1085883a 	add	r2,r2,r2
 8008e74:	294007cc 	andi	r5,r5,31
 8008e78:	2087883a 	add	r3,r4,r2
 8008e7c:	283ff026 	beq	r5,zero,8008e40 <__alt_data_end+0xfc008e40>
 8008e80:	19800017 	ldw	r6,0(r3)
 8008e84:	3144d83a 	srl	r2,r6,r5
 8008e88:	114a983a 	sll	r5,r2,r5
 8008e8c:	29bff41e 	bne	r5,r6,8008e60 <__alt_data_end+0xfc008e60>
 8008e90:	003feb06 	br	8008e40 <__alt_data_end+0xfc008e40>
 8008e94:	1085883a 	add	r2,r2,r2
 8008e98:	1085883a 	add	r2,r2,r2
 8008e9c:	2087883a 	add	r3,r4,r2
 8008ea0:	003fe706 	br	8008e40 <__alt_data_end+0xfc008e40>
 8008ea4:	f800283a 	ret
 8008ea8:	0005883a 	mov	r2,zero
 8008eac:	f800283a 	ret

08008eb0 <_realloc_r>:
 8008eb0:	defff604 	addi	sp,sp,-40
 8008eb4:	dcc00315 	stw	r19,12(sp)
 8008eb8:	dc400115 	stw	r17,4(sp)
 8008ebc:	dfc00915 	stw	ra,36(sp)
 8008ec0:	df000815 	stw	fp,32(sp)
 8008ec4:	ddc00715 	stw	r23,28(sp)
 8008ec8:	dd800615 	stw	r22,24(sp)
 8008ecc:	dd400515 	stw	r21,20(sp)
 8008ed0:	dd000415 	stw	r20,16(sp)
 8008ed4:	dc800215 	stw	r18,8(sp)
 8008ed8:	dc000015 	stw	r16,0(sp)
 8008edc:	2827883a 	mov	r19,r5
 8008ee0:	3023883a 	mov	r17,r6
 8008ee4:	2800bf26 	beq	r5,zero,80091e4 <_realloc_r+0x334>
 8008ee8:	2025883a 	mov	r18,r4
 8008eec:	800f12c0 	call	800f12c <__malloc_lock>
 8008ef0:	98ffff17 	ldw	r3,-4(r19)
 8008ef4:	01bfff04 	movi	r6,-4
 8008ef8:	890002c4 	addi	r4,r17,11
 8008efc:	01c00584 	movi	r7,22
 8008f00:	9d7ffe04 	addi	r21,r19,-8
 8008f04:	19a0703a 	and	r16,r3,r6
 8008f08:	39003f2e 	bgeu	r7,r4,8009008 <_realloc_r+0x158>
 8008f0c:	053ffe04 	movi	r20,-8
 8008f10:	2528703a 	and	r20,r4,r20
 8008f14:	a00f883a 	mov	r7,r20
 8008f18:	a0008216 	blt	r20,zero,8009124 <_realloc_r+0x274>
 8008f1c:	a4408136 	bltu	r20,r17,8009124 <_realloc_r+0x274>
 8008f20:	81c03c0e 	bge	r16,r7,8009014 <_realloc_r+0x164>
 8008f24:	07020074 	movhi	fp,2049
 8008f28:	e708a004 	addi	fp,fp,8832
 8008f2c:	e1000217 	ldw	r4,8(fp)
 8008f30:	ac05883a 	add	r2,r21,r16
 8008f34:	2080bf26 	beq	r4,r2,8009234 <_realloc_r+0x384>
 8008f38:	11000117 	ldw	r4,4(r2)
 8008f3c:	023fff84 	movi	r8,-2
 8008f40:	2210703a 	and	r8,r4,r8
 8008f44:	1211883a 	add	r8,r2,r8
 8008f48:	41400117 	ldw	r5,4(r8)
 8008f4c:	2940004c 	andi	r5,r5,1
 8008f50:	28004a1e 	bne	r5,zero,800907c <_realloc_r+0x1cc>
 8008f54:	017fff04 	movi	r5,-4
 8008f58:	2148703a 	and	r4,r4,r5
 8008f5c:	2409883a 	add	r4,r4,r16
 8008f60:	21c0ad0e 	bge	r4,r7,8009218 <_realloc_r+0x368>
 8008f64:	18c0004c 	andi	r3,r3,1
 8008f68:	18007f1e 	bne	r3,zero,8009168 <_realloc_r+0x2b8>
 8008f6c:	9dfffe17 	ldw	r23,-8(r19)
 8008f70:	adefc83a 	sub	r23,r21,r23
 8008f74:	bd800117 	ldw	r22,4(r23)
 8008f78:	b14a703a 	and	r5,r22,r5
 8008f7c:	216d883a 	add	r22,r4,r5
 8008f80:	b1c04516 	blt	r22,r7,8009098 <_realloc_r+0x1e8>
 8008f84:	10c00317 	ldw	r3,12(r2)
 8008f88:	10800217 	ldw	r2,8(r2)
 8008f8c:	81bfff04 	addi	r6,r16,-4
 8008f90:	bc400204 	addi	r17,r23,8
 8008f94:	10c00315 	stw	r3,12(r2)
 8008f98:	18800215 	stw	r2,8(r3)
 8008f9c:	b9400217 	ldw	r5,8(r23)
 8008fa0:	b8c00317 	ldw	r3,12(r23)
 8008fa4:	00800904 	movi	r2,36
 8008fa8:	28c00315 	stw	r3,12(r5)
 8008fac:	19400215 	stw	r5,8(r3)
 8008fb0:	1180ef36 	bltu	r2,r6,8009370 <_realloc_r+0x4c0>
 8008fb4:	008004c4 	movi	r2,19
 8008fb8:	1180da2e 	bgeu	r2,r6,8009324 <_realloc_r+0x474>
 8008fbc:	98800017 	ldw	r2,0(r19)
 8008fc0:	b8800215 	stw	r2,8(r23)
 8008fc4:	98800117 	ldw	r2,4(r19)
 8008fc8:	b8800315 	stw	r2,12(r23)
 8008fcc:	008006c4 	movi	r2,27
 8008fd0:	1180fc2e 	bgeu	r2,r6,80093c4 <_realloc_r+0x514>
 8008fd4:	98800217 	ldw	r2,8(r19)
 8008fd8:	b8800415 	stw	r2,16(r23)
 8008fdc:	98800317 	ldw	r2,12(r19)
 8008fe0:	b8800515 	stw	r2,20(r23)
 8008fe4:	00800904 	movi	r2,36
 8008fe8:	3080421e 	bne	r6,r2,80090f4 <_realloc_r+0x244>
 8008fec:	98800417 	ldw	r2,16(r19)
 8008ff0:	9cc00604 	addi	r19,r19,24
 8008ff4:	b8c00804 	addi	r3,r23,32
 8008ff8:	b8800615 	stw	r2,24(r23)
 8008ffc:	98bfff17 	ldw	r2,-4(r19)
 8009000:	b8800715 	stw	r2,28(r23)
 8009004:	00003d06 	br	80090fc <_realloc_r+0x24c>
 8009008:	01c00404 	movi	r7,16
 800900c:	3829883a 	mov	r20,r7
 8009010:	003fc206 	br	8008f1c <__alt_data_end+0xfc008f1c>
 8009014:	9823883a 	mov	r17,r19
 8009018:	850fc83a 	sub	r7,r16,r20
 800901c:	008003c4 	movi	r2,15
 8009020:	18c0004c 	andi	r3,r3,1
 8009024:	11c04336 	bltu	r2,r7,8009134 <_realloc_r+0x284>
 8009028:	1c06b03a 	or	r3,r3,r16
 800902c:	a8c00115 	stw	r3,4(r21)
 8009030:	ac21883a 	add	r16,r21,r16
 8009034:	80c00117 	ldw	r3,4(r16)
 8009038:	18c00054 	ori	r3,r3,1
 800903c:	80c00115 	stw	r3,4(r16)
 8009040:	9009883a 	mov	r4,r18
 8009044:	800f14c0 	call	800f14c <__malloc_unlock>
 8009048:	8805883a 	mov	r2,r17
 800904c:	dfc00917 	ldw	ra,36(sp)
 8009050:	df000817 	ldw	fp,32(sp)
 8009054:	ddc00717 	ldw	r23,28(sp)
 8009058:	dd800617 	ldw	r22,24(sp)
 800905c:	dd400517 	ldw	r21,20(sp)
 8009060:	dd000417 	ldw	r20,16(sp)
 8009064:	dcc00317 	ldw	r19,12(sp)
 8009068:	dc800217 	ldw	r18,8(sp)
 800906c:	dc400117 	ldw	r17,4(sp)
 8009070:	dc000017 	ldw	r16,0(sp)
 8009074:	dec00a04 	addi	sp,sp,40
 8009078:	f800283a 	ret
 800907c:	18c0004c 	andi	r3,r3,1
 8009080:	1800391e 	bne	r3,zero,8009168 <_realloc_r+0x2b8>
 8009084:	9dfffe17 	ldw	r23,-8(r19)
 8009088:	00bfff04 	movi	r2,-4
 800908c:	adefc83a 	sub	r23,r21,r23
 8009090:	b9400117 	ldw	r5,4(r23)
 8009094:	288a703a 	and	r5,r5,r2
 8009098:	2c2d883a 	add	r22,r5,r16
 800909c:	b1c03216 	blt	r22,r7,8009168 <_realloc_r+0x2b8>
 80090a0:	b8800317 	ldw	r2,12(r23)
 80090a4:	b8c00217 	ldw	r3,8(r23)
 80090a8:	81bfff04 	addi	r6,r16,-4
 80090ac:	01000904 	movi	r4,36
 80090b0:	18800315 	stw	r2,12(r3)
 80090b4:	10c00215 	stw	r3,8(r2)
 80090b8:	bc400204 	addi	r17,r23,8
 80090bc:	2180ac36 	bltu	r4,r6,8009370 <_realloc_r+0x4c0>
 80090c0:	008004c4 	movi	r2,19
 80090c4:	1180972e 	bgeu	r2,r6,8009324 <_realloc_r+0x474>
 80090c8:	98800017 	ldw	r2,0(r19)
 80090cc:	b8800215 	stw	r2,8(r23)
 80090d0:	98800117 	ldw	r2,4(r19)
 80090d4:	b8800315 	stw	r2,12(r23)
 80090d8:	008006c4 	movi	r2,27
 80090dc:	1180b92e 	bgeu	r2,r6,80093c4 <_realloc_r+0x514>
 80090e0:	98800217 	ldw	r2,8(r19)
 80090e4:	b8800415 	stw	r2,16(r23)
 80090e8:	98800317 	ldw	r2,12(r19)
 80090ec:	b8800515 	stw	r2,20(r23)
 80090f0:	313fbe26 	beq	r6,r4,8008fec <__alt_data_end+0xfc008fec>
 80090f4:	b8c00604 	addi	r3,r23,24
 80090f8:	9cc00404 	addi	r19,r19,16
 80090fc:	98800017 	ldw	r2,0(r19)
 8009100:	b021883a 	mov	r16,r22
 8009104:	b82b883a 	mov	r21,r23
 8009108:	18800015 	stw	r2,0(r3)
 800910c:	98800117 	ldw	r2,4(r19)
 8009110:	18800115 	stw	r2,4(r3)
 8009114:	98800217 	ldw	r2,8(r19)
 8009118:	18800215 	stw	r2,8(r3)
 800911c:	b8c00117 	ldw	r3,4(r23)
 8009120:	003fbd06 	br	8009018 <__alt_data_end+0xfc009018>
 8009124:	00800304 	movi	r2,12
 8009128:	90800015 	stw	r2,0(r18)
 800912c:	0005883a 	mov	r2,zero
 8009130:	003fc606 	br	800904c <__alt_data_end+0xfc00904c>
 8009134:	1d06b03a 	or	r3,r3,r20
 8009138:	ad0b883a 	add	r5,r21,r20
 800913c:	a8c00115 	stw	r3,4(r21)
 8009140:	38800054 	ori	r2,r7,1
 8009144:	28800115 	stw	r2,4(r5)
 8009148:	29cf883a 	add	r7,r5,r7
 800914c:	38800117 	ldw	r2,4(r7)
 8009150:	9009883a 	mov	r4,r18
 8009154:	29400204 	addi	r5,r5,8
 8009158:	10800054 	ori	r2,r2,1
 800915c:	38800115 	stw	r2,4(r7)
 8009160:	80066840 	call	8006684 <_free_r>
 8009164:	003fb606 	br	8009040 <__alt_data_end+0xfc009040>
 8009168:	880b883a 	mov	r5,r17
 800916c:	9009883a 	mov	r4,r18
 8009170:	80072200 	call	8007220 <_malloc_r>
 8009174:	1023883a 	mov	r17,r2
 8009178:	1000aa26 	beq	r2,zero,8009424 <_realloc_r+0x574>
 800917c:	98ffff17 	ldw	r3,-4(r19)
 8009180:	113ffe04 	addi	r4,r2,-8
 8009184:	00bfff84 	movi	r2,-2
 8009188:	1884703a 	and	r2,r3,r2
 800918c:	a885883a 	add	r2,r21,r2
 8009190:	20808626 	beq	r4,r2,80093ac <_realloc_r+0x4fc>
 8009194:	81bfff04 	addi	r6,r16,-4
 8009198:	00800904 	movi	r2,36
 800919c:	11807036 	bltu	r2,r6,8009360 <_realloc_r+0x4b0>
 80091a0:	00c004c4 	movi	r3,19
 80091a4:	19805636 	bltu	r3,r6,8009300 <_realloc_r+0x450>
 80091a8:	8805883a 	mov	r2,r17
 80091ac:	9807883a 	mov	r3,r19
 80091b0:	19000017 	ldw	r4,0(r3)
 80091b4:	11000015 	stw	r4,0(r2)
 80091b8:	19000117 	ldw	r4,4(r3)
 80091bc:	11000115 	stw	r4,4(r2)
 80091c0:	18c00217 	ldw	r3,8(r3)
 80091c4:	10c00215 	stw	r3,8(r2)
 80091c8:	980b883a 	mov	r5,r19
 80091cc:	9009883a 	mov	r4,r18
 80091d0:	80066840 	call	8006684 <_free_r>
 80091d4:	9009883a 	mov	r4,r18
 80091d8:	800f14c0 	call	800f14c <__malloc_unlock>
 80091dc:	8805883a 	mov	r2,r17
 80091e0:	003f9a06 	br	800904c <__alt_data_end+0xfc00904c>
 80091e4:	300b883a 	mov	r5,r6
 80091e8:	dfc00917 	ldw	ra,36(sp)
 80091ec:	df000817 	ldw	fp,32(sp)
 80091f0:	ddc00717 	ldw	r23,28(sp)
 80091f4:	dd800617 	ldw	r22,24(sp)
 80091f8:	dd400517 	ldw	r21,20(sp)
 80091fc:	dd000417 	ldw	r20,16(sp)
 8009200:	dcc00317 	ldw	r19,12(sp)
 8009204:	dc800217 	ldw	r18,8(sp)
 8009208:	dc400117 	ldw	r17,4(sp)
 800920c:	dc000017 	ldw	r16,0(sp)
 8009210:	dec00a04 	addi	sp,sp,40
 8009214:	80072201 	jmpi	8007220 <_malloc_r>
 8009218:	11400317 	ldw	r5,12(r2)
 800921c:	10800217 	ldw	r2,8(r2)
 8009220:	9823883a 	mov	r17,r19
 8009224:	2021883a 	mov	r16,r4
 8009228:	11400315 	stw	r5,12(r2)
 800922c:	28800215 	stw	r2,8(r5)
 8009230:	003f7906 	br	8009018 <__alt_data_end+0xfc009018>
 8009234:	21000117 	ldw	r4,4(r4)
 8009238:	00bfff04 	movi	r2,-4
 800923c:	a1800404 	addi	r6,r20,16
 8009240:	2088703a 	and	r4,r4,r2
 8009244:	2409883a 	add	r4,r4,r16
 8009248:	2180380e 	bge	r4,r6,800932c <_realloc_r+0x47c>
 800924c:	18c0004c 	andi	r3,r3,1
 8009250:	183fc51e 	bne	r3,zero,8009168 <__alt_data_end+0xfc009168>
 8009254:	9dfffe17 	ldw	r23,-8(r19)
 8009258:	adefc83a 	sub	r23,r21,r23
 800925c:	b9400117 	ldw	r5,4(r23)
 8009260:	288a703a 	and	r5,r5,r2
 8009264:	216d883a 	add	r22,r4,r5
 8009268:	b1bf8b16 	blt	r22,r6,8009098 <__alt_data_end+0xfc009098>
 800926c:	b8800317 	ldw	r2,12(r23)
 8009270:	b8c00217 	ldw	r3,8(r23)
 8009274:	81bfff04 	addi	r6,r16,-4
 8009278:	01000904 	movi	r4,36
 800927c:	18800315 	stw	r2,12(r3)
 8009280:	10c00215 	stw	r3,8(r2)
 8009284:	bc400204 	addi	r17,r23,8
 8009288:	21805a36 	bltu	r4,r6,80093f4 <_realloc_r+0x544>
 800928c:	008004c4 	movi	r2,19
 8009290:	1180562e 	bgeu	r2,r6,80093ec <_realloc_r+0x53c>
 8009294:	98800017 	ldw	r2,0(r19)
 8009298:	b8800215 	stw	r2,8(r23)
 800929c:	98800117 	ldw	r2,4(r19)
 80092a0:	b8800315 	stw	r2,12(r23)
 80092a4:	008006c4 	movi	r2,27
 80092a8:	11805636 	bltu	r2,r6,8009404 <_realloc_r+0x554>
 80092ac:	b8800404 	addi	r2,r23,16
 80092b0:	9cc00204 	addi	r19,r19,8
 80092b4:	98c00017 	ldw	r3,0(r19)
 80092b8:	10c00015 	stw	r3,0(r2)
 80092bc:	98c00117 	ldw	r3,4(r19)
 80092c0:	10c00115 	stw	r3,4(r2)
 80092c4:	98c00217 	ldw	r3,8(r19)
 80092c8:	10c00215 	stw	r3,8(r2)
 80092cc:	bd07883a 	add	r3,r23,r20
 80092d0:	b505c83a 	sub	r2,r22,r20
 80092d4:	e0c00215 	stw	r3,8(fp)
 80092d8:	10800054 	ori	r2,r2,1
 80092dc:	18800115 	stw	r2,4(r3)
 80092e0:	b8800117 	ldw	r2,4(r23)
 80092e4:	9009883a 	mov	r4,r18
 80092e8:	1080004c 	andi	r2,r2,1
 80092ec:	a0a8b03a 	or	r20,r20,r2
 80092f0:	bd000115 	stw	r20,4(r23)
 80092f4:	800f14c0 	call	800f14c <__malloc_unlock>
 80092f8:	8805883a 	mov	r2,r17
 80092fc:	003f5306 	br	800904c <__alt_data_end+0xfc00904c>
 8009300:	98c00017 	ldw	r3,0(r19)
 8009304:	88c00015 	stw	r3,0(r17)
 8009308:	98c00117 	ldw	r3,4(r19)
 800930c:	88c00115 	stw	r3,4(r17)
 8009310:	00c006c4 	movi	r3,27
 8009314:	19801d36 	bltu	r3,r6,800938c <_realloc_r+0x4dc>
 8009318:	88800204 	addi	r2,r17,8
 800931c:	98c00204 	addi	r3,r19,8
 8009320:	003fa306 	br	80091b0 <__alt_data_end+0xfc0091b0>
 8009324:	8807883a 	mov	r3,r17
 8009328:	003f7406 	br	80090fc <__alt_data_end+0xfc0090fc>
 800932c:	ad2b883a 	add	r21,r21,r20
 8009330:	2505c83a 	sub	r2,r4,r20
 8009334:	e5400215 	stw	r21,8(fp)
 8009338:	10800054 	ori	r2,r2,1
 800933c:	a8800115 	stw	r2,4(r21)
 8009340:	98bfff17 	ldw	r2,-4(r19)
 8009344:	9009883a 	mov	r4,r18
 8009348:	1080004c 	andi	r2,r2,1
 800934c:	a0a8b03a 	or	r20,r20,r2
 8009350:	9d3fff15 	stw	r20,-4(r19)
 8009354:	800f14c0 	call	800f14c <__malloc_unlock>
 8009358:	9805883a 	mov	r2,r19
 800935c:	003f3b06 	br	800904c <__alt_data_end+0xfc00904c>
 8009360:	8809883a 	mov	r4,r17
 8009364:	980b883a 	mov	r5,r19
 8009368:	8007be80 	call	8007be8 <memmove>
 800936c:	003f9606 	br	80091c8 <__alt_data_end+0xfc0091c8>
 8009370:	8809883a 	mov	r4,r17
 8009374:	980b883a 	mov	r5,r19
 8009378:	8007be80 	call	8007be8 <memmove>
 800937c:	b8c00117 	ldw	r3,4(r23)
 8009380:	b021883a 	mov	r16,r22
 8009384:	b82b883a 	mov	r21,r23
 8009388:	003f2306 	br	8009018 <__alt_data_end+0xfc009018>
 800938c:	98c00217 	ldw	r3,8(r19)
 8009390:	88c00215 	stw	r3,8(r17)
 8009394:	98c00317 	ldw	r3,12(r19)
 8009398:	88c00315 	stw	r3,12(r17)
 800939c:	30800c26 	beq	r6,r2,80093d0 <_realloc_r+0x520>
 80093a0:	88800404 	addi	r2,r17,16
 80093a4:	98c00404 	addi	r3,r19,16
 80093a8:	003f8106 	br	80091b0 <__alt_data_end+0xfc0091b0>
 80093ac:	893fff17 	ldw	r4,-4(r17)
 80093b0:	00bfff04 	movi	r2,-4
 80093b4:	9823883a 	mov	r17,r19
 80093b8:	2084703a 	and	r2,r4,r2
 80093bc:	80a1883a 	add	r16,r16,r2
 80093c0:	003f1506 	br	8009018 <__alt_data_end+0xfc009018>
 80093c4:	b8c00404 	addi	r3,r23,16
 80093c8:	9cc00204 	addi	r19,r19,8
 80093cc:	003f4b06 	br	80090fc <__alt_data_end+0xfc0090fc>
 80093d0:	99000417 	ldw	r4,16(r19)
 80093d4:	88800604 	addi	r2,r17,24
 80093d8:	98c00604 	addi	r3,r19,24
 80093dc:	89000415 	stw	r4,16(r17)
 80093e0:	99000517 	ldw	r4,20(r19)
 80093e4:	89000515 	stw	r4,20(r17)
 80093e8:	003f7106 	br	80091b0 <__alt_data_end+0xfc0091b0>
 80093ec:	8805883a 	mov	r2,r17
 80093f0:	003fb006 	br	80092b4 <__alt_data_end+0xfc0092b4>
 80093f4:	8809883a 	mov	r4,r17
 80093f8:	980b883a 	mov	r5,r19
 80093fc:	8007be80 	call	8007be8 <memmove>
 8009400:	003fb206 	br	80092cc <__alt_data_end+0xfc0092cc>
 8009404:	98800217 	ldw	r2,8(r19)
 8009408:	b8800415 	stw	r2,16(r23)
 800940c:	98800317 	ldw	r2,12(r19)
 8009410:	b8800515 	stw	r2,20(r23)
 8009414:	31000726 	beq	r6,r4,8009434 <_realloc_r+0x584>
 8009418:	b8800604 	addi	r2,r23,24
 800941c:	9cc00404 	addi	r19,r19,16
 8009420:	003fa406 	br	80092b4 <__alt_data_end+0xfc0092b4>
 8009424:	9009883a 	mov	r4,r18
 8009428:	800f14c0 	call	800f14c <__malloc_unlock>
 800942c:	0005883a 	mov	r2,zero
 8009430:	003f0606 	br	800904c <__alt_data_end+0xfc00904c>
 8009434:	98c00417 	ldw	r3,16(r19)
 8009438:	9cc00604 	addi	r19,r19,24
 800943c:	b8800804 	addi	r2,r23,32
 8009440:	b8c00615 	stw	r3,24(r23)
 8009444:	98ffff17 	ldw	r3,-4(r19)
 8009448:	b8c00715 	stw	r3,28(r23)
 800944c:	003f9906 	br	80092b4 <__alt_data_end+0xfc0092b4>

08009450 <__fpclassifyd>:
 8009450:	00a00034 	movhi	r2,32768
 8009454:	10bfffc4 	addi	r2,r2,-1
 8009458:	2884703a 	and	r2,r5,r2
 800945c:	10000726 	beq	r2,zero,800947c <__fpclassifyd+0x2c>
 8009460:	00fffc34 	movhi	r3,65520
 8009464:	019ff834 	movhi	r6,32736
 8009468:	28c7883a 	add	r3,r5,r3
 800946c:	31bfffc4 	addi	r6,r6,-1
 8009470:	30c00536 	bltu	r6,r3,8009488 <__fpclassifyd+0x38>
 8009474:	00800104 	movi	r2,4
 8009478:	f800283a 	ret
 800947c:	2000021e 	bne	r4,zero,8009488 <__fpclassifyd+0x38>
 8009480:	00800084 	movi	r2,2
 8009484:	f800283a 	ret
 8009488:	00dffc34 	movhi	r3,32752
 800948c:	019ff834 	movhi	r6,32736
 8009490:	28cb883a 	add	r5,r5,r3
 8009494:	31bfffc4 	addi	r6,r6,-1
 8009498:	317ff62e 	bgeu	r6,r5,8009474 <__alt_data_end+0xfc009474>
 800949c:	01400434 	movhi	r5,16
 80094a0:	297fffc4 	addi	r5,r5,-1
 80094a4:	28800236 	bltu	r5,r2,80094b0 <__fpclassifyd+0x60>
 80094a8:	008000c4 	movi	r2,3
 80094ac:	f800283a 	ret
 80094b0:	10c00226 	beq	r2,r3,80094bc <__fpclassifyd+0x6c>
 80094b4:	0005883a 	mov	r2,zero
 80094b8:	f800283a 	ret
 80094bc:	2005003a 	cmpeq	r2,r4,zero
 80094c0:	f800283a 	ret

080094c4 <_sbrk_r>:
 80094c4:	defffd04 	addi	sp,sp,-12
 80094c8:	dc000015 	stw	r16,0(sp)
 80094cc:	04020074 	movhi	r16,2049
 80094d0:	dc400115 	stw	r17,4(sp)
 80094d4:	8414f604 	addi	r16,r16,21464
 80094d8:	2023883a 	mov	r17,r4
 80094dc:	2809883a 	mov	r4,r5
 80094e0:	dfc00215 	stw	ra,8(sp)
 80094e4:	80000015 	stw	zero,0(r16)
 80094e8:	800f3400 	call	800f340 <sbrk>
 80094ec:	00ffffc4 	movi	r3,-1
 80094f0:	10c00526 	beq	r2,r3,8009508 <_sbrk_r+0x44>
 80094f4:	dfc00217 	ldw	ra,8(sp)
 80094f8:	dc400117 	ldw	r17,4(sp)
 80094fc:	dc000017 	ldw	r16,0(sp)
 8009500:	dec00304 	addi	sp,sp,12
 8009504:	f800283a 	ret
 8009508:	80c00017 	ldw	r3,0(r16)
 800950c:	183ff926 	beq	r3,zero,80094f4 <__alt_data_end+0xfc0094f4>
 8009510:	88c00015 	stw	r3,0(r17)
 8009514:	003ff706 	br	80094f4 <__alt_data_end+0xfc0094f4>

08009518 <__sread>:
 8009518:	defffe04 	addi	sp,sp,-8
 800951c:	dc000015 	stw	r16,0(sp)
 8009520:	2821883a 	mov	r16,r5
 8009524:	2940038f 	ldh	r5,14(r5)
 8009528:	dfc00115 	stw	ra,4(sp)
 800952c:	800b1d40 	call	800b1d4 <_read_r>
 8009530:	10000716 	blt	r2,zero,8009550 <__sread+0x38>
 8009534:	80c01417 	ldw	r3,80(r16)
 8009538:	1887883a 	add	r3,r3,r2
 800953c:	80c01415 	stw	r3,80(r16)
 8009540:	dfc00117 	ldw	ra,4(sp)
 8009544:	dc000017 	ldw	r16,0(sp)
 8009548:	dec00204 	addi	sp,sp,8
 800954c:	f800283a 	ret
 8009550:	80c0030b 	ldhu	r3,12(r16)
 8009554:	18fbffcc 	andi	r3,r3,61439
 8009558:	80c0030d 	sth	r3,12(r16)
 800955c:	dfc00117 	ldw	ra,4(sp)
 8009560:	dc000017 	ldw	r16,0(sp)
 8009564:	dec00204 	addi	sp,sp,8
 8009568:	f800283a 	ret

0800956c <__seofread>:
 800956c:	0005883a 	mov	r2,zero
 8009570:	f800283a 	ret

08009574 <__swrite>:
 8009574:	2880030b 	ldhu	r2,12(r5)
 8009578:	defffb04 	addi	sp,sp,-20
 800957c:	dcc00315 	stw	r19,12(sp)
 8009580:	dc800215 	stw	r18,8(sp)
 8009584:	dc400115 	stw	r17,4(sp)
 8009588:	dc000015 	stw	r16,0(sp)
 800958c:	dfc00415 	stw	ra,16(sp)
 8009590:	10c0400c 	andi	r3,r2,256
 8009594:	2821883a 	mov	r16,r5
 8009598:	2027883a 	mov	r19,r4
 800959c:	3025883a 	mov	r18,r6
 80095a0:	3823883a 	mov	r17,r7
 80095a4:	18000526 	beq	r3,zero,80095bc <__swrite+0x48>
 80095a8:	2940038f 	ldh	r5,14(r5)
 80095ac:	000d883a 	mov	r6,zero
 80095b0:	01c00084 	movi	r7,2
 80095b4:	800b1780 	call	800b178 <_lseek_r>
 80095b8:	8080030b 	ldhu	r2,12(r16)
 80095bc:	8140038f 	ldh	r5,14(r16)
 80095c0:	10bbffcc 	andi	r2,r2,61439
 80095c4:	9809883a 	mov	r4,r19
 80095c8:	900d883a 	mov	r6,r18
 80095cc:	880f883a 	mov	r7,r17
 80095d0:	8080030d 	sth	r2,12(r16)
 80095d4:	dfc00417 	ldw	ra,16(sp)
 80095d8:	dcc00317 	ldw	r19,12(sp)
 80095dc:	dc800217 	ldw	r18,8(sp)
 80095e0:	dc400117 	ldw	r17,4(sp)
 80095e4:	dc000017 	ldw	r16,0(sp)
 80095e8:	dec00504 	addi	sp,sp,20
 80095ec:	800ac541 	jmpi	800ac54 <_write_r>

080095f0 <__sseek>:
 80095f0:	defffe04 	addi	sp,sp,-8
 80095f4:	dc000015 	stw	r16,0(sp)
 80095f8:	2821883a 	mov	r16,r5
 80095fc:	2940038f 	ldh	r5,14(r5)
 8009600:	dfc00115 	stw	ra,4(sp)
 8009604:	800b1780 	call	800b178 <_lseek_r>
 8009608:	00ffffc4 	movi	r3,-1
 800960c:	10c00826 	beq	r2,r3,8009630 <__sseek+0x40>
 8009610:	80c0030b 	ldhu	r3,12(r16)
 8009614:	80801415 	stw	r2,80(r16)
 8009618:	18c40014 	ori	r3,r3,4096
 800961c:	80c0030d 	sth	r3,12(r16)
 8009620:	dfc00117 	ldw	ra,4(sp)
 8009624:	dc000017 	ldw	r16,0(sp)
 8009628:	dec00204 	addi	sp,sp,8
 800962c:	f800283a 	ret
 8009630:	80c0030b 	ldhu	r3,12(r16)
 8009634:	18fbffcc 	andi	r3,r3,61439
 8009638:	80c0030d 	sth	r3,12(r16)
 800963c:	dfc00117 	ldw	ra,4(sp)
 8009640:	dc000017 	ldw	r16,0(sp)
 8009644:	dec00204 	addi	sp,sp,8
 8009648:	f800283a 	ret

0800964c <__sclose>:
 800964c:	2940038f 	ldh	r5,14(r5)
 8009650:	800acb01 	jmpi	800acb0 <_close_r>

08009654 <strcmp>:
 8009654:	2144b03a 	or	r2,r4,r5
 8009658:	108000cc 	andi	r2,r2,3
 800965c:	1000171e 	bne	r2,zero,80096bc <strcmp+0x68>
 8009660:	20800017 	ldw	r2,0(r4)
 8009664:	28c00017 	ldw	r3,0(r5)
 8009668:	10c0141e 	bne	r2,r3,80096bc <strcmp+0x68>
 800966c:	027fbff4 	movhi	r9,65279
 8009670:	4a7fbfc4 	addi	r9,r9,-257
 8009674:	0086303a 	nor	r3,zero,r2
 8009678:	02202074 	movhi	r8,32897
 800967c:	1245883a 	add	r2,r2,r9
 8009680:	42202004 	addi	r8,r8,-32640
 8009684:	10c4703a 	and	r2,r2,r3
 8009688:	1204703a 	and	r2,r2,r8
 800968c:	10000226 	beq	r2,zero,8009698 <strcmp+0x44>
 8009690:	00001706 	br	80096f0 <strcmp+0x9c>
 8009694:	1000161e 	bne	r2,zero,80096f0 <strcmp+0x9c>
 8009698:	21000104 	addi	r4,r4,4
 800969c:	20c00017 	ldw	r3,0(r4)
 80096a0:	29400104 	addi	r5,r5,4
 80096a4:	29800017 	ldw	r6,0(r5)
 80096a8:	1a4f883a 	add	r7,r3,r9
 80096ac:	00c4303a 	nor	r2,zero,r3
 80096b0:	3884703a 	and	r2,r7,r2
 80096b4:	1204703a 	and	r2,r2,r8
 80096b8:	19bff626 	beq	r3,r6,8009694 <__alt_data_end+0xfc009694>
 80096bc:	20800007 	ldb	r2,0(r4)
 80096c0:	1000051e 	bne	r2,zero,80096d8 <strcmp+0x84>
 80096c4:	00000606 	br	80096e0 <strcmp+0x8c>
 80096c8:	21000044 	addi	r4,r4,1
 80096cc:	20800007 	ldb	r2,0(r4)
 80096d0:	29400044 	addi	r5,r5,1
 80096d4:	10000226 	beq	r2,zero,80096e0 <strcmp+0x8c>
 80096d8:	28c00007 	ldb	r3,0(r5)
 80096dc:	10fffa26 	beq	r2,r3,80096c8 <__alt_data_end+0xfc0096c8>
 80096e0:	20800003 	ldbu	r2,0(r4)
 80096e4:	28c00003 	ldbu	r3,0(r5)
 80096e8:	10c5c83a 	sub	r2,r2,r3
 80096ec:	f800283a 	ret
 80096f0:	0005883a 	mov	r2,zero
 80096f4:	f800283a 	ret

080096f8 <__sprint_r.part.0>:
 80096f8:	28801917 	ldw	r2,100(r5)
 80096fc:	defff604 	addi	sp,sp,-40
 8009700:	dd400515 	stw	r21,20(sp)
 8009704:	dcc00315 	stw	r19,12(sp)
 8009708:	dfc00915 	stw	ra,36(sp)
 800970c:	df000815 	stw	fp,32(sp)
 8009710:	ddc00715 	stw	r23,28(sp)
 8009714:	dd800615 	stw	r22,24(sp)
 8009718:	dd000415 	stw	r20,16(sp)
 800971c:	dc800215 	stw	r18,8(sp)
 8009720:	dc400115 	stw	r17,4(sp)
 8009724:	dc000015 	stw	r16,0(sp)
 8009728:	1088000c 	andi	r2,r2,8192
 800972c:	2827883a 	mov	r19,r5
 8009730:	302b883a 	mov	r21,r6
 8009734:	10002d26 	beq	r2,zero,80097ec <__sprint_r.part.0+0xf4>
 8009738:	30800217 	ldw	r2,8(r6)
 800973c:	35800017 	ldw	r22,0(r6)
 8009740:	10002826 	beq	r2,zero,80097e4 <__sprint_r.part.0+0xec>
 8009744:	2029883a 	mov	r20,r4
 8009748:	b5c00104 	addi	r23,r22,4
 800974c:	04bfffc4 	movi	r18,-1
 8009750:	bc400017 	ldw	r17,0(r23)
 8009754:	b4000017 	ldw	r16,0(r22)
 8009758:	0039883a 	mov	fp,zero
 800975c:	8822d0ba 	srli	r17,r17,2
 8009760:	04400316 	blt	zero,r17,8009770 <__sprint_r.part.0+0x78>
 8009764:	00001706 	br	80097c4 <__sprint_r.part.0+0xcc>
 8009768:	84000104 	addi	r16,r16,4
 800976c:	8f001526 	beq	r17,fp,80097c4 <__sprint_r.part.0+0xcc>
 8009770:	81400017 	ldw	r5,0(r16)
 8009774:	a009883a 	mov	r4,r20
 8009778:	980d883a 	mov	r6,r19
 800977c:	800aef00 	call	800aef0 <_fputwc_r>
 8009780:	e7000044 	addi	fp,fp,1
 8009784:	14bff81e 	bne	r2,r18,8009768 <__alt_data_end+0xfc009768>
 8009788:	9005883a 	mov	r2,r18
 800978c:	a8000215 	stw	zero,8(r21)
 8009790:	a8000115 	stw	zero,4(r21)
 8009794:	dfc00917 	ldw	ra,36(sp)
 8009798:	df000817 	ldw	fp,32(sp)
 800979c:	ddc00717 	ldw	r23,28(sp)
 80097a0:	dd800617 	ldw	r22,24(sp)
 80097a4:	dd400517 	ldw	r21,20(sp)
 80097a8:	dd000417 	ldw	r20,16(sp)
 80097ac:	dcc00317 	ldw	r19,12(sp)
 80097b0:	dc800217 	ldw	r18,8(sp)
 80097b4:	dc400117 	ldw	r17,4(sp)
 80097b8:	dc000017 	ldw	r16,0(sp)
 80097bc:	dec00a04 	addi	sp,sp,40
 80097c0:	f800283a 	ret
 80097c4:	a8c00217 	ldw	r3,8(r21)
 80097c8:	8c63883a 	add	r17,r17,r17
 80097cc:	8c63883a 	add	r17,r17,r17
 80097d0:	1c45c83a 	sub	r2,r3,r17
 80097d4:	a8800215 	stw	r2,8(r21)
 80097d8:	b5800204 	addi	r22,r22,8
 80097dc:	bdc00204 	addi	r23,r23,8
 80097e0:	103fdb1e 	bne	r2,zero,8009750 <__alt_data_end+0xfc009750>
 80097e4:	0005883a 	mov	r2,zero
 80097e8:	003fe806 	br	800978c <__alt_data_end+0xfc00978c>
 80097ec:	80069740 	call	8006974 <__sfvwrite_r>
 80097f0:	003fe606 	br	800978c <__alt_data_end+0xfc00978c>

080097f4 <__sprint_r>:
 80097f4:	30c00217 	ldw	r3,8(r6)
 80097f8:	18000126 	beq	r3,zero,8009800 <__sprint_r+0xc>
 80097fc:	80096f81 	jmpi	80096f8 <__sprint_r.part.0>
 8009800:	30000115 	stw	zero,4(r6)
 8009804:	0005883a 	mov	r2,zero
 8009808:	f800283a 	ret

0800980c <___vfiprintf_internal_r>:
 800980c:	defeca04 	addi	sp,sp,-1240
 8009810:	dcc12f15 	stw	r19,1212(sp)
 8009814:	dfc13515 	stw	ra,1236(sp)
 8009818:	df013415 	stw	fp,1232(sp)
 800981c:	ddc13315 	stw	r23,1228(sp)
 8009820:	dd813215 	stw	r22,1224(sp)
 8009824:	dd413115 	stw	r21,1220(sp)
 8009828:	dd013015 	stw	r20,1216(sp)
 800982c:	dc812e15 	stw	r18,1208(sp)
 8009830:	dc412d15 	stw	r17,1204(sp)
 8009834:	dc012c15 	stw	r16,1200(sp)
 8009838:	d9012115 	stw	r4,1156(sp)
 800983c:	d9412015 	stw	r5,1152(sp)
 8009840:	d9c12315 	stw	r7,1164(sp)
 8009844:	3027883a 	mov	r19,r6
 8009848:	20000226 	beq	r4,zero,8009854 <___vfiprintf_internal_r+0x48>
 800984c:	20800e17 	ldw	r2,56(r4)
 8009850:	1000f726 	beq	r2,zero,8009c30 <___vfiprintf_internal_r+0x424>
 8009854:	d8812017 	ldw	r2,1152(sp)
 8009858:	10c0030b 	ldhu	r3,12(r2)
 800985c:	1908000c 	andi	r4,r3,8192
 8009860:	1805883a 	mov	r2,r3
 8009864:	2000081e 	bne	r4,zero,8009888 <___vfiprintf_internal_r+0x7c>
 8009868:	d9412017 	ldw	r5,1152(sp)
 800986c:	18880014 	ori	r2,r3,8192
 8009870:	00f7ffc4 	movi	r3,-8193
 8009874:	29001917 	ldw	r4,100(r5)
 8009878:	2880030d 	sth	r2,12(r5)
 800987c:	20c8703a 	and	r4,r4,r3
 8009880:	29001915 	stw	r4,100(r5)
 8009884:	1007883a 	mov	r3,r2
 8009888:	1100020c 	andi	r4,r2,8
 800988c:	2000a726 	beq	r4,zero,8009b2c <___vfiprintf_internal_r+0x320>
 8009890:	d9412017 	ldw	r5,1152(sp)
 8009894:	29000417 	ldw	r4,16(r5)
 8009898:	2000a426 	beq	r4,zero,8009b2c <___vfiprintf_internal_r+0x320>
 800989c:	1080068c 	andi	r2,r2,26
 80098a0:	01000284 	movi	r4,10
 80098a4:	1100ab26 	beq	r2,r4,8009b54 <___vfiprintf_internal_r+0x348>
 80098a8:	d9010a04 	addi	r4,sp,1064
 80098ac:	d94109c4 	addi	r5,sp,1063
 80098b0:	07020074 	movhi	fp,2049
 80098b4:	04420074 	movhi	r17,2049
 80098b8:	2145c83a 	sub	r2,r4,r5
 80098bc:	e7072804 	addi	fp,fp,7328
 80098c0:	8c472404 	addi	r17,r17,7312
 80098c4:	d9011e15 	stw	r4,1144(sp)
 80098c8:	d9411f15 	stw	r5,1148(sp)
 80098cc:	dec11a15 	stw	sp,1128(sp)
 80098d0:	d8011c15 	stw	zero,1136(sp)
 80098d4:	d8011b15 	stw	zero,1132(sp)
 80098d8:	d8012715 	stw	zero,1180(sp)
 80098dc:	d8012515 	stw	zero,1172(sp)
 80098e0:	d811883a 	mov	r8,sp
 80098e4:	d8812815 	stw	r2,1184(sp)
 80098e8:	982f883a 	mov	r23,r19
 80098ec:	b8800007 	ldb	r2,0(r23)
 80098f0:	1003b026 	beq	r2,zero,800a7b4 <___vfiprintf_internal_r+0xfa8>
 80098f4:	01000944 	movi	r4,37
 80098f8:	1103ae26 	beq	r2,r4,800a7b4 <___vfiprintf_internal_r+0xfa8>
 80098fc:	b805883a 	mov	r2,r23
 8009900:	00000106 	br	8009908 <___vfiprintf_internal_r+0xfc>
 8009904:	19000326 	beq	r3,r4,8009914 <___vfiprintf_internal_r+0x108>
 8009908:	10800044 	addi	r2,r2,1
 800990c:	10c00007 	ldb	r3,0(r2)
 8009910:	183ffc1e 	bne	r3,zero,8009904 <__alt_data_end+0xfc009904>
 8009914:	15e1c83a 	sub	r16,r2,r23
 8009918:	1029883a 	mov	r20,r2
 800991c:	80001026 	beq	r16,zero,8009960 <___vfiprintf_internal_r+0x154>
 8009920:	d8c11c17 	ldw	r3,1136(sp)
 8009924:	d8811b17 	ldw	r2,1132(sp)
 8009928:	45c00015 	stw	r23,0(r8)
 800992c:	80c7883a 	add	r3,r16,r3
 8009930:	10800044 	addi	r2,r2,1
 8009934:	44000115 	stw	r16,4(r8)
 8009938:	d8c11c15 	stw	r3,1136(sp)
 800993c:	d8811b15 	stw	r2,1132(sp)
 8009940:	010001c4 	movi	r4,7
 8009944:	2080740e 	bge	r4,r2,8009b18 <___vfiprintf_internal_r+0x30c>
 8009948:	1803a71e 	bne	r3,zero,800a7e8 <___vfiprintf_internal_r+0xfdc>
 800994c:	d8c12517 	ldw	r3,1172(sp)
 8009950:	d8011b15 	stw	zero,1132(sp)
 8009954:	d811883a 	mov	r8,sp
 8009958:	1c07883a 	add	r3,r3,r16
 800995c:	d8c12515 	stw	r3,1172(sp)
 8009960:	a0800007 	ldb	r2,0(r20)
 8009964:	1002bf26 	beq	r2,zero,800a464 <___vfiprintf_internal_r+0xc58>
 8009968:	a5c00044 	addi	r23,r20,1
 800996c:	a1800047 	ldb	r6,1(r20)
 8009970:	d8011d85 	stb	zero,1142(sp)
 8009974:	d8012205 	stb	zero,1160(sp)
 8009978:	043fffc4 	movi	r16,-1
 800997c:	d8012415 	stw	zero,1168(sp)
 8009980:	0025883a 	mov	r18,zero
 8009984:	05001604 	movi	r20,88
 8009988:	05400244 	movi	r21,9
 800998c:	4027883a 	mov	r19,r8
 8009990:	bdc00044 	addi	r23,r23,1
 8009994:	30bff804 	addi	r2,r6,-32
 8009998:	a0825636 	bltu	r20,r2,800a2f4 <___vfiprintf_internal_r+0xae8>
 800999c:	100490ba 	slli	r2,r2,2
 80099a0:	01020074 	movhi	r4,2049
 80099a4:	21266d04 	addi	r4,r4,-26188
 80099a8:	1105883a 	add	r2,r2,r4
 80099ac:	10800017 	ldw	r2,0(r2)
 80099b0:	1000683a 	jmp	r2
 80099b4:	0800a284 	addi	zero,at,650
 80099b8:	0800a2f4 	orhi	zero,at,651
 80099bc:	0800a2f4 	orhi	zero,at,651
 80099c0:	0800a2e8 	cmpgeui	zero,at,651
 80099c4:	0800a2f4 	orhi	zero,at,651
 80099c8:	0800a2f4 	orhi	zero,at,651
 80099cc:	0800a2f4 	orhi	zero,at,651
 80099d0:	0800a2f4 	orhi	zero,at,651
 80099d4:	0800a2f4 	orhi	zero,at,651
 80099d8:	0800a2f4 	orhi	zero,at,651
 80099dc:	0800a074 	orhi	zero,at,641
 80099e0:	0800a29c 	xori	zero,at,650
 80099e4:	0800a2f4 	orhi	zero,at,651
 80099e8:	08009c48 	cmpgei	zero,at,625
 80099ec:	0800a098 	cmpnei	zero,at,642
 80099f0:	0800a2f4 	orhi	zero,at,651
 80099f4:	08009c54 	ori	zero,at,625
 80099f8:	08009c60 	cmpeqi	zero,at,625
 80099fc:	08009c60 	cmpeqi	zero,at,625
 8009a00:	08009c60 	cmpeqi	zero,at,625
 8009a04:	08009c60 	cmpeqi	zero,at,625
 8009a08:	08009c60 	cmpeqi	zero,at,625
 8009a0c:	08009c60 	cmpeqi	zero,at,625
 8009a10:	08009c60 	cmpeqi	zero,at,625
 8009a14:	08009c60 	cmpeqi	zero,at,625
 8009a18:	08009c60 	cmpeqi	zero,at,625
 8009a1c:	0800a2f4 	orhi	zero,at,651
 8009a20:	0800a2f4 	orhi	zero,at,651
 8009a24:	0800a2f4 	orhi	zero,at,651
 8009a28:	0800a2f4 	orhi	zero,at,651
 8009a2c:	0800a2f4 	orhi	zero,at,651
 8009a30:	0800a2f4 	orhi	zero,at,651
 8009a34:	0800a2f4 	orhi	zero,at,651
 8009a38:	0800a2f4 	orhi	zero,at,651
 8009a3c:	0800a2f4 	orhi	zero,at,651
 8009a40:	0800a2f4 	orhi	zero,at,651
 8009a44:	08009ca0 	cmpeqi	zero,at,626
 8009a48:	0800a2f4 	orhi	zero,at,651
 8009a4c:	0800a2f4 	orhi	zero,at,651
 8009a50:	0800a2f4 	orhi	zero,at,651
 8009a54:	0800a2f4 	orhi	zero,at,651
 8009a58:	0800a2f4 	orhi	zero,at,651
 8009a5c:	0800a2f4 	orhi	zero,at,651
 8009a60:	0800a2f4 	orhi	zero,at,651
 8009a64:	0800a2f4 	orhi	zero,at,651
 8009a68:	0800a2f4 	orhi	zero,at,651
 8009a6c:	0800a2f4 	orhi	zero,at,651
 8009a70:	08009f90 	cmplti	zero,at,638
 8009a74:	0800a2f4 	orhi	zero,at,651
 8009a78:	0800a2f4 	orhi	zero,at,651
 8009a7c:	0800a2f4 	orhi	zero,at,651
 8009a80:	0800a2f4 	orhi	zero,at,651
 8009a84:	0800a2f4 	orhi	zero,at,651
 8009a88:	08009fd0 	cmplti	zero,at,639
 8009a8c:	0800a2f4 	orhi	zero,at,651
 8009a90:	0800a2f4 	orhi	zero,at,651
 8009a94:	0800a014 	ori	zero,at,640
 8009a98:	0800a2f4 	orhi	zero,at,651
 8009a9c:	0800a2f4 	orhi	zero,at,651
 8009aa0:	0800a2f4 	orhi	zero,at,651
 8009aa4:	0800a2f4 	orhi	zero,at,651
 8009aa8:	0800a2f4 	orhi	zero,at,651
 8009aac:	0800a2f4 	orhi	zero,at,651
 8009ab0:	0800a2f4 	orhi	zero,at,651
 8009ab4:	0800a2f4 	orhi	zero,at,651
 8009ab8:	0800a2f4 	orhi	zero,at,651
 8009abc:	0800a2f4 	orhi	zero,at,651
 8009ac0:	08009f5c 	xori	zero,at,637
 8009ac4:	0800a2ac 	andhi	zero,at,650
 8009ac8:	0800a2f4 	orhi	zero,at,651
 8009acc:	0800a2f4 	orhi	zero,at,651
 8009ad0:	0800a2f4 	orhi	zero,at,651
 8009ad4:	0800a0e8 	cmpgeui	zero,at,643
 8009ad8:	0800a2ac 	andhi	zero,at,650
 8009adc:	0800a2f4 	orhi	zero,at,651
 8009ae0:	0800a2f4 	orhi	zero,at,651
 8009ae4:	0800a000 	call	800a00 <__alt_mem_onchip_memory2_0+0x800a00>
 8009ae8:	0800a2f4 	orhi	zero,at,651
 8009aec:	0800a24c 	andi	zero,at,649
 8009af0:	0800a1d4 	ori	zero,at,647
 8009af4:	0800a208 	cmpgei	zero,at,648
 8009af8:	0800a0f4 	orhi	zero,at,643
 8009afc:	0800a2f4 	orhi	zero,at,651
 8009b00:	0800a100 	call	800a10 <__alt_mem_onchip_memory2_0+0x800a10>
 8009b04:	0800a2f4 	orhi	zero,at,651
 8009b08:	0800a15c 	xori	zero,at,645
 8009b0c:	0800a2f4 	orhi	zero,at,651
 8009b10:	0800a2f4 	orhi	zero,at,651
 8009b14:	0800a190 	cmplti	zero,at,646
 8009b18:	42000204 	addi	r8,r8,8
 8009b1c:	d8c12517 	ldw	r3,1172(sp)
 8009b20:	1c07883a 	add	r3,r3,r16
 8009b24:	d8c12515 	stw	r3,1172(sp)
 8009b28:	003f8d06 	br	8009960 <__alt_data_end+0xfc009960>
 8009b2c:	d9012117 	ldw	r4,1156(sp)
 8009b30:	d9412017 	ldw	r5,1152(sp)
 8009b34:	80044d40 	call	80044d4 <__swsetup_r>
 8009b38:	1000301e 	bne	r2,zero,8009bfc <___vfiprintf_internal_r+0x3f0>
 8009b3c:	d8812017 	ldw	r2,1152(sp)
 8009b40:	01000284 	movi	r4,10
 8009b44:	10c0030b 	ldhu	r3,12(r2)
 8009b48:	1805883a 	mov	r2,r3
 8009b4c:	1080068c 	andi	r2,r2,26
 8009b50:	113f551e 	bne	r2,r4,80098a8 <__alt_data_end+0xfc0098a8>
 8009b54:	d9012017 	ldw	r4,1152(sp)
 8009b58:	2080038b 	ldhu	r2,14(r4)
 8009b5c:	113fffcc 	andi	r4,r2,65535
 8009b60:	2120001c 	xori	r4,r4,32768
 8009b64:	21200004 	addi	r4,r4,-32768
 8009b68:	203f4f16 	blt	r4,zero,80098a8 <__alt_data_end+0xfc0098a8>
 8009b6c:	d9412017 	ldw	r5,1152(sp)
 8009b70:	d9012117 	ldw	r4,1156(sp)
 8009b74:	d9c12317 	ldw	r7,1164(sp)
 8009b78:	2b001917 	ldw	r12,100(r5)
 8009b7c:	2ac00717 	ldw	r11,28(r5)
 8009b80:	2a800917 	ldw	r10,36(r5)
 8009b84:	02010004 	movi	r8,1024
 8009b88:	18ffff4c 	andi	r3,r3,65533
 8009b8c:	da0b883a 	add	r5,sp,r8
 8009b90:	980d883a 	mov	r6,r19
 8009b94:	d8c1030d 	sth	r3,1036(sp)
 8009b98:	db011915 	stw	r12,1124(sp)
 8009b9c:	d881038d 	sth	r2,1038(sp)
 8009ba0:	dac10715 	stw	r11,1052(sp)
 8009ba4:	da810915 	stw	r10,1060(sp)
 8009ba8:	dec10015 	stw	sp,1024(sp)
 8009bac:	dec10415 	stw	sp,1040(sp)
 8009bb0:	da010215 	stw	r8,1032(sp)
 8009bb4:	da010515 	stw	r8,1044(sp)
 8009bb8:	d8010615 	stw	zero,1048(sp)
 8009bbc:	800980c0 	call	800980c <___vfiprintf_internal_r>
 8009bc0:	1021883a 	mov	r16,r2
 8009bc4:	10000416 	blt	r2,zero,8009bd8 <___vfiprintf_internal_r+0x3cc>
 8009bc8:	d9012117 	ldw	r4,1156(sp)
 8009bcc:	d9410004 	addi	r5,sp,1024
 8009bd0:	8005f540 	call	8005f54 <_fflush_r>
 8009bd4:	10040f1e 	bne	r2,zero,800ac14 <___vfiprintf_internal_r+0x1408>
 8009bd8:	d881030b 	ldhu	r2,1036(sp)
 8009bdc:	1080100c 	andi	r2,r2,64
 8009be0:	10000426 	beq	r2,zero,8009bf4 <___vfiprintf_internal_r+0x3e8>
 8009be4:	d8c12017 	ldw	r3,1152(sp)
 8009be8:	1880030b 	ldhu	r2,12(r3)
 8009bec:	10801014 	ori	r2,r2,64
 8009bf0:	1880030d 	sth	r2,12(r3)
 8009bf4:	8005883a 	mov	r2,r16
 8009bf8:	00000106 	br	8009c00 <___vfiprintf_internal_r+0x3f4>
 8009bfc:	00bfffc4 	movi	r2,-1
 8009c00:	dfc13517 	ldw	ra,1236(sp)
 8009c04:	df013417 	ldw	fp,1232(sp)
 8009c08:	ddc13317 	ldw	r23,1228(sp)
 8009c0c:	dd813217 	ldw	r22,1224(sp)
 8009c10:	dd413117 	ldw	r21,1220(sp)
 8009c14:	dd013017 	ldw	r20,1216(sp)
 8009c18:	dcc12f17 	ldw	r19,1212(sp)
 8009c1c:	dc812e17 	ldw	r18,1208(sp)
 8009c20:	dc412d17 	ldw	r17,1204(sp)
 8009c24:	dc012c17 	ldw	r16,1200(sp)
 8009c28:	dec13604 	addi	sp,sp,1240
 8009c2c:	f800283a 	ret
 8009c30:	80065100 	call	8006510 <__sinit>
 8009c34:	003f0706 	br	8009854 <__alt_data_end+0xfc009854>
 8009c38:	d8c12417 	ldw	r3,1168(sp)
 8009c3c:	d8812315 	stw	r2,1164(sp)
 8009c40:	00c7c83a 	sub	r3,zero,r3
 8009c44:	d8c12415 	stw	r3,1168(sp)
 8009c48:	94800114 	ori	r18,r18,4
 8009c4c:	b9800007 	ldb	r6,0(r23)
 8009c50:	003f4f06 	br	8009990 <__alt_data_end+0xfc009990>
 8009c54:	94802014 	ori	r18,r18,128
 8009c58:	b9800007 	ldb	r6,0(r23)
 8009c5c:	003f4c06 	br	8009990 <__alt_data_end+0xfc009990>
 8009c60:	dc012615 	stw	r16,1176(sp)
 8009c64:	d8012415 	stw	zero,1168(sp)
 8009c68:	35bff404 	addi	r22,r6,-48
 8009c6c:	0009883a 	mov	r4,zero
 8009c70:	b821883a 	mov	r16,r23
 8009c74:	01400284 	movi	r5,10
 8009c78:	800c3280 	call	800c328 <__mulsi3>
 8009c7c:	81800007 	ldb	r6,0(r16)
 8009c80:	1589883a 	add	r4,r2,r22
 8009c84:	bdc00044 	addi	r23,r23,1
 8009c88:	35bff404 	addi	r22,r6,-48
 8009c8c:	b821883a 	mov	r16,r23
 8009c90:	adbff82e 	bgeu	r21,r22,8009c74 <__alt_data_end+0xfc009c74>
 8009c94:	d9012415 	stw	r4,1168(sp)
 8009c98:	dc012617 	ldw	r16,1176(sp)
 8009c9c:	003f3d06 	br	8009994 <__alt_data_end+0xfc009994>
 8009ca0:	d8c12203 	ldbu	r3,1160(sp)
 8009ca4:	94800414 	ori	r18,r18,16
 8009ca8:	9080080c 	andi	r2,r18,32
 8009cac:	d8c11d85 	stb	r3,1142(sp)
 8009cb0:	9811883a 	mov	r8,r19
 8009cb4:	d8c12317 	ldw	r3,1164(sp)
 8009cb8:	10018226 	beq	r2,zero,800a2c4 <___vfiprintf_internal_r+0xab8>
 8009cbc:	d9012317 	ldw	r4,1164(sp)
 8009cc0:	18800117 	ldw	r2,4(r3)
 8009cc4:	1cc00017 	ldw	r19,0(r3)
 8009cc8:	21000204 	addi	r4,r4,8
 8009ccc:	d9012315 	stw	r4,1164(sp)
 8009cd0:	102b883a 	mov	r21,r2
 8009cd4:	10030016 	blt	r2,zero,800a8d8 <___vfiprintf_internal_r+0x10cc>
 8009cd8:	dd811d83 	ldbu	r22,1142(sp)
 8009cdc:	8029883a 	mov	r20,r16
 8009ce0:	00800044 	movi	r2,1
 8009ce4:	9d46b03a 	or	r3,r19,r21
 8009ce8:	80000216 	blt	r16,zero,8009cf4 <___vfiprintf_internal_r+0x4e8>
 8009cec:	013fdfc4 	movi	r4,-129
 8009cf0:	9124703a 	and	r18,r18,r4
 8009cf4:	1801b41e 	bne	r3,zero,800a3c8 <___vfiprintf_internal_r+0xbbc>
 8009cf8:	80028126 	beq	r16,zero,800a700 <___vfiprintf_internal_r+0xef4>
 8009cfc:	10803fcc 	andi	r2,r2,255
 8009d00:	00c00044 	movi	r3,1
 8009d04:	10c1d126 	beq	r2,r3,800a44c <___vfiprintf_internal_r+0xc40>
 8009d08:	00c00084 	movi	r3,2
 8009d0c:	10c28626 	beq	r2,r3,800a728 <___vfiprintf_internal_r+0xf1c>
 8009d10:	d8c10a04 	addi	r3,sp,1064
 8009d14:	9808d0fa 	srli	r4,r19,3
 8009d18:	a80a977a 	slli	r5,r21,29
 8009d1c:	a82ad0fa 	srli	r21,r21,3
 8009d20:	9cc001cc 	andi	r19,r19,7
 8009d24:	98800c04 	addi	r2,r19,48
 8009d28:	18ffffc4 	addi	r3,r3,-1
 8009d2c:	2926b03a 	or	r19,r5,r4
 8009d30:	18800005 	stb	r2,0(r3)
 8009d34:	9d48b03a 	or	r4,r19,r21
 8009d38:	203ff61e 	bne	r4,zero,8009d14 <__alt_data_end+0xfc009d14>
 8009d3c:	9100004c 	andi	r4,r18,1
 8009d40:	d8c12215 	stw	r3,1160(sp)
 8009d44:	2002b31e 	bne	r4,zero,800a814 <___vfiprintf_internal_r+0x1008>
 8009d48:	d9411e17 	ldw	r5,1144(sp)
 8009d4c:	28e9c83a 	sub	r20,r5,r3
 8009d50:	a02b883a 	mov	r21,r20
 8009d54:	a400010e 	bge	r20,r16,8009d5c <___vfiprintf_internal_r+0x550>
 8009d58:	802b883a 	mov	r21,r16
 8009d5c:	b5803fcc 	andi	r22,r22,255
 8009d60:	b580201c 	xori	r22,r22,128
 8009d64:	b5bfe004 	addi	r22,r22,-128
 8009d68:	b0000126 	beq	r22,zero,8009d70 <___vfiprintf_internal_r+0x564>
 8009d6c:	ad400044 	addi	r21,r21,1
 8009d70:	9280008c 	andi	r10,r18,2
 8009d74:	50000126 	beq	r10,zero,8009d7c <___vfiprintf_internal_r+0x570>
 8009d78:	ad400084 	addi	r21,r21,2
 8009d7c:	9580210c 	andi	r22,r18,132
 8009d80:	b001751e 	bne	r22,zero,800a358 <___vfiprintf_internal_r+0xb4c>
 8009d84:	d9012417 	ldw	r4,1168(sp)
 8009d88:	2567c83a 	sub	r19,r4,r21
 8009d8c:	04c1720e 	bge	zero,r19,800a358 <___vfiprintf_internal_r+0xb4c>
 8009d90:	01c00404 	movi	r7,16
 8009d94:	d8c11c17 	ldw	r3,1136(sp)
 8009d98:	3cc36b0e 	bge	r7,r19,800ab48 <___vfiprintf_internal_r+0x133c>
 8009d9c:	00820074 	movhi	r2,2049
 8009da0:	10872804 	addi	r2,r2,7328
 8009da4:	dc012915 	stw	r16,1188(sp)
 8009da8:	d9011b17 	ldw	r4,1132(sp)
 8009dac:	9821883a 	mov	r16,r19
 8009db0:	d8812615 	stw	r2,1176(sp)
 8009db4:	030001c4 	movi	r12,7
 8009db8:	5027883a 	mov	r19,r10
 8009dbc:	00000506 	br	8009dd4 <___vfiprintf_internal_r+0x5c8>
 8009dc0:	21400084 	addi	r5,r4,2
 8009dc4:	42000204 	addi	r8,r8,8
 8009dc8:	1009883a 	mov	r4,r2
 8009dcc:	843ffc04 	addi	r16,r16,-16
 8009dd0:	3c000d0e 	bge	r7,r16,8009e08 <___vfiprintf_internal_r+0x5fc>
 8009dd4:	18c00404 	addi	r3,r3,16
 8009dd8:	20800044 	addi	r2,r4,1
 8009ddc:	47000015 	stw	fp,0(r8)
 8009de0:	41c00115 	stw	r7,4(r8)
 8009de4:	d8c11c15 	stw	r3,1136(sp)
 8009de8:	d8811b15 	stw	r2,1132(sp)
 8009dec:	60bff40e 	bge	r12,r2,8009dc0 <__alt_data_end+0xfc009dc0>
 8009df0:	18014b1e 	bne	r3,zero,800a320 <___vfiprintf_internal_r+0xb14>
 8009df4:	843ffc04 	addi	r16,r16,-16
 8009df8:	0009883a 	mov	r4,zero
 8009dfc:	01400044 	movi	r5,1
 8009e00:	d811883a 	mov	r8,sp
 8009e04:	3c3ff316 	blt	r7,r16,8009dd4 <__alt_data_end+0xfc009dd4>
 8009e08:	9815883a 	mov	r10,r19
 8009e0c:	8027883a 	mov	r19,r16
 8009e10:	dc012917 	ldw	r16,1188(sp)
 8009e14:	d9012617 	ldw	r4,1176(sp)
 8009e18:	98c7883a 	add	r3,r19,r3
 8009e1c:	44c00115 	stw	r19,4(r8)
 8009e20:	41000015 	stw	r4,0(r8)
 8009e24:	d8c11c15 	stw	r3,1136(sp)
 8009e28:	d9411b15 	stw	r5,1132(sp)
 8009e2c:	008001c4 	movi	r2,7
 8009e30:	11425116 	blt	r2,r5,800a778 <___vfiprintf_internal_r+0xf6c>
 8009e34:	d9011d87 	ldb	r4,1142(sp)
 8009e38:	42000204 	addi	r8,r8,8
 8009e3c:	28800044 	addi	r2,r5,1
 8009e40:	20014a1e 	bne	r4,zero,800a36c <___vfiprintf_internal_r+0xb60>
 8009e44:	50000c26 	beq	r10,zero,8009e78 <___vfiprintf_internal_r+0x66c>
 8009e48:	d9011d04 	addi	r4,sp,1140
 8009e4c:	18c00084 	addi	r3,r3,2
 8009e50:	41000015 	stw	r4,0(r8)
 8009e54:	01000084 	movi	r4,2
 8009e58:	41000115 	stw	r4,4(r8)
 8009e5c:	d8c11c15 	stw	r3,1136(sp)
 8009e60:	d8811b15 	stw	r2,1132(sp)
 8009e64:	010001c4 	movi	r4,7
 8009e68:	20822016 	blt	r4,r2,800a6ec <___vfiprintf_internal_r+0xee0>
 8009e6c:	100b883a 	mov	r5,r2
 8009e70:	42000204 	addi	r8,r8,8
 8009e74:	10800044 	addi	r2,r2,1
 8009e78:	01002004 	movi	r4,128
 8009e7c:	b101de26 	beq	r22,r4,800a5f8 <___vfiprintf_internal_r+0xdec>
 8009e80:	8521c83a 	sub	r16,r16,r20
 8009e84:	0400230e 	bge	zero,r16,8009f14 <___vfiprintf_internal_r+0x708>
 8009e88:	04c00404 	movi	r19,16
 8009e8c:	9c030d0e 	bge	r19,r16,800aac4 <___vfiprintf_internal_r+0x12b8>
 8009e90:	00820074 	movhi	r2,2049
 8009e94:	10872404 	addi	r2,r2,7312
 8009e98:	d8812615 	stw	r2,1176(sp)
 8009e9c:	058001c4 	movi	r22,7
 8009ea0:	00000506 	br	8009eb8 <___vfiprintf_internal_r+0x6ac>
 8009ea4:	28800084 	addi	r2,r5,2
 8009ea8:	42000204 	addi	r8,r8,8
 8009eac:	200b883a 	mov	r5,r4
 8009eb0:	843ffc04 	addi	r16,r16,-16
 8009eb4:	9c000d0e 	bge	r19,r16,8009eec <___vfiprintf_internal_r+0x6e0>
 8009eb8:	18c00404 	addi	r3,r3,16
 8009ebc:	29000044 	addi	r4,r5,1
 8009ec0:	44400015 	stw	r17,0(r8)
 8009ec4:	44c00115 	stw	r19,4(r8)
 8009ec8:	d8c11c15 	stw	r3,1136(sp)
 8009ecc:	d9011b15 	stw	r4,1132(sp)
 8009ed0:	b13ff40e 	bge	r22,r4,8009ea4 <__alt_data_end+0xfc009ea4>
 8009ed4:	1801321e 	bne	r3,zero,800a3a0 <___vfiprintf_internal_r+0xb94>
 8009ed8:	843ffc04 	addi	r16,r16,-16
 8009edc:	000b883a 	mov	r5,zero
 8009ee0:	00800044 	movi	r2,1
 8009ee4:	d811883a 	mov	r8,sp
 8009ee8:	9c3ff316 	blt	r19,r16,8009eb8 <__alt_data_end+0xfc009eb8>
 8009eec:	d9012617 	ldw	r4,1176(sp)
 8009ef0:	1c07883a 	add	r3,r3,r16
 8009ef4:	44000115 	stw	r16,4(r8)
 8009ef8:	41000015 	stw	r4,0(r8)
 8009efc:	d8c11c15 	stw	r3,1136(sp)
 8009f00:	d8811b15 	stw	r2,1132(sp)
 8009f04:	010001c4 	movi	r4,7
 8009f08:	20816216 	blt	r4,r2,800a494 <___vfiprintf_internal_r+0xc88>
 8009f0c:	42000204 	addi	r8,r8,8
 8009f10:	10800044 	addi	r2,r2,1
 8009f14:	d9012217 	ldw	r4,1160(sp)
 8009f18:	1d07883a 	add	r3,r3,r20
 8009f1c:	45000115 	stw	r20,4(r8)
 8009f20:	41000015 	stw	r4,0(r8)
 8009f24:	d8c11c15 	stw	r3,1136(sp)
 8009f28:	d8811b15 	stw	r2,1132(sp)
 8009f2c:	010001c4 	movi	r4,7
 8009f30:	2081610e 	bge	r4,r2,800a4b8 <___vfiprintf_internal_r+0xcac>
 8009f34:	1802211e 	bne	r3,zero,800a7bc <___vfiprintf_internal_r+0xfb0>
 8009f38:	d8011b15 	stw	zero,1132(sp)
 8009f3c:	9480010c 	andi	r18,r18,4
 8009f40:	9002171e 	bne	r18,zero,800a7a0 <___vfiprintf_internal_r+0xf94>
 8009f44:	d9412417 	ldw	r5,1168(sp)
 8009f48:	a9433716 	blt	r21,r5,800ac28 <___vfiprintf_internal_r+0x141c>
 8009f4c:	d8812517 	ldw	r2,1172(sp)
 8009f50:	1545883a 	add	r2,r2,r21
 8009f54:	d8812515 	stw	r2,1172(sp)
 8009f58:	00019a06 	br	800a5c4 <___vfiprintf_internal_r+0xdb8>
 8009f5c:	d8c12317 	ldw	r3,1164(sp)
 8009f60:	05400044 	movi	r21,1
 8009f64:	9811883a 	mov	r8,r19
 8009f68:	18800017 	ldw	r2,0(r3)
 8009f6c:	18c00104 	addi	r3,r3,4
 8009f70:	d8c12315 	stw	r3,1164(sp)
 8009f74:	d8c10004 	addi	r3,sp,1024
 8009f78:	d8011d85 	stb	zero,1142(sp)
 8009f7c:	d8810005 	stb	r2,1024(sp)
 8009f80:	a829883a 	mov	r20,r21
 8009f84:	d8c12215 	stw	r3,1160(sp)
 8009f88:	0021883a 	mov	r16,zero
 8009f8c:	003f7806 	br	8009d70 <__alt_data_end+0xfc009d70>
 8009f90:	94800414 	ori	r18,r18,16
 8009f94:	9080080c 	andi	r2,r18,32
 8009f98:	9811883a 	mov	r8,r19
 8009f9c:	10009026 	beq	r2,zero,800a1e0 <___vfiprintf_internal_r+0x9d4>
 8009fa0:	d8812317 	ldw	r2,1164(sp)
 8009fa4:	d8c12317 	ldw	r3,1164(sp)
 8009fa8:	14c00017 	ldw	r19,0(r2)
 8009fac:	15400117 	ldw	r21,4(r2)
 8009fb0:	18c00204 	addi	r3,r3,8
 8009fb4:	d8c12315 	stw	r3,1164(sp)
 8009fb8:	0005883a 	mov	r2,zero
 8009fbc:	9d46b03a 	or	r3,r19,r21
 8009fc0:	d8011d85 	stb	zero,1142(sp)
 8009fc4:	8029883a 	mov	r20,r16
 8009fc8:	002d883a 	mov	r22,zero
 8009fcc:	003f4606 	br	8009ce8 <__alt_data_end+0xfc009ce8>
 8009fd0:	94800414 	ori	r18,r18,16
 8009fd4:	9080080c 	andi	r2,r18,32
 8009fd8:	9811883a 	mov	r8,r19
 8009fdc:	10006226 	beq	r2,zero,800a168 <___vfiprintf_internal_r+0x95c>
 8009fe0:	d9012317 	ldw	r4,1164(sp)
 8009fe4:	00800044 	movi	r2,1
 8009fe8:	24c00017 	ldw	r19,0(r4)
 8009fec:	25400117 	ldw	r21,4(r4)
 8009ff0:	21000204 	addi	r4,r4,8
 8009ff4:	d9012315 	stw	r4,1164(sp)
 8009ff8:	9d46b03a 	or	r3,r19,r21
 8009ffc:	003ff006 	br	8009fc0 <__alt_data_end+0xfc009fc0>
 800a000:	b9800007 	ldb	r6,0(r23)
 800a004:	00801b04 	movi	r2,108
 800a008:	3082b226 	beq	r6,r2,800aad4 <___vfiprintf_internal_r+0x12c8>
 800a00c:	94800414 	ori	r18,r18,16
 800a010:	003e5f06 	br	8009990 <__alt_data_end+0xfc009990>
 800a014:	d8c12203 	ldbu	r3,1160(sp)
 800a018:	01020074 	movhi	r4,2049
 800a01c:	2106be04 	addi	r4,r4,6904
 800a020:	d8c11d85 	stb	r3,1142(sp)
 800a024:	d9012715 	stw	r4,1180(sp)
 800a028:	90c0080c 	andi	r3,r18,32
 800a02c:	9811883a 	mov	r8,r19
 800a030:	d8812317 	ldw	r2,1164(sp)
 800a034:	18005f26 	beq	r3,zero,800a1b4 <___vfiprintf_internal_r+0x9a8>
 800a038:	d9012317 	ldw	r4,1164(sp)
 800a03c:	14c00017 	ldw	r19,0(r2)
 800a040:	15400117 	ldw	r21,4(r2)
 800a044:	21000204 	addi	r4,r4,8
 800a048:	d9012315 	stw	r4,1164(sp)
 800a04c:	9080004c 	andi	r2,r18,1
 800a050:	1001e226 	beq	r2,zero,800a7dc <___vfiprintf_internal_r+0xfd0>
 800a054:	9d46b03a 	or	r3,r19,r21
 800a058:	18024e26 	beq	r3,zero,800a994 <___vfiprintf_internal_r+0x1188>
 800a05c:	00800c04 	movi	r2,48
 800a060:	d8811d05 	stb	r2,1140(sp)
 800a064:	d9811d45 	stb	r6,1141(sp)
 800a068:	94800094 	ori	r18,r18,2
 800a06c:	00800084 	movi	r2,2
 800a070:	003fd306 	br	8009fc0 <__alt_data_end+0xfc009fc0>
 800a074:	d9012317 	ldw	r4,1164(sp)
 800a078:	d9412317 	ldw	r5,1164(sp)
 800a07c:	21000017 	ldw	r4,0(r4)
 800a080:	28800104 	addi	r2,r5,4
 800a084:	d9012415 	stw	r4,1168(sp)
 800a088:	203eeb16 	blt	r4,zero,8009c38 <__alt_data_end+0xfc009c38>
 800a08c:	d8812315 	stw	r2,1164(sp)
 800a090:	b9800007 	ldb	r6,0(r23)
 800a094:	003e3e06 	br	8009990 <__alt_data_end+0xfc009990>
 800a098:	b9800007 	ldb	r6,0(r23)
 800a09c:	01000a84 	movi	r4,42
 800a0a0:	b8800044 	addi	r2,r23,1
 800a0a4:	3102d226 	beq	r6,r4,800abf0 <___vfiprintf_internal_r+0x13e4>
 800a0a8:	35bff404 	addi	r22,r6,-48
 800a0ac:	102f883a 	mov	r23,r2
 800a0b0:	0021883a 	mov	r16,zero
 800a0b4:	adbe3736 	bltu	r21,r22,8009994 <__alt_data_end+0xfc009994>
 800a0b8:	0009883a 	mov	r4,zero
 800a0bc:	01400284 	movi	r5,10
 800a0c0:	800c3280 	call	800c328 <__mulsi3>
 800a0c4:	b9800007 	ldb	r6,0(r23)
 800a0c8:	b089883a 	add	r4,r22,r2
 800a0cc:	bdc00044 	addi	r23,r23,1
 800a0d0:	35bff404 	addi	r22,r6,-48
 800a0d4:	adbff92e 	bgeu	r21,r22,800a0bc <__alt_data_end+0xfc00a0bc>
 800a0d8:	2021883a 	mov	r16,r4
 800a0dc:	203e2d0e 	bge	r4,zero,8009994 <__alt_data_end+0xfc009994>
 800a0e0:	043fffc4 	movi	r16,-1
 800a0e4:	003e2b06 	br	8009994 <__alt_data_end+0xfc009994>
 800a0e8:	94801014 	ori	r18,r18,64
 800a0ec:	b9800007 	ldb	r6,0(r23)
 800a0f0:	003e2706 	br	8009990 <__alt_data_end+0xfc009990>
 800a0f4:	94800814 	ori	r18,r18,32
 800a0f8:	b9800007 	ldb	r6,0(r23)
 800a0fc:	003e2406 	br	8009990 <__alt_data_end+0xfc009990>
 800a100:	d9412317 	ldw	r5,1164(sp)
 800a104:	d8812317 	ldw	r2,1164(sp)
 800a108:	d8011d85 	stb	zero,1142(sp)
 800a10c:	29400017 	ldw	r5,0(r5)
 800a110:	9811883a 	mov	r8,r19
 800a114:	14c00104 	addi	r19,r2,4
 800a118:	d9412215 	stw	r5,1160(sp)
 800a11c:	28029026 	beq	r5,zero,800ab60 <___vfiprintf_internal_r+0x1354>
 800a120:	d9012217 	ldw	r4,1160(sp)
 800a124:	80027616 	blt	r16,zero,800ab00 <___vfiprintf_internal_r+0x12f4>
 800a128:	000b883a 	mov	r5,zero
 800a12c:	800d883a 	mov	r6,r16
 800a130:	da012a15 	stw	r8,1192(sp)
 800a134:	80079c80 	call	80079c8 <memchr>
 800a138:	da012a17 	ldw	r8,1192(sp)
 800a13c:	1002a026 	beq	r2,zero,800abc0 <___vfiprintf_internal_r+0x13b4>
 800a140:	d8c12217 	ldw	r3,1160(sp)
 800a144:	10e9c83a 	sub	r20,r2,r3
 800a148:	85023816 	blt	r16,r20,800aa2c <___vfiprintf_internal_r+0x1220>
 800a14c:	dd811d83 	ldbu	r22,1142(sp)
 800a150:	dcc12315 	stw	r19,1164(sp)
 800a154:	0021883a 	mov	r16,zero
 800a158:	003efd06 	br	8009d50 <__alt_data_end+0xfc009d50>
 800a15c:	9080080c 	andi	r2,r18,32
 800a160:	9811883a 	mov	r8,r19
 800a164:	103f9e1e 	bne	r2,zero,8009fe0 <__alt_data_end+0xfc009fe0>
 800a168:	9080040c 	andi	r2,r18,16
 800a16c:	10021726 	beq	r2,zero,800a9cc <___vfiprintf_internal_r+0x11c0>
 800a170:	d9412317 	ldw	r5,1164(sp)
 800a174:	002b883a 	mov	r21,zero
 800a178:	00800044 	movi	r2,1
 800a17c:	2cc00017 	ldw	r19,0(r5)
 800a180:	29400104 	addi	r5,r5,4
 800a184:	d9412315 	stw	r5,1164(sp)
 800a188:	9807883a 	mov	r3,r19
 800a18c:	003f8c06 	br	8009fc0 <__alt_data_end+0xfc009fc0>
 800a190:	d8c12203 	ldbu	r3,1160(sp)
 800a194:	01020074 	movhi	r4,2049
 800a198:	2106c304 	addi	r4,r4,6924
 800a19c:	d8c11d85 	stb	r3,1142(sp)
 800a1a0:	d9012715 	stw	r4,1180(sp)
 800a1a4:	90c0080c 	andi	r3,r18,32
 800a1a8:	9811883a 	mov	r8,r19
 800a1ac:	d8812317 	ldw	r2,1164(sp)
 800a1b0:	183fa11e 	bne	r3,zero,800a038 <__alt_data_end+0xfc00a038>
 800a1b4:	90c0040c 	andi	r3,r18,16
 800a1b8:	1801e526 	beq	r3,zero,800a950 <___vfiprintf_internal_r+0x1144>
 800a1bc:	d9412317 	ldw	r5,1164(sp)
 800a1c0:	14c00017 	ldw	r19,0(r2)
 800a1c4:	002b883a 	mov	r21,zero
 800a1c8:	29400104 	addi	r5,r5,4
 800a1cc:	d9412315 	stw	r5,1164(sp)
 800a1d0:	003f9e06 	br	800a04c <__alt_data_end+0xfc00a04c>
 800a1d4:	9080080c 	andi	r2,r18,32
 800a1d8:	9811883a 	mov	r8,r19
 800a1dc:	103f701e 	bne	r2,zero,8009fa0 <__alt_data_end+0xfc009fa0>
 800a1e0:	9080040c 	andi	r2,r18,16
 800a1e4:	1001ef26 	beq	r2,zero,800a9a4 <___vfiprintf_internal_r+0x1198>
 800a1e8:	d9012317 	ldw	r4,1164(sp)
 800a1ec:	002b883a 	mov	r21,zero
 800a1f0:	0005883a 	mov	r2,zero
 800a1f4:	24c00017 	ldw	r19,0(r4)
 800a1f8:	21000104 	addi	r4,r4,4
 800a1fc:	d9012315 	stw	r4,1164(sp)
 800a200:	9807883a 	mov	r3,r19
 800a204:	003f6e06 	br	8009fc0 <__alt_data_end+0xfc009fc0>
 800a208:	d8c12317 	ldw	r3,1164(sp)
 800a20c:	9811883a 	mov	r8,r19
 800a210:	00800c04 	movi	r2,48
 800a214:	1cc00017 	ldw	r19,0(r3)
 800a218:	01020074 	movhi	r4,2049
 800a21c:	18c00104 	addi	r3,r3,4
 800a220:	d8811d05 	stb	r2,1140(sp)
 800a224:	2106c304 	addi	r4,r4,6924
 800a228:	00801e04 	movi	r2,120
 800a22c:	d8811d45 	stb	r2,1141(sp)
 800a230:	d8c12315 	stw	r3,1164(sp)
 800a234:	002b883a 	mov	r21,zero
 800a238:	94800094 	ori	r18,r18,2
 800a23c:	d9012715 	stw	r4,1180(sp)
 800a240:	00800084 	movi	r2,2
 800a244:	9807883a 	mov	r3,r19
 800a248:	003f5d06 	br	8009fc0 <__alt_data_end+0xfc009fc0>
 800a24c:	d8c12203 	ldbu	r3,1160(sp)
 800a250:	9080080c 	andi	r2,r18,32
 800a254:	9811883a 	mov	r8,r19
 800a258:	d8c11d85 	stb	r3,1142(sp)
 800a25c:	1001b126 	beq	r2,zero,800a924 <___vfiprintf_internal_r+0x1118>
 800a260:	d9012317 	ldw	r4,1164(sp)
 800a264:	d9412517 	ldw	r5,1172(sp)
 800a268:	20800017 	ldw	r2,0(r4)
 800a26c:	2807d7fa 	srai	r3,r5,31
 800a270:	21000104 	addi	r4,r4,4
 800a274:	d9012315 	stw	r4,1164(sp)
 800a278:	11400015 	stw	r5,0(r2)
 800a27c:	10c00115 	stw	r3,4(r2)
 800a280:	003d9a06 	br	80098ec <__alt_data_end+0xfc0098ec>
 800a284:	d8812207 	ldb	r2,1160(sp)
 800a288:	1001c41e 	bne	r2,zero,800a99c <___vfiprintf_internal_r+0x1190>
 800a28c:	00c00804 	movi	r3,32
 800a290:	d8c12205 	stb	r3,1160(sp)
 800a294:	b9800007 	ldb	r6,0(r23)
 800a298:	003dbd06 	br	8009990 <__alt_data_end+0xfc009990>
 800a29c:	00c00ac4 	movi	r3,43
 800a2a0:	d8c12205 	stb	r3,1160(sp)
 800a2a4:	b9800007 	ldb	r6,0(r23)
 800a2a8:	003db906 	br	8009990 <__alt_data_end+0xfc009990>
 800a2ac:	d8c12203 	ldbu	r3,1160(sp)
 800a2b0:	9080080c 	andi	r2,r18,32
 800a2b4:	9811883a 	mov	r8,r19
 800a2b8:	d8c11d85 	stb	r3,1142(sp)
 800a2bc:	d8c12317 	ldw	r3,1164(sp)
 800a2c0:	103e7e1e 	bne	r2,zero,8009cbc <__alt_data_end+0xfc009cbc>
 800a2c4:	9080040c 	andi	r2,r18,16
 800a2c8:	1001a926 	beq	r2,zero,800a970 <___vfiprintf_internal_r+0x1164>
 800a2cc:	1cc00017 	ldw	r19,0(r3)
 800a2d0:	d9412317 	ldw	r5,1164(sp)
 800a2d4:	982bd7fa 	srai	r21,r19,31
 800a2d8:	29400104 	addi	r5,r5,4
 800a2dc:	d9412315 	stw	r5,1164(sp)
 800a2e0:	a805883a 	mov	r2,r21
 800a2e4:	003e7b06 	br	8009cd4 <__alt_data_end+0xfc009cd4>
 800a2e8:	94800054 	ori	r18,r18,1
 800a2ec:	b9800007 	ldb	r6,0(r23)
 800a2f0:	003da706 	br	8009990 <__alt_data_end+0xfc009990>
 800a2f4:	d8c12203 	ldbu	r3,1160(sp)
 800a2f8:	9811883a 	mov	r8,r19
 800a2fc:	d8c11d85 	stb	r3,1142(sp)
 800a300:	30005826 	beq	r6,zero,800a464 <___vfiprintf_internal_r+0xc58>
 800a304:	05400044 	movi	r21,1
 800a308:	d8c10004 	addi	r3,sp,1024
 800a30c:	d9810005 	stb	r6,1024(sp)
 800a310:	d8011d85 	stb	zero,1142(sp)
 800a314:	a829883a 	mov	r20,r21
 800a318:	d8c12215 	stw	r3,1160(sp)
 800a31c:	003f1a06 	br	8009f88 <__alt_data_end+0xfc009f88>
 800a320:	d9012117 	ldw	r4,1156(sp)
 800a324:	d9412017 	ldw	r5,1152(sp)
 800a328:	d9811a04 	addi	r6,sp,1128
 800a32c:	d9c12a15 	stw	r7,1192(sp)
 800a330:	db012b15 	stw	r12,1196(sp)
 800a334:	80096f80 	call	80096f8 <__sprint_r.part.0>
 800a338:	d9c12a17 	ldw	r7,1192(sp)
 800a33c:	db012b17 	ldw	r12,1196(sp)
 800a340:	10004e1e 	bne	r2,zero,800a47c <___vfiprintf_internal_r+0xc70>
 800a344:	d9011b17 	ldw	r4,1132(sp)
 800a348:	d8c11c17 	ldw	r3,1136(sp)
 800a34c:	d811883a 	mov	r8,sp
 800a350:	21400044 	addi	r5,r4,1
 800a354:	003e9d06 	br	8009dcc <__alt_data_end+0xfc009dcc>
 800a358:	d9411b17 	ldw	r5,1132(sp)
 800a35c:	d8c11c17 	ldw	r3,1136(sp)
 800a360:	28800044 	addi	r2,r5,1
 800a364:	d9011d87 	ldb	r4,1142(sp)
 800a368:	203eb626 	beq	r4,zero,8009e44 <__alt_data_end+0xfc009e44>
 800a36c:	01000044 	movi	r4,1
 800a370:	d9411d84 	addi	r5,sp,1142
 800a374:	1907883a 	add	r3,r3,r4
 800a378:	41400015 	stw	r5,0(r8)
 800a37c:	41000115 	stw	r4,4(r8)
 800a380:	d8c11c15 	stw	r3,1136(sp)
 800a384:	d8811b15 	stw	r2,1132(sp)
 800a388:	014001c4 	movi	r5,7
 800a38c:	2880ce16 	blt	r5,r2,800a6c8 <___vfiprintf_internal_r+0xebc>
 800a390:	100b883a 	mov	r5,r2
 800a394:	42000204 	addi	r8,r8,8
 800a398:	10800044 	addi	r2,r2,1
 800a39c:	003ea906 	br	8009e44 <__alt_data_end+0xfc009e44>
 800a3a0:	d9012117 	ldw	r4,1156(sp)
 800a3a4:	d9412017 	ldw	r5,1152(sp)
 800a3a8:	d9811a04 	addi	r6,sp,1128
 800a3ac:	80096f80 	call	80096f8 <__sprint_r.part.0>
 800a3b0:	1000321e 	bne	r2,zero,800a47c <___vfiprintf_internal_r+0xc70>
 800a3b4:	d9411b17 	ldw	r5,1132(sp)
 800a3b8:	d8c11c17 	ldw	r3,1136(sp)
 800a3bc:	d811883a 	mov	r8,sp
 800a3c0:	28800044 	addi	r2,r5,1
 800a3c4:	003eba06 	br	8009eb0 <__alt_data_end+0xfc009eb0>
 800a3c8:	10803fcc 	andi	r2,r2,255
 800a3cc:	00c00044 	movi	r3,1
 800a3d0:	10fe4d1e 	bne	r2,r3,8009d08 <__alt_data_end+0xfc009d08>
 800a3d4:	a800021e 	bne	r21,zero,800a3e0 <___vfiprintf_internal_r+0xbd4>
 800a3d8:	00800244 	movi	r2,9
 800a3dc:	14c01b2e 	bgeu	r2,r19,800a44c <___vfiprintf_internal_r+0xc40>
 800a3e0:	dc012215 	stw	r16,1160(sp)
 800a3e4:	dd010a04 	addi	r20,sp,1064
 800a3e8:	a821883a 	mov	r16,r21
 800a3ec:	402b883a 	mov	r21,r8
 800a3f0:	9809883a 	mov	r4,r19
 800a3f4:	800b883a 	mov	r5,r16
 800a3f8:	01800284 	movi	r6,10
 800a3fc:	000f883a 	mov	r7,zero
 800a400:	800bbe00 	call	800bbe0 <__umoddi3>
 800a404:	10800c04 	addi	r2,r2,48
 800a408:	a53fffc4 	addi	r20,r20,-1
 800a40c:	9809883a 	mov	r4,r19
 800a410:	800b883a 	mov	r5,r16
 800a414:	01800284 	movi	r6,10
 800a418:	000f883a 	mov	r7,zero
 800a41c:	a0800005 	stb	r2,0(r20)
 800a420:	800b5a00 	call	800b5a0 <__udivdi3>
 800a424:	1027883a 	mov	r19,r2
 800a428:	10c4b03a 	or	r2,r2,r3
 800a42c:	1821883a 	mov	r16,r3
 800a430:	103fef1e 	bne	r2,zero,800a3f0 <__alt_data_end+0xfc00a3f0>
 800a434:	d9011e17 	ldw	r4,1144(sp)
 800a438:	dc012217 	ldw	r16,1160(sp)
 800a43c:	a811883a 	mov	r8,r21
 800a440:	dd012215 	stw	r20,1160(sp)
 800a444:	2529c83a 	sub	r20,r4,r20
 800a448:	003e4106 	br	8009d50 <__alt_data_end+0xfc009d50>
 800a44c:	9cc00c04 	addi	r19,r19,48
 800a450:	d8c109c4 	addi	r3,sp,1063
 800a454:	dcc109c5 	stb	r19,1063(sp)
 800a458:	dd012817 	ldw	r20,1184(sp)
 800a45c:	d8c12215 	stw	r3,1160(sp)
 800a460:	003e3b06 	br	8009d50 <__alt_data_end+0xfc009d50>
 800a464:	d8811c17 	ldw	r2,1136(sp)
 800a468:	10000426 	beq	r2,zero,800a47c <___vfiprintf_internal_r+0xc70>
 800a46c:	d9012117 	ldw	r4,1156(sp)
 800a470:	d9412017 	ldw	r5,1152(sp)
 800a474:	d9811a04 	addi	r6,sp,1128
 800a478:	80096f80 	call	80096f8 <__sprint_r.part.0>
 800a47c:	d9412017 	ldw	r5,1152(sp)
 800a480:	2880030b 	ldhu	r2,12(r5)
 800a484:	1080100c 	andi	r2,r2,64
 800a488:	103ddc1e 	bne	r2,zero,8009bfc <__alt_data_end+0xfc009bfc>
 800a48c:	d8812517 	ldw	r2,1172(sp)
 800a490:	003ddb06 	br	8009c00 <__alt_data_end+0xfc009c00>
 800a494:	1801061e 	bne	r3,zero,800a8b0 <___vfiprintf_internal_r+0x10a4>
 800a498:	d8c12217 	ldw	r3,1160(sp)
 800a49c:	00800044 	movi	r2,1
 800a4a0:	dd000115 	stw	r20,4(sp)
 800a4a4:	d8c00015 	stw	r3,0(sp)
 800a4a8:	dd011c15 	stw	r20,1136(sp)
 800a4ac:	d8811b15 	stw	r2,1132(sp)
 800a4b0:	a007883a 	mov	r3,r20
 800a4b4:	d811883a 	mov	r8,sp
 800a4b8:	42000204 	addi	r8,r8,8
 800a4bc:	9480010c 	andi	r18,r18,4
 800a4c0:	90003426 	beq	r18,zero,800a594 <___vfiprintf_internal_r+0xd88>
 800a4c4:	d9412417 	ldw	r5,1168(sp)
 800a4c8:	2d65c83a 	sub	r18,r5,r21
 800a4cc:	0480310e 	bge	zero,r18,800a594 <___vfiprintf_internal_r+0xd88>
 800a4d0:	04000404 	movi	r16,16
 800a4d4:	8481ad0e 	bge	r16,r18,800ab8c <___vfiprintf_internal_r+0x1380>
 800a4d8:	01420074 	movhi	r5,2049
 800a4dc:	29472804 	addi	r5,r5,7328
 800a4e0:	d9011b17 	ldw	r4,1132(sp)
 800a4e4:	d9412615 	stw	r5,1176(sp)
 800a4e8:	04c001c4 	movi	r19,7
 800a4ec:	dd012117 	ldw	r20,1156(sp)
 800a4f0:	dd812017 	ldw	r22,1152(sp)
 800a4f4:	00000506 	br	800a50c <___vfiprintf_internal_r+0xd00>
 800a4f8:	21400084 	addi	r5,r4,2
 800a4fc:	42000204 	addi	r8,r8,8
 800a500:	1009883a 	mov	r4,r2
 800a504:	94bffc04 	addi	r18,r18,-16
 800a508:	84800d0e 	bge	r16,r18,800a540 <___vfiprintf_internal_r+0xd34>
 800a50c:	18c00404 	addi	r3,r3,16
 800a510:	20800044 	addi	r2,r4,1
 800a514:	47000015 	stw	fp,0(r8)
 800a518:	44000115 	stw	r16,4(r8)
 800a51c:	d8c11c15 	stw	r3,1136(sp)
 800a520:	d8811b15 	stw	r2,1132(sp)
 800a524:	98bff40e 	bge	r19,r2,800a4f8 <__alt_data_end+0xfc00a4f8>
 800a528:	1800291e 	bne	r3,zero,800a5d0 <___vfiprintf_internal_r+0xdc4>
 800a52c:	94bffc04 	addi	r18,r18,-16
 800a530:	0009883a 	mov	r4,zero
 800a534:	01400044 	movi	r5,1
 800a538:	d811883a 	mov	r8,sp
 800a53c:	84bff316 	blt	r16,r18,800a50c <__alt_data_end+0xfc00a50c>
 800a540:	d8812617 	ldw	r2,1176(sp)
 800a544:	1c87883a 	add	r3,r3,r18
 800a548:	44800115 	stw	r18,4(r8)
 800a54c:	40800015 	stw	r2,0(r8)
 800a550:	d8c11c15 	stw	r3,1136(sp)
 800a554:	d9411b15 	stw	r5,1132(sp)
 800a558:	008001c4 	movi	r2,7
 800a55c:	11400d0e 	bge	r2,r5,800a594 <___vfiprintf_internal_r+0xd88>
 800a560:	1800061e 	bne	r3,zero,800a57c <___vfiprintf_internal_r+0xd70>
 800a564:	d8c12417 	ldw	r3,1168(sp)
 800a568:	a8c12e16 	blt	r21,r3,800aa24 <___vfiprintf_internal_r+0x1218>
 800a56c:	d9012517 	ldw	r4,1172(sp)
 800a570:	2549883a 	add	r4,r4,r21
 800a574:	d9012515 	stw	r4,1172(sp)
 800a578:	00001206 	br	800a5c4 <___vfiprintf_internal_r+0xdb8>
 800a57c:	d9012117 	ldw	r4,1156(sp)
 800a580:	d9412017 	ldw	r5,1152(sp)
 800a584:	d9811a04 	addi	r6,sp,1128
 800a588:	80096f80 	call	80096f8 <__sprint_r.part.0>
 800a58c:	103fbb1e 	bne	r2,zero,800a47c <__alt_data_end+0xfc00a47c>
 800a590:	d8c11c17 	ldw	r3,1136(sp)
 800a594:	d8812417 	ldw	r2,1168(sp)
 800a598:	a880010e 	bge	r21,r2,800a5a0 <___vfiprintf_internal_r+0xd94>
 800a59c:	102b883a 	mov	r21,r2
 800a5a0:	d9012517 	ldw	r4,1172(sp)
 800a5a4:	2549883a 	add	r4,r4,r21
 800a5a8:	d9012515 	stw	r4,1172(sp)
 800a5ac:	18000526 	beq	r3,zero,800a5c4 <___vfiprintf_internal_r+0xdb8>
 800a5b0:	d9012117 	ldw	r4,1156(sp)
 800a5b4:	d9412017 	ldw	r5,1152(sp)
 800a5b8:	d9811a04 	addi	r6,sp,1128
 800a5bc:	80096f80 	call	80096f8 <__sprint_r.part.0>
 800a5c0:	103fae1e 	bne	r2,zero,800a47c <__alt_data_end+0xfc00a47c>
 800a5c4:	d8011b15 	stw	zero,1132(sp)
 800a5c8:	d811883a 	mov	r8,sp
 800a5cc:	003cc706 	br	80098ec <__alt_data_end+0xfc0098ec>
 800a5d0:	a009883a 	mov	r4,r20
 800a5d4:	b00b883a 	mov	r5,r22
 800a5d8:	d9811a04 	addi	r6,sp,1128
 800a5dc:	80096f80 	call	80096f8 <__sprint_r.part.0>
 800a5e0:	103fa61e 	bne	r2,zero,800a47c <__alt_data_end+0xfc00a47c>
 800a5e4:	d9011b17 	ldw	r4,1132(sp)
 800a5e8:	d8c11c17 	ldw	r3,1136(sp)
 800a5ec:	d811883a 	mov	r8,sp
 800a5f0:	21400044 	addi	r5,r4,1
 800a5f4:	003fc306 	br	800a504 <__alt_data_end+0xfc00a504>
 800a5f8:	d9012417 	ldw	r4,1168(sp)
 800a5fc:	256dc83a 	sub	r22,r4,r21
 800a600:	05be1f0e 	bge	zero,r22,8009e80 <__alt_data_end+0xfc009e80>
 800a604:	04c00404 	movi	r19,16
 800a608:	9d81720e 	bge	r19,r22,800abd4 <___vfiprintf_internal_r+0x13c8>
 800a60c:	00820074 	movhi	r2,2049
 800a610:	10872404 	addi	r2,r2,7312
 800a614:	d8812615 	stw	r2,1176(sp)
 800a618:	028001c4 	movi	r10,7
 800a61c:	00000506 	br	800a634 <___vfiprintf_internal_r+0xe28>
 800a620:	29000084 	addi	r4,r5,2
 800a624:	42000204 	addi	r8,r8,8
 800a628:	100b883a 	mov	r5,r2
 800a62c:	b5bffc04 	addi	r22,r22,-16
 800a630:	9d800d0e 	bge	r19,r22,800a668 <___vfiprintf_internal_r+0xe5c>
 800a634:	18c00404 	addi	r3,r3,16
 800a638:	28800044 	addi	r2,r5,1
 800a63c:	44400015 	stw	r17,0(r8)
 800a640:	44c00115 	stw	r19,4(r8)
 800a644:	d8c11c15 	stw	r3,1136(sp)
 800a648:	d8811b15 	stw	r2,1132(sp)
 800a64c:	50bff40e 	bge	r10,r2,800a620 <__alt_data_end+0xfc00a620>
 800a650:	1800111e 	bne	r3,zero,800a698 <___vfiprintf_internal_r+0xe8c>
 800a654:	b5bffc04 	addi	r22,r22,-16
 800a658:	000b883a 	mov	r5,zero
 800a65c:	01000044 	movi	r4,1
 800a660:	d811883a 	mov	r8,sp
 800a664:	9dbff316 	blt	r19,r22,800a634 <__alt_data_end+0xfc00a634>
 800a668:	d9412617 	ldw	r5,1176(sp)
 800a66c:	1d87883a 	add	r3,r3,r22
 800a670:	45800115 	stw	r22,4(r8)
 800a674:	41400015 	stw	r5,0(r8)
 800a678:	d8c11c15 	stw	r3,1136(sp)
 800a67c:	d9011b15 	stw	r4,1132(sp)
 800a680:	008001c4 	movi	r2,7
 800a684:	11008516 	blt	r2,r4,800a89c <___vfiprintf_internal_r+0x1090>
 800a688:	42000204 	addi	r8,r8,8
 800a68c:	20800044 	addi	r2,r4,1
 800a690:	200b883a 	mov	r5,r4
 800a694:	003dfa06 	br	8009e80 <__alt_data_end+0xfc009e80>
 800a698:	d9012117 	ldw	r4,1156(sp)
 800a69c:	d9412017 	ldw	r5,1152(sp)
 800a6a0:	d9811a04 	addi	r6,sp,1128
 800a6a4:	da812a15 	stw	r10,1192(sp)
 800a6a8:	80096f80 	call	80096f8 <__sprint_r.part.0>
 800a6ac:	da812a17 	ldw	r10,1192(sp)
 800a6b0:	103f721e 	bne	r2,zero,800a47c <__alt_data_end+0xfc00a47c>
 800a6b4:	d9411b17 	ldw	r5,1132(sp)
 800a6b8:	d8c11c17 	ldw	r3,1136(sp)
 800a6bc:	d811883a 	mov	r8,sp
 800a6c0:	29000044 	addi	r4,r5,1
 800a6c4:	003fd906 	br	800a62c <__alt_data_end+0xfc00a62c>
 800a6c8:	1800681e 	bne	r3,zero,800a86c <___vfiprintf_internal_r+0x1060>
 800a6cc:	50004d26 	beq	r10,zero,800a804 <___vfiprintf_internal_r+0xff8>
 800a6d0:	d8811d04 	addi	r2,sp,1140
 800a6d4:	00c00084 	movi	r3,2
 800a6d8:	d8800015 	stw	r2,0(sp)
 800a6dc:	d8c00115 	stw	r3,4(sp)
 800a6e0:	2005883a 	mov	r2,r4
 800a6e4:	d811883a 	mov	r8,sp
 800a6e8:	003de006 	br	8009e6c <__alt_data_end+0xfc009e6c>
 800a6ec:	1800551e 	bne	r3,zero,800a844 <___vfiprintf_internal_r+0x1038>
 800a6f0:	000b883a 	mov	r5,zero
 800a6f4:	00800044 	movi	r2,1
 800a6f8:	d811883a 	mov	r8,sp
 800a6fc:	003dde06 	br	8009e78 <__alt_data_end+0xfc009e78>
 800a700:	10803fcc 	andi	r2,r2,255
 800a704:	1000191e 	bne	r2,zero,800a76c <___vfiprintf_internal_r+0xf60>
 800a708:	9080004c 	andi	r2,r18,1
 800a70c:	10001726 	beq	r2,zero,800a76c <___vfiprintf_internal_r+0xf60>
 800a710:	00800c04 	movi	r2,48
 800a714:	d8c109c4 	addi	r3,sp,1063
 800a718:	d88109c5 	stb	r2,1063(sp)
 800a71c:	dd012817 	ldw	r20,1184(sp)
 800a720:	d8c12215 	stw	r3,1160(sp)
 800a724:	003d8a06 	br	8009d50 <__alt_data_end+0xfc009d50>
 800a728:	d9012717 	ldw	r4,1180(sp)
 800a72c:	dd010a04 	addi	r20,sp,1064
 800a730:	988003cc 	andi	r2,r19,15
 800a734:	a806973a 	slli	r3,r21,28
 800a738:	2085883a 	add	r2,r4,r2
 800a73c:	9826d13a 	srli	r19,r19,4
 800a740:	10800003 	ldbu	r2,0(r2)
 800a744:	a82ad13a 	srli	r21,r21,4
 800a748:	a53fffc4 	addi	r20,r20,-1
 800a74c:	1ce6b03a 	or	r19,r3,r19
 800a750:	a0800005 	stb	r2,0(r20)
 800a754:	9d44b03a 	or	r2,r19,r21
 800a758:	103ff51e 	bne	r2,zero,800a730 <__alt_data_end+0xfc00a730>
 800a75c:	d9411e17 	ldw	r5,1144(sp)
 800a760:	dd012215 	stw	r20,1160(sp)
 800a764:	2d29c83a 	sub	r20,r5,r20
 800a768:	003d7906 	br	8009d50 <__alt_data_end+0xfc009d50>
 800a76c:	d8c10a04 	addi	r3,sp,1064
 800a770:	d8c12215 	stw	r3,1160(sp)
 800a774:	003d7606 	br	8009d50 <__alt_data_end+0xfc009d50>
 800a778:	18009e1e 	bne	r3,zero,800a9f4 <___vfiprintf_internal_r+0x11e8>
 800a77c:	d8811d87 	ldb	r2,1142(sp)
 800a780:	10005f26 	beq	r2,zero,800a900 <___vfiprintf_internal_r+0x10f4>
 800a784:	00c00044 	movi	r3,1
 800a788:	d9011d84 	addi	r4,sp,1142
 800a78c:	1805883a 	mov	r2,r3
 800a790:	d9000015 	stw	r4,0(sp)
 800a794:	d8c00115 	stw	r3,4(sp)
 800a798:	d811883a 	mov	r8,sp
 800a79c:	003efc06 	br	800a390 <__alt_data_end+0xfc00a390>
 800a7a0:	d9412417 	ldw	r5,1168(sp)
 800a7a4:	d811883a 	mov	r8,sp
 800a7a8:	2d65c83a 	sub	r18,r5,r21
 800a7ac:	04bf4816 	blt	zero,r18,800a4d0 <__alt_data_end+0xfc00a4d0>
 800a7b0:	003f6c06 	br	800a564 <__alt_data_end+0xfc00a564>
 800a7b4:	b829883a 	mov	r20,r23
 800a7b8:	003c6906 	br	8009960 <__alt_data_end+0xfc009960>
 800a7bc:	d9012117 	ldw	r4,1156(sp)
 800a7c0:	d9412017 	ldw	r5,1152(sp)
 800a7c4:	d9811a04 	addi	r6,sp,1128
 800a7c8:	80096f80 	call	80096f8 <__sprint_r.part.0>
 800a7cc:	103f2b1e 	bne	r2,zero,800a47c <__alt_data_end+0xfc00a47c>
 800a7d0:	d8c11c17 	ldw	r3,1136(sp)
 800a7d4:	d811883a 	mov	r8,sp
 800a7d8:	003f3806 	br	800a4bc <__alt_data_end+0xfc00a4bc>
 800a7dc:	00800084 	movi	r2,2
 800a7e0:	9d46b03a 	or	r3,r19,r21
 800a7e4:	003df606 	br	8009fc0 <__alt_data_end+0xfc009fc0>
 800a7e8:	d9012117 	ldw	r4,1156(sp)
 800a7ec:	d9412017 	ldw	r5,1152(sp)
 800a7f0:	d9811a04 	addi	r6,sp,1128
 800a7f4:	80096f80 	call	80096f8 <__sprint_r.part.0>
 800a7f8:	103f201e 	bne	r2,zero,800a47c <__alt_data_end+0xfc00a47c>
 800a7fc:	d811883a 	mov	r8,sp
 800a800:	003cc606 	br	8009b1c <__alt_data_end+0xfc009b1c>
 800a804:	000b883a 	mov	r5,zero
 800a808:	2005883a 	mov	r2,r4
 800a80c:	d811883a 	mov	r8,sp
 800a810:	003d9906 	br	8009e78 <__alt_data_end+0xfc009e78>
 800a814:	10803fcc 	andi	r2,r2,255
 800a818:	1080201c 	xori	r2,r2,128
 800a81c:	10bfe004 	addi	r2,r2,-128
 800a820:	01000c04 	movi	r4,48
 800a824:	1100b226 	beq	r2,r4,800aaf0 <___vfiprintf_internal_r+0x12e4>
 800a828:	d9412217 	ldw	r5,1160(sp)
 800a82c:	d8811e17 	ldw	r2,1144(sp)
 800a830:	193fffc5 	stb	r4,-1(r3)
 800a834:	297fffc4 	addi	r5,r5,-1
 800a838:	d9412215 	stw	r5,1160(sp)
 800a83c:	1169c83a 	sub	r20,r2,r5
 800a840:	003d4306 	br	8009d50 <__alt_data_end+0xfc009d50>
 800a844:	d9012117 	ldw	r4,1156(sp)
 800a848:	d9412017 	ldw	r5,1152(sp)
 800a84c:	d9811a04 	addi	r6,sp,1128
 800a850:	80096f80 	call	80096f8 <__sprint_r.part.0>
 800a854:	103f091e 	bne	r2,zero,800a47c <__alt_data_end+0xfc00a47c>
 800a858:	d9411b17 	ldw	r5,1132(sp)
 800a85c:	d8c11c17 	ldw	r3,1136(sp)
 800a860:	d811883a 	mov	r8,sp
 800a864:	28800044 	addi	r2,r5,1
 800a868:	003d8306 	br	8009e78 <__alt_data_end+0xfc009e78>
 800a86c:	d9012117 	ldw	r4,1156(sp)
 800a870:	d9412017 	ldw	r5,1152(sp)
 800a874:	d9811a04 	addi	r6,sp,1128
 800a878:	da812a15 	stw	r10,1192(sp)
 800a87c:	80096f80 	call	80096f8 <__sprint_r.part.0>
 800a880:	da812a17 	ldw	r10,1192(sp)
 800a884:	103efd1e 	bne	r2,zero,800a47c <__alt_data_end+0xfc00a47c>
 800a888:	d9411b17 	ldw	r5,1132(sp)
 800a88c:	d8c11c17 	ldw	r3,1136(sp)
 800a890:	d811883a 	mov	r8,sp
 800a894:	28800044 	addi	r2,r5,1
 800a898:	003d6a06 	br	8009e44 <__alt_data_end+0xfc009e44>
 800a89c:	1800a01e 	bne	r3,zero,800ab20 <___vfiprintf_internal_r+0x1314>
 800a8a0:	000b883a 	mov	r5,zero
 800a8a4:	00800044 	movi	r2,1
 800a8a8:	d811883a 	mov	r8,sp
 800a8ac:	003d7406 	br	8009e80 <__alt_data_end+0xfc009e80>
 800a8b0:	d9012117 	ldw	r4,1156(sp)
 800a8b4:	d9412017 	ldw	r5,1152(sp)
 800a8b8:	d9811a04 	addi	r6,sp,1128
 800a8bc:	80096f80 	call	80096f8 <__sprint_r.part.0>
 800a8c0:	103eee1e 	bne	r2,zero,800a47c <__alt_data_end+0xfc00a47c>
 800a8c4:	d8811b17 	ldw	r2,1132(sp)
 800a8c8:	d8c11c17 	ldw	r3,1136(sp)
 800a8cc:	d811883a 	mov	r8,sp
 800a8d0:	10800044 	addi	r2,r2,1
 800a8d4:	003d8f06 	br	8009f14 <__alt_data_end+0xfc009f14>
 800a8d8:	04e7c83a 	sub	r19,zero,r19
 800a8dc:	9804c03a 	cmpne	r2,r19,zero
 800a8e0:	056bc83a 	sub	r21,zero,r21
 800a8e4:	a8abc83a 	sub	r21,r21,r2
 800a8e8:	05800b44 	movi	r22,45
 800a8ec:	dd811d85 	stb	r22,1142(sp)
 800a8f0:	8029883a 	mov	r20,r16
 800a8f4:	00800044 	movi	r2,1
 800a8f8:	9d46b03a 	or	r3,r19,r21
 800a8fc:	003cfa06 	br	8009ce8 <__alt_data_end+0xfc009ce8>
 800a900:	000b883a 	mov	r5,zero
 800a904:	00800044 	movi	r2,1
 800a908:	d811883a 	mov	r8,sp
 800a90c:	503d5a26 	beq	r10,zero,8009e78 <__alt_data_end+0xfc009e78>
 800a910:	00c00084 	movi	r3,2
 800a914:	d9011d04 	addi	r4,sp,1140
 800a918:	d9000015 	stw	r4,0(sp)
 800a91c:	d8c00115 	stw	r3,4(sp)
 800a920:	003d5206 	br	8009e6c <__alt_data_end+0xfc009e6c>
 800a924:	9080040c 	andi	r2,r18,16
 800a928:	1000421e 	bne	r2,zero,800aa34 <___vfiprintf_internal_r+0x1228>
 800a92c:	9480100c 	andi	r18,r18,64
 800a930:	90009c26 	beq	r18,zero,800aba4 <___vfiprintf_internal_r+0x1398>
 800a934:	d9412317 	ldw	r5,1164(sp)
 800a938:	d8c12517 	ldw	r3,1172(sp)
 800a93c:	28800017 	ldw	r2,0(r5)
 800a940:	29400104 	addi	r5,r5,4
 800a944:	d9412315 	stw	r5,1164(sp)
 800a948:	10c0000d 	sth	r3,0(r2)
 800a94c:	003be706 	br	80098ec <__alt_data_end+0xfc0098ec>
 800a950:	90c0100c 	andi	r3,r18,64
 800a954:	18003e26 	beq	r3,zero,800aa50 <___vfiprintf_internal_r+0x1244>
 800a958:	d8c12317 	ldw	r3,1164(sp)
 800a95c:	14c0000b 	ldhu	r19,0(r2)
 800a960:	002b883a 	mov	r21,zero
 800a964:	18c00104 	addi	r3,r3,4
 800a968:	d8c12315 	stw	r3,1164(sp)
 800a96c:	003db706 	br	800a04c <__alt_data_end+0xfc00a04c>
 800a970:	9080100c 	andi	r2,r18,64
 800a974:	10004c26 	beq	r2,zero,800aaa8 <___vfiprintf_internal_r+0x129c>
 800a978:	1cc0000f 	ldh	r19,0(r3)
 800a97c:	d8812317 	ldw	r2,1164(sp)
 800a980:	982bd7fa 	srai	r21,r19,31
 800a984:	10800104 	addi	r2,r2,4
 800a988:	d8812315 	stw	r2,1164(sp)
 800a98c:	a805883a 	mov	r2,r21
 800a990:	003cd006 	br	8009cd4 <__alt_data_end+0xfc009cd4>
 800a994:	00800084 	movi	r2,2
 800a998:	003d8906 	br	8009fc0 <__alt_data_end+0xfc009fc0>
 800a99c:	b9800007 	ldb	r6,0(r23)
 800a9a0:	003bfb06 	br	8009990 <__alt_data_end+0xfc009990>
 800a9a4:	9080100c 	andi	r2,r18,64
 800a9a8:	10003726 	beq	r2,zero,800aa88 <___vfiprintf_internal_r+0x127c>
 800a9ac:	d9412317 	ldw	r5,1164(sp)
 800a9b0:	002b883a 	mov	r21,zero
 800a9b4:	0005883a 	mov	r2,zero
 800a9b8:	2cc0000b 	ldhu	r19,0(r5)
 800a9bc:	29400104 	addi	r5,r5,4
 800a9c0:	d9412315 	stw	r5,1164(sp)
 800a9c4:	9807883a 	mov	r3,r19
 800a9c8:	003d7d06 	br	8009fc0 <__alt_data_end+0xfc009fc0>
 800a9cc:	9080100c 	andi	r2,r18,64
 800a9d0:	10002526 	beq	r2,zero,800aa68 <___vfiprintf_internal_r+0x125c>
 800a9d4:	d8812317 	ldw	r2,1164(sp)
 800a9d8:	002b883a 	mov	r21,zero
 800a9dc:	14c0000b 	ldhu	r19,0(r2)
 800a9e0:	10800104 	addi	r2,r2,4
 800a9e4:	d8812315 	stw	r2,1164(sp)
 800a9e8:	9807883a 	mov	r3,r19
 800a9ec:	00800044 	movi	r2,1
 800a9f0:	003d7306 	br	8009fc0 <__alt_data_end+0xfc009fc0>
 800a9f4:	d9012117 	ldw	r4,1156(sp)
 800a9f8:	d9412017 	ldw	r5,1152(sp)
 800a9fc:	d9811a04 	addi	r6,sp,1128
 800aa00:	da812a15 	stw	r10,1192(sp)
 800aa04:	80096f80 	call	80096f8 <__sprint_r.part.0>
 800aa08:	da812a17 	ldw	r10,1192(sp)
 800aa0c:	103e9b1e 	bne	r2,zero,800a47c <__alt_data_end+0xfc00a47c>
 800aa10:	d9411b17 	ldw	r5,1132(sp)
 800aa14:	d8c11c17 	ldw	r3,1136(sp)
 800aa18:	d811883a 	mov	r8,sp
 800aa1c:	28800044 	addi	r2,r5,1
 800aa20:	003e5006 	br	800a364 <__alt_data_end+0xfc00a364>
 800aa24:	182b883a 	mov	r21,r3
 800aa28:	003ed006 	br	800a56c <__alt_data_end+0xfc00a56c>
 800aa2c:	8029883a 	mov	r20,r16
 800aa30:	003dc606 	br	800a14c <__alt_data_end+0xfc00a14c>
 800aa34:	d8c12317 	ldw	r3,1164(sp)
 800aa38:	d9012517 	ldw	r4,1172(sp)
 800aa3c:	18800017 	ldw	r2,0(r3)
 800aa40:	18c00104 	addi	r3,r3,4
 800aa44:	d8c12315 	stw	r3,1164(sp)
 800aa48:	11000015 	stw	r4,0(r2)
 800aa4c:	003ba706 	br	80098ec <__alt_data_end+0xfc0098ec>
 800aa50:	d9012317 	ldw	r4,1164(sp)
 800aa54:	14c00017 	ldw	r19,0(r2)
 800aa58:	002b883a 	mov	r21,zero
 800aa5c:	21000104 	addi	r4,r4,4
 800aa60:	d9012315 	stw	r4,1164(sp)
 800aa64:	003d7906 	br	800a04c <__alt_data_end+0xfc00a04c>
 800aa68:	d8c12317 	ldw	r3,1164(sp)
 800aa6c:	002b883a 	mov	r21,zero
 800aa70:	00800044 	movi	r2,1
 800aa74:	1cc00017 	ldw	r19,0(r3)
 800aa78:	18c00104 	addi	r3,r3,4
 800aa7c:	d8c12315 	stw	r3,1164(sp)
 800aa80:	9807883a 	mov	r3,r19
 800aa84:	003d4e06 	br	8009fc0 <__alt_data_end+0xfc009fc0>
 800aa88:	d8812317 	ldw	r2,1164(sp)
 800aa8c:	002b883a 	mov	r21,zero
 800aa90:	14c00017 	ldw	r19,0(r2)
 800aa94:	10800104 	addi	r2,r2,4
 800aa98:	d8812315 	stw	r2,1164(sp)
 800aa9c:	9807883a 	mov	r3,r19
 800aaa0:	0005883a 	mov	r2,zero
 800aaa4:	003d4606 	br	8009fc0 <__alt_data_end+0xfc009fc0>
 800aaa8:	1cc00017 	ldw	r19,0(r3)
 800aaac:	d8c12317 	ldw	r3,1164(sp)
 800aab0:	982bd7fa 	srai	r21,r19,31
 800aab4:	18c00104 	addi	r3,r3,4
 800aab8:	d8c12315 	stw	r3,1164(sp)
 800aabc:	a805883a 	mov	r2,r21
 800aac0:	003c8406 	br	8009cd4 <__alt_data_end+0xfc009cd4>
 800aac4:	01020074 	movhi	r4,2049
 800aac8:	21072404 	addi	r4,r4,7312
 800aacc:	d9012615 	stw	r4,1176(sp)
 800aad0:	003d0606 	br	8009eec <__alt_data_end+0xfc009eec>
 800aad4:	b9800043 	ldbu	r6,1(r23)
 800aad8:	94800814 	ori	r18,r18,32
 800aadc:	bdc00044 	addi	r23,r23,1
 800aae0:	31803fcc 	andi	r6,r6,255
 800aae4:	3180201c 	xori	r6,r6,128
 800aae8:	31bfe004 	addi	r6,r6,-128
 800aaec:	003ba806 	br	8009990 <__alt_data_end+0xfc009990>
 800aaf0:	d8811e17 	ldw	r2,1144(sp)
 800aaf4:	d8c12217 	ldw	r3,1160(sp)
 800aaf8:	10e9c83a 	sub	r20,r2,r3
 800aafc:	003c9406 	br	8009d50 <__alt_data_end+0xfc009d50>
 800ab00:	da012a15 	stw	r8,1192(sp)
 800ab04:	800231c0 	call	800231c <strlen>
 800ab08:	1029883a 	mov	r20,r2
 800ab0c:	dd811d83 	ldbu	r22,1142(sp)
 800ab10:	dcc12315 	stw	r19,1164(sp)
 800ab14:	0021883a 	mov	r16,zero
 800ab18:	da012a17 	ldw	r8,1192(sp)
 800ab1c:	003c8c06 	br	8009d50 <__alt_data_end+0xfc009d50>
 800ab20:	d9012117 	ldw	r4,1156(sp)
 800ab24:	d9412017 	ldw	r5,1152(sp)
 800ab28:	d9811a04 	addi	r6,sp,1128
 800ab2c:	80096f80 	call	80096f8 <__sprint_r.part.0>
 800ab30:	103e521e 	bne	r2,zero,800a47c <__alt_data_end+0xfc00a47c>
 800ab34:	d9411b17 	ldw	r5,1132(sp)
 800ab38:	d8c11c17 	ldw	r3,1136(sp)
 800ab3c:	d811883a 	mov	r8,sp
 800ab40:	28800044 	addi	r2,r5,1
 800ab44:	003cce06 	br	8009e80 <__alt_data_end+0xfc009e80>
 800ab48:	01420074 	movhi	r5,2049
 800ab4c:	29472804 	addi	r5,r5,7328
 800ab50:	d9412615 	stw	r5,1176(sp)
 800ab54:	d9411b17 	ldw	r5,1132(sp)
 800ab58:	29400044 	addi	r5,r5,1
 800ab5c:	003cad06 	br	8009e14 <__alt_data_end+0xfc009e14>
 800ab60:	00800184 	movi	r2,6
 800ab64:	1400012e 	bgeu	r2,r16,800ab6c <___vfiprintf_internal_r+0x1360>
 800ab68:	1021883a 	mov	r16,r2
 800ab6c:	8029883a 	mov	r20,r16
 800ab70:	802b883a 	mov	r21,r16
 800ab74:	80001c16 	blt	r16,zero,800abe8 <___vfiprintf_internal_r+0x13dc>
 800ab78:	00c20074 	movhi	r3,2049
 800ab7c:	18c6c804 	addi	r3,r3,6944
 800ab80:	dcc12315 	stw	r19,1164(sp)
 800ab84:	d8c12215 	stw	r3,1160(sp)
 800ab88:	003cff06 	br	8009f88 <__alt_data_end+0xfc009f88>
 800ab8c:	d9411b17 	ldw	r5,1132(sp)
 800ab90:	00820074 	movhi	r2,2049
 800ab94:	10872804 	addi	r2,r2,7328
 800ab98:	d8812615 	stw	r2,1176(sp)
 800ab9c:	29400044 	addi	r5,r5,1
 800aba0:	003e6706 	br	800a540 <__alt_data_end+0xfc00a540>
 800aba4:	d9012317 	ldw	r4,1164(sp)
 800aba8:	d9412517 	ldw	r5,1172(sp)
 800abac:	20800017 	ldw	r2,0(r4)
 800abb0:	21000104 	addi	r4,r4,4
 800abb4:	d9012315 	stw	r4,1164(sp)
 800abb8:	11400015 	stw	r5,0(r2)
 800abbc:	003b4b06 	br	80098ec <__alt_data_end+0xfc0098ec>
 800abc0:	8029883a 	mov	r20,r16
 800abc4:	dd811d83 	ldbu	r22,1142(sp)
 800abc8:	dcc12315 	stw	r19,1164(sp)
 800abcc:	0021883a 	mov	r16,zero
 800abd0:	003c5f06 	br	8009d50 <__alt_data_end+0xfc009d50>
 800abd4:	01020074 	movhi	r4,2049
 800abd8:	21072404 	addi	r4,r4,7312
 800abdc:	d9012615 	stw	r4,1176(sp)
 800abe0:	1009883a 	mov	r4,r2
 800abe4:	003ea006 	br	800a668 <__alt_data_end+0xfc00a668>
 800abe8:	002b883a 	mov	r21,zero
 800abec:	003fe206 	br	800ab78 <__alt_data_end+0xfc00ab78>
 800abf0:	d9412317 	ldw	r5,1164(sp)
 800abf4:	b807883a 	mov	r3,r23
 800abf8:	102f883a 	mov	r23,r2
 800abfc:	2c000017 	ldw	r16,0(r5)
 800ac00:	29000104 	addi	r4,r5,4
 800ac04:	d9012315 	stw	r4,1164(sp)
 800ac08:	80000416 	blt	r16,zero,800ac1c <___vfiprintf_internal_r+0x1410>
 800ac0c:	19800047 	ldb	r6,1(r3)
 800ac10:	003b5f06 	br	8009990 <__alt_data_end+0xfc009990>
 800ac14:	043fffc4 	movi	r16,-1
 800ac18:	003bef06 	br	8009bd8 <__alt_data_end+0xfc009bd8>
 800ac1c:	043fffc4 	movi	r16,-1
 800ac20:	19800047 	ldb	r6,1(r3)
 800ac24:	003b5a06 	br	8009990 <__alt_data_end+0xfc009990>
 800ac28:	282b883a 	mov	r21,r5
 800ac2c:	003cc706 	br	8009f4c <__alt_data_end+0xfc009f4c>

0800ac30 <__vfiprintf_internal>:
 800ac30:	2007883a 	mov	r3,r4
 800ac34:	01020074 	movhi	r4,2049
 800ac38:	210e2504 	addi	r4,r4,14484
 800ac3c:	21000017 	ldw	r4,0(r4)
 800ac40:	2805883a 	mov	r2,r5
 800ac44:	300f883a 	mov	r7,r6
 800ac48:	180b883a 	mov	r5,r3
 800ac4c:	100d883a 	mov	r6,r2
 800ac50:	800980c1 	jmpi	800980c <___vfiprintf_internal_r>

0800ac54 <_write_r>:
 800ac54:	defffd04 	addi	sp,sp,-12
 800ac58:	dc000015 	stw	r16,0(sp)
 800ac5c:	04020074 	movhi	r16,2049
 800ac60:	dc400115 	stw	r17,4(sp)
 800ac64:	8414f604 	addi	r16,r16,21464
 800ac68:	2023883a 	mov	r17,r4
 800ac6c:	2809883a 	mov	r4,r5
 800ac70:	300b883a 	mov	r5,r6
 800ac74:	380d883a 	mov	r6,r7
 800ac78:	dfc00215 	stw	ra,8(sp)
 800ac7c:	80000015 	stw	zero,0(r16)
 800ac80:	800f4700 	call	800f470 <write>
 800ac84:	00ffffc4 	movi	r3,-1
 800ac88:	10c00526 	beq	r2,r3,800aca0 <_write_r+0x4c>
 800ac8c:	dfc00217 	ldw	ra,8(sp)
 800ac90:	dc400117 	ldw	r17,4(sp)
 800ac94:	dc000017 	ldw	r16,0(sp)
 800ac98:	dec00304 	addi	sp,sp,12
 800ac9c:	f800283a 	ret
 800aca0:	80c00017 	ldw	r3,0(r16)
 800aca4:	183ff926 	beq	r3,zero,800ac8c <__alt_data_end+0xfc00ac8c>
 800aca8:	88c00015 	stw	r3,0(r17)
 800acac:	003ff706 	br	800ac8c <__alt_data_end+0xfc00ac8c>

0800acb0 <_close_r>:
 800acb0:	defffd04 	addi	sp,sp,-12
 800acb4:	dc000015 	stw	r16,0(sp)
 800acb8:	04020074 	movhi	r16,2049
 800acbc:	dc400115 	stw	r17,4(sp)
 800acc0:	8414f604 	addi	r16,r16,21464
 800acc4:	2023883a 	mov	r17,r4
 800acc8:	2809883a 	mov	r4,r5
 800accc:	dfc00215 	stw	ra,8(sp)
 800acd0:	80000015 	stw	zero,0(r16)
 800acd4:	800eb9c0 	call	800eb9c <close>
 800acd8:	00ffffc4 	movi	r3,-1
 800acdc:	10c00526 	beq	r2,r3,800acf4 <_close_r+0x44>
 800ace0:	dfc00217 	ldw	ra,8(sp)
 800ace4:	dc400117 	ldw	r17,4(sp)
 800ace8:	dc000017 	ldw	r16,0(sp)
 800acec:	dec00304 	addi	sp,sp,12
 800acf0:	f800283a 	ret
 800acf4:	80c00017 	ldw	r3,0(r16)
 800acf8:	183ff926 	beq	r3,zero,800ace0 <__alt_data_end+0xfc00ace0>
 800acfc:	88c00015 	stw	r3,0(r17)
 800ad00:	003ff706 	br	800ace0 <__alt_data_end+0xfc00ace0>

0800ad04 <_calloc_r>:
 800ad04:	defffe04 	addi	sp,sp,-8
 800ad08:	dc000015 	stw	r16,0(sp)
 800ad0c:	2021883a 	mov	r16,r4
 800ad10:	2809883a 	mov	r4,r5
 800ad14:	300b883a 	mov	r5,r6
 800ad18:	dfc00115 	stw	ra,4(sp)
 800ad1c:	800c3280 	call	800c328 <__mulsi3>
 800ad20:	8009883a 	mov	r4,r16
 800ad24:	100b883a 	mov	r5,r2
 800ad28:	80072200 	call	8007220 <_malloc_r>
 800ad2c:	1021883a 	mov	r16,r2
 800ad30:	10002826 	beq	r2,zero,800add4 <_calloc_r+0xd0>
 800ad34:	11bfff17 	ldw	r6,-4(r2)
 800ad38:	00bfff04 	movi	r2,-4
 800ad3c:	00c00904 	movi	r3,36
 800ad40:	308c703a 	and	r6,r6,r2
 800ad44:	308d883a 	add	r6,r6,r2
 800ad48:	19801436 	bltu	r3,r6,800ad9c <_calloc_r+0x98>
 800ad4c:	008004c4 	movi	r2,19
 800ad50:	11800936 	bltu	r2,r6,800ad78 <_calloc_r+0x74>
 800ad54:	8005883a 	mov	r2,r16
 800ad58:	10000015 	stw	zero,0(r2)
 800ad5c:	10000115 	stw	zero,4(r2)
 800ad60:	10000215 	stw	zero,8(r2)
 800ad64:	8005883a 	mov	r2,r16
 800ad68:	dfc00117 	ldw	ra,4(sp)
 800ad6c:	dc000017 	ldw	r16,0(sp)
 800ad70:	dec00204 	addi	sp,sp,8
 800ad74:	f800283a 	ret
 800ad78:	80000015 	stw	zero,0(r16)
 800ad7c:	80000115 	stw	zero,4(r16)
 800ad80:	008006c4 	movi	r2,27
 800ad84:	11800d2e 	bgeu	r2,r6,800adbc <_calloc_r+0xb8>
 800ad88:	80000215 	stw	zero,8(r16)
 800ad8c:	80000315 	stw	zero,12(r16)
 800ad90:	30c00c26 	beq	r6,r3,800adc4 <_calloc_r+0xc0>
 800ad94:	80800404 	addi	r2,r16,16
 800ad98:	003fef06 	br	800ad58 <__alt_data_end+0xfc00ad58>
 800ad9c:	8009883a 	mov	r4,r16
 800ada0:	000b883a 	mov	r5,zero
 800ada4:	8007d440 	call	8007d44 <memset>
 800ada8:	8005883a 	mov	r2,r16
 800adac:	dfc00117 	ldw	ra,4(sp)
 800adb0:	dc000017 	ldw	r16,0(sp)
 800adb4:	dec00204 	addi	sp,sp,8
 800adb8:	f800283a 	ret
 800adbc:	80800204 	addi	r2,r16,8
 800adc0:	003fe506 	br	800ad58 <__alt_data_end+0xfc00ad58>
 800adc4:	80000415 	stw	zero,16(r16)
 800adc8:	80800604 	addi	r2,r16,24
 800adcc:	80000515 	stw	zero,20(r16)
 800add0:	003fe106 	br	800ad58 <__alt_data_end+0xfc00ad58>
 800add4:	0005883a 	mov	r2,zero
 800add8:	003fe306 	br	800ad68 <__alt_data_end+0xfc00ad68>

0800addc <_fclose_r>:
 800addc:	28003226 	beq	r5,zero,800aea8 <_fclose_r+0xcc>
 800ade0:	defffc04 	addi	sp,sp,-16
 800ade4:	dc400115 	stw	r17,4(sp)
 800ade8:	2023883a 	mov	r17,r4
 800adec:	dc000015 	stw	r16,0(sp)
 800adf0:	dfc00315 	stw	ra,12(sp)
 800adf4:	dc800215 	stw	r18,8(sp)
 800adf8:	2821883a 	mov	r16,r5
 800adfc:	80065200 	call	8006520 <__sfp_lock_acquire>
 800ae00:	88000226 	beq	r17,zero,800ae0c <_fclose_r+0x30>
 800ae04:	88800e17 	ldw	r2,56(r17)
 800ae08:	10002926 	beq	r2,zero,800aeb0 <_fclose_r+0xd4>
 800ae0c:	8080030f 	ldh	r2,12(r16)
 800ae10:	10002226 	beq	r2,zero,800ae9c <_fclose_r+0xc0>
 800ae14:	8809883a 	mov	r4,r17
 800ae18:	800b883a 	mov	r5,r16
 800ae1c:	8005f540 	call	8005f54 <_fflush_r>
 800ae20:	1025883a 	mov	r18,r2
 800ae24:	80800b17 	ldw	r2,44(r16)
 800ae28:	10000426 	beq	r2,zero,800ae3c <_fclose_r+0x60>
 800ae2c:	81400717 	ldw	r5,28(r16)
 800ae30:	8809883a 	mov	r4,r17
 800ae34:	103ee83a 	callr	r2
 800ae38:	10002616 	blt	r2,zero,800aed4 <_fclose_r+0xf8>
 800ae3c:	8080030b 	ldhu	r2,12(r16)
 800ae40:	1080200c 	andi	r2,r2,128
 800ae44:	10001f1e 	bne	r2,zero,800aec4 <_fclose_r+0xe8>
 800ae48:	81400c17 	ldw	r5,48(r16)
 800ae4c:	28000526 	beq	r5,zero,800ae64 <_fclose_r+0x88>
 800ae50:	80801004 	addi	r2,r16,64
 800ae54:	28800226 	beq	r5,r2,800ae60 <_fclose_r+0x84>
 800ae58:	8809883a 	mov	r4,r17
 800ae5c:	80066840 	call	8006684 <_free_r>
 800ae60:	80000c15 	stw	zero,48(r16)
 800ae64:	81401117 	ldw	r5,68(r16)
 800ae68:	28000326 	beq	r5,zero,800ae78 <_fclose_r+0x9c>
 800ae6c:	8809883a 	mov	r4,r17
 800ae70:	80066840 	call	8006684 <_free_r>
 800ae74:	80001115 	stw	zero,68(r16)
 800ae78:	8000030d 	sth	zero,12(r16)
 800ae7c:	80065240 	call	8006524 <__sfp_lock_release>
 800ae80:	9005883a 	mov	r2,r18
 800ae84:	dfc00317 	ldw	ra,12(sp)
 800ae88:	dc800217 	ldw	r18,8(sp)
 800ae8c:	dc400117 	ldw	r17,4(sp)
 800ae90:	dc000017 	ldw	r16,0(sp)
 800ae94:	dec00404 	addi	sp,sp,16
 800ae98:	f800283a 	ret
 800ae9c:	80065240 	call	8006524 <__sfp_lock_release>
 800aea0:	0005883a 	mov	r2,zero
 800aea4:	003ff706 	br	800ae84 <__alt_data_end+0xfc00ae84>
 800aea8:	0005883a 	mov	r2,zero
 800aeac:	f800283a 	ret
 800aeb0:	8809883a 	mov	r4,r17
 800aeb4:	80065100 	call	8006510 <__sinit>
 800aeb8:	8080030f 	ldh	r2,12(r16)
 800aebc:	103fd51e 	bne	r2,zero,800ae14 <__alt_data_end+0xfc00ae14>
 800aec0:	003ff606 	br	800ae9c <__alt_data_end+0xfc00ae9c>
 800aec4:	81400417 	ldw	r5,16(r16)
 800aec8:	8809883a 	mov	r4,r17
 800aecc:	80066840 	call	8006684 <_free_r>
 800aed0:	003fdd06 	br	800ae48 <__alt_data_end+0xfc00ae48>
 800aed4:	04bfffc4 	movi	r18,-1
 800aed8:	003fd806 	br	800ae3c <__alt_data_end+0xfc00ae3c>

0800aedc <fclose>:
 800aedc:	00820074 	movhi	r2,2049
 800aee0:	108e2504 	addi	r2,r2,14484
 800aee4:	200b883a 	mov	r5,r4
 800aee8:	11000017 	ldw	r4,0(r2)
 800aeec:	800addc1 	jmpi	800addc <_fclose_r>

0800aef0 <_fputwc_r>:
 800aef0:	3080030b 	ldhu	r2,12(r6)
 800aef4:	defff804 	addi	sp,sp,-32
 800aef8:	dcc00415 	stw	r19,16(sp)
 800aefc:	dc800315 	stw	r18,12(sp)
 800af00:	dc000115 	stw	r16,4(sp)
 800af04:	dfc00715 	stw	ra,28(sp)
 800af08:	dd400615 	stw	r21,24(sp)
 800af0c:	dd000515 	stw	r20,20(sp)
 800af10:	dc400215 	stw	r17,8(sp)
 800af14:	10c8000c 	andi	r3,r2,8192
 800af18:	3021883a 	mov	r16,r6
 800af1c:	2027883a 	mov	r19,r4
 800af20:	2825883a 	mov	r18,r5
 800af24:	1800051e 	bne	r3,zero,800af3c <_fputwc_r+0x4c>
 800af28:	30c01917 	ldw	r3,100(r6)
 800af2c:	10880014 	ori	r2,r2,8192
 800af30:	3080030d 	sth	r2,12(r6)
 800af34:	18880014 	ori	r2,r3,8192
 800af38:	30801915 	stw	r2,100(r6)
 800af3c:	80070100 	call	8007010 <__locale_mb_cur_max>
 800af40:	00c00044 	movi	r3,1
 800af44:	10c03e26 	beq	r2,r3,800b040 <_fputwc_r+0x150>
 800af48:	9809883a 	mov	r4,r19
 800af4c:	d80b883a 	mov	r5,sp
 800af50:	900d883a 	mov	r6,r18
 800af54:	81c01704 	addi	r7,r16,92
 800af58:	800b3a00 	call	800b3a0 <_wcrtomb_r>
 800af5c:	1029883a 	mov	r20,r2
 800af60:	00bfffc4 	movi	r2,-1
 800af64:	a0802026 	beq	r20,r2,800afe8 <_fputwc_r+0xf8>
 800af68:	d9400003 	ldbu	r5,0(sp)
 800af6c:	a0001c26 	beq	r20,zero,800afe0 <_fputwc_r+0xf0>
 800af70:	0023883a 	mov	r17,zero
 800af74:	05400284 	movi	r21,10
 800af78:	00000906 	br	800afa0 <_fputwc_r+0xb0>
 800af7c:	80800017 	ldw	r2,0(r16)
 800af80:	11400005 	stb	r5,0(r2)
 800af84:	80c00017 	ldw	r3,0(r16)
 800af88:	18c00044 	addi	r3,r3,1
 800af8c:	80c00015 	stw	r3,0(r16)
 800af90:	8c400044 	addi	r17,r17,1
 800af94:	dc45883a 	add	r2,sp,r17
 800af98:	8d00112e 	bgeu	r17,r20,800afe0 <_fputwc_r+0xf0>
 800af9c:	11400003 	ldbu	r5,0(r2)
 800afa0:	80c00217 	ldw	r3,8(r16)
 800afa4:	18ffffc4 	addi	r3,r3,-1
 800afa8:	80c00215 	stw	r3,8(r16)
 800afac:	183ff30e 	bge	r3,zero,800af7c <__alt_data_end+0xfc00af7c>
 800afb0:	80800617 	ldw	r2,24(r16)
 800afb4:	18801916 	blt	r3,r2,800b01c <_fputwc_r+0x12c>
 800afb8:	80800017 	ldw	r2,0(r16)
 800afbc:	11400005 	stb	r5,0(r2)
 800afc0:	80800017 	ldw	r2,0(r16)
 800afc4:	10c00003 	ldbu	r3,0(r2)
 800afc8:	10800044 	addi	r2,r2,1
 800afcc:	1d402326 	beq	r3,r21,800b05c <_fputwc_r+0x16c>
 800afd0:	80800015 	stw	r2,0(r16)
 800afd4:	8c400044 	addi	r17,r17,1
 800afd8:	dc45883a 	add	r2,sp,r17
 800afdc:	8d3fef36 	bltu	r17,r20,800af9c <__alt_data_end+0xfc00af9c>
 800afe0:	9005883a 	mov	r2,r18
 800afe4:	00000406 	br	800aff8 <_fputwc_r+0x108>
 800afe8:	80c0030b 	ldhu	r3,12(r16)
 800afec:	a005883a 	mov	r2,r20
 800aff0:	18c01014 	ori	r3,r3,64
 800aff4:	80c0030d 	sth	r3,12(r16)
 800aff8:	dfc00717 	ldw	ra,28(sp)
 800affc:	dd400617 	ldw	r21,24(sp)
 800b000:	dd000517 	ldw	r20,20(sp)
 800b004:	dcc00417 	ldw	r19,16(sp)
 800b008:	dc800317 	ldw	r18,12(sp)
 800b00c:	dc400217 	ldw	r17,8(sp)
 800b010:	dc000117 	ldw	r16,4(sp)
 800b014:	dec00804 	addi	sp,sp,32
 800b018:	f800283a 	ret
 800b01c:	9809883a 	mov	r4,r19
 800b020:	29403fcc 	andi	r5,r5,255
 800b024:	800d883a 	mov	r6,r16
 800b028:	800b2300 	call	800b230 <__swbuf_r>
 800b02c:	10bfffe0 	cmpeqi	r2,r2,-1
 800b030:	10803fcc 	andi	r2,r2,255
 800b034:	103fd626 	beq	r2,zero,800af90 <__alt_data_end+0xfc00af90>
 800b038:	00bfffc4 	movi	r2,-1
 800b03c:	003fee06 	br	800aff8 <__alt_data_end+0xfc00aff8>
 800b040:	90ffffc4 	addi	r3,r18,-1
 800b044:	01003f84 	movi	r4,254
 800b048:	20ffbf36 	bltu	r4,r3,800af48 <__alt_data_end+0xfc00af48>
 800b04c:	900b883a 	mov	r5,r18
 800b050:	dc800005 	stb	r18,0(sp)
 800b054:	1029883a 	mov	r20,r2
 800b058:	003fc506 	br	800af70 <__alt_data_end+0xfc00af70>
 800b05c:	9809883a 	mov	r4,r19
 800b060:	a80b883a 	mov	r5,r21
 800b064:	800d883a 	mov	r6,r16
 800b068:	800b2300 	call	800b230 <__swbuf_r>
 800b06c:	10bfffe0 	cmpeqi	r2,r2,-1
 800b070:	003fef06 	br	800b030 <__alt_data_end+0xfc00b030>

0800b074 <fputwc>:
 800b074:	defffc04 	addi	sp,sp,-16
 800b078:	dc000115 	stw	r16,4(sp)
 800b07c:	04020074 	movhi	r16,2049
 800b080:	840e2504 	addi	r16,r16,14484
 800b084:	dc400215 	stw	r17,8(sp)
 800b088:	2023883a 	mov	r17,r4
 800b08c:	81000017 	ldw	r4,0(r16)
 800b090:	dfc00315 	stw	ra,12(sp)
 800b094:	280d883a 	mov	r6,r5
 800b098:	20000626 	beq	r4,zero,800b0b4 <fputwc+0x40>
 800b09c:	20800e17 	ldw	r2,56(r4)
 800b0a0:	1000041e 	bne	r2,zero,800b0b4 <fputwc+0x40>
 800b0a4:	d9400015 	stw	r5,0(sp)
 800b0a8:	80065100 	call	8006510 <__sinit>
 800b0ac:	81000017 	ldw	r4,0(r16)
 800b0b0:	d9800017 	ldw	r6,0(sp)
 800b0b4:	880b883a 	mov	r5,r17
 800b0b8:	dfc00317 	ldw	ra,12(sp)
 800b0bc:	dc400217 	ldw	r17,8(sp)
 800b0c0:	dc000117 	ldw	r16,4(sp)
 800b0c4:	dec00404 	addi	sp,sp,16
 800b0c8:	800aef01 	jmpi	800aef0 <_fputwc_r>

0800b0cc <_fstat_r>:
 800b0cc:	defffd04 	addi	sp,sp,-12
 800b0d0:	dc000015 	stw	r16,0(sp)
 800b0d4:	04020074 	movhi	r16,2049
 800b0d8:	dc400115 	stw	r17,4(sp)
 800b0dc:	8414f604 	addi	r16,r16,21464
 800b0e0:	2023883a 	mov	r17,r4
 800b0e4:	2809883a 	mov	r4,r5
 800b0e8:	300b883a 	mov	r5,r6
 800b0ec:	dfc00215 	stw	ra,8(sp)
 800b0f0:	80000015 	stw	zero,0(r16)
 800b0f4:	800ecf00 	call	800ecf0 <fstat>
 800b0f8:	00ffffc4 	movi	r3,-1
 800b0fc:	10c00526 	beq	r2,r3,800b114 <_fstat_r+0x48>
 800b100:	dfc00217 	ldw	ra,8(sp)
 800b104:	dc400117 	ldw	r17,4(sp)
 800b108:	dc000017 	ldw	r16,0(sp)
 800b10c:	dec00304 	addi	sp,sp,12
 800b110:	f800283a 	ret
 800b114:	80c00017 	ldw	r3,0(r16)
 800b118:	183ff926 	beq	r3,zero,800b100 <__alt_data_end+0xfc00b100>
 800b11c:	88c00015 	stw	r3,0(r17)
 800b120:	003ff706 	br	800b100 <__alt_data_end+0xfc00b100>

0800b124 <_isatty_r>:
 800b124:	defffd04 	addi	sp,sp,-12
 800b128:	dc000015 	stw	r16,0(sp)
 800b12c:	04020074 	movhi	r16,2049
 800b130:	dc400115 	stw	r17,4(sp)
 800b134:	8414f604 	addi	r16,r16,21464
 800b138:	2023883a 	mov	r17,r4
 800b13c:	2809883a 	mov	r4,r5
 800b140:	dfc00215 	stw	ra,8(sp)
 800b144:	80000015 	stw	zero,0(r16)
 800b148:	800edf80 	call	800edf8 <isatty>
 800b14c:	00ffffc4 	movi	r3,-1
 800b150:	10c00526 	beq	r2,r3,800b168 <_isatty_r+0x44>
 800b154:	dfc00217 	ldw	ra,8(sp)
 800b158:	dc400117 	ldw	r17,4(sp)
 800b15c:	dc000017 	ldw	r16,0(sp)
 800b160:	dec00304 	addi	sp,sp,12
 800b164:	f800283a 	ret
 800b168:	80c00017 	ldw	r3,0(r16)
 800b16c:	183ff926 	beq	r3,zero,800b154 <__alt_data_end+0xfc00b154>
 800b170:	88c00015 	stw	r3,0(r17)
 800b174:	003ff706 	br	800b154 <__alt_data_end+0xfc00b154>

0800b178 <_lseek_r>:
 800b178:	defffd04 	addi	sp,sp,-12
 800b17c:	dc000015 	stw	r16,0(sp)
 800b180:	04020074 	movhi	r16,2049
 800b184:	dc400115 	stw	r17,4(sp)
 800b188:	8414f604 	addi	r16,r16,21464
 800b18c:	2023883a 	mov	r17,r4
 800b190:	2809883a 	mov	r4,r5
 800b194:	300b883a 	mov	r5,r6
 800b198:	380d883a 	mov	r6,r7
 800b19c:	dfc00215 	stw	ra,8(sp)
 800b1a0:	80000015 	stw	zero,0(r16)
 800b1a4:	800efd80 	call	800efd8 <lseek>
 800b1a8:	00ffffc4 	movi	r3,-1
 800b1ac:	10c00526 	beq	r2,r3,800b1c4 <_lseek_r+0x4c>
 800b1b0:	dfc00217 	ldw	ra,8(sp)
 800b1b4:	dc400117 	ldw	r17,4(sp)
 800b1b8:	dc000017 	ldw	r16,0(sp)
 800b1bc:	dec00304 	addi	sp,sp,12
 800b1c0:	f800283a 	ret
 800b1c4:	80c00017 	ldw	r3,0(r16)
 800b1c8:	183ff926 	beq	r3,zero,800b1b0 <__alt_data_end+0xfc00b1b0>
 800b1cc:	88c00015 	stw	r3,0(r17)
 800b1d0:	003ff706 	br	800b1b0 <__alt_data_end+0xfc00b1b0>

0800b1d4 <_read_r>:
 800b1d4:	defffd04 	addi	sp,sp,-12
 800b1d8:	dc000015 	stw	r16,0(sp)
 800b1dc:	04020074 	movhi	r16,2049
 800b1e0:	dc400115 	stw	r17,4(sp)
 800b1e4:	8414f604 	addi	r16,r16,21464
 800b1e8:	2023883a 	mov	r17,r4
 800b1ec:	2809883a 	mov	r4,r5
 800b1f0:	300b883a 	mov	r5,r6
 800b1f4:	380d883a 	mov	r6,r7
 800b1f8:	dfc00215 	stw	ra,8(sp)
 800b1fc:	80000015 	stw	zero,0(r16)
 800b200:	800f1bc0 	call	800f1bc <read>
 800b204:	00ffffc4 	movi	r3,-1
 800b208:	10c00526 	beq	r2,r3,800b220 <_read_r+0x4c>
 800b20c:	dfc00217 	ldw	ra,8(sp)
 800b210:	dc400117 	ldw	r17,4(sp)
 800b214:	dc000017 	ldw	r16,0(sp)
 800b218:	dec00304 	addi	sp,sp,12
 800b21c:	f800283a 	ret
 800b220:	80c00017 	ldw	r3,0(r16)
 800b224:	183ff926 	beq	r3,zero,800b20c <__alt_data_end+0xfc00b20c>
 800b228:	88c00015 	stw	r3,0(r17)
 800b22c:	003ff706 	br	800b20c <__alt_data_end+0xfc00b20c>

0800b230 <__swbuf_r>:
 800b230:	defffc04 	addi	sp,sp,-16
 800b234:	dc800215 	stw	r18,8(sp)
 800b238:	dc400115 	stw	r17,4(sp)
 800b23c:	dc000015 	stw	r16,0(sp)
 800b240:	dfc00315 	stw	ra,12(sp)
 800b244:	2025883a 	mov	r18,r4
 800b248:	2823883a 	mov	r17,r5
 800b24c:	3021883a 	mov	r16,r6
 800b250:	20000226 	beq	r4,zero,800b25c <__swbuf_r+0x2c>
 800b254:	20800e17 	ldw	r2,56(r4)
 800b258:	10004126 	beq	r2,zero,800b360 <__swbuf_r+0x130>
 800b25c:	80c00617 	ldw	r3,24(r16)
 800b260:	8180030b 	ldhu	r6,12(r16)
 800b264:	80c00215 	stw	r3,8(r16)
 800b268:	30c0020c 	andi	r3,r6,8
 800b26c:	18003526 	beq	r3,zero,800b344 <__swbuf_r+0x114>
 800b270:	80c00417 	ldw	r3,16(r16)
 800b274:	18003326 	beq	r3,zero,800b344 <__swbuf_r+0x114>
 800b278:	3088000c 	andi	r2,r6,8192
 800b27c:	8c403fcc 	andi	r17,r17,255
 800b280:	10001726 	beq	r2,zero,800b2e0 <__swbuf_r+0xb0>
 800b284:	80800017 	ldw	r2,0(r16)
 800b288:	81000517 	ldw	r4,20(r16)
 800b28c:	10c7c83a 	sub	r3,r2,r3
 800b290:	19001d0e 	bge	r3,r4,800b308 <__swbuf_r+0xd8>
 800b294:	18c00044 	addi	r3,r3,1
 800b298:	81400217 	ldw	r5,8(r16)
 800b29c:	11000044 	addi	r4,r2,1
 800b2a0:	81000015 	stw	r4,0(r16)
 800b2a4:	297fffc4 	addi	r5,r5,-1
 800b2a8:	81400215 	stw	r5,8(r16)
 800b2ac:	14400005 	stb	r17,0(r2)
 800b2b0:	80800517 	ldw	r2,20(r16)
 800b2b4:	10c01d26 	beq	r2,r3,800b32c <__swbuf_r+0xfc>
 800b2b8:	8080030b 	ldhu	r2,12(r16)
 800b2bc:	1080004c 	andi	r2,r2,1
 800b2c0:	1000181e 	bne	r2,zero,800b324 <__swbuf_r+0xf4>
 800b2c4:	8805883a 	mov	r2,r17
 800b2c8:	dfc00317 	ldw	ra,12(sp)
 800b2cc:	dc800217 	ldw	r18,8(sp)
 800b2d0:	dc400117 	ldw	r17,4(sp)
 800b2d4:	dc000017 	ldw	r16,0(sp)
 800b2d8:	dec00404 	addi	sp,sp,16
 800b2dc:	f800283a 	ret
 800b2e0:	81001917 	ldw	r4,100(r16)
 800b2e4:	00b7ffc4 	movi	r2,-8193
 800b2e8:	31880014 	ori	r6,r6,8192
 800b2ec:	2084703a 	and	r2,r4,r2
 800b2f0:	80801915 	stw	r2,100(r16)
 800b2f4:	80800017 	ldw	r2,0(r16)
 800b2f8:	81000517 	ldw	r4,20(r16)
 800b2fc:	8180030d 	sth	r6,12(r16)
 800b300:	10c7c83a 	sub	r3,r2,r3
 800b304:	193fe316 	blt	r3,r4,800b294 <__alt_data_end+0xfc00b294>
 800b308:	9009883a 	mov	r4,r18
 800b30c:	800b883a 	mov	r5,r16
 800b310:	8005f540 	call	8005f54 <_fflush_r>
 800b314:	1000091e 	bne	r2,zero,800b33c <__swbuf_r+0x10c>
 800b318:	80800017 	ldw	r2,0(r16)
 800b31c:	00c00044 	movi	r3,1
 800b320:	003fdd06 	br	800b298 <__alt_data_end+0xfc00b298>
 800b324:	00800284 	movi	r2,10
 800b328:	88bfe61e 	bne	r17,r2,800b2c4 <__alt_data_end+0xfc00b2c4>
 800b32c:	9009883a 	mov	r4,r18
 800b330:	800b883a 	mov	r5,r16
 800b334:	8005f540 	call	8005f54 <_fflush_r>
 800b338:	103fe226 	beq	r2,zero,800b2c4 <__alt_data_end+0xfc00b2c4>
 800b33c:	00bfffc4 	movi	r2,-1
 800b340:	003fe106 	br	800b2c8 <__alt_data_end+0xfc00b2c8>
 800b344:	9009883a 	mov	r4,r18
 800b348:	800b883a 	mov	r5,r16
 800b34c:	80044d40 	call	80044d4 <__swsetup_r>
 800b350:	1000051e 	bne	r2,zero,800b368 <__swbuf_r+0x138>
 800b354:	8180030b 	ldhu	r6,12(r16)
 800b358:	80c00417 	ldw	r3,16(r16)
 800b35c:	003fc606 	br	800b278 <__alt_data_end+0xfc00b278>
 800b360:	80065100 	call	8006510 <__sinit>
 800b364:	003fbd06 	br	800b25c <__alt_data_end+0xfc00b25c>
 800b368:	80c0030b 	ldhu	r3,12(r16)
 800b36c:	00bfffc4 	movi	r2,-1
 800b370:	18c01014 	ori	r3,r3,64
 800b374:	80c0030d 	sth	r3,12(r16)
 800b378:	00c00244 	movi	r3,9
 800b37c:	90c00015 	stw	r3,0(r18)
 800b380:	003fd106 	br	800b2c8 <__alt_data_end+0xfc00b2c8>

0800b384 <__swbuf>:
 800b384:	00c20074 	movhi	r3,2049
 800b388:	18ce2504 	addi	r3,r3,14484
 800b38c:	2005883a 	mov	r2,r4
 800b390:	19000017 	ldw	r4,0(r3)
 800b394:	280d883a 	mov	r6,r5
 800b398:	100b883a 	mov	r5,r2
 800b39c:	800b2301 	jmpi	800b230 <__swbuf_r>

0800b3a0 <_wcrtomb_r>:
 800b3a0:	defff604 	addi	sp,sp,-40
 800b3a4:	00820074 	movhi	r2,2049
 800b3a8:	dc800815 	stw	r18,32(sp)
 800b3ac:	dc400715 	stw	r17,28(sp)
 800b3b0:	dc000615 	stw	r16,24(sp)
 800b3b4:	108e2904 	addi	r2,r2,14500
 800b3b8:	dfc00915 	stw	ra,36(sp)
 800b3bc:	2021883a 	mov	r16,r4
 800b3c0:	3823883a 	mov	r17,r7
 800b3c4:	14800017 	ldw	r18,0(r2)
 800b3c8:	28001426 	beq	r5,zero,800b41c <_wcrtomb_r+0x7c>
 800b3cc:	d9400415 	stw	r5,16(sp)
 800b3d0:	d9800515 	stw	r6,20(sp)
 800b3d4:	80070040 	call	8007004 <__locale_charset>
 800b3d8:	d9400417 	ldw	r5,16(sp)
 800b3dc:	d9800517 	ldw	r6,20(sp)
 800b3e0:	8009883a 	mov	r4,r16
 800b3e4:	dc400015 	stw	r17,0(sp)
 800b3e8:	100f883a 	mov	r7,r2
 800b3ec:	903ee83a 	callr	r18
 800b3f0:	00ffffc4 	movi	r3,-1
 800b3f4:	10c0031e 	bne	r2,r3,800b404 <_wcrtomb_r+0x64>
 800b3f8:	88000015 	stw	zero,0(r17)
 800b3fc:	00c02284 	movi	r3,138
 800b400:	80c00015 	stw	r3,0(r16)
 800b404:	dfc00917 	ldw	ra,36(sp)
 800b408:	dc800817 	ldw	r18,32(sp)
 800b40c:	dc400717 	ldw	r17,28(sp)
 800b410:	dc000617 	ldw	r16,24(sp)
 800b414:	dec00a04 	addi	sp,sp,40
 800b418:	f800283a 	ret
 800b41c:	80070040 	call	8007004 <__locale_charset>
 800b420:	8009883a 	mov	r4,r16
 800b424:	dc400015 	stw	r17,0(sp)
 800b428:	d9400104 	addi	r5,sp,4
 800b42c:	000d883a 	mov	r6,zero
 800b430:	100f883a 	mov	r7,r2
 800b434:	903ee83a 	callr	r18
 800b438:	003fed06 	br	800b3f0 <__alt_data_end+0xfc00b3f0>

0800b43c <wcrtomb>:
 800b43c:	defff504 	addi	sp,sp,-44
 800b440:	dc400515 	stw	r17,20(sp)
 800b444:	dc000415 	stw	r16,16(sp)
 800b448:	dfc00a15 	stw	ra,40(sp)
 800b44c:	dd400915 	stw	r21,36(sp)
 800b450:	dd000815 	stw	r20,32(sp)
 800b454:	dcc00715 	stw	r19,28(sp)
 800b458:	dc800615 	stw	r18,24(sp)
 800b45c:	2021883a 	mov	r16,r4
 800b460:	3023883a 	mov	r17,r6
 800b464:	20001d26 	beq	r4,zero,800b4dc <wcrtomb+0xa0>
 800b468:	04820074 	movhi	r18,2049
 800b46c:	948e2504 	addi	r18,r18,14484
 800b470:	00820074 	movhi	r2,2049
 800b474:	95400017 	ldw	r21,0(r18)
 800b478:	108e2904 	addi	r2,r2,14500
 800b47c:	15000017 	ldw	r20,0(r2)
 800b480:	2827883a 	mov	r19,r5
 800b484:	80070040 	call	8007004 <__locale_charset>
 800b488:	a809883a 	mov	r4,r21
 800b48c:	dc400015 	stw	r17,0(sp)
 800b490:	800b883a 	mov	r5,r16
 800b494:	980d883a 	mov	r6,r19
 800b498:	100f883a 	mov	r7,r2
 800b49c:	a03ee83a 	callr	r20
 800b4a0:	00ffffc4 	movi	r3,-1
 800b4a4:	10c0041e 	bne	r2,r3,800b4b8 <wcrtomb+0x7c>
 800b4a8:	90c00017 	ldw	r3,0(r18)
 800b4ac:	01002284 	movi	r4,138
 800b4b0:	88000015 	stw	zero,0(r17)
 800b4b4:	19000015 	stw	r4,0(r3)
 800b4b8:	dfc00a17 	ldw	ra,40(sp)
 800b4bc:	dd400917 	ldw	r21,36(sp)
 800b4c0:	dd000817 	ldw	r20,32(sp)
 800b4c4:	dcc00717 	ldw	r19,28(sp)
 800b4c8:	dc800617 	ldw	r18,24(sp)
 800b4cc:	dc400517 	ldw	r17,20(sp)
 800b4d0:	dc000417 	ldw	r16,16(sp)
 800b4d4:	dec00b04 	addi	sp,sp,44
 800b4d8:	f800283a 	ret
 800b4dc:	04820074 	movhi	r18,2049
 800b4e0:	948e2504 	addi	r18,r18,14484
 800b4e4:	00820074 	movhi	r2,2049
 800b4e8:	94c00017 	ldw	r19,0(r18)
 800b4ec:	108e2904 	addi	r2,r2,14500
 800b4f0:	14000017 	ldw	r16,0(r2)
 800b4f4:	80070040 	call	8007004 <__locale_charset>
 800b4f8:	9809883a 	mov	r4,r19
 800b4fc:	dc400015 	stw	r17,0(sp)
 800b500:	d9400104 	addi	r5,sp,4
 800b504:	000d883a 	mov	r6,zero
 800b508:	100f883a 	mov	r7,r2
 800b50c:	803ee83a 	callr	r16
 800b510:	003fe306 	br	800b4a0 <__alt_data_end+0xfc00b4a0>

0800b514 <__ascii_wctomb>:
 800b514:	28000526 	beq	r5,zero,800b52c <__ascii_wctomb+0x18>
 800b518:	00803fc4 	movi	r2,255
 800b51c:	11800536 	bltu	r2,r6,800b534 <__ascii_wctomb+0x20>
 800b520:	29800005 	stb	r6,0(r5)
 800b524:	00800044 	movi	r2,1
 800b528:	f800283a 	ret
 800b52c:	0005883a 	mov	r2,zero
 800b530:	f800283a 	ret
 800b534:	00802284 	movi	r2,138
 800b538:	20800015 	stw	r2,0(r4)
 800b53c:	00bfffc4 	movi	r2,-1
 800b540:	f800283a 	ret

0800b544 <_wctomb_r>:
 800b544:	00820074 	movhi	r2,2049
 800b548:	defff904 	addi	sp,sp,-28
 800b54c:	108e2904 	addi	r2,r2,14500
 800b550:	dfc00615 	stw	ra,24(sp)
 800b554:	dc400515 	stw	r17,20(sp)
 800b558:	dc000415 	stw	r16,16(sp)
 800b55c:	3823883a 	mov	r17,r7
 800b560:	14000017 	ldw	r16,0(r2)
 800b564:	d9000115 	stw	r4,4(sp)
 800b568:	d9400215 	stw	r5,8(sp)
 800b56c:	d9800315 	stw	r6,12(sp)
 800b570:	80070040 	call	8007004 <__locale_charset>
 800b574:	d9000117 	ldw	r4,4(sp)
 800b578:	d9400217 	ldw	r5,8(sp)
 800b57c:	d9800317 	ldw	r6,12(sp)
 800b580:	dc400015 	stw	r17,0(sp)
 800b584:	100f883a 	mov	r7,r2
 800b588:	803ee83a 	callr	r16
 800b58c:	dfc00617 	ldw	ra,24(sp)
 800b590:	dc400517 	ldw	r17,20(sp)
 800b594:	dc000417 	ldw	r16,16(sp)
 800b598:	dec00704 	addi	sp,sp,28
 800b59c:	f800283a 	ret

0800b5a0 <__udivdi3>:
 800b5a0:	defff504 	addi	sp,sp,-44
 800b5a4:	dcc00415 	stw	r19,16(sp)
 800b5a8:	dc000115 	stw	r16,4(sp)
 800b5ac:	dfc00a15 	stw	ra,40(sp)
 800b5b0:	df000915 	stw	fp,36(sp)
 800b5b4:	ddc00815 	stw	r23,32(sp)
 800b5b8:	dd800715 	stw	r22,28(sp)
 800b5bc:	dd400615 	stw	r21,24(sp)
 800b5c0:	dd000515 	stw	r20,20(sp)
 800b5c4:	dc800315 	stw	r18,12(sp)
 800b5c8:	dc400215 	stw	r17,8(sp)
 800b5cc:	2027883a 	mov	r19,r4
 800b5d0:	2821883a 	mov	r16,r5
 800b5d4:	3800471e 	bne	r7,zero,800b6f4 <__udivdi3+0x154>
 800b5d8:	3025883a 	mov	r18,r6
 800b5dc:	2023883a 	mov	r17,r4
 800b5e0:	2980592e 	bgeu	r5,r6,800b748 <__udivdi3+0x1a8>
 800b5e4:	00bfffd4 	movui	r2,65535
 800b5e8:	2829883a 	mov	r20,r5
 800b5ec:	1180b236 	bltu	r2,r6,800b8b8 <__udivdi3+0x318>
 800b5f0:	00803fc4 	movi	r2,255
 800b5f4:	1181622e 	bgeu	r2,r6,800bb80 <__udivdi3+0x5e0>
 800b5f8:	00800204 	movi	r2,8
 800b5fc:	1007883a 	mov	r3,r2
 800b600:	3084d83a 	srl	r2,r6,r2
 800b604:	01020074 	movhi	r4,2049
 800b608:	21072c04 	addi	r4,r4,7344
 800b60c:	2085883a 	add	r2,r4,r2
 800b610:	11000003 	ldbu	r4,0(r2)
 800b614:	20c9883a 	add	r4,r4,r3
 800b618:	00c00804 	movi	r3,32
 800b61c:	1907c83a 	sub	r3,r3,r4
 800b620:	18000526 	beq	r3,zero,800b638 <__udivdi3+0x98>
 800b624:	80e0983a 	sll	r16,r16,r3
 800b628:	9908d83a 	srl	r4,r19,r4
 800b62c:	30e4983a 	sll	r18,r6,r3
 800b630:	98e2983a 	sll	r17,r19,r3
 800b634:	8128b03a 	or	r20,r16,r4
 800b638:	902ad43a 	srli	r21,r18,16
 800b63c:	a009883a 	mov	r4,r20
 800b640:	95bfffcc 	andi	r22,r18,65535
 800b644:	a80b883a 	mov	r5,r21
 800b648:	800c3200 	call	800c320 <__umodsi3>
 800b64c:	a009883a 	mov	r4,r20
 800b650:	a80b883a 	mov	r5,r21
 800b654:	102f883a 	mov	r23,r2
 800b658:	800c3180 	call	800c318 <__udivsi3>
 800b65c:	1009883a 	mov	r4,r2
 800b660:	b00b883a 	mov	r5,r22
 800b664:	1021883a 	mov	r16,r2
 800b668:	800c3280 	call	800c328 <__mulsi3>
 800b66c:	b82e943a 	slli	r23,r23,16
 800b670:	8808d43a 	srli	r4,r17,16
 800b674:	b906b03a 	or	r3,r23,r4
 800b678:	1880052e 	bgeu	r3,r2,800b690 <__udivdi3+0xf0>
 800b67c:	1c87883a 	add	r3,r3,r18
 800b680:	813fffc4 	addi	r4,r16,-1
 800b684:	1c800136 	bltu	r3,r18,800b68c <__udivdi3+0xec>
 800b688:	18815236 	bltu	r3,r2,800bbd4 <__udivdi3+0x634>
 800b68c:	2021883a 	mov	r16,r4
 800b690:	18a7c83a 	sub	r19,r3,r2
 800b694:	9809883a 	mov	r4,r19
 800b698:	a80b883a 	mov	r5,r21
 800b69c:	800c3200 	call	800c320 <__umodsi3>
 800b6a0:	1029883a 	mov	r20,r2
 800b6a4:	9809883a 	mov	r4,r19
 800b6a8:	a80b883a 	mov	r5,r21
 800b6ac:	a028943a 	slli	r20,r20,16
 800b6b0:	800c3180 	call	800c318 <__udivsi3>
 800b6b4:	1009883a 	mov	r4,r2
 800b6b8:	b00b883a 	mov	r5,r22
 800b6bc:	8c7fffcc 	andi	r17,r17,65535
 800b6c0:	1027883a 	mov	r19,r2
 800b6c4:	a462b03a 	or	r17,r20,r17
 800b6c8:	800c3280 	call	800c328 <__mulsi3>
 800b6cc:	8880052e 	bgeu	r17,r2,800b6e4 <__udivdi3+0x144>
 800b6d0:	8ca3883a 	add	r17,r17,r18
 800b6d4:	98ffffc4 	addi	r3,r19,-1
 800b6d8:	8c811036 	bltu	r17,r18,800bb1c <__udivdi3+0x57c>
 800b6dc:	88810f2e 	bgeu	r17,r2,800bb1c <__udivdi3+0x57c>
 800b6e0:	9cffff84 	addi	r19,r19,-2
 800b6e4:	8020943a 	slli	r16,r16,16
 800b6e8:	0007883a 	mov	r3,zero
 800b6ec:	9c04b03a 	or	r2,r19,r16
 800b6f0:	00006006 	br	800b874 <__udivdi3+0x2d4>
 800b6f4:	29c05d36 	bltu	r5,r7,800b86c <__udivdi3+0x2cc>
 800b6f8:	00bfffd4 	movui	r2,65535
 800b6fc:	11c0692e 	bgeu	r2,r7,800b8a4 <__udivdi3+0x304>
 800b700:	00804034 	movhi	r2,256
 800b704:	10bfffc4 	addi	r2,r2,-1
 800b708:	11c10e2e 	bgeu	r2,r7,800bb44 <__udivdi3+0x5a4>
 800b70c:	01400604 	movi	r5,24
 800b710:	2811883a 	mov	r8,r5
 800b714:	394ad83a 	srl	r5,r7,r5
 800b718:	00820074 	movhi	r2,2049
 800b71c:	10872c04 	addi	r2,r2,7344
 800b720:	114b883a 	add	r5,r2,r5
 800b724:	29400003 	ldbu	r5,0(r5)
 800b728:	00c00804 	movi	r3,32
 800b72c:	2a0b883a 	add	r5,r5,r8
 800b730:	196fc83a 	sub	r23,r3,r5
 800b734:	b8006b1e 	bne	r23,zero,800b8e4 <__udivdi3+0x344>
 800b738:	3c011436 	bltu	r7,r16,800bb8c <__udivdi3+0x5ec>
 800b73c:	9985403a 	cmpgeu	r2,r19,r6
 800b740:	0007883a 	mov	r3,zero
 800b744:	00004b06 	br	800b874 <__udivdi3+0x2d4>
 800b748:	3000041e 	bne	r6,zero,800b75c <__udivdi3+0x1bc>
 800b74c:	01000044 	movi	r4,1
 800b750:	000b883a 	mov	r5,zero
 800b754:	800c3180 	call	800c318 <__udivsi3>
 800b758:	1025883a 	mov	r18,r2
 800b75c:	00bfffd4 	movui	r2,65535
 800b760:	14805b2e 	bgeu	r2,r18,800b8d0 <__udivdi3+0x330>
 800b764:	00804034 	movhi	r2,256
 800b768:	10bfffc4 	addi	r2,r2,-1
 800b76c:	1480fe2e 	bgeu	r2,r18,800bb68 <__udivdi3+0x5c8>
 800b770:	00800604 	movi	r2,24
 800b774:	1007883a 	mov	r3,r2
 800b778:	9084d83a 	srl	r2,r18,r2
 800b77c:	01020074 	movhi	r4,2049
 800b780:	21072c04 	addi	r4,r4,7344
 800b784:	2085883a 	add	r2,r4,r2
 800b788:	11800003 	ldbu	r6,0(r2)
 800b78c:	01c00804 	movi	r7,32
 800b790:	30c7883a 	add	r3,r6,r3
 800b794:	38cfc83a 	sub	r7,r7,r3
 800b798:	3800a71e 	bne	r7,zero,800ba38 <__udivdi3+0x498>
 800b79c:	9028d43a 	srli	r20,r18,16
 800b7a0:	84a1c83a 	sub	r16,r16,r18
 800b7a4:	957fffcc 	andi	r21,r18,65535
 800b7a8:	00c00044 	movi	r3,1
 800b7ac:	8009883a 	mov	r4,r16
 800b7b0:	a00b883a 	mov	r5,r20
 800b7b4:	d8c00015 	stw	r3,0(sp)
 800b7b8:	800c3200 	call	800c320 <__umodsi3>
 800b7bc:	8009883a 	mov	r4,r16
 800b7c0:	a00b883a 	mov	r5,r20
 800b7c4:	102d883a 	mov	r22,r2
 800b7c8:	800c3180 	call	800c318 <__udivsi3>
 800b7cc:	1009883a 	mov	r4,r2
 800b7d0:	a80b883a 	mov	r5,r21
 800b7d4:	1021883a 	mov	r16,r2
 800b7d8:	800c3280 	call	800c328 <__mulsi3>
 800b7dc:	b02c943a 	slli	r22,r22,16
 800b7e0:	880ed43a 	srli	r7,r17,16
 800b7e4:	d8c00017 	ldw	r3,0(sp)
 800b7e8:	b1ccb03a 	or	r6,r22,r7
 800b7ec:	3080052e 	bgeu	r6,r2,800b804 <__udivdi3+0x264>
 800b7f0:	348d883a 	add	r6,r6,r18
 800b7f4:	813fffc4 	addi	r4,r16,-1
 800b7f8:	34800136 	bltu	r6,r18,800b800 <__udivdi3+0x260>
 800b7fc:	3080f236 	bltu	r6,r2,800bbc8 <__udivdi3+0x628>
 800b800:	2021883a 	mov	r16,r4
 800b804:	30a7c83a 	sub	r19,r6,r2
 800b808:	9809883a 	mov	r4,r19
 800b80c:	a00b883a 	mov	r5,r20
 800b810:	d8c00015 	stw	r3,0(sp)
 800b814:	800c3200 	call	800c320 <__umodsi3>
 800b818:	102d883a 	mov	r22,r2
 800b81c:	9809883a 	mov	r4,r19
 800b820:	a00b883a 	mov	r5,r20
 800b824:	b02c943a 	slli	r22,r22,16
 800b828:	800c3180 	call	800c318 <__udivsi3>
 800b82c:	1009883a 	mov	r4,r2
 800b830:	a80b883a 	mov	r5,r21
 800b834:	8c7fffcc 	andi	r17,r17,65535
 800b838:	1027883a 	mov	r19,r2
 800b83c:	b462b03a 	or	r17,r22,r17
 800b840:	800c3280 	call	800c328 <__mulsi3>
 800b844:	d8c00017 	ldw	r3,0(sp)
 800b848:	8880052e 	bgeu	r17,r2,800b860 <__udivdi3+0x2c0>
 800b84c:	8ca3883a 	add	r17,r17,r18
 800b850:	993fffc4 	addi	r4,r19,-1
 800b854:	8c80af36 	bltu	r17,r18,800bb14 <__udivdi3+0x574>
 800b858:	8880ae2e 	bgeu	r17,r2,800bb14 <__udivdi3+0x574>
 800b85c:	9cffff84 	addi	r19,r19,-2
 800b860:	8020943a 	slli	r16,r16,16
 800b864:	9c04b03a 	or	r2,r19,r16
 800b868:	00000206 	br	800b874 <__udivdi3+0x2d4>
 800b86c:	0007883a 	mov	r3,zero
 800b870:	0005883a 	mov	r2,zero
 800b874:	dfc00a17 	ldw	ra,40(sp)
 800b878:	df000917 	ldw	fp,36(sp)
 800b87c:	ddc00817 	ldw	r23,32(sp)
 800b880:	dd800717 	ldw	r22,28(sp)
 800b884:	dd400617 	ldw	r21,24(sp)
 800b888:	dd000517 	ldw	r20,20(sp)
 800b88c:	dcc00417 	ldw	r19,16(sp)
 800b890:	dc800317 	ldw	r18,12(sp)
 800b894:	dc400217 	ldw	r17,8(sp)
 800b898:	dc000117 	ldw	r16,4(sp)
 800b89c:	dec00b04 	addi	sp,sp,44
 800b8a0:	f800283a 	ret
 800b8a4:	00803fc4 	movi	r2,255
 800b8a8:	11c0a92e 	bgeu	r2,r7,800bb50 <__udivdi3+0x5b0>
 800b8ac:	01400204 	movi	r5,8
 800b8b0:	2811883a 	mov	r8,r5
 800b8b4:	003f9706 	br	800b714 <__alt_data_end+0xfc00b714>
 800b8b8:	00804034 	movhi	r2,256
 800b8bc:	10bfffc4 	addi	r2,r2,-1
 800b8c0:	1180a62e 	bgeu	r2,r6,800bb5c <__udivdi3+0x5bc>
 800b8c4:	00800604 	movi	r2,24
 800b8c8:	1007883a 	mov	r3,r2
 800b8cc:	003f4c06 	br	800b600 <__alt_data_end+0xfc00b600>
 800b8d0:	00803fc4 	movi	r2,255
 800b8d4:	1480a72e 	bgeu	r2,r18,800bb74 <__udivdi3+0x5d4>
 800b8d8:	00800204 	movi	r2,8
 800b8dc:	1007883a 	mov	r3,r2
 800b8e0:	003fa506 	br	800b778 <__alt_data_end+0xfc00b778>
 800b8e4:	3178d83a 	srl	fp,r6,r5
 800b8e8:	3dce983a 	sll	r7,r7,r23
 800b8ec:	8168d83a 	srl	r20,r16,r5
 800b8f0:	9950d83a 	srl	r8,r19,r5
 800b8f4:	3f38b03a 	or	fp,r7,fp
 800b8f8:	e024d43a 	srli	r18,fp,16
 800b8fc:	85e0983a 	sll	r16,r16,r23
 800b900:	a009883a 	mov	r4,r20
 800b904:	900b883a 	mov	r5,r18
 800b908:	8220b03a 	or	r16,r16,r8
 800b90c:	35ea983a 	sll	r21,r6,r23
 800b910:	800c3200 	call	800c320 <__umodsi3>
 800b914:	a009883a 	mov	r4,r20
 800b918:	900b883a 	mov	r5,r18
 800b91c:	1023883a 	mov	r17,r2
 800b920:	e5bfffcc 	andi	r22,fp,65535
 800b924:	800c3180 	call	800c318 <__udivsi3>
 800b928:	1009883a 	mov	r4,r2
 800b92c:	b00b883a 	mov	r5,r22
 800b930:	1029883a 	mov	r20,r2
 800b934:	800c3280 	call	800c328 <__mulsi3>
 800b938:	8806943a 	slli	r3,r17,16
 800b93c:	8014d43a 	srli	r10,r16,16
 800b940:	1a92b03a 	or	r9,r3,r10
 800b944:	4880042e 	bgeu	r9,r2,800b958 <__udivdi3+0x3b8>
 800b948:	4f13883a 	add	r9,r9,fp
 800b94c:	a0ffffc4 	addi	r3,r20,-1
 800b950:	4f00952e 	bgeu	r9,fp,800bba8 <__udivdi3+0x608>
 800b954:	1829883a 	mov	r20,r3
 800b958:	48a3c83a 	sub	r17,r9,r2
 800b95c:	8809883a 	mov	r4,r17
 800b960:	900b883a 	mov	r5,r18
 800b964:	800c3200 	call	800c320 <__umodsi3>
 800b968:	8809883a 	mov	r4,r17
 800b96c:	900b883a 	mov	r5,r18
 800b970:	d8800015 	stw	r2,0(sp)
 800b974:	800c3180 	call	800c318 <__udivsi3>
 800b978:	1009883a 	mov	r4,r2
 800b97c:	b00b883a 	mov	r5,r22
 800b980:	1023883a 	mov	r17,r2
 800b984:	800c3280 	call	800c328 <__mulsi3>
 800b988:	d8c00017 	ldw	r3,0(sp)
 800b98c:	823fffcc 	andi	r8,r16,65535
 800b990:	1806943a 	slli	r3,r3,16
 800b994:	1a20b03a 	or	r16,r3,r8
 800b998:	8080042e 	bgeu	r16,r2,800b9ac <__udivdi3+0x40c>
 800b99c:	8721883a 	add	r16,r16,fp
 800b9a0:	88ffffc4 	addi	r3,r17,-1
 800b9a4:	87007c2e 	bgeu	r16,fp,800bb98 <__udivdi3+0x5f8>
 800b9a8:	1823883a 	mov	r17,r3
 800b9ac:	a028943a 	slli	r20,r20,16
 800b9b0:	acbfffcc 	andi	r18,r21,65535
 800b9b4:	900b883a 	mov	r5,r18
 800b9b8:	8d28b03a 	or	r20,r17,r20
 800b9bc:	a022d43a 	srli	r17,r20,16
 800b9c0:	a5bfffcc 	andi	r22,r20,65535
 800b9c4:	b009883a 	mov	r4,r22
 800b9c8:	a82ad43a 	srli	r21,r21,16
 800b9cc:	80a1c83a 	sub	r16,r16,r2
 800b9d0:	800c3280 	call	800c328 <__mulsi3>
 800b9d4:	8809883a 	mov	r4,r17
 800b9d8:	900b883a 	mov	r5,r18
 800b9dc:	1039883a 	mov	fp,r2
 800b9e0:	800c3280 	call	800c328 <__mulsi3>
 800b9e4:	8809883a 	mov	r4,r17
 800b9e8:	a80b883a 	mov	r5,r21
 800b9ec:	1025883a 	mov	r18,r2
 800b9f0:	800c3280 	call	800c328 <__mulsi3>
 800b9f4:	b009883a 	mov	r4,r22
 800b9f8:	a80b883a 	mov	r5,r21
 800b9fc:	1023883a 	mov	r17,r2
 800ba00:	800c3280 	call	800c328 <__mulsi3>
 800ba04:	e006d43a 	srli	r3,fp,16
 800ba08:	9085883a 	add	r2,r18,r2
 800ba0c:	10c7883a 	add	r3,r2,r3
 800ba10:	1c80022e 	bgeu	r3,r18,800ba1c <__udivdi3+0x47c>
 800ba14:	00800074 	movhi	r2,1
 800ba18:	88a3883a 	add	r17,r17,r2
 800ba1c:	1808d43a 	srli	r4,r3,16
 800ba20:	8909883a 	add	r4,r17,r4
 800ba24:	81004436 	bltu	r16,r4,800bb38 <__udivdi3+0x598>
 800ba28:	81003e26 	beq	r16,r4,800bb24 <__udivdi3+0x584>
 800ba2c:	a005883a 	mov	r2,r20
 800ba30:	0007883a 	mov	r3,zero
 800ba34:	003f8f06 	br	800b874 <__alt_data_end+0xfc00b874>
 800ba38:	91e4983a 	sll	r18,r18,r7
 800ba3c:	80eed83a 	srl	r23,r16,r3
 800ba40:	81cc983a 	sll	r6,r16,r7
 800ba44:	9028d43a 	srli	r20,r18,16
 800ba48:	98c6d83a 	srl	r3,r19,r3
 800ba4c:	b809883a 	mov	r4,r23
 800ba50:	a00b883a 	mov	r5,r20
 800ba54:	30ecb03a 	or	r22,r6,r3
 800ba58:	99e2983a 	sll	r17,r19,r7
 800ba5c:	800c3200 	call	800c320 <__umodsi3>
 800ba60:	b809883a 	mov	r4,r23
 800ba64:	a00b883a 	mov	r5,r20
 800ba68:	1021883a 	mov	r16,r2
 800ba6c:	957fffcc 	andi	r21,r18,65535
 800ba70:	800c3180 	call	800c318 <__udivsi3>
 800ba74:	a80b883a 	mov	r5,r21
 800ba78:	1009883a 	mov	r4,r2
 800ba7c:	102f883a 	mov	r23,r2
 800ba80:	800c3280 	call	800c328 <__mulsi3>
 800ba84:	8020943a 	slli	r16,r16,16
 800ba88:	b00ad43a 	srli	r5,r22,16
 800ba8c:	814cb03a 	or	r6,r16,r5
 800ba90:	3080062e 	bgeu	r6,r2,800baac <__udivdi3+0x50c>
 800ba94:	348d883a 	add	r6,r6,r18
 800ba98:	b8ffffc4 	addi	r3,r23,-1
 800ba9c:	34804836 	bltu	r6,r18,800bbc0 <__udivdi3+0x620>
 800baa0:	3080472e 	bgeu	r6,r2,800bbc0 <__udivdi3+0x620>
 800baa4:	bdffff84 	addi	r23,r23,-2
 800baa8:	348d883a 	add	r6,r6,r18
 800baac:	30a7c83a 	sub	r19,r6,r2
 800bab0:	9809883a 	mov	r4,r19
 800bab4:	a00b883a 	mov	r5,r20
 800bab8:	800c3200 	call	800c320 <__umodsi3>
 800babc:	9809883a 	mov	r4,r19
 800bac0:	a00b883a 	mov	r5,r20
 800bac4:	1039883a 	mov	fp,r2
 800bac8:	800c3180 	call	800c318 <__udivsi3>
 800bacc:	1009883a 	mov	r4,r2
 800bad0:	a80b883a 	mov	r5,r21
 800bad4:	e038943a 	slli	fp,fp,16
 800bad8:	1027883a 	mov	r19,r2
 800badc:	800c3280 	call	800c328 <__mulsi3>
 800bae0:	b1bfffcc 	andi	r6,r22,65535
 800bae4:	e18cb03a 	or	r6,fp,r6
 800bae8:	3080062e 	bgeu	r6,r2,800bb04 <__udivdi3+0x564>
 800baec:	348d883a 	add	r6,r6,r18
 800baf0:	98ffffc4 	addi	r3,r19,-1
 800baf4:	34803036 	bltu	r6,r18,800bbb8 <__udivdi3+0x618>
 800baf8:	30802f2e 	bgeu	r6,r2,800bbb8 <__udivdi3+0x618>
 800bafc:	9cffff84 	addi	r19,r19,-2
 800bb00:	348d883a 	add	r6,r6,r18
 800bb04:	b82e943a 	slli	r23,r23,16
 800bb08:	30a1c83a 	sub	r16,r6,r2
 800bb0c:	9dc6b03a 	or	r3,r19,r23
 800bb10:	003f2606 	br	800b7ac <__alt_data_end+0xfc00b7ac>
 800bb14:	2027883a 	mov	r19,r4
 800bb18:	003f5106 	br	800b860 <__alt_data_end+0xfc00b860>
 800bb1c:	1827883a 	mov	r19,r3
 800bb20:	003ef006 	br	800b6e4 <__alt_data_end+0xfc00b6e4>
 800bb24:	1808943a 	slli	r4,r3,16
 800bb28:	9dc6983a 	sll	r3,r19,r23
 800bb2c:	e73fffcc 	andi	fp,fp,65535
 800bb30:	2709883a 	add	r4,r4,fp
 800bb34:	193fbd2e 	bgeu	r3,r4,800ba2c <__alt_data_end+0xfc00ba2c>
 800bb38:	a0bfffc4 	addi	r2,r20,-1
 800bb3c:	0007883a 	mov	r3,zero
 800bb40:	003f4c06 	br	800b874 <__alt_data_end+0xfc00b874>
 800bb44:	01400404 	movi	r5,16
 800bb48:	2811883a 	mov	r8,r5
 800bb4c:	003ef106 	br	800b714 <__alt_data_end+0xfc00b714>
 800bb50:	000b883a 	mov	r5,zero
 800bb54:	0011883a 	mov	r8,zero
 800bb58:	003eee06 	br	800b714 <__alt_data_end+0xfc00b714>
 800bb5c:	00800404 	movi	r2,16
 800bb60:	1007883a 	mov	r3,r2
 800bb64:	003ea606 	br	800b600 <__alt_data_end+0xfc00b600>
 800bb68:	00800404 	movi	r2,16
 800bb6c:	1007883a 	mov	r3,r2
 800bb70:	003f0106 	br	800b778 <__alt_data_end+0xfc00b778>
 800bb74:	0005883a 	mov	r2,zero
 800bb78:	0007883a 	mov	r3,zero
 800bb7c:	003efe06 	br	800b778 <__alt_data_end+0xfc00b778>
 800bb80:	0005883a 	mov	r2,zero
 800bb84:	0007883a 	mov	r3,zero
 800bb88:	003e9d06 	br	800b600 <__alt_data_end+0xfc00b600>
 800bb8c:	0007883a 	mov	r3,zero
 800bb90:	00800044 	movi	r2,1
 800bb94:	003f3706 	br	800b874 <__alt_data_end+0xfc00b874>
 800bb98:	80bf832e 	bgeu	r16,r2,800b9a8 <__alt_data_end+0xfc00b9a8>
 800bb9c:	8c7fff84 	addi	r17,r17,-2
 800bba0:	8721883a 	add	r16,r16,fp
 800bba4:	003f8106 	br	800b9ac <__alt_data_end+0xfc00b9ac>
 800bba8:	48bf6a2e 	bgeu	r9,r2,800b954 <__alt_data_end+0xfc00b954>
 800bbac:	a53fff84 	addi	r20,r20,-2
 800bbb0:	4f13883a 	add	r9,r9,fp
 800bbb4:	003f6806 	br	800b958 <__alt_data_end+0xfc00b958>
 800bbb8:	1827883a 	mov	r19,r3
 800bbbc:	003fd106 	br	800bb04 <__alt_data_end+0xfc00bb04>
 800bbc0:	182f883a 	mov	r23,r3
 800bbc4:	003fb906 	br	800baac <__alt_data_end+0xfc00baac>
 800bbc8:	843fff84 	addi	r16,r16,-2
 800bbcc:	348d883a 	add	r6,r6,r18
 800bbd0:	003f0c06 	br	800b804 <__alt_data_end+0xfc00b804>
 800bbd4:	843fff84 	addi	r16,r16,-2
 800bbd8:	1c87883a 	add	r3,r3,r18
 800bbdc:	003eac06 	br	800b690 <__alt_data_end+0xfc00b690>

0800bbe0 <__umoddi3>:
 800bbe0:	defff404 	addi	sp,sp,-48
 800bbe4:	dd800815 	stw	r22,32(sp)
 800bbe8:	dc400315 	stw	r17,12(sp)
 800bbec:	dc000215 	stw	r16,8(sp)
 800bbf0:	dfc00b15 	stw	ra,44(sp)
 800bbf4:	df000a15 	stw	fp,40(sp)
 800bbf8:	ddc00915 	stw	r23,36(sp)
 800bbfc:	dd400715 	stw	r21,28(sp)
 800bc00:	dd000615 	stw	r20,24(sp)
 800bc04:	dcc00515 	stw	r19,20(sp)
 800bc08:	dc800415 	stw	r18,16(sp)
 800bc0c:	2021883a 	mov	r16,r4
 800bc10:	2823883a 	mov	r17,r5
 800bc14:	282d883a 	mov	r22,r5
 800bc18:	38003c1e 	bne	r7,zero,800bd0c <__umoddi3+0x12c>
 800bc1c:	3027883a 	mov	r19,r6
 800bc20:	2029883a 	mov	r20,r4
 800bc24:	2980522e 	bgeu	r5,r6,800bd70 <__umoddi3+0x190>
 800bc28:	00bfffd4 	movui	r2,65535
 800bc2c:	1180a436 	bltu	r2,r6,800bec0 <__umoddi3+0x2e0>
 800bc30:	00803fc4 	movi	r2,255
 800bc34:	11815e2e 	bgeu	r2,r6,800c1b0 <__umoddi3+0x5d0>
 800bc38:	01400204 	movi	r5,8
 800bc3c:	2805883a 	mov	r2,r5
 800bc40:	314ad83a 	srl	r5,r6,r5
 800bc44:	00c20074 	movhi	r3,2049
 800bc48:	18c72c04 	addi	r3,r3,7344
 800bc4c:	194b883a 	add	r5,r3,r5
 800bc50:	29000003 	ldbu	r4,0(r5)
 800bc54:	2089883a 	add	r4,r4,r2
 800bc58:	00800804 	movi	r2,32
 800bc5c:	1105c83a 	sub	r2,r2,r4
 800bc60:	10010c26 	beq	r2,zero,800c094 <__umoddi3+0x4b4>
 800bc64:	88a2983a 	sll	r17,r17,r2
 800bc68:	8108d83a 	srl	r4,r16,r4
 800bc6c:	30a6983a 	sll	r19,r6,r2
 800bc70:	80a8983a 	sll	r20,r16,r2
 800bc74:	1025883a 	mov	r18,r2
 800bc78:	892cb03a 	or	r22,r17,r4
 800bc7c:	9822d43a 	srli	r17,r19,16
 800bc80:	b009883a 	mov	r4,r22
 800bc84:	9d7fffcc 	andi	r21,r19,65535
 800bc88:	880b883a 	mov	r5,r17
 800bc8c:	800c3200 	call	800c320 <__umodsi3>
 800bc90:	b009883a 	mov	r4,r22
 800bc94:	880b883a 	mov	r5,r17
 800bc98:	102f883a 	mov	r23,r2
 800bc9c:	800c3180 	call	800c318 <__udivsi3>
 800bca0:	1009883a 	mov	r4,r2
 800bca4:	a80b883a 	mov	r5,r21
 800bca8:	800c3280 	call	800c328 <__mulsi3>
 800bcac:	b82e943a 	slli	r23,r23,16
 800bcb0:	a008d43a 	srli	r4,r20,16
 800bcb4:	b906b03a 	or	r3,r23,r4
 800bcb8:	1880042e 	bgeu	r3,r2,800bccc <__umoddi3+0xec>
 800bcbc:	1cc7883a 	add	r3,r3,r19
 800bcc0:	1cc00236 	bltu	r3,r19,800bccc <__umoddi3+0xec>
 800bcc4:	1880012e 	bgeu	r3,r2,800bccc <__umoddi3+0xec>
 800bcc8:	1cc7883a 	add	r3,r3,r19
 800bccc:	18a1c83a 	sub	r16,r3,r2
 800bcd0:	8009883a 	mov	r4,r16
 800bcd4:	880b883a 	mov	r5,r17
 800bcd8:	800c3200 	call	800c320 <__umodsi3>
 800bcdc:	8009883a 	mov	r4,r16
 800bce0:	880b883a 	mov	r5,r17
 800bce4:	102d883a 	mov	r22,r2
 800bce8:	800c3180 	call	800c318 <__udivsi3>
 800bcec:	1009883a 	mov	r4,r2
 800bcf0:	a80b883a 	mov	r5,r21
 800bcf4:	b02c943a 	slli	r22,r22,16
 800bcf8:	800c3280 	call	800c328 <__mulsi3>
 800bcfc:	a13fffcc 	andi	r4,r20,65535
 800bd00:	b106b03a 	or	r3,r22,r4
 800bd04:	1880572e 	bgeu	r3,r2,800be64 <__umoddi3+0x284>
 800bd08:	00005206 	br	800be54 <__umoddi3+0x274>
 800bd0c:	29c05936 	bltu	r5,r7,800be74 <__umoddi3+0x294>
 800bd10:	00bfffd4 	movui	r2,65535
 800bd14:	11c0652e 	bgeu	r2,r7,800beac <__umoddi3+0x2cc>
 800bd18:	00804034 	movhi	r2,256
 800bd1c:	10bfffc4 	addi	r2,r2,-1
 800bd20:	11c1172e 	bgeu	r2,r7,800c180 <__umoddi3+0x5a0>
 800bd24:	01400604 	movi	r5,24
 800bd28:	282b883a 	mov	r21,r5
 800bd2c:	394ad83a 	srl	r5,r7,r5
 800bd30:	00c20074 	movhi	r3,2049
 800bd34:	18c72c04 	addi	r3,r3,7344
 800bd38:	194b883a 	add	r5,r3,r5
 800bd3c:	28800003 	ldbu	r2,0(r5)
 800bd40:	00c00804 	movi	r3,32
 800bd44:	156b883a 	add	r21,r2,r21
 800bd48:	1d69c83a 	sub	r20,r3,r21
 800bd4c:	a000671e 	bne	r20,zero,800beec <__umoddi3+0x30c>
 800bd50:	3c400136 	bltu	r7,r17,800bd58 <__umoddi3+0x178>
 800bd54:	81812336 	bltu	r16,r6,800c1e4 <__umoddi3+0x604>
 800bd58:	8185c83a 	sub	r2,r16,r6
 800bd5c:	89e3c83a 	sub	r17,r17,r7
 800bd60:	8087803a 	cmpltu	r3,r16,r2
 800bd64:	88edc83a 	sub	r22,r17,r3
 800bd68:	b007883a 	mov	r3,r22
 800bd6c:	00004306 	br	800be7c <__umoddi3+0x29c>
 800bd70:	3000041e 	bne	r6,zero,800bd84 <__umoddi3+0x1a4>
 800bd74:	01000044 	movi	r4,1
 800bd78:	000b883a 	mov	r5,zero
 800bd7c:	800c3180 	call	800c318 <__udivsi3>
 800bd80:	1027883a 	mov	r19,r2
 800bd84:	00bfffd4 	movui	r2,65535
 800bd88:	14c0532e 	bgeu	r2,r19,800bed8 <__umoddi3+0x2f8>
 800bd8c:	00804034 	movhi	r2,256
 800bd90:	10bfffc4 	addi	r2,r2,-1
 800bd94:	14c1032e 	bgeu	r2,r19,800c1a4 <__umoddi3+0x5c4>
 800bd98:	00800604 	movi	r2,24
 800bd9c:	1007883a 	mov	r3,r2
 800bda0:	9884d83a 	srl	r2,r19,r2
 800bda4:	01020074 	movhi	r4,2049
 800bda8:	21072c04 	addi	r4,r4,7344
 800bdac:	2085883a 	add	r2,r4,r2
 800bdb0:	11000003 	ldbu	r4,0(r2)
 800bdb4:	00800804 	movi	r2,32
 800bdb8:	20c7883a 	add	r3,r4,r3
 800bdbc:	10c5c83a 	sub	r2,r2,r3
 800bdc0:	1000b61e 	bne	r2,zero,800c09c <__umoddi3+0x4bc>
 800bdc4:	982ad43a 	srli	r21,r19,16
 800bdc8:	8ce3c83a 	sub	r17,r17,r19
 800bdcc:	9dbfffcc 	andi	r22,r19,65535
 800bdd0:	0025883a 	mov	r18,zero
 800bdd4:	8809883a 	mov	r4,r17
 800bdd8:	a80b883a 	mov	r5,r21
 800bddc:	800c3200 	call	800c320 <__umodsi3>
 800bde0:	8809883a 	mov	r4,r17
 800bde4:	a80b883a 	mov	r5,r21
 800bde8:	102f883a 	mov	r23,r2
 800bdec:	800c3180 	call	800c318 <__udivsi3>
 800bdf0:	1009883a 	mov	r4,r2
 800bdf4:	b00b883a 	mov	r5,r22
 800bdf8:	800c3280 	call	800c328 <__mulsi3>
 800bdfc:	b82e943a 	slli	r23,r23,16
 800be00:	a008d43a 	srli	r4,r20,16
 800be04:	b906b03a 	or	r3,r23,r4
 800be08:	1880032e 	bgeu	r3,r2,800be18 <__umoddi3+0x238>
 800be0c:	1cc7883a 	add	r3,r3,r19
 800be10:	1cc00136 	bltu	r3,r19,800be18 <__umoddi3+0x238>
 800be14:	1880f136 	bltu	r3,r2,800c1dc <__umoddi3+0x5fc>
 800be18:	18a1c83a 	sub	r16,r3,r2
 800be1c:	8009883a 	mov	r4,r16
 800be20:	a80b883a 	mov	r5,r21
 800be24:	800c3200 	call	800c320 <__umodsi3>
 800be28:	8009883a 	mov	r4,r16
 800be2c:	a80b883a 	mov	r5,r21
 800be30:	1023883a 	mov	r17,r2
 800be34:	800c3180 	call	800c318 <__udivsi3>
 800be38:	1009883a 	mov	r4,r2
 800be3c:	b00b883a 	mov	r5,r22
 800be40:	8822943a 	slli	r17,r17,16
 800be44:	800c3280 	call	800c328 <__mulsi3>
 800be48:	a13fffcc 	andi	r4,r20,65535
 800be4c:	8906b03a 	or	r3,r17,r4
 800be50:	1880042e 	bgeu	r3,r2,800be64 <__umoddi3+0x284>
 800be54:	1cc7883a 	add	r3,r3,r19
 800be58:	1cc00236 	bltu	r3,r19,800be64 <__umoddi3+0x284>
 800be5c:	1880012e 	bgeu	r3,r2,800be64 <__umoddi3+0x284>
 800be60:	1cc7883a 	add	r3,r3,r19
 800be64:	1887c83a 	sub	r3,r3,r2
 800be68:	1c84d83a 	srl	r2,r3,r18
 800be6c:	0007883a 	mov	r3,zero
 800be70:	00000206 	br	800be7c <__umoddi3+0x29c>
 800be74:	2005883a 	mov	r2,r4
 800be78:	2807883a 	mov	r3,r5
 800be7c:	dfc00b17 	ldw	ra,44(sp)
 800be80:	df000a17 	ldw	fp,40(sp)
 800be84:	ddc00917 	ldw	r23,36(sp)
 800be88:	dd800817 	ldw	r22,32(sp)
 800be8c:	dd400717 	ldw	r21,28(sp)
 800be90:	dd000617 	ldw	r20,24(sp)
 800be94:	dcc00517 	ldw	r19,20(sp)
 800be98:	dc800417 	ldw	r18,16(sp)
 800be9c:	dc400317 	ldw	r17,12(sp)
 800bea0:	dc000217 	ldw	r16,8(sp)
 800bea4:	dec00c04 	addi	sp,sp,48
 800bea8:	f800283a 	ret
 800beac:	00803fc4 	movi	r2,255
 800beb0:	11c0b02e 	bgeu	r2,r7,800c174 <__umoddi3+0x594>
 800beb4:	01400204 	movi	r5,8
 800beb8:	282b883a 	mov	r21,r5
 800bebc:	003f9b06 	br	800bd2c <__alt_data_end+0xfc00bd2c>
 800bec0:	00804034 	movhi	r2,256
 800bec4:	10bfffc4 	addi	r2,r2,-1
 800bec8:	1180b02e 	bgeu	r2,r6,800c18c <__umoddi3+0x5ac>
 800becc:	01400604 	movi	r5,24
 800bed0:	2805883a 	mov	r2,r5
 800bed4:	003f5a06 	br	800bc40 <__alt_data_end+0xfc00bc40>
 800bed8:	00803fc4 	movi	r2,255
 800bedc:	14c0ae2e 	bgeu	r2,r19,800c198 <__umoddi3+0x5b8>
 800bee0:	00800204 	movi	r2,8
 800bee4:	1007883a 	mov	r3,r2
 800bee8:	003fad06 	br	800bda0 <__alt_data_end+0xfc00bda0>
 800beec:	3d0a983a 	sll	r5,r7,r20
 800bef0:	356cd83a 	srl	r22,r6,r21
 800bef4:	8d78d83a 	srl	fp,r17,r21
 800bef8:	8d10983a 	sll	r8,r17,r20
 800befc:	2dacb03a 	or	r22,r5,r22
 800bf00:	b02ed43a 	srli	r23,r22,16
 800bf04:	8564d83a 	srl	r18,r16,r21
 800bf08:	e009883a 	mov	r4,fp
 800bf0c:	b80b883a 	mov	r5,r23
 800bf10:	44a4b03a 	or	r18,r8,r18
 800bf14:	3526983a 	sll	r19,r6,r20
 800bf18:	800c3200 	call	800c320 <__umodsi3>
 800bf1c:	e009883a 	mov	r4,fp
 800bf20:	b80b883a 	mov	r5,r23
 800bf24:	b47fffcc 	andi	r17,r22,65535
 800bf28:	d8800015 	stw	r2,0(sp)
 800bf2c:	800c3180 	call	800c318 <__udivsi3>
 800bf30:	1009883a 	mov	r4,r2
 800bf34:	880b883a 	mov	r5,r17
 800bf38:	1039883a 	mov	fp,r2
 800bf3c:	800c3280 	call	800c328 <__mulsi3>
 800bf40:	d9800017 	ldw	r6,0(sp)
 800bf44:	9008d43a 	srli	r4,r18,16
 800bf48:	8520983a 	sll	r16,r16,r20
 800bf4c:	300c943a 	slli	r6,r6,16
 800bf50:	3106b03a 	or	r3,r6,r4
 800bf54:	1880042e 	bgeu	r3,r2,800bf68 <__umoddi3+0x388>
 800bf58:	1d87883a 	add	r3,r3,r22
 800bf5c:	e13fffc4 	addi	r4,fp,-1
 800bf60:	1d809a2e 	bgeu	r3,r22,800c1cc <__umoddi3+0x5ec>
 800bf64:	2039883a 	mov	fp,r4
 800bf68:	1887c83a 	sub	r3,r3,r2
 800bf6c:	1809883a 	mov	r4,r3
 800bf70:	b80b883a 	mov	r5,r23
 800bf74:	d8c00115 	stw	r3,4(sp)
 800bf78:	800c3200 	call	800c320 <__umodsi3>
 800bf7c:	d8c00117 	ldw	r3,4(sp)
 800bf80:	b80b883a 	mov	r5,r23
 800bf84:	d8800015 	stw	r2,0(sp)
 800bf88:	1809883a 	mov	r4,r3
 800bf8c:	800c3180 	call	800c318 <__udivsi3>
 800bf90:	880b883a 	mov	r5,r17
 800bf94:	1009883a 	mov	r4,r2
 800bf98:	102f883a 	mov	r23,r2
 800bf9c:	800c3280 	call	800c328 <__mulsi3>
 800bfa0:	d9800017 	ldw	r6,0(sp)
 800bfa4:	947fffcc 	andi	r17,r18,65535
 800bfa8:	300c943a 	slli	r6,r6,16
 800bfac:	3464b03a 	or	r18,r6,r17
 800bfb0:	9080042e 	bgeu	r18,r2,800bfc4 <__umoddi3+0x3e4>
 800bfb4:	95a5883a 	add	r18,r18,r22
 800bfb8:	b8ffffc4 	addi	r3,r23,-1
 800bfbc:	95807f2e 	bgeu	r18,r22,800c1bc <__umoddi3+0x5dc>
 800bfc0:	182f883a 	mov	r23,r3
 800bfc4:	e038943a 	slli	fp,fp,16
 800bfc8:	980cd43a 	srli	r6,r19,16
 800bfcc:	98ffffcc 	andi	r3,r19,65535
 800bfd0:	bf38b03a 	or	fp,r23,fp
 800bfd4:	e02ed43a 	srli	r23,fp,16
 800bfd8:	e73fffcc 	andi	fp,fp,65535
 800bfdc:	180b883a 	mov	r5,r3
 800bfe0:	e009883a 	mov	r4,fp
 800bfe4:	d9800015 	stw	r6,0(sp)
 800bfe8:	d8c00115 	stw	r3,4(sp)
 800bfec:	90a5c83a 	sub	r18,r18,r2
 800bff0:	800c3280 	call	800c328 <__mulsi3>
 800bff4:	d8c00117 	ldw	r3,4(sp)
 800bff8:	b809883a 	mov	r4,r23
 800bffc:	1023883a 	mov	r17,r2
 800c000:	180b883a 	mov	r5,r3
 800c004:	800c3280 	call	800c328 <__mulsi3>
 800c008:	d9800017 	ldw	r6,0(sp)
 800c00c:	b809883a 	mov	r4,r23
 800c010:	d8800115 	stw	r2,4(sp)
 800c014:	300b883a 	mov	r5,r6
 800c018:	302f883a 	mov	r23,r6
 800c01c:	800c3280 	call	800c328 <__mulsi3>
 800c020:	e009883a 	mov	r4,fp
 800c024:	b80b883a 	mov	r5,r23
 800c028:	d8800015 	stw	r2,0(sp)
 800c02c:	800c3280 	call	800c328 <__mulsi3>
 800c030:	d8c00117 	ldw	r3,4(sp)
 800c034:	880cd43a 	srli	r6,r17,16
 800c038:	d9c00017 	ldw	r7,0(sp)
 800c03c:	1885883a 	add	r2,r3,r2
 800c040:	118d883a 	add	r6,r2,r6
 800c044:	30c0022e 	bgeu	r6,r3,800c050 <__umoddi3+0x470>
 800c048:	00800074 	movhi	r2,1
 800c04c:	388f883a 	add	r7,r7,r2
 800c050:	3006d43a 	srli	r3,r6,16
 800c054:	300c943a 	slli	r6,r6,16
 800c058:	8c7fffcc 	andi	r17,r17,65535
 800c05c:	38c7883a 	add	r3,r7,r3
 800c060:	3463883a 	add	r17,r6,r17
 800c064:	90c03d36 	bltu	r18,r3,800c15c <__umoddi3+0x57c>
 800c068:	90c06026 	beq	r18,r3,800c1ec <__umoddi3+0x60c>
 800c06c:	90c9c83a 	sub	r4,r18,r3
 800c070:	880f883a 	mov	r7,r17
 800c074:	81cfc83a 	sub	r7,r16,r7
 800c078:	81c7803a 	cmpltu	r3,r16,r7
 800c07c:	20c7c83a 	sub	r3,r4,r3
 800c080:	1d44983a 	sll	r2,r3,r21
 800c084:	3d0ed83a 	srl	r7,r7,r20
 800c088:	1d06d83a 	srl	r3,r3,r20
 800c08c:	11c4b03a 	or	r2,r2,r7
 800c090:	003f7a06 	br	800be7c <__alt_data_end+0xfc00be7c>
 800c094:	0025883a 	mov	r18,zero
 800c098:	003ef806 	br	800bc7c <__alt_data_end+0xfc00bc7c>
 800c09c:	98a6983a 	sll	r19,r19,r2
 800c0a0:	88e8d83a 	srl	r20,r17,r3
 800c0a4:	80c6d83a 	srl	r3,r16,r3
 800c0a8:	982ad43a 	srli	r21,r19,16
 800c0ac:	88a2983a 	sll	r17,r17,r2
 800c0b0:	a009883a 	mov	r4,r20
 800c0b4:	a80b883a 	mov	r5,r21
 800c0b8:	88eeb03a 	or	r23,r17,r3
 800c0bc:	1025883a 	mov	r18,r2
 800c0c0:	800c3200 	call	800c320 <__umodsi3>
 800c0c4:	a009883a 	mov	r4,r20
 800c0c8:	a80b883a 	mov	r5,r21
 800c0cc:	1023883a 	mov	r17,r2
 800c0d0:	9dbfffcc 	andi	r22,r19,65535
 800c0d4:	800c3180 	call	800c318 <__udivsi3>
 800c0d8:	1009883a 	mov	r4,r2
 800c0dc:	b00b883a 	mov	r5,r22
 800c0e0:	800c3280 	call	800c328 <__mulsi3>
 800c0e4:	8822943a 	slli	r17,r17,16
 800c0e8:	b808d43a 	srli	r4,r23,16
 800c0ec:	84a8983a 	sll	r20,r16,r18
 800c0f0:	8906b03a 	or	r3,r17,r4
 800c0f4:	1880042e 	bgeu	r3,r2,800c108 <__umoddi3+0x528>
 800c0f8:	1cc7883a 	add	r3,r3,r19
 800c0fc:	1cc00236 	bltu	r3,r19,800c108 <__umoddi3+0x528>
 800c100:	1880012e 	bgeu	r3,r2,800c108 <__umoddi3+0x528>
 800c104:	1cc7883a 	add	r3,r3,r19
 800c108:	18a1c83a 	sub	r16,r3,r2
 800c10c:	8009883a 	mov	r4,r16
 800c110:	a80b883a 	mov	r5,r21
 800c114:	800c3200 	call	800c320 <__umodsi3>
 800c118:	8009883a 	mov	r4,r16
 800c11c:	a80b883a 	mov	r5,r21
 800c120:	1039883a 	mov	fp,r2
 800c124:	800c3180 	call	800c318 <__udivsi3>
 800c128:	1009883a 	mov	r4,r2
 800c12c:	b00b883a 	mov	r5,r22
 800c130:	800c3280 	call	800c328 <__mulsi3>
 800c134:	e006943a 	slli	r3,fp,16
 800c138:	b93fffcc 	andi	r4,r23,65535
 800c13c:	1906b03a 	or	r3,r3,r4
 800c140:	1880042e 	bgeu	r3,r2,800c154 <__umoddi3+0x574>
 800c144:	1cc7883a 	add	r3,r3,r19
 800c148:	1cc00236 	bltu	r3,r19,800c154 <__umoddi3+0x574>
 800c14c:	1880012e 	bgeu	r3,r2,800c154 <__umoddi3+0x574>
 800c150:	1cc7883a 	add	r3,r3,r19
 800c154:	18a3c83a 	sub	r17,r3,r2
 800c158:	003f1e06 	br	800bdd4 <__alt_data_end+0xfc00bdd4>
 800c15c:	8ccfc83a 	sub	r7,r17,r19
 800c160:	1d89c83a 	sub	r4,r3,r22
 800c164:	89e3803a 	cmpltu	r17,r17,r7
 800c168:	2463c83a 	sub	r17,r4,r17
 800c16c:	9449c83a 	sub	r4,r18,r17
 800c170:	003fc006 	br	800c074 <__alt_data_end+0xfc00c074>
 800c174:	000b883a 	mov	r5,zero
 800c178:	002b883a 	mov	r21,zero
 800c17c:	003eeb06 	br	800bd2c <__alt_data_end+0xfc00bd2c>
 800c180:	01400404 	movi	r5,16
 800c184:	282b883a 	mov	r21,r5
 800c188:	003ee806 	br	800bd2c <__alt_data_end+0xfc00bd2c>
 800c18c:	01400404 	movi	r5,16
 800c190:	2805883a 	mov	r2,r5
 800c194:	003eaa06 	br	800bc40 <__alt_data_end+0xfc00bc40>
 800c198:	0005883a 	mov	r2,zero
 800c19c:	0007883a 	mov	r3,zero
 800c1a0:	003eff06 	br	800bda0 <__alt_data_end+0xfc00bda0>
 800c1a4:	00800404 	movi	r2,16
 800c1a8:	1007883a 	mov	r3,r2
 800c1ac:	003efc06 	br	800bda0 <__alt_data_end+0xfc00bda0>
 800c1b0:	000b883a 	mov	r5,zero
 800c1b4:	0005883a 	mov	r2,zero
 800c1b8:	003ea106 	br	800bc40 <__alt_data_end+0xfc00bc40>
 800c1bc:	90bf802e 	bgeu	r18,r2,800bfc0 <__alt_data_end+0xfc00bfc0>
 800c1c0:	bdffff84 	addi	r23,r23,-2
 800c1c4:	95a5883a 	add	r18,r18,r22
 800c1c8:	003f7e06 	br	800bfc4 <__alt_data_end+0xfc00bfc4>
 800c1cc:	18bf652e 	bgeu	r3,r2,800bf64 <__alt_data_end+0xfc00bf64>
 800c1d0:	e73fff84 	addi	fp,fp,-2
 800c1d4:	1d87883a 	add	r3,r3,r22
 800c1d8:	003f6306 	br	800bf68 <__alt_data_end+0xfc00bf68>
 800c1dc:	1cc7883a 	add	r3,r3,r19
 800c1e0:	003f0d06 	br	800be18 <__alt_data_end+0xfc00be18>
 800c1e4:	8005883a 	mov	r2,r16
 800c1e8:	003edf06 	br	800bd68 <__alt_data_end+0xfc00bd68>
 800c1ec:	847fdb36 	bltu	r16,r17,800c15c <__alt_data_end+0xfc00c15c>
 800c1f0:	880f883a 	mov	r7,r17
 800c1f4:	0009883a 	mov	r4,zero
 800c1f8:	003f9e06 	br	800c074 <__alt_data_end+0xfc00c074>

0800c1fc <udivmodsi4>:
 800c1fc:	2900182e 	bgeu	r5,r4,800c260 <udivmodsi4+0x64>
 800c200:	28001716 	blt	r5,zero,800c260 <udivmodsi4+0x64>
 800c204:	00800804 	movi	r2,32
 800c208:	00c00044 	movi	r3,1
 800c20c:	00000206 	br	800c218 <udivmodsi4+0x1c>
 800c210:	10001126 	beq	r2,zero,800c258 <udivmodsi4+0x5c>
 800c214:	28000516 	blt	r5,zero,800c22c <udivmodsi4+0x30>
 800c218:	294b883a 	add	r5,r5,r5
 800c21c:	10bfffc4 	addi	r2,r2,-1
 800c220:	18c7883a 	add	r3,r3,r3
 800c224:	293ffa36 	bltu	r5,r4,800c210 <__alt_data_end+0xfc00c210>
 800c228:	18000b26 	beq	r3,zero,800c258 <udivmodsi4+0x5c>
 800c22c:	0005883a 	mov	r2,zero
 800c230:	21400236 	bltu	r4,r5,800c23c <udivmodsi4+0x40>
 800c234:	2149c83a 	sub	r4,r4,r5
 800c238:	10c4b03a 	or	r2,r2,r3
 800c23c:	1806d07a 	srli	r3,r3,1
 800c240:	280ad07a 	srli	r5,r5,1
 800c244:	183ffa1e 	bne	r3,zero,800c230 <__alt_data_end+0xfc00c230>
 800c248:	3000011e 	bne	r6,zero,800c250 <udivmodsi4+0x54>
 800c24c:	f800283a 	ret
 800c250:	2005883a 	mov	r2,r4
 800c254:	f800283a 	ret
 800c258:	0005883a 	mov	r2,zero
 800c25c:	003ffa06 	br	800c248 <__alt_data_end+0xfc00c248>
 800c260:	00c00044 	movi	r3,1
 800c264:	003ff106 	br	800c22c <__alt_data_end+0xfc00c22c>

0800c268 <__divsi3>:
 800c268:	defffe04 	addi	sp,sp,-8
 800c26c:	dfc00115 	stw	ra,4(sp)
 800c270:	dc000015 	stw	r16,0(sp)
 800c274:	20000b16 	blt	r4,zero,800c2a4 <__divsi3+0x3c>
 800c278:	0021883a 	mov	r16,zero
 800c27c:	28000c16 	blt	r5,zero,800c2b0 <__divsi3+0x48>
 800c280:	000d883a 	mov	r6,zero
 800c284:	800c1fc0 	call	800c1fc <udivmodsi4>
 800c288:	0407c83a 	sub	r3,zero,r16
 800c28c:	1884f03a 	xor	r2,r3,r2
 800c290:	1405883a 	add	r2,r2,r16
 800c294:	dfc00117 	ldw	ra,4(sp)
 800c298:	dc000017 	ldw	r16,0(sp)
 800c29c:	dec00204 	addi	sp,sp,8
 800c2a0:	f800283a 	ret
 800c2a4:	0109c83a 	sub	r4,zero,r4
 800c2a8:	04000044 	movi	r16,1
 800c2ac:	283ff40e 	bge	r5,zero,800c280 <__alt_data_end+0xfc00c280>
 800c2b0:	014bc83a 	sub	r5,zero,r5
 800c2b4:	8400005c 	xori	r16,r16,1
 800c2b8:	003ff106 	br	800c280 <__alt_data_end+0xfc00c280>

0800c2bc <__modsi3>:
 800c2bc:	defffd04 	addi	sp,sp,-12
 800c2c0:	dfc00215 	stw	ra,8(sp)
 800c2c4:	dc400115 	stw	r17,4(sp)
 800c2c8:	dc000015 	stw	r16,0(sp)
 800c2cc:	20000c16 	blt	r4,zero,800c300 <__modsi3+0x44>
 800c2d0:	0023883a 	mov	r17,zero
 800c2d4:	0021883a 	mov	r16,zero
 800c2d8:	28000d16 	blt	r5,zero,800c310 <__modsi3+0x54>
 800c2dc:	01800044 	movi	r6,1
 800c2e0:	800c1fc0 	call	800c1fc <udivmodsi4>
 800c2e4:	1404f03a 	xor	r2,r2,r16
 800c2e8:	8885883a 	add	r2,r17,r2
 800c2ec:	dfc00217 	ldw	ra,8(sp)
 800c2f0:	dc400117 	ldw	r17,4(sp)
 800c2f4:	dc000017 	ldw	r16,0(sp)
 800c2f8:	dec00304 	addi	sp,sp,12
 800c2fc:	f800283a 	ret
 800c300:	0109c83a 	sub	r4,zero,r4
 800c304:	04400044 	movi	r17,1
 800c308:	043fffc4 	movi	r16,-1
 800c30c:	283ff30e 	bge	r5,zero,800c2dc <__alt_data_end+0xfc00c2dc>
 800c310:	014bc83a 	sub	r5,zero,r5
 800c314:	003ff106 	br	800c2dc <__alt_data_end+0xfc00c2dc>

0800c318 <__udivsi3>:
 800c318:	000d883a 	mov	r6,zero
 800c31c:	800c1fc1 	jmpi	800c1fc <udivmodsi4>

0800c320 <__umodsi3>:
 800c320:	01800044 	movi	r6,1
 800c324:	800c1fc1 	jmpi	800c1fc <udivmodsi4>

0800c328 <__mulsi3>:
 800c328:	0005883a 	mov	r2,zero
 800c32c:	20000726 	beq	r4,zero,800c34c <__mulsi3+0x24>
 800c330:	20c0004c 	andi	r3,r4,1
 800c334:	2008d07a 	srli	r4,r4,1
 800c338:	18000126 	beq	r3,zero,800c340 <__mulsi3+0x18>
 800c33c:	1145883a 	add	r2,r2,r5
 800c340:	294b883a 	add	r5,r5,r5
 800c344:	203ffa1e 	bne	r4,zero,800c330 <__alt_data_end+0xfc00c330>
 800c348:	f800283a 	ret
 800c34c:	f800283a 	ret

0800c350 <__adddf3>:
 800c350:	02000434 	movhi	r8,16
 800c354:	423fffc4 	addi	r8,r8,-1
 800c358:	defffb04 	addi	sp,sp,-20
 800c35c:	2a12703a 	and	r9,r5,r8
 800c360:	2806d7fa 	srli	r3,r5,31
 800c364:	3a10703a 	and	r8,r7,r8
 800c368:	3804d53a 	srli	r2,r7,20
 800c36c:	3014d77a 	srli	r10,r6,29
 800c370:	dc000015 	stw	r16,0(sp)
 800c374:	481290fa 	slli	r9,r9,3
 800c378:	2820d53a 	srli	r16,r5,20
 800c37c:	401090fa 	slli	r8,r8,3
 800c380:	200ad77a 	srli	r5,r4,29
 800c384:	380ed7fa 	srli	r7,r7,31
 800c388:	dc800215 	stw	r18,8(sp)
 800c38c:	dc400115 	stw	r17,4(sp)
 800c390:	dfc00415 	stw	ra,16(sp)
 800c394:	dcc00315 	stw	r19,12(sp)
 800c398:	1c803fcc 	andi	r18,r3,255
 800c39c:	8401ffcc 	andi	r16,r16,2047
 800c3a0:	494ab03a 	or	r5,r9,r5
 800c3a4:	202290fa 	slli	r17,r4,3
 800c3a8:	1081ffcc 	andi	r2,r2,2047
 800c3ac:	4290b03a 	or	r8,r8,r10
 800c3b0:	300c90fa 	slli	r6,r6,3
 800c3b4:	91c07026 	beq	r18,r7,800c578 <__adddf3+0x228>
 800c3b8:	8087c83a 	sub	r3,r16,r2
 800c3bc:	00c0b30e 	bge	zero,r3,800c68c <__adddf3+0x33c>
 800c3c0:	10002a1e 	bne	r2,zero,800c46c <__adddf3+0x11c>
 800c3c4:	4184b03a 	or	r2,r8,r6
 800c3c8:	1000991e 	bne	r2,zero,800c630 <__adddf3+0x2e0>
 800c3cc:	888001cc 	andi	r2,r17,7
 800c3d0:	10005b26 	beq	r2,zero,800c540 <__adddf3+0x1f0>
 800c3d4:	88c003cc 	andi	r3,r17,15
 800c3d8:	00800104 	movi	r2,4
 800c3dc:	18805826 	beq	r3,r2,800c540 <__adddf3+0x1f0>
 800c3e0:	89800104 	addi	r6,r17,4
 800c3e4:	3463803a 	cmpltu	r17,r6,r17
 800c3e8:	2c4b883a 	add	r5,r5,r17
 800c3ec:	2880202c 	andhi	r2,r5,128
 800c3f0:	9007883a 	mov	r3,r18
 800c3f4:	3023883a 	mov	r17,r6
 800c3f8:	10005426 	beq	r2,zero,800c54c <__adddf3+0x1fc>
 800c3fc:	84000044 	addi	r16,r16,1
 800c400:	0081ffc4 	movi	r2,2047
 800c404:	8080c126 	beq	r16,r2,800c70c <__adddf3+0x3bc>
 800c408:	013fe034 	movhi	r4,65408
 800c40c:	213fffc4 	addi	r4,r4,-1
 800c410:	290a703a 	and	r5,r5,r4
 800c414:	2804977a 	slli	r2,r5,29
 800c418:	280a927a 	slli	r5,r5,9
 800c41c:	8822d0fa 	srli	r17,r17,3
 800c420:	8401ffcc 	andi	r16,r16,2047
 800c424:	2808d33a 	srli	r4,r5,12
 800c428:	1444b03a 	or	r2,r2,r17
 800c42c:	8401ffcc 	andi	r16,r16,2047
 800c430:	800a953a 	slli	r5,r16,20
 800c434:	18c03fcc 	andi	r3,r3,255
 800c438:	04000434 	movhi	r16,16
 800c43c:	180697fa 	slli	r3,r3,31
 800c440:	843fffc4 	addi	r16,r16,-1
 800c444:	2420703a 	and	r16,r4,r16
 800c448:	8160b03a 	or	r16,r16,r5
 800c44c:	80c6b03a 	or	r3,r16,r3
 800c450:	dfc00417 	ldw	ra,16(sp)
 800c454:	dcc00317 	ldw	r19,12(sp)
 800c458:	dc800217 	ldw	r18,8(sp)
 800c45c:	dc400117 	ldw	r17,4(sp)
 800c460:	dc000017 	ldw	r16,0(sp)
 800c464:	dec00504 	addi	sp,sp,20
 800c468:	f800283a 	ret
 800c46c:	0081ffc4 	movi	r2,2047
 800c470:	80bfd626 	beq	r16,r2,800c3cc <__alt_data_end+0xfc00c3cc>
 800c474:	42002034 	orhi	r8,r8,128
 800c478:	00800e04 	movi	r2,56
 800c47c:	10c0a616 	blt	r2,r3,800c718 <__adddf3+0x3c8>
 800c480:	008007c4 	movi	r2,31
 800c484:	10c0c916 	blt	r2,r3,800c7ac <__adddf3+0x45c>
 800c488:	00800804 	movi	r2,32
 800c48c:	10c5c83a 	sub	r2,r2,r3
 800c490:	408e983a 	sll	r7,r8,r2
 800c494:	30c8d83a 	srl	r4,r6,r3
 800c498:	3084983a 	sll	r2,r6,r2
 800c49c:	40c6d83a 	srl	r3,r8,r3
 800c4a0:	390cb03a 	or	r6,r7,r4
 800c4a4:	1004c03a 	cmpne	r2,r2,zero
 800c4a8:	308cb03a 	or	r6,r6,r2
 800c4ac:	898dc83a 	sub	r6,r17,r6
 800c4b0:	89a3803a 	cmpltu	r17,r17,r6
 800c4b4:	28cbc83a 	sub	r5,r5,r3
 800c4b8:	2c4bc83a 	sub	r5,r5,r17
 800c4bc:	3023883a 	mov	r17,r6
 800c4c0:	2880202c 	andhi	r2,r5,128
 800c4c4:	10006d26 	beq	r2,zero,800c67c <__adddf3+0x32c>
 800c4c8:	04c02034 	movhi	r19,128
 800c4cc:	9cffffc4 	addi	r19,r19,-1
 800c4d0:	2ce6703a 	and	r19,r5,r19
 800c4d4:	98007e26 	beq	r19,zero,800c6d0 <__adddf3+0x380>
 800c4d8:	9809883a 	mov	r4,r19
 800c4dc:	800eae80 	call	800eae8 <__clzsi2>
 800c4e0:	10fffe04 	addi	r3,r2,-8
 800c4e4:	010007c4 	movi	r4,31
 800c4e8:	20c07f16 	blt	r4,r3,800c6e8 <__adddf3+0x398>
 800c4ec:	01400a04 	movi	r5,40
 800c4f0:	2885c83a 	sub	r2,r5,r2
 800c4f4:	888ad83a 	srl	r5,r17,r2
 800c4f8:	98e6983a 	sll	r19,r19,r3
 800c4fc:	88e2983a 	sll	r17,r17,r3
 800c500:	2ce6b03a 	or	r19,r5,r19
 800c504:	1c007c16 	blt	r3,r16,800c6f8 <__adddf3+0x3a8>
 800c508:	1c21c83a 	sub	r16,r3,r16
 800c50c:	81400044 	addi	r5,r16,1
 800c510:	00c007c4 	movi	r3,31
 800c514:	19409816 	blt	r3,r5,800c778 <__adddf3+0x428>
 800c518:	1c21c83a 	sub	r16,r3,r16
 800c51c:	8c08983a 	sll	r4,r17,r16
 800c520:	8946d83a 	srl	r3,r17,r5
 800c524:	9c20983a 	sll	r16,r19,r16
 800c528:	2008c03a 	cmpne	r4,r4,zero
 800c52c:	994ad83a 	srl	r5,r19,r5
 800c530:	1c06b03a 	or	r3,r3,r16
 800c534:	1922b03a 	or	r17,r3,r4
 800c538:	0021883a 	mov	r16,zero
 800c53c:	003fa306 	br	800c3cc <__alt_data_end+0xfc00c3cc>
 800c540:	2880202c 	andhi	r2,r5,128
 800c544:	9007883a 	mov	r3,r18
 800c548:	103fac1e 	bne	r2,zero,800c3fc <__alt_data_end+0xfc00c3fc>
 800c54c:	2804977a 	slli	r2,r5,29
 800c550:	8822d0fa 	srli	r17,r17,3
 800c554:	0101ffc4 	movi	r4,2047
 800c558:	280ad0fa 	srli	r5,r5,3
 800c55c:	1444b03a 	or	r2,r2,r17
 800c560:	81002c26 	beq	r16,r4,800c614 <__adddf3+0x2c4>
 800c564:	8120703a 	and	r16,r16,r4
 800c568:	01000434 	movhi	r4,16
 800c56c:	213fffc4 	addi	r4,r4,-1
 800c570:	2908703a 	and	r4,r5,r4
 800c574:	003fad06 	br	800c42c <__alt_data_end+0xfc00c42c>
 800c578:	8089c83a 	sub	r4,r16,r2
 800c57c:	01006a0e 	bge	zero,r4,800c728 <__adddf3+0x3d8>
 800c580:	10003326 	beq	r2,zero,800c650 <__adddf3+0x300>
 800c584:	0081ffc4 	movi	r2,2047
 800c588:	80bf9026 	beq	r16,r2,800c3cc <__alt_data_end+0xfc00c3cc>
 800c58c:	42002034 	orhi	r8,r8,128
 800c590:	00800e04 	movi	r2,56
 800c594:	1100b116 	blt	r2,r4,800c85c <__adddf3+0x50c>
 800c598:	008007c4 	movi	r2,31
 800c59c:	1100e216 	blt	r2,r4,800c928 <__adddf3+0x5d8>
 800c5a0:	00800804 	movi	r2,32
 800c5a4:	1105c83a 	sub	r2,r2,r4
 800c5a8:	4092983a 	sll	r9,r8,r2
 800c5ac:	310ed83a 	srl	r7,r6,r4
 800c5b0:	3084983a 	sll	r2,r6,r2
 800c5b4:	4110d83a 	srl	r8,r8,r4
 800c5b8:	49ccb03a 	or	r6,r9,r7
 800c5bc:	1004c03a 	cmpne	r2,r2,zero
 800c5c0:	308cb03a 	or	r6,r6,r2
 800c5c4:	344d883a 	add	r6,r6,r17
 800c5c8:	3463803a 	cmpltu	r17,r6,r17
 800c5cc:	414b883a 	add	r5,r8,r5
 800c5d0:	2c4b883a 	add	r5,r5,r17
 800c5d4:	3023883a 	mov	r17,r6
 800c5d8:	2880202c 	andhi	r2,r5,128
 800c5dc:	10002726 	beq	r2,zero,800c67c <__adddf3+0x32c>
 800c5e0:	84000044 	addi	r16,r16,1
 800c5e4:	0081ffc4 	movi	r2,2047
 800c5e8:	8080ae26 	beq	r16,r2,800c8a4 <__adddf3+0x554>
 800c5ec:	00bfe034 	movhi	r2,65408
 800c5f0:	10bfffc4 	addi	r2,r2,-1
 800c5f4:	288a703a 	and	r5,r5,r2
 800c5f8:	880cd07a 	srli	r6,r17,1
 800c5fc:	280897fa 	slli	r4,r5,31
 800c600:	88c0004c 	andi	r3,r17,1
 800c604:	30e2b03a 	or	r17,r6,r3
 800c608:	280ad07a 	srli	r5,r5,1
 800c60c:	8922b03a 	or	r17,r17,r4
 800c610:	003f6e06 	br	800c3cc <__alt_data_end+0xfc00c3cc>
 800c614:	1148b03a 	or	r4,r2,r5
 800c618:	20003c26 	beq	r4,zero,800c70c <__adddf3+0x3bc>
 800c61c:	29000234 	orhi	r4,r5,8
 800c620:	01400434 	movhi	r5,16
 800c624:	297fffc4 	addi	r5,r5,-1
 800c628:	2148703a 	and	r4,r4,r5
 800c62c:	003f7f06 	br	800c42c <__alt_data_end+0xfc00c42c>
 800c630:	18ffffc4 	addi	r3,r3,-1
 800c634:	18004d1e 	bne	r3,zero,800c76c <__adddf3+0x41c>
 800c638:	898dc83a 	sub	r6,r17,r6
 800c63c:	89a3803a 	cmpltu	r17,r17,r6
 800c640:	2a0bc83a 	sub	r5,r5,r8
 800c644:	2c4bc83a 	sub	r5,r5,r17
 800c648:	3023883a 	mov	r17,r6
 800c64c:	003f9c06 	br	800c4c0 <__alt_data_end+0xfc00c4c0>
 800c650:	4184b03a 	or	r2,r8,r6
 800c654:	103f5d26 	beq	r2,zero,800c3cc <__alt_data_end+0xfc00c3cc>
 800c658:	213fffc4 	addi	r4,r4,-1
 800c65c:	203fd926 	beq	r4,zero,800c5c4 <__alt_data_end+0xfc00c5c4>
 800c660:	0081ffc4 	movi	r2,2047
 800c664:	80bfca1e 	bne	r16,r2,800c590 <__alt_data_end+0xfc00c590>
 800c668:	003f5806 	br	800c3cc <__alt_data_end+0xfc00c3cc>
 800c66c:	10c8b03a 	or	r4,r2,r3
 800c670:	20008b26 	beq	r4,zero,800c8a0 <__adddf3+0x550>
 800c674:	100b883a 	mov	r5,r2
 800c678:	1823883a 	mov	r17,r3
 800c67c:	888001cc 	andi	r2,r17,7
 800c680:	103f541e 	bne	r2,zero,800c3d4 <__alt_data_end+0xfc00c3d4>
 800c684:	9007883a 	mov	r3,r18
 800c688:	003fb006 	br	800c54c <__alt_data_end+0xfc00c54c>
 800c68c:	1800531e 	bne	r3,zero,800c7dc <__adddf3+0x48c>
 800c690:	80800044 	addi	r2,r16,1
 800c694:	1081ffcc 	andi	r2,r2,2047
 800c698:	00c00044 	movi	r3,1
 800c69c:	1880990e 	bge	r3,r2,800c904 <__adddf3+0x5b4>
 800c6a0:	8985c83a 	sub	r2,r17,r6
 800c6a4:	8887803a 	cmpltu	r3,r17,r2
 800c6a8:	2a27c83a 	sub	r19,r5,r8
 800c6ac:	98e7c83a 	sub	r19,r19,r3
 800c6b0:	98c0202c 	andhi	r3,r19,128
 800c6b4:	18006226 	beq	r3,zero,800c840 <__adddf3+0x4f0>
 800c6b8:	3463c83a 	sub	r17,r6,r17
 800c6bc:	4151c83a 	sub	r8,r8,r5
 800c6c0:	344d803a 	cmpltu	r6,r6,r17
 800c6c4:	41a7c83a 	sub	r19,r8,r6
 800c6c8:	3825883a 	mov	r18,r7
 800c6cc:	983f821e 	bne	r19,zero,800c4d8 <__alt_data_end+0xfc00c4d8>
 800c6d0:	8809883a 	mov	r4,r17
 800c6d4:	800eae80 	call	800eae8 <__clzsi2>
 800c6d8:	10800804 	addi	r2,r2,32
 800c6dc:	10fffe04 	addi	r3,r2,-8
 800c6e0:	010007c4 	movi	r4,31
 800c6e4:	20ff810e 	bge	r4,r3,800c4ec <__alt_data_end+0xfc00c4ec>
 800c6e8:	14fff604 	addi	r19,r2,-40
 800c6ec:	8ce6983a 	sll	r19,r17,r19
 800c6f0:	0023883a 	mov	r17,zero
 800c6f4:	1c3f840e 	bge	r3,r16,800c508 <__alt_data_end+0xfc00c508>
 800c6f8:	017fe034 	movhi	r5,65408
 800c6fc:	297fffc4 	addi	r5,r5,-1
 800c700:	80e1c83a 	sub	r16,r16,r3
 800c704:	994a703a 	and	r5,r19,r5
 800c708:	003f3006 	br	800c3cc <__alt_data_end+0xfc00c3cc>
 800c70c:	0009883a 	mov	r4,zero
 800c710:	0005883a 	mov	r2,zero
 800c714:	003f4506 	br	800c42c <__alt_data_end+0xfc00c42c>
 800c718:	418cb03a 	or	r6,r8,r6
 800c71c:	300cc03a 	cmpne	r6,r6,zero
 800c720:	0007883a 	mov	r3,zero
 800c724:	003f6106 	br	800c4ac <__alt_data_end+0xfc00c4ac>
 800c728:	2000921e 	bne	r4,zero,800c974 <__adddf3+0x624>
 800c72c:	80800044 	addi	r2,r16,1
 800c730:	11c1ffcc 	andi	r7,r2,2047
 800c734:	01000044 	movi	r4,1
 800c738:	21c0610e 	bge	r4,r7,800c8c0 <__adddf3+0x570>
 800c73c:	0101ffc4 	movi	r4,2047
 800c740:	1100a326 	beq	r2,r4,800c9d0 <__adddf3+0x680>
 800c744:	344d883a 	add	r6,r6,r17
 800c748:	3463803a 	cmpltu	r17,r6,r17
 800c74c:	414b883a 	add	r5,r8,r5
 800c750:	2c4b883a 	add	r5,r5,r17
 800c754:	282297fa 	slli	r17,r5,31
 800c758:	300cd07a 	srli	r6,r6,1
 800c75c:	280ad07a 	srli	r5,r5,1
 800c760:	1021883a 	mov	r16,r2
 800c764:	89a2b03a 	or	r17,r17,r6
 800c768:	003f1806 	br	800c3cc <__alt_data_end+0xfc00c3cc>
 800c76c:	0081ffc4 	movi	r2,2047
 800c770:	80bf411e 	bne	r16,r2,800c478 <__alt_data_end+0xfc00c478>
 800c774:	003f1506 	br	800c3cc <__alt_data_end+0xfc00c3cc>
 800c778:	80bff844 	addi	r2,r16,-31
 800c77c:	00c00804 	movi	r3,32
 800c780:	9884d83a 	srl	r2,r19,r2
 800c784:	28c04a26 	beq	r5,r3,800c8b0 <__adddf3+0x560>
 800c788:	00c00fc4 	movi	r3,63
 800c78c:	1c21c83a 	sub	r16,r3,r16
 800c790:	9c26983a 	sll	r19,r19,r16
 800c794:	9c62b03a 	or	r17,r19,r17
 800c798:	8822c03a 	cmpne	r17,r17,zero
 800c79c:	88a2b03a 	or	r17,r17,r2
 800c7a0:	000b883a 	mov	r5,zero
 800c7a4:	0021883a 	mov	r16,zero
 800c7a8:	003fb406 	br	800c67c <__alt_data_end+0xfc00c67c>
 800c7ac:	18bff804 	addi	r2,r3,-32
 800c7b0:	01000804 	movi	r4,32
 800c7b4:	4084d83a 	srl	r2,r8,r2
 800c7b8:	19003f26 	beq	r3,r4,800c8b8 <__adddf3+0x568>
 800c7bc:	01001004 	movi	r4,64
 800c7c0:	20c7c83a 	sub	r3,r4,r3
 800c7c4:	40d0983a 	sll	r8,r8,r3
 800c7c8:	418cb03a 	or	r6,r8,r6
 800c7cc:	300cc03a 	cmpne	r6,r6,zero
 800c7d0:	308cb03a 	or	r6,r6,r2
 800c7d4:	0007883a 	mov	r3,zero
 800c7d8:	003f3406 	br	800c4ac <__alt_data_end+0xfc00c4ac>
 800c7dc:	80002326 	beq	r16,zero,800c86c <__adddf3+0x51c>
 800c7e0:	0101ffc4 	movi	r4,2047
 800c7e4:	11005e26 	beq	r2,r4,800c960 <__adddf3+0x610>
 800c7e8:	00c7c83a 	sub	r3,zero,r3
 800c7ec:	29402034 	orhi	r5,r5,128
 800c7f0:	01000e04 	movi	r4,56
 800c7f4:	20c07216 	blt	r4,r3,800c9c0 <__adddf3+0x670>
 800c7f8:	010007c4 	movi	r4,31
 800c7fc:	20c0ce16 	blt	r4,r3,800cb38 <__adddf3+0x7e8>
 800c800:	01000804 	movi	r4,32
 800c804:	20c9c83a 	sub	r4,r4,r3
 800c808:	2914983a 	sll	r10,r5,r4
 800c80c:	88d2d83a 	srl	r9,r17,r3
 800c810:	8908983a 	sll	r4,r17,r4
 800c814:	28c6d83a 	srl	r3,r5,r3
 800c818:	5262b03a 	or	r17,r10,r9
 800c81c:	2008c03a 	cmpne	r4,r4,zero
 800c820:	8922b03a 	or	r17,r17,r4
 800c824:	3463c83a 	sub	r17,r6,r17
 800c828:	40c7c83a 	sub	r3,r8,r3
 800c82c:	344d803a 	cmpltu	r6,r6,r17
 800c830:	198bc83a 	sub	r5,r3,r6
 800c834:	1021883a 	mov	r16,r2
 800c838:	3825883a 	mov	r18,r7
 800c83c:	003f2006 	br	800c4c0 <__alt_data_end+0xfc00c4c0>
 800c840:	9886b03a 	or	r3,r19,r2
 800c844:	1800141e 	bne	r3,zero,800c898 <__adddf3+0x548>
 800c848:	0007883a 	mov	r3,zero
 800c84c:	000b883a 	mov	r5,zero
 800c850:	0023883a 	mov	r17,zero
 800c854:	0021883a 	mov	r16,zero
 800c858:	003f3c06 	br	800c54c <__alt_data_end+0xfc00c54c>
 800c85c:	418cb03a 	or	r6,r8,r6
 800c860:	300cc03a 	cmpne	r6,r6,zero
 800c864:	0011883a 	mov	r8,zero
 800c868:	003f5606 	br	800c5c4 <__alt_data_end+0xfc00c5c4>
 800c86c:	2c48b03a 	or	r4,r5,r17
 800c870:	20003b26 	beq	r4,zero,800c960 <__adddf3+0x610>
 800c874:	00c6303a 	nor	r3,zero,r3
 800c878:	1800371e 	bne	r3,zero,800c958 <__adddf3+0x608>
 800c87c:	3463c83a 	sub	r17,r6,r17
 800c880:	414bc83a 	sub	r5,r8,r5
 800c884:	344d803a 	cmpltu	r6,r6,r17
 800c888:	298bc83a 	sub	r5,r5,r6
 800c88c:	1021883a 	mov	r16,r2
 800c890:	3825883a 	mov	r18,r7
 800c894:	003f0a06 	br	800c4c0 <__alt_data_end+0xfc00c4c0>
 800c898:	1023883a 	mov	r17,r2
 800c89c:	003f0d06 	br	800c4d4 <__alt_data_end+0xfc00c4d4>
 800c8a0:	0007883a 	mov	r3,zero
 800c8a4:	000b883a 	mov	r5,zero
 800c8a8:	0023883a 	mov	r17,zero
 800c8ac:	003f2706 	br	800c54c <__alt_data_end+0xfc00c54c>
 800c8b0:	0027883a 	mov	r19,zero
 800c8b4:	003fb706 	br	800c794 <__alt_data_end+0xfc00c794>
 800c8b8:	0011883a 	mov	r8,zero
 800c8bc:	003fc206 	br	800c7c8 <__alt_data_end+0xfc00c7c8>
 800c8c0:	2c44b03a 	or	r2,r5,r17
 800c8c4:	8000871e 	bne	r16,zero,800cae4 <__adddf3+0x794>
 800c8c8:	1000b126 	beq	r2,zero,800cb90 <__adddf3+0x840>
 800c8cc:	4184b03a 	or	r2,r8,r6
 800c8d0:	103ebe26 	beq	r2,zero,800c3cc <__alt_data_end+0xfc00c3cc>
 800c8d4:	3445883a 	add	r2,r6,r17
 800c8d8:	1463803a 	cmpltu	r17,r2,r17
 800c8dc:	414b883a 	add	r5,r8,r5
 800c8e0:	2c4b883a 	add	r5,r5,r17
 800c8e4:	28c0202c 	andhi	r3,r5,128
 800c8e8:	1023883a 	mov	r17,r2
 800c8ec:	183f6326 	beq	r3,zero,800c67c <__alt_data_end+0xfc00c67c>
 800c8f0:	00bfe034 	movhi	r2,65408
 800c8f4:	10bfffc4 	addi	r2,r2,-1
 800c8f8:	2021883a 	mov	r16,r4
 800c8fc:	288a703a 	and	r5,r5,r2
 800c900:	003eb206 	br	800c3cc <__alt_data_end+0xfc00c3cc>
 800c904:	2c44b03a 	or	r2,r5,r17
 800c908:	8000251e 	bne	r16,zero,800c9a0 <__adddf3+0x650>
 800c90c:	10004b1e 	bne	r2,zero,800ca3c <__adddf3+0x6ec>
 800c910:	4184b03a 	or	r2,r8,r6
 800c914:	103fe226 	beq	r2,zero,800c8a0 <__alt_data_end+0xfc00c8a0>
 800c918:	400b883a 	mov	r5,r8
 800c91c:	3023883a 	mov	r17,r6
 800c920:	3825883a 	mov	r18,r7
 800c924:	003ea906 	br	800c3cc <__alt_data_end+0xfc00c3cc>
 800c928:	20bff804 	addi	r2,r4,-32
 800c92c:	01c00804 	movi	r7,32
 800c930:	4084d83a 	srl	r2,r8,r2
 800c934:	21c07e26 	beq	r4,r7,800cb30 <__adddf3+0x7e0>
 800c938:	01c01004 	movi	r7,64
 800c93c:	3909c83a 	sub	r4,r7,r4
 800c940:	4110983a 	sll	r8,r8,r4
 800c944:	418cb03a 	or	r6,r8,r6
 800c948:	300cc03a 	cmpne	r6,r6,zero
 800c94c:	308cb03a 	or	r6,r6,r2
 800c950:	0011883a 	mov	r8,zero
 800c954:	003f1b06 	br	800c5c4 <__alt_data_end+0xfc00c5c4>
 800c958:	0101ffc4 	movi	r4,2047
 800c95c:	113fa41e 	bne	r2,r4,800c7f0 <__alt_data_end+0xfc00c7f0>
 800c960:	400b883a 	mov	r5,r8
 800c964:	3023883a 	mov	r17,r6
 800c968:	1021883a 	mov	r16,r2
 800c96c:	3825883a 	mov	r18,r7
 800c970:	003e9606 	br	800c3cc <__alt_data_end+0xfc00c3cc>
 800c974:	80001a1e 	bne	r16,zero,800c9e0 <__adddf3+0x690>
 800c978:	2c4eb03a 	or	r7,r5,r17
 800c97c:	38005526 	beq	r7,zero,800cad4 <__adddf3+0x784>
 800c980:	0108303a 	nor	r4,zero,r4
 800c984:	2000511e 	bne	r4,zero,800cacc <__adddf3+0x77c>
 800c988:	89a3883a 	add	r17,r17,r6
 800c98c:	414b883a 	add	r5,r8,r5
 800c990:	898d803a 	cmpltu	r6,r17,r6
 800c994:	298b883a 	add	r5,r5,r6
 800c998:	1021883a 	mov	r16,r2
 800c99c:	003f0e06 	br	800c5d8 <__alt_data_end+0xfc00c5d8>
 800c9a0:	1000341e 	bne	r2,zero,800ca74 <__adddf3+0x724>
 800c9a4:	4184b03a 	or	r2,r8,r6
 800c9a8:	10006f26 	beq	r2,zero,800cb68 <__adddf3+0x818>
 800c9ac:	400b883a 	mov	r5,r8
 800c9b0:	3023883a 	mov	r17,r6
 800c9b4:	3825883a 	mov	r18,r7
 800c9b8:	0401ffc4 	movi	r16,2047
 800c9bc:	003e8306 	br	800c3cc <__alt_data_end+0xfc00c3cc>
 800c9c0:	2c62b03a 	or	r17,r5,r17
 800c9c4:	8822c03a 	cmpne	r17,r17,zero
 800c9c8:	0007883a 	mov	r3,zero
 800c9cc:	003f9506 	br	800c824 <__alt_data_end+0xfc00c824>
 800c9d0:	1021883a 	mov	r16,r2
 800c9d4:	000b883a 	mov	r5,zero
 800c9d8:	0023883a 	mov	r17,zero
 800c9dc:	003edb06 	br	800c54c <__alt_data_end+0xfc00c54c>
 800c9e0:	01c1ffc4 	movi	r7,2047
 800c9e4:	11c03b26 	beq	r2,r7,800cad4 <__adddf3+0x784>
 800c9e8:	0109c83a 	sub	r4,zero,r4
 800c9ec:	29402034 	orhi	r5,r5,128
 800c9f0:	01c00e04 	movi	r7,56
 800c9f4:	39006216 	blt	r7,r4,800cb80 <__adddf3+0x830>
 800c9f8:	01c007c4 	movi	r7,31
 800c9fc:	39006b16 	blt	r7,r4,800cbac <__adddf3+0x85c>
 800ca00:	01c00804 	movi	r7,32
 800ca04:	390fc83a 	sub	r7,r7,r4
 800ca08:	29d4983a 	sll	r10,r5,r7
 800ca0c:	8912d83a 	srl	r9,r17,r4
 800ca10:	89ce983a 	sll	r7,r17,r7
 800ca14:	2908d83a 	srl	r4,r5,r4
 800ca18:	5262b03a 	or	r17,r10,r9
 800ca1c:	380ac03a 	cmpne	r5,r7,zero
 800ca20:	8962b03a 	or	r17,r17,r5
 800ca24:	89a3883a 	add	r17,r17,r6
 800ca28:	2211883a 	add	r8,r4,r8
 800ca2c:	898d803a 	cmpltu	r6,r17,r6
 800ca30:	418b883a 	add	r5,r8,r6
 800ca34:	1021883a 	mov	r16,r2
 800ca38:	003ee706 	br	800c5d8 <__alt_data_end+0xfc00c5d8>
 800ca3c:	4184b03a 	or	r2,r8,r6
 800ca40:	103e6226 	beq	r2,zero,800c3cc <__alt_data_end+0xfc00c3cc>
 800ca44:	8987c83a 	sub	r3,r17,r6
 800ca48:	88c9803a 	cmpltu	r4,r17,r3
 800ca4c:	2a05c83a 	sub	r2,r5,r8
 800ca50:	1105c83a 	sub	r2,r2,r4
 800ca54:	1100202c 	andhi	r4,r2,128
 800ca58:	203f0426 	beq	r4,zero,800c66c <__alt_data_end+0xfc00c66c>
 800ca5c:	3463c83a 	sub	r17,r6,r17
 800ca60:	414bc83a 	sub	r5,r8,r5
 800ca64:	344d803a 	cmpltu	r6,r6,r17
 800ca68:	298bc83a 	sub	r5,r5,r6
 800ca6c:	3825883a 	mov	r18,r7
 800ca70:	003e5606 	br	800c3cc <__alt_data_end+0xfc00c3cc>
 800ca74:	4184b03a 	or	r2,r8,r6
 800ca78:	10002b26 	beq	r2,zero,800cb28 <__adddf3+0x7d8>
 800ca7c:	2804d0fa 	srli	r2,r5,3
 800ca80:	8822d0fa 	srli	r17,r17,3
 800ca84:	280a977a 	slli	r5,r5,29
 800ca88:	10c0022c 	andhi	r3,r2,8
 800ca8c:	2c62b03a 	or	r17,r5,r17
 800ca90:	18000826 	beq	r3,zero,800cab4 <__adddf3+0x764>
 800ca94:	4008d0fa 	srli	r4,r8,3
 800ca98:	20c0022c 	andhi	r3,r4,8
 800ca9c:	1800051e 	bne	r3,zero,800cab4 <__adddf3+0x764>
 800caa0:	300cd0fa 	srli	r6,r6,3
 800caa4:	4010977a 	slli	r8,r8,29
 800caa8:	2005883a 	mov	r2,r4
 800caac:	3825883a 	mov	r18,r7
 800cab0:	41a2b03a 	or	r17,r8,r6
 800cab4:	880ad77a 	srli	r5,r17,29
 800cab8:	100490fa 	slli	r2,r2,3
 800cabc:	882290fa 	slli	r17,r17,3
 800cac0:	0401ffc4 	movi	r16,2047
 800cac4:	288ab03a 	or	r5,r5,r2
 800cac8:	003e4006 	br	800c3cc <__alt_data_end+0xfc00c3cc>
 800cacc:	01c1ffc4 	movi	r7,2047
 800cad0:	11ffc71e 	bne	r2,r7,800c9f0 <__alt_data_end+0xfc00c9f0>
 800cad4:	400b883a 	mov	r5,r8
 800cad8:	3023883a 	mov	r17,r6
 800cadc:	1021883a 	mov	r16,r2
 800cae0:	003e3a06 	br	800c3cc <__alt_data_end+0xfc00c3cc>
 800cae4:	10002d26 	beq	r2,zero,800cb9c <__adddf3+0x84c>
 800cae8:	4184b03a 	or	r2,r8,r6
 800caec:	10000e26 	beq	r2,zero,800cb28 <__adddf3+0x7d8>
 800caf0:	2804d0fa 	srli	r2,r5,3
 800caf4:	8822d0fa 	srli	r17,r17,3
 800caf8:	280a977a 	slli	r5,r5,29
 800cafc:	10c0022c 	andhi	r3,r2,8
 800cb00:	2c62b03a 	or	r17,r5,r17
 800cb04:	183feb26 	beq	r3,zero,800cab4 <__alt_data_end+0xfc00cab4>
 800cb08:	4008d0fa 	srli	r4,r8,3
 800cb0c:	20c0022c 	andhi	r3,r4,8
 800cb10:	183fe81e 	bne	r3,zero,800cab4 <__alt_data_end+0xfc00cab4>
 800cb14:	300cd0fa 	srli	r6,r6,3
 800cb18:	4010977a 	slli	r8,r8,29
 800cb1c:	2005883a 	mov	r2,r4
 800cb20:	41a2b03a 	or	r17,r8,r6
 800cb24:	003fe306 	br	800cab4 <__alt_data_end+0xfc00cab4>
 800cb28:	0401ffc4 	movi	r16,2047
 800cb2c:	003e2706 	br	800c3cc <__alt_data_end+0xfc00c3cc>
 800cb30:	0011883a 	mov	r8,zero
 800cb34:	003f8306 	br	800c944 <__alt_data_end+0xfc00c944>
 800cb38:	193ff804 	addi	r4,r3,-32
 800cb3c:	02400804 	movi	r9,32
 800cb40:	2908d83a 	srl	r4,r5,r4
 800cb44:	1a402526 	beq	r3,r9,800cbdc <__adddf3+0x88c>
 800cb48:	02401004 	movi	r9,64
 800cb4c:	48c7c83a 	sub	r3,r9,r3
 800cb50:	28ca983a 	sll	r5,r5,r3
 800cb54:	2c62b03a 	or	r17,r5,r17
 800cb58:	8822c03a 	cmpne	r17,r17,zero
 800cb5c:	8922b03a 	or	r17,r17,r4
 800cb60:	0007883a 	mov	r3,zero
 800cb64:	003f2f06 	br	800c824 <__alt_data_end+0xfc00c824>
 800cb68:	01402034 	movhi	r5,128
 800cb6c:	0007883a 	mov	r3,zero
 800cb70:	297fffc4 	addi	r5,r5,-1
 800cb74:	047ffe04 	movi	r17,-8
 800cb78:	0401ffc4 	movi	r16,2047
 800cb7c:	003e7306 	br	800c54c <__alt_data_end+0xfc00c54c>
 800cb80:	2c62b03a 	or	r17,r5,r17
 800cb84:	8822c03a 	cmpne	r17,r17,zero
 800cb88:	0009883a 	mov	r4,zero
 800cb8c:	003fa506 	br	800ca24 <__alt_data_end+0xfc00ca24>
 800cb90:	400b883a 	mov	r5,r8
 800cb94:	3023883a 	mov	r17,r6
 800cb98:	003e0c06 	br	800c3cc <__alt_data_end+0xfc00c3cc>
 800cb9c:	400b883a 	mov	r5,r8
 800cba0:	3023883a 	mov	r17,r6
 800cba4:	0401ffc4 	movi	r16,2047
 800cba8:	003e0806 	br	800c3cc <__alt_data_end+0xfc00c3cc>
 800cbac:	21fff804 	addi	r7,r4,-32
 800cbb0:	02400804 	movi	r9,32
 800cbb4:	29ced83a 	srl	r7,r5,r7
 800cbb8:	22400a26 	beq	r4,r9,800cbe4 <__adddf3+0x894>
 800cbbc:	02401004 	movi	r9,64
 800cbc0:	4909c83a 	sub	r4,r9,r4
 800cbc4:	290a983a 	sll	r5,r5,r4
 800cbc8:	2c62b03a 	or	r17,r5,r17
 800cbcc:	8822c03a 	cmpne	r17,r17,zero
 800cbd0:	89e2b03a 	or	r17,r17,r7
 800cbd4:	0009883a 	mov	r4,zero
 800cbd8:	003f9206 	br	800ca24 <__alt_data_end+0xfc00ca24>
 800cbdc:	000b883a 	mov	r5,zero
 800cbe0:	003fdc06 	br	800cb54 <__alt_data_end+0xfc00cb54>
 800cbe4:	000b883a 	mov	r5,zero
 800cbe8:	003ff706 	br	800cbc8 <__alt_data_end+0xfc00cbc8>

0800cbec <__divdf3>:
 800cbec:	defff004 	addi	sp,sp,-64
 800cbf0:	dc800815 	stw	r18,32(sp)
 800cbf4:	2824d53a 	srli	r18,r5,20
 800cbf8:	dd800c15 	stw	r22,48(sp)
 800cbfc:	282cd7fa 	srli	r22,r5,31
 800cc00:	dc000615 	stw	r16,24(sp)
 800cc04:	04000434 	movhi	r16,16
 800cc08:	df000e15 	stw	fp,56(sp)
 800cc0c:	dd000a15 	stw	r20,40(sp)
 800cc10:	dcc00915 	stw	r19,36(sp)
 800cc14:	dc400715 	stw	r17,28(sp)
 800cc18:	843fffc4 	addi	r16,r16,-1
 800cc1c:	dfc00f15 	stw	ra,60(sp)
 800cc20:	ddc00d15 	stw	r23,52(sp)
 800cc24:	dd400b15 	stw	r21,44(sp)
 800cc28:	9481ffcc 	andi	r18,r18,2047
 800cc2c:	2029883a 	mov	r20,r4
 800cc30:	2027883a 	mov	r19,r4
 800cc34:	2c22703a 	and	r17,r5,r16
 800cc38:	b7003fcc 	andi	fp,r22,255
 800cc3c:	90005e26 	beq	r18,zero,800cdb8 <__divdf3+0x1cc>
 800cc40:	0081ffc4 	movi	r2,2047
 800cc44:	90803526 	beq	r18,r2,800cd1c <__divdf3+0x130>
 800cc48:	8c000434 	orhi	r16,r17,16
 800cc4c:	2004d77a 	srli	r2,r4,29
 800cc50:	802090fa 	slli	r16,r16,3
 800cc54:	202690fa 	slli	r19,r4,3
 800cc58:	94bf0044 	addi	r18,r18,-1023
 800cc5c:	80a2b03a 	or	r17,r16,r2
 800cc60:	0029883a 	mov	r20,zero
 800cc64:	0011883a 	mov	r8,zero
 800cc68:	380ad53a 	srli	r5,r7,20
 800cc6c:	382ed7fa 	srli	r23,r7,31
 800cc70:	04000434 	movhi	r16,16
 800cc74:	843fffc4 	addi	r16,r16,-1
 800cc78:	2941ffcc 	andi	r5,r5,2047
 800cc7c:	302b883a 	mov	r21,r6
 800cc80:	3c20703a 	and	r16,r7,r16
 800cc84:	ba403fcc 	andi	r9,r23,255
 800cc88:	28006726 	beq	r5,zero,800ce28 <__divdf3+0x23c>
 800cc8c:	0081ffc4 	movi	r2,2047
 800cc90:	28805f26 	beq	r5,r2,800ce10 <__divdf3+0x224>
 800cc94:	84000434 	orhi	r16,r16,16
 800cc98:	3004d77a 	srli	r2,r6,29
 800cc9c:	802090fa 	slli	r16,r16,3
 800cca0:	302a90fa 	slli	r21,r6,3
 800cca4:	297f0044 	addi	r5,r5,-1023
 800cca8:	80a0b03a 	or	r16,r16,r2
 800ccac:	000f883a 	mov	r7,zero
 800ccb0:	3d06b03a 	or	r3,r7,r20
 800ccb4:	180690ba 	slli	r3,r3,2
 800ccb8:	00820074 	movhi	r2,2049
 800ccbc:	10b33704 	addi	r2,r2,-13092
 800ccc0:	1885883a 	add	r2,r3,r2
 800ccc4:	10800017 	ldw	r2,0(r2)
 800ccc8:	b5c8f03a 	xor	r4,r22,r23
 800cccc:	200d883a 	mov	r6,r4
 800ccd0:	25003fcc 	andi	r20,r4,255
 800ccd4:	9165c83a 	sub	r18,r18,r5
 800ccd8:	1000683a 	jmp	r2
 800ccdc:	0800cf24 	muli	zero,at,828
 800cce0:	0800cd54 	ori	zero,at,821
 800cce4:	0800cee8 	cmpgeui	zero,at,827
 800cce8:	0800cd38 	rdprs	zero,at,820
 800ccec:	0800cee8 	cmpgeui	zero,at,827
 800ccf0:	0800cebc 	xorhi	zero,at,826
 800ccf4:	0800cee8 	cmpgeui	zero,at,827
 800ccf8:	0800cd38 	rdprs	zero,at,820
 800ccfc:	0800cd54 	ori	zero,at,821
 800cd00:	0800cd54 	ori	zero,at,821
 800cd04:	0800cebc 	xorhi	zero,at,826
 800cd08:	0800cd38 	rdprs	zero,at,820
 800cd0c:	0800cd48 	cmpgei	zero,at,821
 800cd10:	0800cd48 	cmpgei	zero,at,821
 800cd14:	0800cd48 	cmpgei	zero,at,821
 800cd18:	0800cef8 	rdprs	zero,at,827
 800cd1c:	8904b03a 	or	r2,r17,r4
 800cd20:	1000631e 	bne	r2,zero,800ceb0 <__divdf3+0x2c4>
 800cd24:	05000204 	movi	r20,8
 800cd28:	0023883a 	mov	r17,zero
 800cd2c:	0027883a 	mov	r19,zero
 800cd30:	02000084 	movi	r8,2
 800cd34:	003fcc06 	br	800cc68 <__alt_data_end+0xfc00cc68>
 800cd38:	8023883a 	mov	r17,r16
 800cd3c:	a827883a 	mov	r19,r21
 800cd40:	4839883a 	mov	fp,r9
 800cd44:	3811883a 	mov	r8,r7
 800cd48:	00800084 	movi	r2,2
 800cd4c:	4081531e 	bne	r8,r2,800d29c <__divdf3+0x6b0>
 800cd50:	e029883a 	mov	r20,fp
 800cd54:	a180004c 	andi	r6,r20,1
 800cd58:	0201ffc4 	movi	r8,2047
 800cd5c:	000b883a 	mov	r5,zero
 800cd60:	0027883a 	mov	r19,zero
 800cd64:	4010953a 	slli	r8,r8,20
 800cd68:	30c03fcc 	andi	r3,r6,255
 800cd6c:	04000434 	movhi	r16,16
 800cd70:	180697fa 	slli	r3,r3,31
 800cd74:	843fffc4 	addi	r16,r16,-1
 800cd78:	2c20703a 	and	r16,r5,r16
 800cd7c:	8220b03a 	or	r16,r16,r8
 800cd80:	80c6b03a 	or	r3,r16,r3
 800cd84:	9805883a 	mov	r2,r19
 800cd88:	dfc00f17 	ldw	ra,60(sp)
 800cd8c:	df000e17 	ldw	fp,56(sp)
 800cd90:	ddc00d17 	ldw	r23,52(sp)
 800cd94:	dd800c17 	ldw	r22,48(sp)
 800cd98:	dd400b17 	ldw	r21,44(sp)
 800cd9c:	dd000a17 	ldw	r20,40(sp)
 800cda0:	dcc00917 	ldw	r19,36(sp)
 800cda4:	dc800817 	ldw	r18,32(sp)
 800cda8:	dc400717 	ldw	r17,28(sp)
 800cdac:	dc000617 	ldw	r16,24(sp)
 800cdb0:	dec01004 	addi	sp,sp,64
 800cdb4:	f800283a 	ret
 800cdb8:	8904b03a 	or	r2,r17,r4
 800cdbc:	10003726 	beq	r2,zero,800ce9c <__divdf3+0x2b0>
 800cdc0:	88014d26 	beq	r17,zero,800d2f8 <__divdf3+0x70c>
 800cdc4:	8809883a 	mov	r4,r17
 800cdc8:	d9800215 	stw	r6,8(sp)
 800cdcc:	d9c00515 	stw	r7,20(sp)
 800cdd0:	800eae80 	call	800eae8 <__clzsi2>
 800cdd4:	d9800217 	ldw	r6,8(sp)
 800cdd8:	d9c00517 	ldw	r7,20(sp)
 800cddc:	1007883a 	mov	r3,r2
 800cde0:	01000a04 	movi	r4,40
 800cde4:	1cfffe04 	addi	r19,r3,-8
 800cde8:	20c9c83a 	sub	r4,r4,r3
 800cdec:	8cca983a 	sll	r5,r17,r19
 800cdf0:	a108d83a 	srl	r4,r20,r4
 800cdf4:	a4e6983a 	sll	r19,r20,r19
 800cdf8:	2162b03a 	or	r17,r4,r5
 800cdfc:	04bf0344 	movi	r18,-1011
 800ce00:	90e5c83a 	sub	r18,r18,r3
 800ce04:	0029883a 	mov	r20,zero
 800ce08:	0011883a 	mov	r8,zero
 800ce0c:	003f9606 	br	800cc68 <__alt_data_end+0xfc00cc68>
 800ce10:	8184b03a 	or	r2,r16,r6
 800ce14:	10001f1e 	bne	r2,zero,800ce94 <__divdf3+0x2a8>
 800ce18:	0021883a 	mov	r16,zero
 800ce1c:	002b883a 	mov	r21,zero
 800ce20:	01c00084 	movi	r7,2
 800ce24:	003fa206 	br	800ccb0 <__alt_data_end+0xfc00ccb0>
 800ce28:	8184b03a 	or	r2,r16,r6
 800ce2c:	10001526 	beq	r2,zero,800ce84 <__divdf3+0x298>
 800ce30:	80013d26 	beq	r16,zero,800d328 <__divdf3+0x73c>
 800ce34:	8009883a 	mov	r4,r16
 800ce38:	d9800215 	stw	r6,8(sp)
 800ce3c:	da000315 	stw	r8,12(sp)
 800ce40:	da400415 	stw	r9,16(sp)
 800ce44:	800eae80 	call	800eae8 <__clzsi2>
 800ce48:	d9800217 	ldw	r6,8(sp)
 800ce4c:	da000317 	ldw	r8,12(sp)
 800ce50:	da400417 	ldw	r9,16(sp)
 800ce54:	1007883a 	mov	r3,r2
 800ce58:	01000a04 	movi	r4,40
 800ce5c:	1d7ffe04 	addi	r21,r3,-8
 800ce60:	20c9c83a 	sub	r4,r4,r3
 800ce64:	8560983a 	sll	r16,r16,r21
 800ce68:	3108d83a 	srl	r4,r6,r4
 800ce6c:	356a983a 	sll	r21,r6,r21
 800ce70:	2420b03a 	or	r16,r4,r16
 800ce74:	017f0344 	movi	r5,-1011
 800ce78:	28cbc83a 	sub	r5,r5,r3
 800ce7c:	000f883a 	mov	r7,zero
 800ce80:	003f8b06 	br	800ccb0 <__alt_data_end+0xfc00ccb0>
 800ce84:	0021883a 	mov	r16,zero
 800ce88:	002b883a 	mov	r21,zero
 800ce8c:	01c00044 	movi	r7,1
 800ce90:	003f8706 	br	800ccb0 <__alt_data_end+0xfc00ccb0>
 800ce94:	01c000c4 	movi	r7,3
 800ce98:	003f8506 	br	800ccb0 <__alt_data_end+0xfc00ccb0>
 800ce9c:	05000104 	movi	r20,4
 800cea0:	0023883a 	mov	r17,zero
 800cea4:	0027883a 	mov	r19,zero
 800cea8:	02000044 	movi	r8,1
 800ceac:	003f6e06 	br	800cc68 <__alt_data_end+0xfc00cc68>
 800ceb0:	05000304 	movi	r20,12
 800ceb4:	020000c4 	movi	r8,3
 800ceb8:	003f6b06 	br	800cc68 <__alt_data_end+0xfc00cc68>
 800cebc:	01400434 	movhi	r5,16
 800cec0:	000d883a 	mov	r6,zero
 800cec4:	297fffc4 	addi	r5,r5,-1
 800cec8:	04ffffc4 	movi	r19,-1
 800cecc:	0201ffc4 	movi	r8,2047
 800ced0:	003fa406 	br	800cd64 <__alt_data_end+0xfc00cd64>
 800ced4:	043f0084 	movi	r16,-1022
 800ced8:	84a1c83a 	sub	r16,r16,r18
 800cedc:	00800e04 	movi	r2,56
 800cee0:	14014d0e 	bge	r2,r16,800d418 <__divdf3+0x82c>
 800cee4:	a180004c 	andi	r6,r20,1
 800cee8:	0011883a 	mov	r8,zero
 800ceec:	000b883a 	mov	r5,zero
 800cef0:	0027883a 	mov	r19,zero
 800cef4:	003f9b06 	br	800cd64 <__alt_data_end+0xfc00cd64>
 800cef8:	8880022c 	andhi	r2,r17,8
 800cefc:	1000f026 	beq	r2,zero,800d2c0 <__divdf3+0x6d4>
 800cf00:	8080022c 	andhi	r2,r16,8
 800cf04:	1000ee1e 	bne	r2,zero,800d2c0 <__divdf3+0x6d4>
 800cf08:	00800434 	movhi	r2,16
 800cf0c:	81400234 	orhi	r5,r16,8
 800cf10:	10bfffc4 	addi	r2,r2,-1
 800cf14:	b80d883a 	mov	r6,r23
 800cf18:	288a703a 	and	r5,r5,r2
 800cf1c:	a827883a 	mov	r19,r21
 800cf20:	003fea06 	br	800cecc <__alt_data_end+0xfc00cecc>
 800cf24:	84411c36 	bltu	r16,r17,800d398 <__divdf3+0x7ac>
 800cf28:	8c011a26 	beq	r17,r16,800d394 <__divdf3+0x7a8>
 800cf2c:	94bfffc4 	addi	r18,r18,-1
 800cf30:	dcc00015 	stw	r19,0(sp)
 800cf34:	8811883a 	mov	r8,r17
 800cf38:	002d883a 	mov	r22,zero
 800cf3c:	a80cd63a 	srli	r6,r21,24
 800cf40:	8020923a 	slli	r16,r16,8
 800cf44:	a82a923a 	slli	r21,r21,8
 800cf48:	4009883a 	mov	r4,r8
 800cf4c:	342eb03a 	or	r23,r6,r16
 800cf50:	dd400115 	stw	r21,4(sp)
 800cf54:	b82ad43a 	srli	r21,r23,16
 800cf58:	da000315 	stw	r8,12(sp)
 800cf5c:	bcffffcc 	andi	r19,r23,65535
 800cf60:	a80b883a 	mov	r5,r21
 800cf64:	800c3180 	call	800c318 <__udivsi3>
 800cf68:	1009883a 	mov	r4,r2
 800cf6c:	980b883a 	mov	r5,r19
 800cf70:	1023883a 	mov	r17,r2
 800cf74:	800c3280 	call	800c328 <__mulsi3>
 800cf78:	da000317 	ldw	r8,12(sp)
 800cf7c:	a80b883a 	mov	r5,r21
 800cf80:	1039883a 	mov	fp,r2
 800cf84:	4009883a 	mov	r4,r8
 800cf88:	800c3200 	call	800c320 <__umodsi3>
 800cf8c:	d8c00017 	ldw	r3,0(sp)
 800cf90:	1004943a 	slli	r2,r2,16
 800cf94:	1810d43a 	srli	r8,r3,16
 800cf98:	120eb03a 	or	r7,r2,r8
 800cf9c:	3f00062e 	bgeu	r7,fp,800cfb8 <__divdf3+0x3cc>
 800cfa0:	3dcf883a 	add	r7,r7,r23
 800cfa4:	88bfffc4 	addi	r2,r17,-1
 800cfa8:	3dc10a36 	bltu	r7,r23,800d3d4 <__divdf3+0x7e8>
 800cfac:	3f01092e 	bgeu	r7,fp,800d3d4 <__divdf3+0x7e8>
 800cfb0:	8c7fff84 	addi	r17,r17,-2
 800cfb4:	3dcf883a 	add	r7,r7,r23
 800cfb8:	3f39c83a 	sub	fp,r7,fp
 800cfbc:	e009883a 	mov	r4,fp
 800cfc0:	a80b883a 	mov	r5,r21
 800cfc4:	800c3180 	call	800c318 <__udivsi3>
 800cfc8:	1009883a 	mov	r4,r2
 800cfcc:	980b883a 	mov	r5,r19
 800cfd0:	1021883a 	mov	r16,r2
 800cfd4:	800c3280 	call	800c328 <__mulsi3>
 800cfd8:	e009883a 	mov	r4,fp
 800cfdc:	a80b883a 	mov	r5,r21
 800cfe0:	d8800315 	stw	r2,12(sp)
 800cfe4:	800c3200 	call	800c320 <__umodsi3>
 800cfe8:	d9000017 	ldw	r4,0(sp)
 800cfec:	1004943a 	slli	r2,r2,16
 800cff0:	da000317 	ldw	r8,12(sp)
 800cff4:	20ffffcc 	andi	r3,r4,65535
 800cff8:	10ceb03a 	or	r7,r2,r3
 800cffc:	3a00062e 	bgeu	r7,r8,800d018 <__divdf3+0x42c>
 800d000:	3dcf883a 	add	r7,r7,r23
 800d004:	80bfffc4 	addi	r2,r16,-1
 800d008:	3dc0f036 	bltu	r7,r23,800d3cc <__divdf3+0x7e0>
 800d00c:	3a00ef2e 	bgeu	r7,r8,800d3cc <__divdf3+0x7e0>
 800d010:	843fff84 	addi	r16,r16,-2
 800d014:	3dcf883a 	add	r7,r7,r23
 800d018:	d8c00117 	ldw	r3,4(sp)
 800d01c:	8822943a 	slli	r17,r17,16
 800d020:	3a0fc83a 	sub	r7,r7,r8
 800d024:	1806d43a 	srli	r3,r3,16
 800d028:	8462b03a 	or	r17,r16,r17
 800d02c:	8affffcc 	andi	r11,r17,65535
 800d030:	d8c00015 	stw	r3,0(sp)
 800d034:	d8c00117 	ldw	r3,4(sp)
 800d038:	8820d43a 	srli	r16,r17,16
 800d03c:	5809883a 	mov	r4,r11
 800d040:	1f3fffcc 	andi	fp,r3,65535
 800d044:	e00b883a 	mov	r5,fp
 800d048:	d9c00515 	stw	r7,20(sp)
 800d04c:	dac00215 	stw	r11,8(sp)
 800d050:	800c3280 	call	800c328 <__mulsi3>
 800d054:	8009883a 	mov	r4,r16
 800d058:	e00b883a 	mov	r5,fp
 800d05c:	d8800415 	stw	r2,16(sp)
 800d060:	800c3280 	call	800c328 <__mulsi3>
 800d064:	d9400017 	ldw	r5,0(sp)
 800d068:	8009883a 	mov	r4,r16
 800d06c:	d8800315 	stw	r2,12(sp)
 800d070:	800c3280 	call	800c328 <__mulsi3>
 800d074:	dac00217 	ldw	r11,8(sp)
 800d078:	d9400017 	ldw	r5,0(sp)
 800d07c:	d8800215 	stw	r2,8(sp)
 800d080:	5809883a 	mov	r4,r11
 800d084:	800c3280 	call	800c328 <__mulsi3>
 800d088:	da400417 	ldw	r9,16(sp)
 800d08c:	da800317 	ldw	r10,12(sp)
 800d090:	d9c00517 	ldw	r7,20(sp)
 800d094:	480ad43a 	srli	r5,r9,16
 800d098:	5085883a 	add	r2,r10,r2
 800d09c:	db000217 	ldw	r12,8(sp)
 800d0a0:	1151883a 	add	r8,r2,r5
 800d0a4:	4280022e 	bgeu	r8,r10,800d0b0 <__divdf3+0x4c4>
 800d0a8:	00800074 	movhi	r2,1
 800d0ac:	6099883a 	add	r12,r12,r2
 800d0b0:	400ad43a 	srli	r5,r8,16
 800d0b4:	4010943a 	slli	r8,r8,16
 800d0b8:	4c3fffcc 	andi	r16,r9,65535
 800d0bc:	6149883a 	add	r4,r12,r5
 800d0c0:	4411883a 	add	r8,r8,r16
 800d0c4:	3900a736 	bltu	r7,r4,800d364 <__divdf3+0x778>
 800d0c8:	3900c426 	beq	r7,r4,800d3dc <__divdf3+0x7f0>
 800d0cc:	3909c83a 	sub	r4,r7,r4
 800d0d0:	b221c83a 	sub	r16,r22,r8
 800d0d4:	b42d803a 	cmpltu	r22,r22,r16
 800d0d8:	25adc83a 	sub	r22,r4,r22
 800d0dc:	b5c0c626 	beq	r22,r23,800d3f8 <__divdf3+0x80c>
 800d0e0:	b009883a 	mov	r4,r22
 800d0e4:	a80b883a 	mov	r5,r21
 800d0e8:	800c3180 	call	800c318 <__udivsi3>
 800d0ec:	1009883a 	mov	r4,r2
 800d0f0:	980b883a 	mov	r5,r19
 800d0f4:	d8800315 	stw	r2,12(sp)
 800d0f8:	800c3280 	call	800c328 <__mulsi3>
 800d0fc:	a80b883a 	mov	r5,r21
 800d100:	b009883a 	mov	r4,r22
 800d104:	d8800415 	stw	r2,16(sp)
 800d108:	800c3200 	call	800c320 <__umodsi3>
 800d10c:	1004943a 	slli	r2,r2,16
 800d110:	800ed43a 	srli	r7,r16,16
 800d114:	da400417 	ldw	r9,16(sp)
 800d118:	da000317 	ldw	r8,12(sp)
 800d11c:	11cab03a 	or	r5,r2,r7
 800d120:	2a40062e 	bgeu	r5,r9,800d13c <__divdf3+0x550>
 800d124:	2dcb883a 	add	r5,r5,r23
 800d128:	40bfffc4 	addi	r2,r8,-1
 800d12c:	2dc0b436 	bltu	r5,r23,800d400 <__divdf3+0x814>
 800d130:	2a40b32e 	bgeu	r5,r9,800d400 <__divdf3+0x814>
 800d134:	423fff84 	addi	r8,r8,-2
 800d138:	2dcb883a 	add	r5,r5,r23
 800d13c:	2a6dc83a 	sub	r22,r5,r9
 800d140:	b009883a 	mov	r4,r22
 800d144:	a80b883a 	mov	r5,r21
 800d148:	da000315 	stw	r8,12(sp)
 800d14c:	800c3180 	call	800c318 <__udivsi3>
 800d150:	980b883a 	mov	r5,r19
 800d154:	1009883a 	mov	r4,r2
 800d158:	d8800415 	stw	r2,16(sp)
 800d15c:	800c3280 	call	800c328 <__mulsi3>
 800d160:	b009883a 	mov	r4,r22
 800d164:	a80b883a 	mov	r5,r21
 800d168:	1027883a 	mov	r19,r2
 800d16c:	800c3200 	call	800c320 <__umodsi3>
 800d170:	1004943a 	slli	r2,r2,16
 800d174:	843fffcc 	andi	r16,r16,65535
 800d178:	da000317 	ldw	r8,12(sp)
 800d17c:	140eb03a 	or	r7,r2,r16
 800d180:	da400417 	ldw	r9,16(sp)
 800d184:	3cc0062e 	bgeu	r7,r19,800d1a0 <__divdf3+0x5b4>
 800d188:	3dcf883a 	add	r7,r7,r23
 800d18c:	48bfffc4 	addi	r2,r9,-1
 800d190:	3dc09d36 	bltu	r7,r23,800d408 <__divdf3+0x81c>
 800d194:	3cc09c2e 	bgeu	r7,r19,800d408 <__divdf3+0x81c>
 800d198:	4a7fff84 	addi	r9,r9,-2
 800d19c:	3dcf883a 	add	r7,r7,r23
 800d1a0:	4010943a 	slli	r8,r8,16
 800d1a4:	3cebc83a 	sub	r21,r7,r19
 800d1a8:	e00b883a 	mov	r5,fp
 800d1ac:	4a26b03a 	or	r19,r9,r8
 800d1b0:	99ffffcc 	andi	r7,r19,65535
 800d1b4:	9820d43a 	srli	r16,r19,16
 800d1b8:	3809883a 	mov	r4,r7
 800d1bc:	d9c00515 	stw	r7,20(sp)
 800d1c0:	800c3280 	call	800c328 <__mulsi3>
 800d1c4:	8009883a 	mov	r4,r16
 800d1c8:	e00b883a 	mov	r5,fp
 800d1cc:	102d883a 	mov	r22,r2
 800d1d0:	800c3280 	call	800c328 <__mulsi3>
 800d1d4:	d9400017 	ldw	r5,0(sp)
 800d1d8:	8009883a 	mov	r4,r16
 800d1dc:	1039883a 	mov	fp,r2
 800d1e0:	800c3280 	call	800c328 <__mulsi3>
 800d1e4:	d9c00517 	ldw	r7,20(sp)
 800d1e8:	d9400017 	ldw	r5,0(sp)
 800d1ec:	1021883a 	mov	r16,r2
 800d1f0:	3809883a 	mov	r4,r7
 800d1f4:	800c3280 	call	800c328 <__mulsi3>
 800d1f8:	b008d43a 	srli	r4,r22,16
 800d1fc:	e085883a 	add	r2,fp,r2
 800d200:	1109883a 	add	r4,r2,r4
 800d204:	2700022e 	bgeu	r4,fp,800d210 <__divdf3+0x624>
 800d208:	00800074 	movhi	r2,1
 800d20c:	80a1883a 	add	r16,r16,r2
 800d210:	200ad43a 	srli	r5,r4,16
 800d214:	2008943a 	slli	r4,r4,16
 800d218:	b5bfffcc 	andi	r22,r22,65535
 800d21c:	8145883a 	add	r2,r16,r5
 800d220:	2589883a 	add	r4,r4,r22
 800d224:	a8802c36 	bltu	r21,r2,800d2d8 <__divdf3+0x6ec>
 800d228:	a880a426 	beq	r21,r2,800d4bc <__divdf3+0x8d0>
 800d22c:	9cc00054 	ori	r19,r19,1
 800d230:	9200ffc4 	addi	r8,r18,1023
 800d234:	023f270e 	bge	zero,r8,800ced4 <__alt_data_end+0xfc00ced4>
 800d238:	988001cc 	andi	r2,r19,7
 800d23c:	10000726 	beq	r2,zero,800d25c <__divdf3+0x670>
 800d240:	990003cc 	andi	r4,r19,15
 800d244:	00800104 	movi	r2,4
 800d248:	20800426 	beq	r4,r2,800d25c <__divdf3+0x670>
 800d24c:	9885883a 	add	r2,r19,r2
 800d250:	14e7803a 	cmpltu	r19,r2,r19
 800d254:	8ce3883a 	add	r17,r17,r19
 800d258:	1027883a 	mov	r19,r2
 800d25c:	8880402c 	andhi	r2,r17,256
 800d260:	10000426 	beq	r2,zero,800d274 <__divdf3+0x688>
 800d264:	00bfc034 	movhi	r2,65280
 800d268:	10bfffc4 	addi	r2,r2,-1
 800d26c:	92010004 	addi	r8,r18,1024
 800d270:	88a2703a 	and	r17,r17,r2
 800d274:	0081ff84 	movi	r2,2046
 800d278:	123eb616 	blt	r2,r8,800cd54 <__alt_data_end+0xfc00cd54>
 800d27c:	9826d0fa 	srli	r19,r19,3
 800d280:	8804977a 	slli	r2,r17,29
 800d284:	8820927a 	slli	r16,r17,9
 800d288:	4201ffcc 	andi	r8,r8,2047
 800d28c:	14e6b03a 	or	r19,r2,r19
 800d290:	800ad33a 	srli	r5,r16,12
 800d294:	a180004c 	andi	r6,r20,1
 800d298:	003eb206 	br	800cd64 <__alt_data_end+0xfc00cd64>
 800d29c:	008000c4 	movi	r2,3
 800d2a0:	4080ac26 	beq	r8,r2,800d554 <__divdf3+0x968>
 800d2a4:	00800044 	movi	r2,1
 800d2a8:	4080591e 	bne	r8,r2,800d410 <__divdf3+0x824>
 800d2ac:	e00d883a 	mov	r6,fp
 800d2b0:	0011883a 	mov	r8,zero
 800d2b4:	000b883a 	mov	r5,zero
 800d2b8:	0027883a 	mov	r19,zero
 800d2bc:	003ea906 	br	800cd64 <__alt_data_end+0xfc00cd64>
 800d2c0:	00800434 	movhi	r2,16
 800d2c4:	89400234 	orhi	r5,r17,8
 800d2c8:	10bfffc4 	addi	r2,r2,-1
 800d2cc:	b00d883a 	mov	r6,r22
 800d2d0:	288a703a 	and	r5,r5,r2
 800d2d4:	003efd06 	br	800cecc <__alt_data_end+0xfc00cecc>
 800d2d8:	adcf883a 	add	r7,r21,r23
 800d2dc:	997fffc4 	addi	r5,r19,-1
 800d2e0:	3dc0412e 	bgeu	r7,r23,800d3e8 <__divdf3+0x7fc>
 800d2e4:	2827883a 	mov	r19,r5
 800d2e8:	38bfd01e 	bne	r7,r2,800d22c <__alt_data_end+0xfc00d22c>
 800d2ec:	d8c00117 	ldw	r3,4(sp)
 800d2f0:	193fce1e 	bne	r3,r4,800d22c <__alt_data_end+0xfc00d22c>
 800d2f4:	003fce06 	br	800d230 <__alt_data_end+0xfc00d230>
 800d2f8:	d9800215 	stw	r6,8(sp)
 800d2fc:	d9c00515 	stw	r7,20(sp)
 800d300:	800eae80 	call	800eae8 <__clzsi2>
 800d304:	10c00804 	addi	r3,r2,32
 800d308:	010009c4 	movi	r4,39
 800d30c:	d9800217 	ldw	r6,8(sp)
 800d310:	d9c00517 	ldw	r7,20(sp)
 800d314:	20feb20e 	bge	r4,r3,800cde0 <__alt_data_end+0xfc00cde0>
 800d318:	117ffe04 	addi	r5,r2,-8
 800d31c:	a162983a 	sll	r17,r20,r5
 800d320:	0027883a 	mov	r19,zero
 800d324:	003eb506 	br	800cdfc <__alt_data_end+0xfc00cdfc>
 800d328:	3009883a 	mov	r4,r6
 800d32c:	d9800215 	stw	r6,8(sp)
 800d330:	da000315 	stw	r8,12(sp)
 800d334:	da400415 	stw	r9,16(sp)
 800d338:	800eae80 	call	800eae8 <__clzsi2>
 800d33c:	10c00804 	addi	r3,r2,32
 800d340:	010009c4 	movi	r4,39
 800d344:	d9800217 	ldw	r6,8(sp)
 800d348:	da000317 	ldw	r8,12(sp)
 800d34c:	da400417 	ldw	r9,16(sp)
 800d350:	20fec10e 	bge	r4,r3,800ce58 <__alt_data_end+0xfc00ce58>
 800d354:	10bffe04 	addi	r2,r2,-8
 800d358:	a8a0983a 	sll	r16,r21,r2
 800d35c:	002b883a 	mov	r21,zero
 800d360:	003ec406 	br	800ce74 <__alt_data_end+0xfc00ce74>
 800d364:	d8c00117 	ldw	r3,4(sp)
 800d368:	b0ed883a 	add	r22,r22,r3
 800d36c:	b0c5803a 	cmpltu	r2,r22,r3
 800d370:	15c5883a 	add	r2,r2,r23
 800d374:	11cf883a 	add	r7,r2,r7
 800d378:	88bfffc4 	addi	r2,r17,-1
 800d37c:	b9c00d2e 	bgeu	r23,r7,800d3b4 <__divdf3+0x7c8>
 800d380:	39003f36 	bltu	r7,r4,800d480 <__divdf3+0x894>
 800d384:	21c06a26 	beq	r4,r7,800d530 <__divdf3+0x944>
 800d388:	3909c83a 	sub	r4,r7,r4
 800d38c:	1023883a 	mov	r17,r2
 800d390:	003f4f06 	br	800d0d0 <__alt_data_end+0xfc00d0d0>
 800d394:	9d7ee536 	bltu	r19,r21,800cf2c <__alt_data_end+0xfc00cf2c>
 800d398:	982ed07a 	srli	r23,r19,1
 800d39c:	880497fa 	slli	r2,r17,31
 800d3a0:	8810d07a 	srli	r8,r17,1
 800d3a4:	982c97fa 	slli	r22,r19,31
 800d3a8:	b884b03a 	or	r2,r23,r2
 800d3ac:	d8800015 	stw	r2,0(sp)
 800d3b0:	003ee206 	br	800cf3c <__alt_data_end+0xfc00cf3c>
 800d3b4:	3dfff41e 	bne	r7,r23,800d388 <__alt_data_end+0xfc00d388>
 800d3b8:	d8c00117 	ldw	r3,4(sp)
 800d3bc:	b0fff02e 	bgeu	r22,r3,800d380 <__alt_data_end+0xfc00d380>
 800d3c0:	b909c83a 	sub	r4,r23,r4
 800d3c4:	1023883a 	mov	r17,r2
 800d3c8:	003f4106 	br	800d0d0 <__alt_data_end+0xfc00d0d0>
 800d3cc:	1021883a 	mov	r16,r2
 800d3d0:	003f1106 	br	800d018 <__alt_data_end+0xfc00d018>
 800d3d4:	1023883a 	mov	r17,r2
 800d3d8:	003ef706 	br	800cfb8 <__alt_data_end+0xfc00cfb8>
 800d3dc:	b23fe136 	bltu	r22,r8,800d364 <__alt_data_end+0xfc00d364>
 800d3e0:	0009883a 	mov	r4,zero
 800d3e4:	003f3a06 	br	800d0d0 <__alt_data_end+0xfc00d0d0>
 800d3e8:	38802c36 	bltu	r7,r2,800d49c <__divdf3+0x8b0>
 800d3ec:	11c05326 	beq	r2,r7,800d53c <__divdf3+0x950>
 800d3f0:	2827883a 	mov	r19,r5
 800d3f4:	003f8d06 	br	800d22c <__alt_data_end+0xfc00d22c>
 800d3f8:	04ffffc4 	movi	r19,-1
 800d3fc:	003f8c06 	br	800d230 <__alt_data_end+0xfc00d230>
 800d400:	1011883a 	mov	r8,r2
 800d404:	003f4d06 	br	800d13c <__alt_data_end+0xfc00d13c>
 800d408:	1013883a 	mov	r9,r2
 800d40c:	003f6406 	br	800d1a0 <__alt_data_end+0xfc00d1a0>
 800d410:	e029883a 	mov	r20,fp
 800d414:	003f8606 	br	800d230 <__alt_data_end+0xfc00d230>
 800d418:	008007c4 	movi	r2,31
 800d41c:	14002a16 	blt	r2,r16,800d4c8 <__divdf3+0x8dc>
 800d420:	91410784 	addi	r5,r18,1054
 800d424:	9c0cd83a 	srl	r6,r19,r16
 800d428:	8948983a 	sll	r4,r17,r5
 800d42c:	9944983a 	sll	r2,r19,r5
 800d430:	8c20d83a 	srl	r16,r17,r16
 800d434:	3108b03a 	or	r4,r6,r4
 800d438:	1004c03a 	cmpne	r2,r2,zero
 800d43c:	2084b03a 	or	r2,r4,r2
 800d440:	110001cc 	andi	r4,r2,7
 800d444:	20000726 	beq	r4,zero,800d464 <__divdf3+0x878>
 800d448:	114003cc 	andi	r5,r2,15
 800d44c:	01000104 	movi	r4,4
 800d450:	29000426 	beq	r5,r4,800d464 <__divdf3+0x878>
 800d454:	11000104 	addi	r4,r2,4
 800d458:	2085803a 	cmpltu	r2,r4,r2
 800d45c:	80a1883a 	add	r16,r16,r2
 800d460:	2005883a 	mov	r2,r4
 800d464:	8100202c 	andhi	r4,r16,128
 800d468:	20002d26 	beq	r4,zero,800d520 <__divdf3+0x934>
 800d46c:	a180004c 	andi	r6,r20,1
 800d470:	02000044 	movi	r8,1
 800d474:	000b883a 	mov	r5,zero
 800d478:	0027883a 	mov	r19,zero
 800d47c:	003e3906 	br	800cd64 <__alt_data_end+0xfc00cd64>
 800d480:	d8c00117 	ldw	r3,4(sp)
 800d484:	8c7fff84 	addi	r17,r17,-2
 800d488:	b0ed883a 	add	r22,r22,r3
 800d48c:	b0c5803a 	cmpltu	r2,r22,r3
 800d490:	15c5883a 	add	r2,r2,r23
 800d494:	11cf883a 	add	r7,r2,r7
 800d498:	003f0c06 	br	800d0cc <__alt_data_end+0xfc00d0cc>
 800d49c:	d8c00117 	ldw	r3,4(sp)
 800d4a0:	997fff84 	addi	r5,r19,-2
 800d4a4:	18d1883a 	add	r8,r3,r3
 800d4a8:	40c7803a 	cmpltu	r3,r8,r3
 800d4ac:	1dcd883a 	add	r6,r3,r23
 800d4b0:	398f883a 	add	r7,r7,r6
 800d4b4:	da000115 	stw	r8,4(sp)
 800d4b8:	003f8a06 	br	800d2e4 <__alt_data_end+0xfc00d2e4>
 800d4bc:	203f861e 	bne	r4,zero,800d2d8 <__alt_data_end+0xfc00d2d8>
 800d4c0:	d8000115 	stw	zero,4(sp)
 800d4c4:	003f8906 	br	800d2ec <__alt_data_end+0xfc00d2ec>
 800d4c8:	00bef884 	movi	r2,-1054
 800d4cc:	1485c83a 	sub	r2,r2,r18
 800d4d0:	01000804 	movi	r4,32
 800d4d4:	8884d83a 	srl	r2,r17,r2
 800d4d8:	81001c26 	beq	r16,r4,800d54c <__divdf3+0x960>
 800d4dc:	91010f84 	addi	r4,r18,1086
 800d4e0:	8908983a 	sll	r4,r17,r4
 800d4e4:	24c8b03a 	or	r4,r4,r19
 800d4e8:	2008c03a 	cmpne	r4,r4,zero
 800d4ec:	2084b03a 	or	r2,r4,r2
 800d4f0:	140001cc 	andi	r16,r2,7
 800d4f4:	8000061e 	bne	r16,zero,800d510 <__divdf3+0x924>
 800d4f8:	000b883a 	mov	r5,zero
 800d4fc:	1004d0fa 	srli	r2,r2,3
 800d500:	a180004c 	andi	r6,r20,1
 800d504:	0011883a 	mov	r8,zero
 800d508:	1426b03a 	or	r19,r2,r16
 800d50c:	003e1506 	br	800cd64 <__alt_data_end+0xfc00cd64>
 800d510:	114003cc 	andi	r5,r2,15
 800d514:	01000104 	movi	r4,4
 800d518:	0021883a 	mov	r16,zero
 800d51c:	293fcd1e 	bne	r5,r4,800d454 <__alt_data_end+0xfc00d454>
 800d520:	800a927a 	slli	r5,r16,9
 800d524:	8020977a 	slli	r16,r16,29
 800d528:	280ad33a 	srli	r5,r5,12
 800d52c:	003ff306 	br	800d4fc <__alt_data_end+0xfc00d4fc>
 800d530:	b23fd336 	bltu	r22,r8,800d480 <__alt_data_end+0xfc00d480>
 800d534:	1023883a 	mov	r17,r2
 800d538:	003fa906 	br	800d3e0 <__alt_data_end+0xfc00d3e0>
 800d53c:	d8c00117 	ldw	r3,4(sp)
 800d540:	193fd636 	bltu	r3,r4,800d49c <__alt_data_end+0xfc00d49c>
 800d544:	2827883a 	mov	r19,r5
 800d548:	003f6806 	br	800d2ec <__alt_data_end+0xfc00d2ec>
 800d54c:	0009883a 	mov	r4,zero
 800d550:	003fe406 	br	800d4e4 <__alt_data_end+0xfc00d4e4>
 800d554:	00800434 	movhi	r2,16
 800d558:	89400234 	orhi	r5,r17,8
 800d55c:	10bfffc4 	addi	r2,r2,-1
 800d560:	e00d883a 	mov	r6,fp
 800d564:	288a703a 	and	r5,r5,r2
 800d568:	003e5806 	br	800cecc <__alt_data_end+0xfc00cecc>

0800d56c <__eqdf2>:
 800d56c:	2804d53a 	srli	r2,r5,20
 800d570:	3806d53a 	srli	r3,r7,20
 800d574:	02000434 	movhi	r8,16
 800d578:	423fffc4 	addi	r8,r8,-1
 800d57c:	1081ffcc 	andi	r2,r2,2047
 800d580:	0241ffc4 	movi	r9,2047
 800d584:	2a14703a 	and	r10,r5,r8
 800d588:	18c1ffcc 	andi	r3,r3,2047
 800d58c:	3a10703a 	and	r8,r7,r8
 800d590:	280ad7fa 	srli	r5,r5,31
 800d594:	380ed7fa 	srli	r7,r7,31
 800d598:	12400f26 	beq	r2,r9,800d5d8 <__eqdf2+0x6c>
 800d59c:	0241ffc4 	movi	r9,2047
 800d5a0:	1a400326 	beq	r3,r9,800d5b0 <__eqdf2+0x44>
 800d5a4:	10c00526 	beq	r2,r3,800d5bc <__eqdf2+0x50>
 800d5a8:	00800044 	movi	r2,1
 800d5ac:	f800283a 	ret
 800d5b0:	4192b03a 	or	r9,r8,r6
 800d5b4:	483ffc1e 	bne	r9,zero,800d5a8 <__alt_data_end+0xfc00d5a8>
 800d5b8:	10fffb1e 	bne	r2,r3,800d5a8 <__alt_data_end+0xfc00d5a8>
 800d5bc:	523ffa1e 	bne	r10,r8,800d5a8 <__alt_data_end+0xfc00d5a8>
 800d5c0:	21bff91e 	bne	r4,r6,800d5a8 <__alt_data_end+0xfc00d5a8>
 800d5c4:	29c00826 	beq	r5,r7,800d5e8 <__eqdf2+0x7c>
 800d5c8:	103ff71e 	bne	r2,zero,800d5a8 <__alt_data_end+0xfc00d5a8>
 800d5cc:	5104b03a 	or	r2,r10,r4
 800d5d0:	1004c03a 	cmpne	r2,r2,zero
 800d5d4:	f800283a 	ret
 800d5d8:	5112b03a 	or	r9,r10,r4
 800d5dc:	483fef26 	beq	r9,zero,800d59c <__alt_data_end+0xfc00d59c>
 800d5e0:	00800044 	movi	r2,1
 800d5e4:	f800283a 	ret
 800d5e8:	0005883a 	mov	r2,zero
 800d5ec:	f800283a 	ret

0800d5f0 <__gedf2>:
 800d5f0:	2804d53a 	srli	r2,r5,20
 800d5f4:	3806d53a 	srli	r3,r7,20
 800d5f8:	02000434 	movhi	r8,16
 800d5fc:	423fffc4 	addi	r8,r8,-1
 800d600:	0241ffc4 	movi	r9,2047
 800d604:	1081ffcc 	andi	r2,r2,2047
 800d608:	2a14703a 	and	r10,r5,r8
 800d60c:	1a46703a 	and	r3,r3,r9
 800d610:	3a10703a 	and	r8,r7,r8
 800d614:	280ad7fa 	srli	r5,r5,31
 800d618:	380ed7fa 	srli	r7,r7,31
 800d61c:	12400b26 	beq	r2,r9,800d64c <__gedf2+0x5c>
 800d620:	1a401626 	beq	r3,r9,800d67c <__gedf2+0x8c>
 800d624:	10000c1e 	bne	r2,zero,800d658 <__gedf2+0x68>
 800d628:	5112b03a 	or	r9,r10,r4
 800d62c:	4813003a 	cmpeq	r9,r9,zero
 800d630:	4817883a 	mov	r11,r9
 800d634:	18000c1e 	bne	r3,zero,800d668 <__gedf2+0x78>
 800d638:	4198b03a 	or	r12,r8,r6
 800d63c:	60000a1e 	bne	r12,zero,800d668 <__gedf2+0x78>
 800d640:	48001326 	beq	r9,zero,800d690 <__gedf2+0xa0>
 800d644:	0005883a 	mov	r2,zero
 800d648:	f800283a 	ret
 800d64c:	5112b03a 	or	r9,r10,r4
 800d650:	4800191e 	bne	r9,zero,800d6b8 <__gedf2+0xc8>
 800d654:	18800926 	beq	r3,r2,800d67c <__gedf2+0x8c>
 800d658:	18000b1e 	bne	r3,zero,800d688 <__gedf2+0x98>
 800d65c:	4192b03a 	or	r9,r8,r6
 800d660:	0017883a 	mov	r11,zero
 800d664:	48000a26 	beq	r9,zero,800d690 <__gedf2+0xa0>
 800d668:	39c03fcc 	andi	r7,r7,255
 800d66c:	58000726 	beq	r11,zero,800d68c <__gedf2+0x9c>
 800d670:	3800081e 	bne	r7,zero,800d694 <__gedf2+0xa4>
 800d674:	00bfffc4 	movi	r2,-1
 800d678:	f800283a 	ret
 800d67c:	4192b03a 	or	r9,r8,r6
 800d680:	48000d1e 	bne	r9,zero,800d6b8 <__gedf2+0xc8>
 800d684:	103fe826 	beq	r2,zero,800d628 <__alt_data_end+0xfc00d628>
 800d688:	39c03fcc 	andi	r7,r7,255
 800d68c:	29c00326 	beq	r5,r7,800d69c <__gedf2+0xac>
 800d690:	283ff81e 	bne	r5,zero,800d674 <__alt_data_end+0xfc00d674>
 800d694:	00800044 	movi	r2,1
 800d698:	f800283a 	ret
 800d69c:	18bffc16 	blt	r3,r2,800d690 <__alt_data_end+0xfc00d690>
 800d6a0:	10c00316 	blt	r2,r3,800d6b0 <__gedf2+0xc0>
 800d6a4:	42bffa36 	bltu	r8,r10,800d690 <__alt_data_end+0xfc00d690>
 800d6a8:	52000526 	beq	r10,r8,800d6c0 <__gedf2+0xd0>
 800d6ac:	523fe52e 	bgeu	r10,r8,800d644 <__alt_data_end+0xfc00d644>
 800d6b0:	283ff026 	beq	r5,zero,800d674 <__alt_data_end+0xfc00d674>
 800d6b4:	003ff706 	br	800d694 <__alt_data_end+0xfc00d694>
 800d6b8:	00bfff84 	movi	r2,-2
 800d6bc:	f800283a 	ret
 800d6c0:	313ff336 	bltu	r6,r4,800d690 <__alt_data_end+0xfc00d690>
 800d6c4:	21bfdf2e 	bgeu	r4,r6,800d644 <__alt_data_end+0xfc00d644>
 800d6c8:	283fea26 	beq	r5,zero,800d674 <__alt_data_end+0xfc00d674>
 800d6cc:	003ff106 	br	800d694 <__alt_data_end+0xfc00d694>

0800d6d0 <__ledf2>:
 800d6d0:	2804d53a 	srli	r2,r5,20
 800d6d4:	3810d53a 	srli	r8,r7,20
 800d6d8:	00c00434 	movhi	r3,16
 800d6dc:	18ffffc4 	addi	r3,r3,-1
 800d6e0:	0241ffc4 	movi	r9,2047
 800d6e4:	1081ffcc 	andi	r2,r2,2047
 800d6e8:	28d4703a 	and	r10,r5,r3
 800d6ec:	4250703a 	and	r8,r8,r9
 800d6f0:	38c6703a 	and	r3,r7,r3
 800d6f4:	280ad7fa 	srli	r5,r5,31
 800d6f8:	380ed7fa 	srli	r7,r7,31
 800d6fc:	12400b26 	beq	r2,r9,800d72c <__ledf2+0x5c>
 800d700:	42401926 	beq	r8,r9,800d768 <__ledf2+0x98>
 800d704:	10000c1e 	bne	r2,zero,800d738 <__ledf2+0x68>
 800d708:	5112b03a 	or	r9,r10,r4
 800d70c:	4813003a 	cmpeq	r9,r9,zero
 800d710:	4817883a 	mov	r11,r9
 800d714:	40000f26 	beq	r8,zero,800d754 <__ledf2+0x84>
 800d718:	39c03fcc 	andi	r7,r7,255
 800d71c:	58001826 	beq	r11,zero,800d780 <__ledf2+0xb0>
 800d720:	38000a1e 	bne	r7,zero,800d74c <__ledf2+0x7c>
 800d724:	00bfffc4 	movi	r2,-1
 800d728:	f800283a 	ret
 800d72c:	5112b03a 	or	r9,r10,r4
 800d730:	48000f1e 	bne	r9,zero,800d770 <__ledf2+0xa0>
 800d734:	40800c26 	beq	r8,r2,800d768 <__ledf2+0x98>
 800d738:	4000101e 	bne	r8,zero,800d77c <__ledf2+0xac>
 800d73c:	1992b03a 	or	r9,r3,r6
 800d740:	0017883a 	mov	r11,zero
 800d744:	483ff41e 	bne	r9,zero,800d718 <__alt_data_end+0xfc00d718>
 800d748:	283ff61e 	bne	r5,zero,800d724 <__alt_data_end+0xfc00d724>
 800d74c:	00800044 	movi	r2,1
 800d750:	f800283a 	ret
 800d754:	1998b03a 	or	r12,r3,r6
 800d758:	603fef1e 	bne	r12,zero,800d718 <__alt_data_end+0xfc00d718>
 800d75c:	483ffa26 	beq	r9,zero,800d748 <__alt_data_end+0xfc00d748>
 800d760:	0005883a 	mov	r2,zero
 800d764:	f800283a 	ret
 800d768:	1992b03a 	or	r9,r3,r6
 800d76c:	48000226 	beq	r9,zero,800d778 <__ledf2+0xa8>
 800d770:	00800084 	movi	r2,2
 800d774:	f800283a 	ret
 800d778:	103fe326 	beq	r2,zero,800d708 <__alt_data_end+0xfc00d708>
 800d77c:	39c03fcc 	andi	r7,r7,255
 800d780:	29fff11e 	bne	r5,r7,800d748 <__alt_data_end+0xfc00d748>
 800d784:	40bff016 	blt	r8,r2,800d748 <__alt_data_end+0xfc00d748>
 800d788:	12000316 	blt	r2,r8,800d798 <__ledf2+0xc8>
 800d78c:	1abfee36 	bltu	r3,r10,800d748 <__alt_data_end+0xfc00d748>
 800d790:	50c00326 	beq	r10,r3,800d7a0 <__ledf2+0xd0>
 800d794:	50fff22e 	bgeu	r10,r3,800d760 <__alt_data_end+0xfc00d760>
 800d798:	283fe226 	beq	r5,zero,800d724 <__alt_data_end+0xfc00d724>
 800d79c:	003feb06 	br	800d74c <__alt_data_end+0xfc00d74c>
 800d7a0:	313fe936 	bltu	r6,r4,800d748 <__alt_data_end+0xfc00d748>
 800d7a4:	21bfee2e 	bgeu	r4,r6,800d760 <__alt_data_end+0xfc00d760>
 800d7a8:	283fde26 	beq	r5,zero,800d724 <__alt_data_end+0xfc00d724>
 800d7ac:	003fe706 	br	800d74c <__alt_data_end+0xfc00d74c>

0800d7b0 <__muldf3>:
 800d7b0:	deffee04 	addi	sp,sp,-72
 800d7b4:	dd000c15 	stw	r20,48(sp)
 800d7b8:	2828d53a 	srli	r20,r5,20
 800d7bc:	dd400d15 	stw	r21,52(sp)
 800d7c0:	282ad7fa 	srli	r21,r5,31
 800d7c4:	dc000815 	stw	r16,32(sp)
 800d7c8:	04000434 	movhi	r16,16
 800d7cc:	ddc00f15 	stw	r23,60(sp)
 800d7d0:	dcc00b15 	stw	r19,44(sp)
 800d7d4:	dc800a15 	stw	r18,40(sp)
 800d7d8:	843fffc4 	addi	r16,r16,-1
 800d7dc:	dfc01115 	stw	ra,68(sp)
 800d7e0:	df001015 	stw	fp,64(sp)
 800d7e4:	dd800e15 	stw	r22,56(sp)
 800d7e8:	dc400915 	stw	r17,36(sp)
 800d7ec:	a501ffcc 	andi	r20,r20,2047
 800d7f0:	2025883a 	mov	r18,r4
 800d7f4:	202f883a 	mov	r23,r4
 800d7f8:	2c20703a 	and	r16,r5,r16
 800d7fc:	a827883a 	mov	r19,r21
 800d800:	aa403fcc 	andi	r9,r21,255
 800d804:	a0005926 	beq	r20,zero,800d96c <__muldf3+0x1bc>
 800d808:	0081ffc4 	movi	r2,2047
 800d80c:	a0803426 	beq	r20,r2,800d8e0 <__muldf3+0x130>
 800d810:	84000434 	orhi	r16,r16,16
 800d814:	2004d77a 	srli	r2,r4,29
 800d818:	802090fa 	slli	r16,r16,3
 800d81c:	202e90fa 	slli	r23,r4,3
 800d820:	a53f0044 	addi	r20,r20,-1023
 800d824:	80a0b03a 	or	r16,r16,r2
 800d828:	000b883a 	mov	r5,zero
 800d82c:	0039883a 	mov	fp,zero
 800d830:	3806d53a 	srli	r3,r7,20
 800d834:	382cd7fa 	srli	r22,r7,31
 800d838:	00800434 	movhi	r2,16
 800d83c:	10bfffc4 	addi	r2,r2,-1
 800d840:	18c1ffcc 	andi	r3,r3,2047
 800d844:	3025883a 	mov	r18,r6
 800d848:	38a2703a 	and	r17,r7,r2
 800d84c:	b2803fcc 	andi	r10,r22,255
 800d850:	18006426 	beq	r3,zero,800d9e4 <__muldf3+0x234>
 800d854:	0081ffc4 	movi	r2,2047
 800d858:	18805c26 	beq	r3,r2,800d9cc <__muldf3+0x21c>
 800d85c:	8c400434 	orhi	r17,r17,16
 800d860:	3004d77a 	srli	r2,r6,29
 800d864:	882290fa 	slli	r17,r17,3
 800d868:	302490fa 	slli	r18,r6,3
 800d86c:	18ff0044 	addi	r3,r3,-1023
 800d870:	88a2b03a 	or	r17,r17,r2
 800d874:	000f883a 	mov	r7,zero
 800d878:	394ab03a 	or	r5,r7,r5
 800d87c:	280a90ba 	slli	r5,r5,2
 800d880:	00820074 	movhi	r2,2049
 800d884:	10b62804 	addi	r2,r2,-10080
 800d888:	288b883a 	add	r5,r5,r2
 800d88c:	28800017 	ldw	r2,0(r5)
 800d890:	a0c7883a 	add	r3,r20,r3
 800d894:	b54cf03a 	xor	r6,r22,r21
 800d898:	1a000044 	addi	r8,r3,1
 800d89c:	1000683a 	jmp	r2
 800d8a0:	0800dae4 	muli	zero,at,875
 800d8a4:	0800dad0 	cmplti	zero,at,875
 800d8a8:	0800dad0 	cmplti	zero,at,875
 800d8ac:	0800dabc 	xorhi	zero,at,874
 800d8b0:	0800d8fc 	xorhi	zero,at,867
 800d8b4:	0800d8fc 	xorhi	zero,at,867
 800d8b8:	0800daa4 	muli	zero,at,874
 800d8bc:	0800dabc 	xorhi	zero,at,874
 800d8c0:	0800d8fc 	xorhi	zero,at,867
 800d8c4:	0800daa4 	muli	zero,at,874
 800d8c8:	0800d8fc 	xorhi	zero,at,867
 800d8cc:	0800dabc 	xorhi	zero,at,874
 800d8d0:	0800d900 	call	800d90 <__alt_mem_onchip_memory2_0+0x800d90>
 800d8d4:	0800d900 	call	800d90 <__alt_mem_onchip_memory2_0+0x800d90>
 800d8d8:	0800d900 	call	800d90 <__alt_mem_onchip_memory2_0+0x800d90>
 800d8dc:	0800de20 	cmpeqi	zero,at,888
 800d8e0:	8104b03a 	or	r2,r16,r4
 800d8e4:	10006c1e 	bne	r2,zero,800da98 <__muldf3+0x2e8>
 800d8e8:	01400204 	movi	r5,8
 800d8ec:	0021883a 	mov	r16,zero
 800d8f0:	002f883a 	mov	r23,zero
 800d8f4:	07000084 	movi	fp,2
 800d8f8:	003fcd06 	br	800d830 <__alt_data_end+0xfc00d830>
 800d8fc:	3013883a 	mov	r9,r6
 800d900:	00800084 	movi	r2,2
 800d904:	e080501e 	bne	fp,r2,800da48 <__muldf3+0x298>
 800d908:	4cc0004c 	andi	r19,r9,1
 800d90c:	0101ffc4 	movi	r4,2047
 800d910:	0021883a 	mov	r16,zero
 800d914:	002f883a 	mov	r23,zero
 800d918:	2008953a 	slli	r4,r4,20
 800d91c:	98c03fcc 	andi	r3,r19,255
 800d920:	04400434 	movhi	r17,16
 800d924:	8c7fffc4 	addi	r17,r17,-1
 800d928:	180697fa 	slli	r3,r3,31
 800d92c:	8460703a 	and	r16,r16,r17
 800d930:	8120b03a 	or	r16,r16,r4
 800d934:	80c6b03a 	or	r3,r16,r3
 800d938:	b805883a 	mov	r2,r23
 800d93c:	dfc01117 	ldw	ra,68(sp)
 800d940:	df001017 	ldw	fp,64(sp)
 800d944:	ddc00f17 	ldw	r23,60(sp)
 800d948:	dd800e17 	ldw	r22,56(sp)
 800d94c:	dd400d17 	ldw	r21,52(sp)
 800d950:	dd000c17 	ldw	r20,48(sp)
 800d954:	dcc00b17 	ldw	r19,44(sp)
 800d958:	dc800a17 	ldw	r18,40(sp)
 800d95c:	dc400917 	ldw	r17,36(sp)
 800d960:	dc000817 	ldw	r16,32(sp)
 800d964:	dec01204 	addi	sp,sp,72
 800d968:	f800283a 	ret
 800d96c:	8104b03a 	or	r2,r16,r4
 800d970:	10004426 	beq	r2,zero,800da84 <__muldf3+0x2d4>
 800d974:	80014b26 	beq	r16,zero,800dea4 <__muldf3+0x6f4>
 800d978:	8009883a 	mov	r4,r16
 800d97c:	d9800715 	stw	r6,28(sp)
 800d980:	d9c00215 	stw	r7,8(sp)
 800d984:	da400415 	stw	r9,16(sp)
 800d988:	800eae80 	call	800eae8 <__clzsi2>
 800d98c:	d9800717 	ldw	r6,28(sp)
 800d990:	d9c00217 	ldw	r7,8(sp)
 800d994:	da400417 	ldw	r9,16(sp)
 800d998:	1007883a 	mov	r3,r2
 800d99c:	01000a04 	movi	r4,40
 800d9a0:	1dfffe04 	addi	r23,r3,-8
 800d9a4:	20c9c83a 	sub	r4,r4,r3
 800d9a8:	85e0983a 	sll	r16,r16,r23
 800d9ac:	9108d83a 	srl	r4,r18,r4
 800d9b0:	95ee983a 	sll	r23,r18,r23
 800d9b4:	2420b03a 	or	r16,r4,r16
 800d9b8:	053f0344 	movi	r20,-1011
 800d9bc:	a0e9c83a 	sub	r20,r20,r3
 800d9c0:	000b883a 	mov	r5,zero
 800d9c4:	0039883a 	mov	fp,zero
 800d9c8:	003f9906 	br	800d830 <__alt_data_end+0xfc00d830>
 800d9cc:	8984b03a 	or	r2,r17,r6
 800d9d0:	10002a1e 	bne	r2,zero,800da7c <__muldf3+0x2cc>
 800d9d4:	0023883a 	mov	r17,zero
 800d9d8:	0025883a 	mov	r18,zero
 800d9dc:	01c00084 	movi	r7,2
 800d9e0:	003fa506 	br	800d878 <__alt_data_end+0xfc00d878>
 800d9e4:	8984b03a 	or	r2,r17,r6
 800d9e8:	10002026 	beq	r2,zero,800da6c <__muldf3+0x2bc>
 800d9ec:	88011c26 	beq	r17,zero,800de60 <__muldf3+0x6b0>
 800d9f0:	8809883a 	mov	r4,r17
 800d9f4:	d9400215 	stw	r5,8(sp)
 800d9f8:	d9800715 	stw	r6,28(sp)
 800d9fc:	da400415 	stw	r9,16(sp)
 800da00:	da800315 	stw	r10,12(sp)
 800da04:	800eae80 	call	800eae8 <__clzsi2>
 800da08:	d9400217 	ldw	r5,8(sp)
 800da0c:	d9800717 	ldw	r6,28(sp)
 800da10:	da400417 	ldw	r9,16(sp)
 800da14:	da800317 	ldw	r10,12(sp)
 800da18:	1007883a 	mov	r3,r2
 800da1c:	01000a04 	movi	r4,40
 800da20:	1cbffe04 	addi	r18,r3,-8
 800da24:	20c9c83a 	sub	r4,r4,r3
 800da28:	8ca2983a 	sll	r17,r17,r18
 800da2c:	3108d83a 	srl	r4,r6,r4
 800da30:	34a4983a 	sll	r18,r6,r18
 800da34:	2462b03a 	or	r17,r4,r17
 800da38:	00bf0344 	movi	r2,-1011
 800da3c:	10c7c83a 	sub	r3,r2,r3
 800da40:	000f883a 	mov	r7,zero
 800da44:	003f8c06 	br	800d878 <__alt_data_end+0xfc00d878>
 800da48:	008000c4 	movi	r2,3
 800da4c:	e0816d26 	beq	fp,r2,800e004 <__muldf3+0x854>
 800da50:	00800044 	movi	r2,1
 800da54:	e081321e 	bne	fp,r2,800df20 <__muldf3+0x770>
 800da58:	48a6703a 	and	r19,r9,r2
 800da5c:	0009883a 	mov	r4,zero
 800da60:	0021883a 	mov	r16,zero
 800da64:	002f883a 	mov	r23,zero
 800da68:	003fab06 	br	800d918 <__alt_data_end+0xfc00d918>
 800da6c:	0023883a 	mov	r17,zero
 800da70:	0025883a 	mov	r18,zero
 800da74:	01c00044 	movi	r7,1
 800da78:	003f7f06 	br	800d878 <__alt_data_end+0xfc00d878>
 800da7c:	01c000c4 	movi	r7,3
 800da80:	003f7d06 	br	800d878 <__alt_data_end+0xfc00d878>
 800da84:	01400104 	movi	r5,4
 800da88:	0021883a 	mov	r16,zero
 800da8c:	002f883a 	mov	r23,zero
 800da90:	07000044 	movi	fp,1
 800da94:	003f6606 	br	800d830 <__alt_data_end+0xfc00d830>
 800da98:	01400304 	movi	r5,12
 800da9c:	070000c4 	movi	fp,3
 800daa0:	003f6306 	br	800d830 <__alt_data_end+0xfc00d830>
 800daa4:	04000434 	movhi	r16,16
 800daa8:	0027883a 	mov	r19,zero
 800daac:	843fffc4 	addi	r16,r16,-1
 800dab0:	05ffffc4 	movi	r23,-1
 800dab4:	0101ffc4 	movi	r4,2047
 800dab8:	003f9706 	br	800d918 <__alt_data_end+0xfc00d918>
 800dabc:	8821883a 	mov	r16,r17
 800dac0:	902f883a 	mov	r23,r18
 800dac4:	5013883a 	mov	r9,r10
 800dac8:	3839883a 	mov	fp,r7
 800dacc:	003f8c06 	br	800d900 <__alt_data_end+0xfc00d900>
 800dad0:	8821883a 	mov	r16,r17
 800dad4:	902f883a 	mov	r23,r18
 800dad8:	3013883a 	mov	r9,r6
 800dadc:	3839883a 	mov	fp,r7
 800dae0:	003f8706 	br	800d900 <__alt_data_end+0xfc00d900>
 800dae4:	b82ad43a 	srli	r21,r23,16
 800dae8:	9038d43a 	srli	fp,r18,16
 800daec:	bdffffcc 	andi	r23,r23,65535
 800daf0:	94bfffcc 	andi	r18,r18,65535
 800daf4:	9009883a 	mov	r4,r18
 800daf8:	b80b883a 	mov	r5,r23
 800dafc:	d8c00515 	stw	r3,20(sp)
 800db00:	d9800715 	stw	r6,28(sp)
 800db04:	da000615 	stw	r8,24(sp)
 800db08:	800c3280 	call	800c328 <__mulsi3>
 800db0c:	9009883a 	mov	r4,r18
 800db10:	a80b883a 	mov	r5,r21
 800db14:	1029883a 	mov	r20,r2
 800db18:	800c3280 	call	800c328 <__mulsi3>
 800db1c:	e009883a 	mov	r4,fp
 800db20:	a80b883a 	mov	r5,r21
 800db24:	102d883a 	mov	r22,r2
 800db28:	800c3280 	call	800c328 <__mulsi3>
 800db2c:	e009883a 	mov	r4,fp
 800db30:	b80b883a 	mov	r5,r23
 800db34:	1027883a 	mov	r19,r2
 800db38:	800c3280 	call	800c328 <__mulsi3>
 800db3c:	a008d43a 	srli	r4,r20,16
 800db40:	b085883a 	add	r2,r22,r2
 800db44:	d8c00517 	ldw	r3,20(sp)
 800db48:	110f883a 	add	r7,r2,r4
 800db4c:	d9800717 	ldw	r6,28(sp)
 800db50:	da000617 	ldw	r8,24(sp)
 800db54:	3d80022e 	bgeu	r7,r22,800db60 <__muldf3+0x3b0>
 800db58:	00800074 	movhi	r2,1
 800db5c:	98a7883a 	add	r19,r19,r2
 800db60:	3804943a 	slli	r2,r7,16
 800db64:	380ed43a 	srli	r7,r7,16
 800db68:	882cd43a 	srli	r22,r17,16
 800db6c:	a53fffcc 	andi	r20,r20,65535
 800db70:	8c7fffcc 	andi	r17,r17,65535
 800db74:	1529883a 	add	r20,r2,r20
 800db78:	8809883a 	mov	r4,r17
 800db7c:	b80b883a 	mov	r5,r23
 800db80:	d8c00515 	stw	r3,20(sp)
 800db84:	d9800715 	stw	r6,28(sp)
 800db88:	da000615 	stw	r8,24(sp)
 800db8c:	d9c00015 	stw	r7,0(sp)
 800db90:	dd000115 	stw	r20,4(sp)
 800db94:	800c3280 	call	800c328 <__mulsi3>
 800db98:	a80b883a 	mov	r5,r21
 800db9c:	8809883a 	mov	r4,r17
 800dba0:	d8800415 	stw	r2,16(sp)
 800dba4:	800c3280 	call	800c328 <__mulsi3>
 800dba8:	a80b883a 	mov	r5,r21
 800dbac:	b009883a 	mov	r4,r22
 800dbb0:	1029883a 	mov	r20,r2
 800dbb4:	800c3280 	call	800c328 <__mulsi3>
 800dbb8:	b009883a 	mov	r4,r22
 800dbbc:	b80b883a 	mov	r5,r23
 800dbc0:	102b883a 	mov	r21,r2
 800dbc4:	800c3280 	call	800c328 <__mulsi3>
 800dbc8:	da400417 	ldw	r9,16(sp)
 800dbcc:	a085883a 	add	r2,r20,r2
 800dbd0:	d8c00517 	ldw	r3,20(sp)
 800dbd4:	4808d43a 	srli	r4,r9,16
 800dbd8:	d9800717 	ldw	r6,28(sp)
 800dbdc:	da000617 	ldw	r8,24(sp)
 800dbe0:	1109883a 	add	r4,r2,r4
 800dbe4:	2500022e 	bgeu	r4,r20,800dbf0 <__muldf3+0x440>
 800dbe8:	00800074 	movhi	r2,1
 800dbec:	a8ab883a 	add	r21,r21,r2
 800dbf0:	200e943a 	slli	r7,r4,16
 800dbf4:	2004d43a 	srli	r2,r4,16
 800dbf8:	802ed43a 	srli	r23,r16,16
 800dbfc:	843fffcc 	andi	r16,r16,65535
 800dc00:	4d3fffcc 	andi	r20,r9,65535
 800dc04:	9009883a 	mov	r4,r18
 800dc08:	800b883a 	mov	r5,r16
 800dc0c:	3d29883a 	add	r20,r7,r20
 800dc10:	d8c00515 	stw	r3,20(sp)
 800dc14:	d9800715 	stw	r6,28(sp)
 800dc18:	da000615 	stw	r8,24(sp)
 800dc1c:	a8ab883a 	add	r21,r21,r2
 800dc20:	800c3280 	call	800c328 <__mulsi3>
 800dc24:	9009883a 	mov	r4,r18
 800dc28:	b80b883a 	mov	r5,r23
 800dc2c:	d8800315 	stw	r2,12(sp)
 800dc30:	800c3280 	call	800c328 <__mulsi3>
 800dc34:	e009883a 	mov	r4,fp
 800dc38:	b80b883a 	mov	r5,r23
 800dc3c:	1025883a 	mov	r18,r2
 800dc40:	800c3280 	call	800c328 <__mulsi3>
 800dc44:	e009883a 	mov	r4,fp
 800dc48:	800b883a 	mov	r5,r16
 800dc4c:	d8800215 	stw	r2,8(sp)
 800dc50:	800c3280 	call	800c328 <__mulsi3>
 800dc54:	da800317 	ldw	r10,12(sp)
 800dc58:	d9400017 	ldw	r5,0(sp)
 800dc5c:	9085883a 	add	r2,r18,r2
 800dc60:	5008d43a 	srli	r4,r10,16
 800dc64:	a153883a 	add	r9,r20,r5
 800dc68:	d8c00517 	ldw	r3,20(sp)
 800dc6c:	1109883a 	add	r4,r2,r4
 800dc70:	d9800717 	ldw	r6,28(sp)
 800dc74:	da000617 	ldw	r8,24(sp)
 800dc78:	dac00217 	ldw	r11,8(sp)
 800dc7c:	2480022e 	bgeu	r4,r18,800dc88 <__muldf3+0x4d8>
 800dc80:	00800074 	movhi	r2,1
 800dc84:	5897883a 	add	r11,r11,r2
 800dc88:	200e943a 	slli	r7,r4,16
 800dc8c:	2038d43a 	srli	fp,r4,16
 800dc90:	52bfffcc 	andi	r10,r10,65535
 800dc94:	3a8f883a 	add	r7,r7,r10
 800dc98:	8809883a 	mov	r4,r17
 800dc9c:	800b883a 	mov	r5,r16
 800dca0:	d8c00515 	stw	r3,20(sp)
 800dca4:	d9800715 	stw	r6,28(sp)
 800dca8:	d9c00215 	stw	r7,8(sp)
 800dcac:	da000615 	stw	r8,24(sp)
 800dcb0:	da400415 	stw	r9,16(sp)
 800dcb4:	5f39883a 	add	fp,r11,fp
 800dcb8:	800c3280 	call	800c328 <__mulsi3>
 800dcbc:	8809883a 	mov	r4,r17
 800dcc0:	b80b883a 	mov	r5,r23
 800dcc4:	1025883a 	mov	r18,r2
 800dcc8:	800c3280 	call	800c328 <__mulsi3>
 800dccc:	b009883a 	mov	r4,r22
 800dcd0:	b80b883a 	mov	r5,r23
 800dcd4:	d8800315 	stw	r2,12(sp)
 800dcd8:	800c3280 	call	800c328 <__mulsi3>
 800dcdc:	b009883a 	mov	r4,r22
 800dce0:	800b883a 	mov	r5,r16
 800dce4:	1023883a 	mov	r17,r2
 800dce8:	800c3280 	call	800c328 <__mulsi3>
 800dcec:	da800317 	ldw	r10,12(sp)
 800dcf0:	9008d43a 	srli	r4,r18,16
 800dcf4:	d8c00517 	ldw	r3,20(sp)
 800dcf8:	5085883a 	add	r2,r10,r2
 800dcfc:	1109883a 	add	r4,r2,r4
 800dd00:	d9800717 	ldw	r6,28(sp)
 800dd04:	d9c00217 	ldw	r7,8(sp)
 800dd08:	da000617 	ldw	r8,24(sp)
 800dd0c:	da400417 	ldw	r9,16(sp)
 800dd10:	2280022e 	bgeu	r4,r10,800dd1c <__muldf3+0x56c>
 800dd14:	00800074 	movhi	r2,1
 800dd18:	88a3883a 	add	r17,r17,r2
 800dd1c:	2004943a 	slli	r2,r4,16
 800dd20:	94bfffcc 	andi	r18,r18,65535
 800dd24:	4ce7883a 	add	r19,r9,r19
 800dd28:	14a5883a 	add	r18,r2,r18
 800dd2c:	9d29803a 	cmpltu	r20,r19,r20
 800dd30:	9565883a 	add	r18,r18,r21
 800dd34:	9505883a 	add	r2,r18,r20
 800dd38:	99e7883a 	add	r19,r19,r7
 800dd3c:	99cf803a 	cmpltu	r7,r19,r7
 800dd40:	e08b883a 	add	r5,fp,r2
 800dd44:	2008d43a 	srli	r4,r4,16
 800dd48:	29ef883a 	add	r23,r5,r7
 800dd4c:	1529803a 	cmpltu	r20,r2,r20
 800dd50:	956b803a 	cmpltu	r21,r18,r21
 800dd54:	b9cf803a 	cmpltu	r7,r23,r7
 800dd58:	a564b03a 	or	r18,r20,r21
 800dd5c:	2f39803a 	cmpltu	fp,r5,fp
 800dd60:	9125883a 	add	r18,r18,r4
 800dd64:	3f38b03a 	or	fp,r7,fp
 800dd68:	9725883a 	add	r18,r18,fp
 800dd6c:	9804927a 	slli	r2,r19,9
 800dd70:	9463883a 	add	r17,r18,r17
 800dd74:	d9000117 	ldw	r4,4(sp)
 800dd78:	b820d5fa 	srli	r16,r23,23
 800dd7c:	8822927a 	slli	r17,r17,9
 800dd80:	9826d5fa 	srli	r19,r19,23
 800dd84:	1104b03a 	or	r2,r2,r4
 800dd88:	b82e927a 	slli	r23,r23,9
 800dd8c:	1004c03a 	cmpne	r2,r2,zero
 800dd90:	8c20b03a 	or	r16,r17,r16
 800dd94:	14e6b03a 	or	r19,r2,r19
 800dd98:	8080402c 	andhi	r2,r16,256
 800dd9c:	9deeb03a 	or	r23,r19,r23
 800dda0:	10000726 	beq	r2,zero,800ddc0 <__muldf3+0x610>
 800dda4:	b804d07a 	srli	r2,r23,1
 800dda8:	800697fa 	slli	r3,r16,31
 800ddac:	bdc0004c 	andi	r23,r23,1
 800ddb0:	8020d07a 	srli	r16,r16,1
 800ddb4:	b8aeb03a 	or	r23,r23,r2
 800ddb8:	b8eeb03a 	or	r23,r23,r3
 800ddbc:	4007883a 	mov	r3,r8
 800ddc0:	1900ffc4 	addi	r4,r3,1023
 800ddc4:	01004d0e 	bge	zero,r4,800defc <__muldf3+0x74c>
 800ddc8:	b88001cc 	andi	r2,r23,7
 800ddcc:	10000726 	beq	r2,zero,800ddec <__muldf3+0x63c>
 800ddd0:	b94003cc 	andi	r5,r23,15
 800ddd4:	00800104 	movi	r2,4
 800ddd8:	28800426 	beq	r5,r2,800ddec <__muldf3+0x63c>
 800dddc:	b885883a 	add	r2,r23,r2
 800dde0:	15ef803a 	cmpltu	r23,r2,r23
 800dde4:	85e1883a 	add	r16,r16,r23
 800dde8:	102f883a 	mov	r23,r2
 800ddec:	8080402c 	andhi	r2,r16,256
 800ddf0:	10000426 	beq	r2,zero,800de04 <__muldf3+0x654>
 800ddf4:	00bfc034 	movhi	r2,65280
 800ddf8:	10bfffc4 	addi	r2,r2,-1
 800ddfc:	19010004 	addi	r4,r3,1024
 800de00:	80a0703a 	and	r16,r16,r2
 800de04:	0081ff84 	movi	r2,2046
 800de08:	1100340e 	bge	r2,r4,800dedc <__muldf3+0x72c>
 800de0c:	34c0004c 	andi	r19,r6,1
 800de10:	0101ffc4 	movi	r4,2047
 800de14:	0021883a 	mov	r16,zero
 800de18:	002f883a 	mov	r23,zero
 800de1c:	003ebe06 	br	800d918 <__alt_data_end+0xfc00d918>
 800de20:	8080022c 	andhi	r2,r16,8
 800de24:	10000926 	beq	r2,zero,800de4c <__muldf3+0x69c>
 800de28:	8880022c 	andhi	r2,r17,8
 800de2c:	1000071e 	bne	r2,zero,800de4c <__muldf3+0x69c>
 800de30:	00800434 	movhi	r2,16
 800de34:	8c000234 	orhi	r16,r17,8
 800de38:	10bfffc4 	addi	r2,r2,-1
 800de3c:	b027883a 	mov	r19,r22
 800de40:	80a0703a 	and	r16,r16,r2
 800de44:	902f883a 	mov	r23,r18
 800de48:	003f1a06 	br	800dab4 <__alt_data_end+0xfc00dab4>
 800de4c:	00800434 	movhi	r2,16
 800de50:	84000234 	orhi	r16,r16,8
 800de54:	10bfffc4 	addi	r2,r2,-1
 800de58:	80a0703a 	and	r16,r16,r2
 800de5c:	003f1506 	br	800dab4 <__alt_data_end+0xfc00dab4>
 800de60:	3009883a 	mov	r4,r6
 800de64:	d9400215 	stw	r5,8(sp)
 800de68:	d9800715 	stw	r6,28(sp)
 800de6c:	da400415 	stw	r9,16(sp)
 800de70:	da800315 	stw	r10,12(sp)
 800de74:	800eae80 	call	800eae8 <__clzsi2>
 800de78:	10c00804 	addi	r3,r2,32
 800de7c:	010009c4 	movi	r4,39
 800de80:	d9400217 	ldw	r5,8(sp)
 800de84:	d9800717 	ldw	r6,28(sp)
 800de88:	da400417 	ldw	r9,16(sp)
 800de8c:	da800317 	ldw	r10,12(sp)
 800de90:	20fee20e 	bge	r4,r3,800da1c <__alt_data_end+0xfc00da1c>
 800de94:	147ffe04 	addi	r17,r2,-8
 800de98:	9462983a 	sll	r17,r18,r17
 800de9c:	0025883a 	mov	r18,zero
 800dea0:	003ee506 	br	800da38 <__alt_data_end+0xfc00da38>
 800dea4:	d9800715 	stw	r6,28(sp)
 800dea8:	d9c00215 	stw	r7,8(sp)
 800deac:	da400415 	stw	r9,16(sp)
 800deb0:	800eae80 	call	800eae8 <__clzsi2>
 800deb4:	10c00804 	addi	r3,r2,32
 800deb8:	010009c4 	movi	r4,39
 800debc:	d9800717 	ldw	r6,28(sp)
 800dec0:	d9c00217 	ldw	r7,8(sp)
 800dec4:	da400417 	ldw	r9,16(sp)
 800dec8:	20feb40e 	bge	r4,r3,800d99c <__alt_data_end+0xfc00d99c>
 800decc:	143ffe04 	addi	r16,r2,-8
 800ded0:	9420983a 	sll	r16,r18,r16
 800ded4:	002f883a 	mov	r23,zero
 800ded8:	003eb706 	br	800d9b8 <__alt_data_end+0xfc00d9b8>
 800dedc:	8004977a 	slli	r2,r16,29
 800dee0:	b82ed0fa 	srli	r23,r23,3
 800dee4:	8020927a 	slli	r16,r16,9
 800dee8:	2101ffcc 	andi	r4,r4,2047
 800deec:	15eeb03a 	or	r23,r2,r23
 800def0:	8020d33a 	srli	r16,r16,12
 800def4:	34c0004c 	andi	r19,r6,1
 800def8:	003e8706 	br	800d918 <__alt_data_end+0xfc00d918>
 800defc:	00bf0084 	movi	r2,-1022
 800df00:	10c5c83a 	sub	r2,r2,r3
 800df04:	01000e04 	movi	r4,56
 800df08:	2080080e 	bge	r4,r2,800df2c <__muldf3+0x77c>
 800df0c:	34c0004c 	andi	r19,r6,1
 800df10:	0009883a 	mov	r4,zero
 800df14:	0021883a 	mov	r16,zero
 800df18:	002f883a 	mov	r23,zero
 800df1c:	003e7e06 	br	800d918 <__alt_data_end+0xfc00d918>
 800df20:	4007883a 	mov	r3,r8
 800df24:	480d883a 	mov	r6,r9
 800df28:	003fa506 	br	800ddc0 <__alt_data_end+0xfc00ddc0>
 800df2c:	010007c4 	movi	r4,31
 800df30:	20801816 	blt	r4,r2,800df94 <__muldf3+0x7e4>
 800df34:	18c10784 	addi	r3,r3,1054
 800df38:	80c8983a 	sll	r4,r16,r3
 800df3c:	b88ad83a 	srl	r5,r23,r2
 800df40:	b8c6983a 	sll	r3,r23,r3
 800df44:	80a0d83a 	srl	r16,r16,r2
 800df48:	2908b03a 	or	r4,r5,r4
 800df4c:	1804c03a 	cmpne	r2,r3,zero
 800df50:	2088b03a 	or	r4,r4,r2
 800df54:	208001cc 	andi	r2,r4,7
 800df58:	10000726 	beq	r2,zero,800df78 <__muldf3+0x7c8>
 800df5c:	20c003cc 	andi	r3,r4,15
 800df60:	00800104 	movi	r2,4
 800df64:	18800426 	beq	r3,r2,800df78 <__muldf3+0x7c8>
 800df68:	20c00104 	addi	r3,r4,4
 800df6c:	1905803a 	cmpltu	r2,r3,r4
 800df70:	80a1883a 	add	r16,r16,r2
 800df74:	1809883a 	mov	r4,r3
 800df78:	8080202c 	andhi	r2,r16,128
 800df7c:	10001b26 	beq	r2,zero,800dfec <__muldf3+0x83c>
 800df80:	34c0004c 	andi	r19,r6,1
 800df84:	01000044 	movi	r4,1
 800df88:	0021883a 	mov	r16,zero
 800df8c:	002f883a 	mov	r23,zero
 800df90:	003e6106 	br	800d918 <__alt_data_end+0xfc00d918>
 800df94:	013ef884 	movi	r4,-1054
 800df98:	20c9c83a 	sub	r4,r4,r3
 800df9c:	01400804 	movi	r5,32
 800dfa0:	8108d83a 	srl	r4,r16,r4
 800dfa4:	11401526 	beq	r2,r5,800dffc <__muldf3+0x84c>
 800dfa8:	18c10f84 	addi	r3,r3,1086
 800dfac:	80e0983a 	sll	r16,r16,r3
 800dfb0:	85eeb03a 	or	r23,r16,r23
 800dfb4:	b804c03a 	cmpne	r2,r23,zero
 800dfb8:	1108b03a 	or	r4,r2,r4
 800dfbc:	20c001cc 	andi	r3,r4,7
 800dfc0:	1800061e 	bne	r3,zero,800dfdc <__muldf3+0x82c>
 800dfc4:	0021883a 	mov	r16,zero
 800dfc8:	202ed0fa 	srli	r23,r4,3
 800dfcc:	34c0004c 	andi	r19,r6,1
 800dfd0:	0009883a 	mov	r4,zero
 800dfd4:	b8eeb03a 	or	r23,r23,r3
 800dfd8:	003e4f06 	br	800d918 <__alt_data_end+0xfc00d918>
 800dfdc:	20c003cc 	andi	r3,r4,15
 800dfe0:	00800104 	movi	r2,4
 800dfe4:	0021883a 	mov	r16,zero
 800dfe8:	18bfdf1e 	bne	r3,r2,800df68 <__alt_data_end+0xfc00df68>
 800dfec:	8004927a 	slli	r2,r16,9
 800dff0:	8006977a 	slli	r3,r16,29
 800dff4:	1020d33a 	srli	r16,r2,12
 800dff8:	003ff306 	br	800dfc8 <__alt_data_end+0xfc00dfc8>
 800dffc:	0021883a 	mov	r16,zero
 800e000:	003feb06 	br	800dfb0 <__alt_data_end+0xfc00dfb0>
 800e004:	00800434 	movhi	r2,16
 800e008:	84000234 	orhi	r16,r16,8
 800e00c:	10bfffc4 	addi	r2,r2,-1
 800e010:	4cc0004c 	andi	r19,r9,1
 800e014:	80a0703a 	and	r16,r16,r2
 800e018:	003ea606 	br	800dab4 <__alt_data_end+0xfc00dab4>

0800e01c <__subdf3>:
 800e01c:	00c00434 	movhi	r3,16
 800e020:	18ffffc4 	addi	r3,r3,-1
 800e024:	defffb04 	addi	sp,sp,-20
 800e028:	28d2703a 	and	r9,r5,r3
 800e02c:	3814d53a 	srli	r10,r7,20
 800e030:	38c6703a 	and	r3,r7,r3
 800e034:	3004d77a 	srli	r2,r6,29
 800e038:	dc800215 	stw	r18,8(sp)
 800e03c:	dc000015 	stw	r16,0(sp)
 800e040:	2824d7fa 	srli	r18,r5,31
 800e044:	2820d53a 	srli	r16,r5,20
 800e048:	481290fa 	slli	r9,r9,3
 800e04c:	200ad77a 	srli	r5,r4,29
 800e050:	180690fa 	slli	r3,r3,3
 800e054:	dc400115 	stw	r17,4(sp)
 800e058:	dfc00415 	stw	ra,16(sp)
 800e05c:	202290fa 	slli	r17,r4,3
 800e060:	dcc00315 	stw	r19,12(sp)
 800e064:	5281ffcc 	andi	r10,r10,2047
 800e068:	0101ffc4 	movi	r4,2047
 800e06c:	9011883a 	mov	r8,r18
 800e070:	8401ffcc 	andi	r16,r16,2047
 800e074:	94803fcc 	andi	r18,r18,255
 800e078:	494ab03a 	or	r5,r9,r5
 800e07c:	380ed7fa 	srli	r7,r7,31
 800e080:	1886b03a 	or	r3,r3,r2
 800e084:	300c90fa 	slli	r6,r6,3
 800e088:	51009026 	beq	r10,r4,800e2cc <__subdf3+0x2b0>
 800e08c:	39c0005c 	xori	r7,r7,1
 800e090:	8285c83a 	sub	r2,r16,r10
 800e094:	91c06f26 	beq	r18,r7,800e254 <__subdf3+0x238>
 800e098:	0080b10e 	bge	zero,r2,800e360 <__subdf3+0x344>
 800e09c:	50002a1e 	bne	r10,zero,800e148 <__subdf3+0x12c>
 800e0a0:	1988b03a 	or	r4,r3,r6
 800e0a4:	2000941e 	bne	r4,zero,800e2f8 <__subdf3+0x2dc>
 800e0a8:	888001cc 	andi	r2,r17,7
 800e0ac:	10005b26 	beq	r2,zero,800e21c <__subdf3+0x200>
 800e0b0:	88c003cc 	andi	r3,r17,15
 800e0b4:	00800104 	movi	r2,4
 800e0b8:	18805826 	beq	r3,r2,800e21c <__subdf3+0x200>
 800e0bc:	88c00104 	addi	r3,r17,4
 800e0c0:	1c63803a 	cmpltu	r17,r3,r17
 800e0c4:	2c4b883a 	add	r5,r5,r17
 800e0c8:	2880202c 	andhi	r2,r5,128
 800e0cc:	9200004c 	andi	r8,r18,1
 800e0d0:	1823883a 	mov	r17,r3
 800e0d4:	10005426 	beq	r2,zero,800e228 <__subdf3+0x20c>
 800e0d8:	84000044 	addi	r16,r16,1
 800e0dc:	0081ffc4 	movi	r2,2047
 800e0e0:	8080bf26 	beq	r16,r2,800e3e0 <__subdf3+0x3c4>
 800e0e4:	013fe034 	movhi	r4,65408
 800e0e8:	213fffc4 	addi	r4,r4,-1
 800e0ec:	290a703a 	and	r5,r5,r4
 800e0f0:	2804977a 	slli	r2,r5,29
 800e0f4:	280a927a 	slli	r5,r5,9
 800e0f8:	8822d0fa 	srli	r17,r17,3
 800e0fc:	8401ffcc 	andi	r16,r16,2047
 800e100:	2808d33a 	srli	r4,r5,12
 800e104:	1444b03a 	or	r2,r2,r17
 800e108:	8401ffcc 	andi	r16,r16,2047
 800e10c:	800a953a 	slli	r5,r16,20
 800e110:	40c03fcc 	andi	r3,r8,255
 800e114:	04000434 	movhi	r16,16
 800e118:	180697fa 	slli	r3,r3,31
 800e11c:	843fffc4 	addi	r16,r16,-1
 800e120:	2420703a 	and	r16,r4,r16
 800e124:	8160b03a 	or	r16,r16,r5
 800e128:	80c6b03a 	or	r3,r16,r3
 800e12c:	dfc00417 	ldw	ra,16(sp)
 800e130:	dcc00317 	ldw	r19,12(sp)
 800e134:	dc800217 	ldw	r18,8(sp)
 800e138:	dc400117 	ldw	r17,4(sp)
 800e13c:	dc000017 	ldw	r16,0(sp)
 800e140:	dec00504 	addi	sp,sp,20
 800e144:	f800283a 	ret
 800e148:	0101ffc4 	movi	r4,2047
 800e14c:	813fd626 	beq	r16,r4,800e0a8 <__alt_data_end+0xfc00e0a8>
 800e150:	18c02034 	orhi	r3,r3,128
 800e154:	01000e04 	movi	r4,56
 800e158:	2080a416 	blt	r4,r2,800e3ec <__subdf3+0x3d0>
 800e15c:	010007c4 	movi	r4,31
 800e160:	2080c716 	blt	r4,r2,800e480 <__subdf3+0x464>
 800e164:	01000804 	movi	r4,32
 800e168:	2089c83a 	sub	r4,r4,r2
 800e16c:	1910983a 	sll	r8,r3,r4
 800e170:	308ed83a 	srl	r7,r6,r2
 800e174:	3108983a 	sll	r4,r6,r4
 800e178:	1884d83a 	srl	r2,r3,r2
 800e17c:	41ccb03a 	or	r6,r8,r7
 800e180:	2008c03a 	cmpne	r4,r4,zero
 800e184:	310cb03a 	or	r6,r6,r4
 800e188:	898dc83a 	sub	r6,r17,r6
 800e18c:	89a3803a 	cmpltu	r17,r17,r6
 800e190:	288bc83a 	sub	r5,r5,r2
 800e194:	2c4bc83a 	sub	r5,r5,r17
 800e198:	3023883a 	mov	r17,r6
 800e19c:	2880202c 	andhi	r2,r5,128
 800e1a0:	10006b26 	beq	r2,zero,800e350 <__subdf3+0x334>
 800e1a4:	04c02034 	movhi	r19,128
 800e1a8:	9cffffc4 	addi	r19,r19,-1
 800e1ac:	2ce6703a 	and	r19,r5,r19
 800e1b0:	98007c26 	beq	r19,zero,800e3a4 <__subdf3+0x388>
 800e1b4:	9809883a 	mov	r4,r19
 800e1b8:	800eae80 	call	800eae8 <__clzsi2>
 800e1bc:	10fffe04 	addi	r3,r2,-8
 800e1c0:	010007c4 	movi	r4,31
 800e1c4:	20c07d16 	blt	r4,r3,800e3bc <__subdf3+0x3a0>
 800e1c8:	01400a04 	movi	r5,40
 800e1cc:	2885c83a 	sub	r2,r5,r2
 800e1d0:	888ad83a 	srl	r5,r17,r2
 800e1d4:	98e6983a 	sll	r19,r19,r3
 800e1d8:	88e2983a 	sll	r17,r17,r3
 800e1dc:	2ce6b03a 	or	r19,r5,r19
 800e1e0:	1c007a16 	blt	r3,r16,800e3cc <__subdf3+0x3b0>
 800e1e4:	1c21c83a 	sub	r16,r3,r16
 800e1e8:	81400044 	addi	r5,r16,1
 800e1ec:	00c007c4 	movi	r3,31
 800e1f0:	19409616 	blt	r3,r5,800e44c <__subdf3+0x430>
 800e1f4:	1c21c83a 	sub	r16,r3,r16
 800e1f8:	8c08983a 	sll	r4,r17,r16
 800e1fc:	8946d83a 	srl	r3,r17,r5
 800e200:	9c20983a 	sll	r16,r19,r16
 800e204:	2008c03a 	cmpne	r4,r4,zero
 800e208:	994ad83a 	srl	r5,r19,r5
 800e20c:	1c06b03a 	or	r3,r3,r16
 800e210:	1922b03a 	or	r17,r3,r4
 800e214:	0021883a 	mov	r16,zero
 800e218:	003fa306 	br	800e0a8 <__alt_data_end+0xfc00e0a8>
 800e21c:	2880202c 	andhi	r2,r5,128
 800e220:	9200004c 	andi	r8,r18,1
 800e224:	103fac1e 	bne	r2,zero,800e0d8 <__alt_data_end+0xfc00e0d8>
 800e228:	2804977a 	slli	r2,r5,29
 800e22c:	8822d0fa 	srli	r17,r17,3
 800e230:	00c1ffc4 	movi	r3,2047
 800e234:	280ad0fa 	srli	r5,r5,3
 800e238:	1444b03a 	or	r2,r2,r17
 800e23c:	80c02726 	beq	r16,r3,800e2dc <__subdf3+0x2c0>
 800e240:	01000434 	movhi	r4,16
 800e244:	213fffc4 	addi	r4,r4,-1
 800e248:	80e0703a 	and	r16,r16,r3
 800e24c:	2908703a 	and	r4,r5,r4
 800e250:	003fad06 	br	800e108 <__alt_data_end+0xfc00e108>
 800e254:	0080690e 	bge	zero,r2,800e3fc <__subdf3+0x3e0>
 800e258:	50002f26 	beq	r10,zero,800e318 <__subdf3+0x2fc>
 800e25c:	0101ffc4 	movi	r4,2047
 800e260:	813f9126 	beq	r16,r4,800e0a8 <__alt_data_end+0xfc00e0a8>
 800e264:	18c02034 	orhi	r3,r3,128
 800e268:	01000e04 	movi	r4,56
 800e26c:	2080b00e 	bge	r4,r2,800e530 <__subdf3+0x514>
 800e270:	198cb03a 	or	r6,r3,r6
 800e274:	300ec03a 	cmpne	r7,r6,zero
 800e278:	0005883a 	mov	r2,zero
 800e27c:	3c4f883a 	add	r7,r7,r17
 800e280:	3c63803a 	cmpltu	r17,r7,r17
 800e284:	114b883a 	add	r5,r2,r5
 800e288:	2c4b883a 	add	r5,r5,r17
 800e28c:	3823883a 	mov	r17,r7
 800e290:	2880202c 	andhi	r2,r5,128
 800e294:	10002e26 	beq	r2,zero,800e350 <__subdf3+0x334>
 800e298:	84000044 	addi	r16,r16,1
 800e29c:	0081ffc4 	movi	r2,2047
 800e2a0:	8080de26 	beq	r16,r2,800e61c <__subdf3+0x600>
 800e2a4:	00bfe034 	movhi	r2,65408
 800e2a8:	10bfffc4 	addi	r2,r2,-1
 800e2ac:	288a703a 	and	r5,r5,r2
 800e2b0:	880cd07a 	srli	r6,r17,1
 800e2b4:	280897fa 	slli	r4,r5,31
 800e2b8:	88c0004c 	andi	r3,r17,1
 800e2bc:	30e2b03a 	or	r17,r6,r3
 800e2c0:	280ad07a 	srli	r5,r5,1
 800e2c4:	8922b03a 	or	r17,r17,r4
 800e2c8:	003f7706 	br	800e0a8 <__alt_data_end+0xfc00e0a8>
 800e2cc:	1984b03a 	or	r2,r3,r6
 800e2d0:	103f6e26 	beq	r2,zero,800e08c <__alt_data_end+0xfc00e08c>
 800e2d4:	39c03fcc 	andi	r7,r7,255
 800e2d8:	003f6d06 	br	800e090 <__alt_data_end+0xfc00e090>
 800e2dc:	1146b03a 	or	r3,r2,r5
 800e2e0:	18003f26 	beq	r3,zero,800e3e0 <__subdf3+0x3c4>
 800e2e4:	00c00434 	movhi	r3,16
 800e2e8:	29000234 	orhi	r4,r5,8
 800e2ec:	18ffffc4 	addi	r3,r3,-1
 800e2f0:	20c8703a 	and	r4,r4,r3
 800e2f4:	003f8406 	br	800e108 <__alt_data_end+0xfc00e108>
 800e2f8:	10bfffc4 	addi	r2,r2,-1
 800e2fc:	1000501e 	bne	r2,zero,800e440 <__subdf3+0x424>
 800e300:	898fc83a 	sub	r7,r17,r6
 800e304:	89e3803a 	cmpltu	r17,r17,r7
 800e308:	28cbc83a 	sub	r5,r5,r3
 800e30c:	2c4bc83a 	sub	r5,r5,r17
 800e310:	3823883a 	mov	r17,r7
 800e314:	003fa106 	br	800e19c <__alt_data_end+0xfc00e19c>
 800e318:	1988b03a 	or	r4,r3,r6
 800e31c:	203f6226 	beq	r4,zero,800e0a8 <__alt_data_end+0xfc00e0a8>
 800e320:	10bfffc4 	addi	r2,r2,-1
 800e324:	10009b1e 	bne	r2,zero,800e594 <__subdf3+0x578>
 800e328:	344d883a 	add	r6,r6,r17
 800e32c:	3463803a 	cmpltu	r17,r6,r17
 800e330:	194b883a 	add	r5,r3,r5
 800e334:	2c4b883a 	add	r5,r5,r17
 800e338:	3023883a 	mov	r17,r6
 800e33c:	003fd406 	br	800e290 <__alt_data_end+0xfc00e290>
 800e340:	1106b03a 	or	r3,r2,r4
 800e344:	1800b426 	beq	r3,zero,800e618 <__subdf3+0x5fc>
 800e348:	100b883a 	mov	r5,r2
 800e34c:	2023883a 	mov	r17,r4
 800e350:	888001cc 	andi	r2,r17,7
 800e354:	103f561e 	bne	r2,zero,800e0b0 <__alt_data_end+0xfc00e0b0>
 800e358:	9200004c 	andi	r8,r18,1
 800e35c:	003fb206 	br	800e228 <__alt_data_end+0xfc00e228>
 800e360:	1000531e 	bne	r2,zero,800e4b0 <__subdf3+0x494>
 800e364:	80800044 	addi	r2,r16,1
 800e368:	1081ffcc 	andi	r2,r2,2047
 800e36c:	01000044 	movi	r4,1
 800e370:	2080a00e 	bge	r4,r2,800e5f4 <__subdf3+0x5d8>
 800e374:	8985c83a 	sub	r2,r17,r6
 800e378:	8889803a 	cmpltu	r4,r17,r2
 800e37c:	28e7c83a 	sub	r19,r5,r3
 800e380:	9927c83a 	sub	r19,r19,r4
 800e384:	9900202c 	andhi	r4,r19,128
 800e388:	20006226 	beq	r4,zero,800e514 <__subdf3+0x4f8>
 800e38c:	3463c83a 	sub	r17,r6,r17
 800e390:	194bc83a 	sub	r5,r3,r5
 800e394:	344d803a 	cmpltu	r6,r6,r17
 800e398:	29a7c83a 	sub	r19,r5,r6
 800e39c:	3825883a 	mov	r18,r7
 800e3a0:	983f841e 	bne	r19,zero,800e1b4 <__alt_data_end+0xfc00e1b4>
 800e3a4:	8809883a 	mov	r4,r17
 800e3a8:	800eae80 	call	800eae8 <__clzsi2>
 800e3ac:	10800804 	addi	r2,r2,32
 800e3b0:	10fffe04 	addi	r3,r2,-8
 800e3b4:	010007c4 	movi	r4,31
 800e3b8:	20ff830e 	bge	r4,r3,800e1c8 <__alt_data_end+0xfc00e1c8>
 800e3bc:	14fff604 	addi	r19,r2,-40
 800e3c0:	8ce6983a 	sll	r19,r17,r19
 800e3c4:	0023883a 	mov	r17,zero
 800e3c8:	1c3f860e 	bge	r3,r16,800e1e4 <__alt_data_end+0xfc00e1e4>
 800e3cc:	017fe034 	movhi	r5,65408
 800e3d0:	297fffc4 	addi	r5,r5,-1
 800e3d4:	80e1c83a 	sub	r16,r16,r3
 800e3d8:	994a703a 	and	r5,r19,r5
 800e3dc:	003f3206 	br	800e0a8 <__alt_data_end+0xfc00e0a8>
 800e3e0:	0009883a 	mov	r4,zero
 800e3e4:	0005883a 	mov	r2,zero
 800e3e8:	003f4706 	br	800e108 <__alt_data_end+0xfc00e108>
 800e3ec:	198cb03a 	or	r6,r3,r6
 800e3f0:	300cc03a 	cmpne	r6,r6,zero
 800e3f4:	0005883a 	mov	r2,zero
 800e3f8:	003f6306 	br	800e188 <__alt_data_end+0xfc00e188>
 800e3fc:	10009d1e 	bne	r2,zero,800e674 <__subdf3+0x658>
 800e400:	81c00044 	addi	r7,r16,1
 800e404:	3881ffcc 	andi	r2,r7,2047
 800e408:	02400044 	movi	r9,1
 800e40c:	4880680e 	bge	r9,r2,800e5b0 <__subdf3+0x594>
 800e410:	0081ffc4 	movi	r2,2047
 800e414:	3880ae26 	beq	r7,r2,800e6d0 <__subdf3+0x6b4>
 800e418:	344d883a 	add	r6,r6,r17
 800e41c:	3463803a 	cmpltu	r17,r6,r17
 800e420:	194b883a 	add	r5,r3,r5
 800e424:	2c4b883a 	add	r5,r5,r17
 800e428:	282297fa 	slli	r17,r5,31
 800e42c:	300cd07a 	srli	r6,r6,1
 800e430:	280ad07a 	srli	r5,r5,1
 800e434:	3821883a 	mov	r16,r7
 800e438:	89a2b03a 	or	r17,r17,r6
 800e43c:	003f1a06 	br	800e0a8 <__alt_data_end+0xfc00e0a8>
 800e440:	0101ffc4 	movi	r4,2047
 800e444:	813f431e 	bne	r16,r4,800e154 <__alt_data_end+0xfc00e154>
 800e448:	003f1706 	br	800e0a8 <__alt_data_end+0xfc00e0a8>
 800e44c:	80bff844 	addi	r2,r16,-31
 800e450:	00c00804 	movi	r3,32
 800e454:	9884d83a 	srl	r2,r19,r2
 800e458:	28c05126 	beq	r5,r3,800e5a0 <__subdf3+0x584>
 800e45c:	00c00fc4 	movi	r3,63
 800e460:	1c21c83a 	sub	r16,r3,r16
 800e464:	9c26983a 	sll	r19,r19,r16
 800e468:	9c62b03a 	or	r17,r19,r17
 800e46c:	8822c03a 	cmpne	r17,r17,zero
 800e470:	88a2b03a 	or	r17,r17,r2
 800e474:	000b883a 	mov	r5,zero
 800e478:	0021883a 	mov	r16,zero
 800e47c:	003fb406 	br	800e350 <__alt_data_end+0xfc00e350>
 800e480:	113ff804 	addi	r4,r2,-32
 800e484:	01c00804 	movi	r7,32
 800e488:	1908d83a 	srl	r4,r3,r4
 800e48c:	11c04626 	beq	r2,r7,800e5a8 <__subdf3+0x58c>
 800e490:	01c01004 	movi	r7,64
 800e494:	3885c83a 	sub	r2,r7,r2
 800e498:	1884983a 	sll	r2,r3,r2
 800e49c:	118cb03a 	or	r6,r2,r6
 800e4a0:	300cc03a 	cmpne	r6,r6,zero
 800e4a4:	310cb03a 	or	r6,r6,r4
 800e4a8:	0005883a 	mov	r2,zero
 800e4ac:	003f3606 	br	800e188 <__alt_data_end+0xfc00e188>
 800e4b0:	80002b26 	beq	r16,zero,800e560 <__subdf3+0x544>
 800e4b4:	0101ffc4 	movi	r4,2047
 800e4b8:	51006926 	beq	r10,r4,800e660 <__subdf3+0x644>
 800e4bc:	0085c83a 	sub	r2,zero,r2
 800e4c0:	29402034 	orhi	r5,r5,128
 800e4c4:	01000e04 	movi	r4,56
 800e4c8:	20807d16 	blt	r4,r2,800e6c0 <__subdf3+0x6a4>
 800e4cc:	010007c4 	movi	r4,31
 800e4d0:	2080d916 	blt	r4,r2,800e838 <__subdf3+0x81c>
 800e4d4:	01000804 	movi	r4,32
 800e4d8:	2089c83a 	sub	r4,r4,r2
 800e4dc:	2912983a 	sll	r9,r5,r4
 800e4e0:	8890d83a 	srl	r8,r17,r2
 800e4e4:	8908983a 	sll	r4,r17,r4
 800e4e8:	2884d83a 	srl	r2,r5,r2
 800e4ec:	4a22b03a 	or	r17,r9,r8
 800e4f0:	2008c03a 	cmpne	r4,r4,zero
 800e4f4:	8922b03a 	or	r17,r17,r4
 800e4f8:	3463c83a 	sub	r17,r6,r17
 800e4fc:	1885c83a 	sub	r2,r3,r2
 800e500:	344d803a 	cmpltu	r6,r6,r17
 800e504:	118bc83a 	sub	r5,r2,r6
 800e508:	5021883a 	mov	r16,r10
 800e50c:	3825883a 	mov	r18,r7
 800e510:	003f2206 	br	800e19c <__alt_data_end+0xfc00e19c>
 800e514:	9886b03a 	or	r3,r19,r2
 800e518:	18001c1e 	bne	r3,zero,800e58c <__subdf3+0x570>
 800e51c:	0011883a 	mov	r8,zero
 800e520:	000b883a 	mov	r5,zero
 800e524:	0023883a 	mov	r17,zero
 800e528:	0021883a 	mov	r16,zero
 800e52c:	003f3e06 	br	800e228 <__alt_data_end+0xfc00e228>
 800e530:	010007c4 	movi	r4,31
 800e534:	20803c16 	blt	r4,r2,800e628 <__subdf3+0x60c>
 800e538:	01000804 	movi	r4,32
 800e53c:	2089c83a 	sub	r4,r4,r2
 800e540:	1912983a 	sll	r9,r3,r4
 800e544:	308ed83a 	srl	r7,r6,r2
 800e548:	3108983a 	sll	r4,r6,r4
 800e54c:	1884d83a 	srl	r2,r3,r2
 800e550:	49ceb03a 	or	r7,r9,r7
 800e554:	2008c03a 	cmpne	r4,r4,zero
 800e558:	390eb03a 	or	r7,r7,r4
 800e55c:	003f4706 	br	800e27c <__alt_data_end+0xfc00e27c>
 800e560:	2c48b03a 	or	r4,r5,r17
 800e564:	20003e26 	beq	r4,zero,800e660 <__subdf3+0x644>
 800e568:	0084303a 	nor	r2,zero,r2
 800e56c:	10003a1e 	bne	r2,zero,800e658 <__subdf3+0x63c>
 800e570:	3463c83a 	sub	r17,r6,r17
 800e574:	194bc83a 	sub	r5,r3,r5
 800e578:	344d803a 	cmpltu	r6,r6,r17
 800e57c:	298bc83a 	sub	r5,r5,r6
 800e580:	5021883a 	mov	r16,r10
 800e584:	3825883a 	mov	r18,r7
 800e588:	003f0406 	br	800e19c <__alt_data_end+0xfc00e19c>
 800e58c:	1023883a 	mov	r17,r2
 800e590:	003f0706 	br	800e1b0 <__alt_data_end+0xfc00e1b0>
 800e594:	0101ffc4 	movi	r4,2047
 800e598:	813f331e 	bne	r16,r4,800e268 <__alt_data_end+0xfc00e268>
 800e59c:	003ec206 	br	800e0a8 <__alt_data_end+0xfc00e0a8>
 800e5a0:	0027883a 	mov	r19,zero
 800e5a4:	003fb006 	br	800e468 <__alt_data_end+0xfc00e468>
 800e5a8:	0005883a 	mov	r2,zero
 800e5ac:	003fbb06 	br	800e49c <__alt_data_end+0xfc00e49c>
 800e5b0:	2c44b03a 	or	r2,r5,r17
 800e5b4:	80008b1e 	bne	r16,zero,800e7e4 <__subdf3+0x7c8>
 800e5b8:	1000b526 	beq	r2,zero,800e890 <__subdf3+0x874>
 800e5bc:	1984b03a 	or	r2,r3,r6
 800e5c0:	103eb926 	beq	r2,zero,800e0a8 <__alt_data_end+0xfc00e0a8>
 800e5c4:	3449883a 	add	r4,r6,r17
 800e5c8:	2463803a 	cmpltu	r17,r4,r17
 800e5cc:	194b883a 	add	r5,r3,r5
 800e5d0:	2c4b883a 	add	r5,r5,r17
 800e5d4:	2880202c 	andhi	r2,r5,128
 800e5d8:	2023883a 	mov	r17,r4
 800e5dc:	103f5c26 	beq	r2,zero,800e350 <__alt_data_end+0xfc00e350>
 800e5e0:	00bfe034 	movhi	r2,65408
 800e5e4:	10bfffc4 	addi	r2,r2,-1
 800e5e8:	4821883a 	mov	r16,r9
 800e5ec:	288a703a 	and	r5,r5,r2
 800e5f0:	003ead06 	br	800e0a8 <__alt_data_end+0xfc00e0a8>
 800e5f4:	2c44b03a 	or	r2,r5,r17
 800e5f8:	8000291e 	bne	r16,zero,800e6a0 <__subdf3+0x684>
 800e5fc:	10004f1e 	bne	r2,zero,800e73c <__subdf3+0x720>
 800e600:	1984b03a 	or	r2,r3,r6
 800e604:	10000426 	beq	r2,zero,800e618 <__subdf3+0x5fc>
 800e608:	180b883a 	mov	r5,r3
 800e60c:	3023883a 	mov	r17,r6
 800e610:	3825883a 	mov	r18,r7
 800e614:	003ea406 	br	800e0a8 <__alt_data_end+0xfc00e0a8>
 800e618:	0011883a 	mov	r8,zero
 800e61c:	000b883a 	mov	r5,zero
 800e620:	0023883a 	mov	r17,zero
 800e624:	003f0006 	br	800e228 <__alt_data_end+0xfc00e228>
 800e628:	11fff804 	addi	r7,r2,-32
 800e62c:	19c8d83a 	srl	r4,r3,r7
 800e630:	01c00804 	movi	r7,32
 800e634:	11c07e26 	beq	r2,r7,800e830 <__subdf3+0x814>
 800e638:	01c01004 	movi	r7,64
 800e63c:	3885c83a 	sub	r2,r7,r2
 800e640:	1884983a 	sll	r2,r3,r2
 800e644:	118cb03a 	or	r6,r2,r6
 800e648:	300ec03a 	cmpne	r7,r6,zero
 800e64c:	390eb03a 	or	r7,r7,r4
 800e650:	0005883a 	mov	r2,zero
 800e654:	003f0906 	br	800e27c <__alt_data_end+0xfc00e27c>
 800e658:	0101ffc4 	movi	r4,2047
 800e65c:	513f991e 	bne	r10,r4,800e4c4 <__alt_data_end+0xfc00e4c4>
 800e660:	180b883a 	mov	r5,r3
 800e664:	3023883a 	mov	r17,r6
 800e668:	5021883a 	mov	r16,r10
 800e66c:	3825883a 	mov	r18,r7
 800e670:	003e8d06 	br	800e0a8 <__alt_data_end+0xfc00e0a8>
 800e674:	80001a1e 	bne	r16,zero,800e6e0 <__subdf3+0x6c4>
 800e678:	2c48b03a 	or	r4,r5,r17
 800e67c:	20005526 	beq	r4,zero,800e7d4 <__subdf3+0x7b8>
 800e680:	0084303a 	nor	r2,zero,r2
 800e684:	1000511e 	bne	r2,zero,800e7cc <__subdf3+0x7b0>
 800e688:	89a3883a 	add	r17,r17,r6
 800e68c:	194b883a 	add	r5,r3,r5
 800e690:	898d803a 	cmpltu	r6,r17,r6
 800e694:	298b883a 	add	r5,r5,r6
 800e698:	5021883a 	mov	r16,r10
 800e69c:	003efc06 	br	800e290 <__alt_data_end+0xfc00e290>
 800e6a0:	1000341e 	bne	r2,zero,800e774 <__subdf3+0x758>
 800e6a4:	1984b03a 	or	r2,r3,r6
 800e6a8:	10006f26 	beq	r2,zero,800e868 <__subdf3+0x84c>
 800e6ac:	180b883a 	mov	r5,r3
 800e6b0:	3023883a 	mov	r17,r6
 800e6b4:	3825883a 	mov	r18,r7
 800e6b8:	0401ffc4 	movi	r16,2047
 800e6bc:	003e7a06 	br	800e0a8 <__alt_data_end+0xfc00e0a8>
 800e6c0:	2c62b03a 	or	r17,r5,r17
 800e6c4:	8822c03a 	cmpne	r17,r17,zero
 800e6c8:	0005883a 	mov	r2,zero
 800e6cc:	003f8a06 	br	800e4f8 <__alt_data_end+0xfc00e4f8>
 800e6d0:	3821883a 	mov	r16,r7
 800e6d4:	000b883a 	mov	r5,zero
 800e6d8:	0023883a 	mov	r17,zero
 800e6dc:	003ed206 	br	800e228 <__alt_data_end+0xfc00e228>
 800e6e0:	0101ffc4 	movi	r4,2047
 800e6e4:	51003b26 	beq	r10,r4,800e7d4 <__subdf3+0x7b8>
 800e6e8:	0085c83a 	sub	r2,zero,r2
 800e6ec:	29402034 	orhi	r5,r5,128
 800e6f0:	01000e04 	movi	r4,56
 800e6f4:	20806216 	blt	r4,r2,800e880 <__subdf3+0x864>
 800e6f8:	010007c4 	movi	r4,31
 800e6fc:	20806b16 	blt	r4,r2,800e8ac <__subdf3+0x890>
 800e700:	01000804 	movi	r4,32
 800e704:	2089c83a 	sub	r4,r4,r2
 800e708:	2912983a 	sll	r9,r5,r4
 800e70c:	888ed83a 	srl	r7,r17,r2
 800e710:	8908983a 	sll	r4,r17,r4
 800e714:	2884d83a 	srl	r2,r5,r2
 800e718:	49e2b03a 	or	r17,r9,r7
 800e71c:	2008c03a 	cmpne	r4,r4,zero
 800e720:	8922b03a 	or	r17,r17,r4
 800e724:	89a3883a 	add	r17,r17,r6
 800e728:	10c5883a 	add	r2,r2,r3
 800e72c:	898d803a 	cmpltu	r6,r17,r6
 800e730:	118b883a 	add	r5,r2,r6
 800e734:	5021883a 	mov	r16,r10
 800e738:	003ed506 	br	800e290 <__alt_data_end+0xfc00e290>
 800e73c:	1984b03a 	or	r2,r3,r6
 800e740:	103e5926 	beq	r2,zero,800e0a8 <__alt_data_end+0xfc00e0a8>
 800e744:	8989c83a 	sub	r4,r17,r6
 800e748:	8911803a 	cmpltu	r8,r17,r4
 800e74c:	28c5c83a 	sub	r2,r5,r3
 800e750:	1205c83a 	sub	r2,r2,r8
 800e754:	1200202c 	andhi	r8,r2,128
 800e758:	403ef926 	beq	r8,zero,800e340 <__alt_data_end+0xfc00e340>
 800e75c:	3463c83a 	sub	r17,r6,r17
 800e760:	194bc83a 	sub	r5,r3,r5
 800e764:	344d803a 	cmpltu	r6,r6,r17
 800e768:	298bc83a 	sub	r5,r5,r6
 800e76c:	3825883a 	mov	r18,r7
 800e770:	003e4d06 	br	800e0a8 <__alt_data_end+0xfc00e0a8>
 800e774:	1984b03a 	or	r2,r3,r6
 800e778:	10002b26 	beq	r2,zero,800e828 <__subdf3+0x80c>
 800e77c:	2808d0fa 	srli	r4,r5,3
 800e780:	8822d0fa 	srli	r17,r17,3
 800e784:	280a977a 	slli	r5,r5,29
 800e788:	2080022c 	andhi	r2,r4,8
 800e78c:	2c62b03a 	or	r17,r5,r17
 800e790:	10000826 	beq	r2,zero,800e7b4 <__subdf3+0x798>
 800e794:	1810d0fa 	srli	r8,r3,3
 800e798:	4080022c 	andhi	r2,r8,8
 800e79c:	1000051e 	bne	r2,zero,800e7b4 <__subdf3+0x798>
 800e7a0:	300cd0fa 	srli	r6,r6,3
 800e7a4:	1804977a 	slli	r2,r3,29
 800e7a8:	4009883a 	mov	r4,r8
 800e7ac:	3825883a 	mov	r18,r7
 800e7b0:	11a2b03a 	or	r17,r2,r6
 800e7b4:	880ad77a 	srli	r5,r17,29
 800e7b8:	200890fa 	slli	r4,r4,3
 800e7bc:	882290fa 	slli	r17,r17,3
 800e7c0:	0401ffc4 	movi	r16,2047
 800e7c4:	290ab03a 	or	r5,r5,r4
 800e7c8:	003e3706 	br	800e0a8 <__alt_data_end+0xfc00e0a8>
 800e7cc:	0101ffc4 	movi	r4,2047
 800e7d0:	513fc71e 	bne	r10,r4,800e6f0 <__alt_data_end+0xfc00e6f0>
 800e7d4:	180b883a 	mov	r5,r3
 800e7d8:	3023883a 	mov	r17,r6
 800e7dc:	5021883a 	mov	r16,r10
 800e7e0:	003e3106 	br	800e0a8 <__alt_data_end+0xfc00e0a8>
 800e7e4:	10002d26 	beq	r2,zero,800e89c <__subdf3+0x880>
 800e7e8:	1984b03a 	or	r2,r3,r6
 800e7ec:	10000e26 	beq	r2,zero,800e828 <__subdf3+0x80c>
 800e7f0:	2808d0fa 	srli	r4,r5,3
 800e7f4:	8822d0fa 	srli	r17,r17,3
 800e7f8:	280a977a 	slli	r5,r5,29
 800e7fc:	2080022c 	andhi	r2,r4,8
 800e800:	2c62b03a 	or	r17,r5,r17
 800e804:	103feb26 	beq	r2,zero,800e7b4 <__alt_data_end+0xfc00e7b4>
 800e808:	180ed0fa 	srli	r7,r3,3
 800e80c:	3880022c 	andhi	r2,r7,8
 800e810:	103fe81e 	bne	r2,zero,800e7b4 <__alt_data_end+0xfc00e7b4>
 800e814:	300cd0fa 	srli	r6,r6,3
 800e818:	1804977a 	slli	r2,r3,29
 800e81c:	3809883a 	mov	r4,r7
 800e820:	11a2b03a 	or	r17,r2,r6
 800e824:	003fe306 	br	800e7b4 <__alt_data_end+0xfc00e7b4>
 800e828:	0401ffc4 	movi	r16,2047
 800e82c:	003e1e06 	br	800e0a8 <__alt_data_end+0xfc00e0a8>
 800e830:	0005883a 	mov	r2,zero
 800e834:	003f8306 	br	800e644 <__alt_data_end+0xfc00e644>
 800e838:	113ff804 	addi	r4,r2,-32
 800e83c:	02000804 	movi	r8,32
 800e840:	2908d83a 	srl	r4,r5,r4
 800e844:	12002526 	beq	r2,r8,800e8dc <__subdf3+0x8c0>
 800e848:	02001004 	movi	r8,64
 800e84c:	4085c83a 	sub	r2,r8,r2
 800e850:	288a983a 	sll	r5,r5,r2
 800e854:	2c62b03a 	or	r17,r5,r17
 800e858:	8822c03a 	cmpne	r17,r17,zero
 800e85c:	8922b03a 	or	r17,r17,r4
 800e860:	0005883a 	mov	r2,zero
 800e864:	003f2406 	br	800e4f8 <__alt_data_end+0xfc00e4f8>
 800e868:	01402034 	movhi	r5,128
 800e86c:	0011883a 	mov	r8,zero
 800e870:	297fffc4 	addi	r5,r5,-1
 800e874:	047ffe04 	movi	r17,-8
 800e878:	0401ffc4 	movi	r16,2047
 800e87c:	003e6a06 	br	800e228 <__alt_data_end+0xfc00e228>
 800e880:	2c62b03a 	or	r17,r5,r17
 800e884:	8822c03a 	cmpne	r17,r17,zero
 800e888:	0005883a 	mov	r2,zero
 800e88c:	003fa506 	br	800e724 <__alt_data_end+0xfc00e724>
 800e890:	180b883a 	mov	r5,r3
 800e894:	3023883a 	mov	r17,r6
 800e898:	003e0306 	br	800e0a8 <__alt_data_end+0xfc00e0a8>
 800e89c:	180b883a 	mov	r5,r3
 800e8a0:	3023883a 	mov	r17,r6
 800e8a4:	0401ffc4 	movi	r16,2047
 800e8a8:	003dff06 	br	800e0a8 <__alt_data_end+0xfc00e0a8>
 800e8ac:	113ff804 	addi	r4,r2,-32
 800e8b0:	01c00804 	movi	r7,32
 800e8b4:	2908d83a 	srl	r4,r5,r4
 800e8b8:	11c00a26 	beq	r2,r7,800e8e4 <__subdf3+0x8c8>
 800e8bc:	01c01004 	movi	r7,64
 800e8c0:	3885c83a 	sub	r2,r7,r2
 800e8c4:	288a983a 	sll	r5,r5,r2
 800e8c8:	2c62b03a 	or	r17,r5,r17
 800e8cc:	8822c03a 	cmpne	r17,r17,zero
 800e8d0:	8922b03a 	or	r17,r17,r4
 800e8d4:	0005883a 	mov	r2,zero
 800e8d8:	003f9206 	br	800e724 <__alt_data_end+0xfc00e724>
 800e8dc:	000b883a 	mov	r5,zero
 800e8e0:	003fdc06 	br	800e854 <__alt_data_end+0xfc00e854>
 800e8e4:	000b883a 	mov	r5,zero
 800e8e8:	003ff706 	br	800e8c8 <__alt_data_end+0xfc00e8c8>

0800e8ec <__fixdfsi>:
 800e8ec:	2806d53a 	srli	r3,r5,20
 800e8f0:	00800434 	movhi	r2,16
 800e8f4:	10bfffc4 	addi	r2,r2,-1
 800e8f8:	18c1ffcc 	andi	r3,r3,2047
 800e8fc:	0180ff84 	movi	r6,1022
 800e900:	2884703a 	and	r2,r5,r2
 800e904:	280ad7fa 	srli	r5,r5,31
 800e908:	30c0130e 	bge	r6,r3,800e958 <__fixdfsi+0x6c>
 800e90c:	01810744 	movi	r6,1053
 800e910:	30c00d16 	blt	r6,r3,800e948 <__fixdfsi+0x5c>
 800e914:	01810cc4 	movi	r6,1075
 800e918:	30cdc83a 	sub	r6,r6,r3
 800e91c:	01c007c4 	movi	r7,31
 800e920:	10800434 	orhi	r2,r2,16
 800e924:	39800e0e 	bge	r7,r6,800e960 <__fixdfsi+0x74>
 800e928:	010104c4 	movi	r4,1043
 800e92c:	20c7c83a 	sub	r3,r4,r3
 800e930:	10c6d83a 	srl	r3,r2,r3
 800e934:	29403fcc 	andi	r5,r5,255
 800e938:	0145c83a 	sub	r2,zero,r5
 800e93c:	1884f03a 	xor	r2,r3,r2
 800e940:	1145883a 	add	r2,r2,r5
 800e944:	f800283a 	ret
 800e948:	00a00034 	movhi	r2,32768
 800e94c:	10bfffc4 	addi	r2,r2,-1
 800e950:	2885883a 	add	r2,r5,r2
 800e954:	f800283a 	ret
 800e958:	0005883a 	mov	r2,zero
 800e95c:	f800283a 	ret
 800e960:	18fefb44 	addi	r3,r3,-1043
 800e964:	2188d83a 	srl	r4,r4,r6
 800e968:	10c6983a 	sll	r3,r2,r3
 800e96c:	20c6b03a 	or	r3,r4,r3
 800e970:	003ff006 	br	800e934 <__alt_data_end+0xfc00e934>

0800e974 <__floatsidf>:
 800e974:	defffd04 	addi	sp,sp,-12
 800e978:	dc400115 	stw	r17,4(sp)
 800e97c:	dfc00215 	stw	ra,8(sp)
 800e980:	dc000015 	stw	r16,0(sp)
 800e984:	2023883a 	mov	r17,r4
 800e988:	20001426 	beq	r4,zero,800e9dc <__floatsidf+0x68>
 800e98c:	2020d7fa 	srli	r16,r4,31
 800e990:	80000126 	beq	r16,zero,800e998 <__floatsidf+0x24>
 800e994:	0123c83a 	sub	r17,zero,r4
 800e998:	8809883a 	mov	r4,r17
 800e99c:	800eae80 	call	800eae8 <__clzsi2>
 800e9a0:	01410784 	movi	r5,1054
 800e9a4:	00c00284 	movi	r3,10
 800e9a8:	288bc83a 	sub	r5,r5,r2
 800e9ac:	18801c16 	blt	r3,r2,800ea20 <__floatsidf+0xac>
 800e9b0:	00c002c4 	movi	r3,11
 800e9b4:	1887c83a 	sub	r3,r3,r2
 800e9b8:	88c8d83a 	srl	r4,r17,r3
 800e9bc:	00c00434 	movhi	r3,16
 800e9c0:	18ffffc4 	addi	r3,r3,-1
 800e9c4:	10800544 	addi	r2,r2,21
 800e9c8:	20c8703a 	and	r4,r4,r3
 800e9cc:	8884983a 	sll	r2,r17,r2
 800e9d0:	28c1ffcc 	andi	r3,r5,2047
 800e9d4:	800d883a 	mov	r6,r16
 800e9d8:	00000406 	br	800e9ec <__floatsidf+0x78>
 800e9dc:	000d883a 	mov	r6,zero
 800e9e0:	0007883a 	mov	r3,zero
 800e9e4:	0009883a 	mov	r4,zero
 800e9e8:	0005883a 	mov	r2,zero
 800e9ec:	180a953a 	slli	r5,r3,20
 800e9f0:	31803fcc 	andi	r6,r6,255
 800e9f4:	00c00434 	movhi	r3,16
 800e9f8:	300c97fa 	slli	r6,r6,31
 800e9fc:	18ffffc4 	addi	r3,r3,-1
 800ea00:	20c6703a 	and	r3,r4,r3
 800ea04:	1946b03a 	or	r3,r3,r5
 800ea08:	1986b03a 	or	r3,r3,r6
 800ea0c:	dfc00217 	ldw	ra,8(sp)
 800ea10:	dc400117 	ldw	r17,4(sp)
 800ea14:	dc000017 	ldw	r16,0(sp)
 800ea18:	dec00304 	addi	sp,sp,12
 800ea1c:	f800283a 	ret
 800ea20:	10fffd44 	addi	r3,r2,-11
 800ea24:	88c8983a 	sll	r4,r17,r3
 800ea28:	00800434 	movhi	r2,16
 800ea2c:	10bfffc4 	addi	r2,r2,-1
 800ea30:	2088703a 	and	r4,r4,r2
 800ea34:	28c1ffcc 	andi	r3,r5,2047
 800ea38:	800d883a 	mov	r6,r16
 800ea3c:	0005883a 	mov	r2,zero
 800ea40:	003fea06 	br	800e9ec <__alt_data_end+0xfc00e9ec>

0800ea44 <__floatunsidf>:
 800ea44:	defffe04 	addi	sp,sp,-8
 800ea48:	dc000015 	stw	r16,0(sp)
 800ea4c:	dfc00115 	stw	ra,4(sp)
 800ea50:	2021883a 	mov	r16,r4
 800ea54:	20001026 	beq	r4,zero,800ea98 <__floatunsidf+0x54>
 800ea58:	800eae80 	call	800eae8 <__clzsi2>
 800ea5c:	01410784 	movi	r5,1054
 800ea60:	100d883a 	mov	r6,r2
 800ea64:	288bc83a 	sub	r5,r5,r2
 800ea68:	00800284 	movi	r2,10
 800ea6c:	11801616 	blt	r2,r6,800eac8 <__floatunsidf+0x84>
 800ea70:	008002c4 	movi	r2,11
 800ea74:	1185c83a 	sub	r2,r2,r6
 800ea78:	8084d83a 	srl	r2,r16,r2
 800ea7c:	00c00434 	movhi	r3,16
 800ea80:	31c00544 	addi	r7,r6,21
 800ea84:	18ffffc4 	addi	r3,r3,-1
 800ea88:	81e0983a 	sll	r16,r16,r7
 800ea8c:	10cc703a 	and	r6,r2,r3
 800ea90:	2941ffcc 	andi	r5,r5,2047
 800ea94:	00000206 	br	800eaa0 <__floatunsidf+0x5c>
 800ea98:	000b883a 	mov	r5,zero
 800ea9c:	000d883a 	mov	r6,zero
 800eaa0:	280a953a 	slli	r5,r5,20
 800eaa4:	00c00434 	movhi	r3,16
 800eaa8:	18ffffc4 	addi	r3,r3,-1
 800eaac:	30c6703a 	and	r3,r6,r3
 800eab0:	8005883a 	mov	r2,r16
 800eab4:	1946b03a 	or	r3,r3,r5
 800eab8:	dfc00117 	ldw	ra,4(sp)
 800eabc:	dc000017 	ldw	r16,0(sp)
 800eac0:	dec00204 	addi	sp,sp,8
 800eac4:	f800283a 	ret
 800eac8:	31bffd44 	addi	r6,r6,-11
 800eacc:	818c983a 	sll	r6,r16,r6
 800ead0:	00800434 	movhi	r2,16
 800ead4:	10bfffc4 	addi	r2,r2,-1
 800ead8:	2941ffcc 	andi	r5,r5,2047
 800eadc:	0021883a 	mov	r16,zero
 800eae0:	308c703a 	and	r6,r6,r2
 800eae4:	003fee06 	br	800eaa0 <__alt_data_end+0xfc00eaa0>

0800eae8 <__clzsi2>:
 800eae8:	00bfffd4 	movui	r2,65535
 800eaec:	11000b36 	bltu	r2,r4,800eb1c <__clzsi2+0x34>
 800eaf0:	00803fc4 	movi	r2,255
 800eaf4:	1100122e 	bgeu	r2,r4,800eb40 <__clzsi2+0x58>
 800eaf8:	00c00204 	movi	r3,8
 800eafc:	01400604 	movi	r5,24
 800eb00:	20c8d83a 	srl	r4,r4,r3
 800eb04:	00820074 	movhi	r2,2049
 800eb08:	10872c04 	addi	r2,r2,7344
 800eb0c:	1109883a 	add	r4,r2,r4
 800eb10:	20800003 	ldbu	r2,0(r4)
 800eb14:	2885c83a 	sub	r2,r5,r2
 800eb18:	f800283a 	ret
 800eb1c:	00804034 	movhi	r2,256
 800eb20:	10bfffc4 	addi	r2,r2,-1
 800eb24:	11000336 	bltu	r2,r4,800eb34 <__clzsi2+0x4c>
 800eb28:	00c00404 	movi	r3,16
 800eb2c:	180b883a 	mov	r5,r3
 800eb30:	003ff306 	br	800eb00 <__alt_data_end+0xfc00eb00>
 800eb34:	00c00604 	movi	r3,24
 800eb38:	01400204 	movi	r5,8
 800eb3c:	003ff006 	br	800eb00 <__alt_data_end+0xfc00eb00>
 800eb40:	0007883a 	mov	r3,zero
 800eb44:	01400804 	movi	r5,32
 800eb48:	003fed06 	br	800eb00 <__alt_data_end+0xfc00eb00>

0800eb4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800eb4c:	defffe04 	addi	sp,sp,-8
 800eb50:	dfc00115 	stw	ra,4(sp)
 800eb54:	df000015 	stw	fp,0(sp)
 800eb58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800eb5c:	00820074 	movhi	r2,2049
 800eb60:	108e2f04 	addi	r2,r2,14524
 800eb64:	10800017 	ldw	r2,0(r2)
 800eb68:	10000526 	beq	r2,zero,800eb80 <alt_get_errno+0x34>
 800eb6c:	00820074 	movhi	r2,2049
 800eb70:	108e2f04 	addi	r2,r2,14524
 800eb74:	10800017 	ldw	r2,0(r2)
 800eb78:	103ee83a 	callr	r2
 800eb7c:	00000206 	br	800eb88 <alt_get_errno+0x3c>
 800eb80:	00820074 	movhi	r2,2049
 800eb84:	1094f604 	addi	r2,r2,21464
}
 800eb88:	e037883a 	mov	sp,fp
 800eb8c:	dfc00117 	ldw	ra,4(sp)
 800eb90:	df000017 	ldw	fp,0(sp)
 800eb94:	dec00204 	addi	sp,sp,8
 800eb98:	f800283a 	ret

0800eb9c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800eb9c:	defffb04 	addi	sp,sp,-20
 800eba0:	dfc00415 	stw	ra,16(sp)
 800eba4:	df000315 	stw	fp,12(sp)
 800eba8:	df000304 	addi	fp,sp,12
 800ebac:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800ebb0:	e0bfff17 	ldw	r2,-4(fp)
 800ebb4:	10000816 	blt	r2,zero,800ebd8 <close+0x3c>
 800ebb8:	e13fff17 	ldw	r4,-4(fp)
 800ebbc:	01400304 	movi	r5,12
 800ebc0:	800c3280 	call	800c328 <__mulsi3>
 800ebc4:	1007883a 	mov	r3,r2
 800ebc8:	00820074 	movhi	r2,2049
 800ebcc:	1089ac04 	addi	r2,r2,9904
 800ebd0:	1885883a 	add	r2,r3,r2
 800ebd4:	00000106 	br	800ebdc <close+0x40>
 800ebd8:	0005883a 	mov	r2,zero
 800ebdc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800ebe0:	e0bffd17 	ldw	r2,-12(fp)
 800ebe4:	10001926 	beq	r2,zero,800ec4c <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800ebe8:	e0bffd17 	ldw	r2,-12(fp)
 800ebec:	10800017 	ldw	r2,0(r2)
 800ebf0:	10800417 	ldw	r2,16(r2)
 800ebf4:	10000626 	beq	r2,zero,800ec10 <close+0x74>
 800ebf8:	e0bffd17 	ldw	r2,-12(fp)
 800ebfc:	10800017 	ldw	r2,0(r2)
 800ec00:	10800417 	ldw	r2,16(r2)
 800ec04:	e13ffd17 	ldw	r4,-12(fp)
 800ec08:	103ee83a 	callr	r2
 800ec0c:	00000106 	br	800ec14 <close+0x78>
 800ec10:	0005883a 	mov	r2,zero
 800ec14:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800ec18:	e13fff17 	ldw	r4,-4(fp)
 800ec1c:	800f2c00 	call	800f2c0 <alt_release_fd>
    if (rval < 0)
 800ec20:	e0bffe17 	ldw	r2,-8(fp)
 800ec24:	1000070e 	bge	r2,zero,800ec44 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 800ec28:	800eb4c0 	call	800eb4c <alt_get_errno>
 800ec2c:	1007883a 	mov	r3,r2
 800ec30:	e0bffe17 	ldw	r2,-8(fp)
 800ec34:	0085c83a 	sub	r2,zero,r2
 800ec38:	18800015 	stw	r2,0(r3)
      return -1;
 800ec3c:	00bfffc4 	movi	r2,-1
 800ec40:	00000706 	br	800ec60 <close+0xc4>
    }
    return 0;
 800ec44:	0005883a 	mov	r2,zero
 800ec48:	00000506 	br	800ec60 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ec4c:	800eb4c0 	call	800eb4c <alt_get_errno>
 800ec50:	1007883a 	mov	r3,r2
 800ec54:	00801444 	movi	r2,81
 800ec58:	18800015 	stw	r2,0(r3)
    return -1;
 800ec5c:	00bfffc4 	movi	r2,-1
  }
}
 800ec60:	e037883a 	mov	sp,fp
 800ec64:	dfc00117 	ldw	ra,4(sp)
 800ec68:	df000017 	ldw	fp,0(sp)
 800ec6c:	dec00204 	addi	sp,sp,8
 800ec70:	f800283a 	ret

0800ec74 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800ec74:	defffc04 	addi	sp,sp,-16
 800ec78:	df000315 	stw	fp,12(sp)
 800ec7c:	df000304 	addi	fp,sp,12
 800ec80:	e13ffd15 	stw	r4,-12(fp)
 800ec84:	e17ffe15 	stw	r5,-8(fp)
 800ec88:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800ec8c:	e0bfff17 	ldw	r2,-4(fp)
}
 800ec90:	e037883a 	mov	sp,fp
 800ec94:	df000017 	ldw	fp,0(sp)
 800ec98:	dec00104 	addi	sp,sp,4
 800ec9c:	f800283a 	ret

0800eca0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800eca0:	defffe04 	addi	sp,sp,-8
 800eca4:	dfc00115 	stw	ra,4(sp)
 800eca8:	df000015 	stw	fp,0(sp)
 800ecac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ecb0:	00820074 	movhi	r2,2049
 800ecb4:	108e2f04 	addi	r2,r2,14524
 800ecb8:	10800017 	ldw	r2,0(r2)
 800ecbc:	10000526 	beq	r2,zero,800ecd4 <alt_get_errno+0x34>
 800ecc0:	00820074 	movhi	r2,2049
 800ecc4:	108e2f04 	addi	r2,r2,14524
 800ecc8:	10800017 	ldw	r2,0(r2)
 800eccc:	103ee83a 	callr	r2
 800ecd0:	00000206 	br	800ecdc <alt_get_errno+0x3c>
 800ecd4:	00820074 	movhi	r2,2049
 800ecd8:	1094f604 	addi	r2,r2,21464
}
 800ecdc:	e037883a 	mov	sp,fp
 800ece0:	dfc00117 	ldw	ra,4(sp)
 800ece4:	df000017 	ldw	fp,0(sp)
 800ece8:	dec00204 	addi	sp,sp,8
 800ecec:	f800283a 	ret

0800ecf0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800ecf0:	defffb04 	addi	sp,sp,-20
 800ecf4:	dfc00415 	stw	ra,16(sp)
 800ecf8:	df000315 	stw	fp,12(sp)
 800ecfc:	df000304 	addi	fp,sp,12
 800ed00:	e13ffe15 	stw	r4,-8(fp)
 800ed04:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ed08:	e0bffe17 	ldw	r2,-8(fp)
 800ed0c:	10000816 	blt	r2,zero,800ed30 <fstat+0x40>
 800ed10:	e13ffe17 	ldw	r4,-8(fp)
 800ed14:	01400304 	movi	r5,12
 800ed18:	800c3280 	call	800c328 <__mulsi3>
 800ed1c:	1007883a 	mov	r3,r2
 800ed20:	00820074 	movhi	r2,2049
 800ed24:	1089ac04 	addi	r2,r2,9904
 800ed28:	1885883a 	add	r2,r3,r2
 800ed2c:	00000106 	br	800ed34 <fstat+0x44>
 800ed30:	0005883a 	mov	r2,zero
 800ed34:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800ed38:	e0bffd17 	ldw	r2,-12(fp)
 800ed3c:	10001026 	beq	r2,zero,800ed80 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800ed40:	e0bffd17 	ldw	r2,-12(fp)
 800ed44:	10800017 	ldw	r2,0(r2)
 800ed48:	10800817 	ldw	r2,32(r2)
 800ed4c:	10000726 	beq	r2,zero,800ed6c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 800ed50:	e0bffd17 	ldw	r2,-12(fp)
 800ed54:	10800017 	ldw	r2,0(r2)
 800ed58:	10800817 	ldw	r2,32(r2)
 800ed5c:	e13ffd17 	ldw	r4,-12(fp)
 800ed60:	e17fff17 	ldw	r5,-4(fp)
 800ed64:	103ee83a 	callr	r2
 800ed68:	00000a06 	br	800ed94 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800ed6c:	e0bfff17 	ldw	r2,-4(fp)
 800ed70:	00c80004 	movi	r3,8192
 800ed74:	10c00115 	stw	r3,4(r2)
      return 0;
 800ed78:	0005883a 	mov	r2,zero
 800ed7c:	00000506 	br	800ed94 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ed80:	800eca00 	call	800eca0 <alt_get_errno>
 800ed84:	1007883a 	mov	r3,r2
 800ed88:	00801444 	movi	r2,81
 800ed8c:	18800015 	stw	r2,0(r3)
    return -1;
 800ed90:	00bfffc4 	movi	r2,-1
  }
}
 800ed94:	e037883a 	mov	sp,fp
 800ed98:	dfc00117 	ldw	ra,4(sp)
 800ed9c:	df000017 	ldw	fp,0(sp)
 800eda0:	dec00204 	addi	sp,sp,8
 800eda4:	f800283a 	ret

0800eda8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800eda8:	defffe04 	addi	sp,sp,-8
 800edac:	dfc00115 	stw	ra,4(sp)
 800edb0:	df000015 	stw	fp,0(sp)
 800edb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800edb8:	00820074 	movhi	r2,2049
 800edbc:	108e2f04 	addi	r2,r2,14524
 800edc0:	10800017 	ldw	r2,0(r2)
 800edc4:	10000526 	beq	r2,zero,800eddc <alt_get_errno+0x34>
 800edc8:	00820074 	movhi	r2,2049
 800edcc:	108e2f04 	addi	r2,r2,14524
 800edd0:	10800017 	ldw	r2,0(r2)
 800edd4:	103ee83a 	callr	r2
 800edd8:	00000206 	br	800ede4 <alt_get_errno+0x3c>
 800eddc:	00820074 	movhi	r2,2049
 800ede0:	1094f604 	addi	r2,r2,21464
}
 800ede4:	e037883a 	mov	sp,fp
 800ede8:	dfc00117 	ldw	ra,4(sp)
 800edec:	df000017 	ldw	fp,0(sp)
 800edf0:	dec00204 	addi	sp,sp,8
 800edf4:	f800283a 	ret

0800edf8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800edf8:	deffed04 	addi	sp,sp,-76
 800edfc:	dfc01215 	stw	ra,72(sp)
 800ee00:	df001115 	stw	fp,68(sp)
 800ee04:	df001104 	addi	fp,sp,68
 800ee08:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ee0c:	e0bfff17 	ldw	r2,-4(fp)
 800ee10:	10000816 	blt	r2,zero,800ee34 <isatty+0x3c>
 800ee14:	e13fff17 	ldw	r4,-4(fp)
 800ee18:	01400304 	movi	r5,12
 800ee1c:	800c3280 	call	800c328 <__mulsi3>
 800ee20:	1007883a 	mov	r3,r2
 800ee24:	00820074 	movhi	r2,2049
 800ee28:	1089ac04 	addi	r2,r2,9904
 800ee2c:	1885883a 	add	r2,r3,r2
 800ee30:	00000106 	br	800ee38 <isatty+0x40>
 800ee34:	0005883a 	mov	r2,zero
 800ee38:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800ee3c:	e0bfef17 	ldw	r2,-68(fp)
 800ee40:	10000e26 	beq	r2,zero,800ee7c <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800ee44:	e0bfef17 	ldw	r2,-68(fp)
 800ee48:	10800017 	ldw	r2,0(r2)
 800ee4c:	10800817 	ldw	r2,32(r2)
 800ee50:	1000021e 	bne	r2,zero,800ee5c <isatty+0x64>
    {
      return 1;
 800ee54:	00800044 	movi	r2,1
 800ee58:	00000d06 	br	800ee90 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800ee5c:	e0bff004 	addi	r2,fp,-64
 800ee60:	e13fff17 	ldw	r4,-4(fp)
 800ee64:	100b883a 	mov	r5,r2
 800ee68:	800ecf00 	call	800ecf0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800ee6c:	e0bff117 	ldw	r2,-60(fp)
 800ee70:	10880020 	cmpeqi	r2,r2,8192
 800ee74:	10803fcc 	andi	r2,r2,255
 800ee78:	00000506 	br	800ee90 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ee7c:	800eda80 	call	800eda8 <alt_get_errno>
 800ee80:	1007883a 	mov	r3,r2
 800ee84:	00801444 	movi	r2,81
 800ee88:	18800015 	stw	r2,0(r3)
    return 0;
 800ee8c:	0005883a 	mov	r2,zero
  }
}
 800ee90:	e037883a 	mov	sp,fp
 800ee94:	dfc00117 	ldw	ra,4(sp)
 800ee98:	df000017 	ldw	fp,0(sp)
 800ee9c:	dec00204 	addi	sp,sp,8
 800eea0:	f800283a 	ret

0800eea4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800eea4:	defffc04 	addi	sp,sp,-16
 800eea8:	df000315 	stw	fp,12(sp)
 800eeac:	df000304 	addi	fp,sp,12
 800eeb0:	e13ffd15 	stw	r4,-12(fp)
 800eeb4:	e17ffe15 	stw	r5,-8(fp)
 800eeb8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800eebc:	e0fffe17 	ldw	r3,-8(fp)
 800eec0:	e0bffd17 	ldw	r2,-12(fp)
 800eec4:	18800c26 	beq	r3,r2,800eef8 <alt_load_section+0x54>
  {
    while( to != end )
 800eec8:	00000806 	br	800eeec <alt_load_section+0x48>
    {
      *to++ = *from++;
 800eecc:	e0bffe17 	ldw	r2,-8(fp)
 800eed0:	10c00104 	addi	r3,r2,4
 800eed4:	e0fffe15 	stw	r3,-8(fp)
 800eed8:	e0fffd17 	ldw	r3,-12(fp)
 800eedc:	19000104 	addi	r4,r3,4
 800eee0:	e13ffd15 	stw	r4,-12(fp)
 800eee4:	18c00017 	ldw	r3,0(r3)
 800eee8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800eeec:	e0fffe17 	ldw	r3,-8(fp)
 800eef0:	e0bfff17 	ldw	r2,-4(fp)
 800eef4:	18bff51e 	bne	r3,r2,800eecc <__alt_data_end+0xfc00eecc>
    {
      *to++ = *from++;
    }
  }
}
 800eef8:	e037883a 	mov	sp,fp
 800eefc:	df000017 	ldw	fp,0(sp)
 800ef00:	dec00104 	addi	sp,sp,4
 800ef04:	f800283a 	ret

0800ef08 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800ef08:	defffe04 	addi	sp,sp,-8
 800ef0c:	dfc00115 	stw	ra,4(sp)
 800ef10:	df000015 	stw	fp,0(sp)
 800ef14:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800ef18:	01020074 	movhi	r4,2049
 800ef1c:	210e3404 	addi	r4,r4,14544
 800ef20:	01420074 	movhi	r5,2049
 800ef24:	29477904 	addi	r5,r5,7652
 800ef28:	01820074 	movhi	r6,2049
 800ef2c:	318e3404 	addi	r6,r6,14544
 800ef30:	800eea40 	call	800eea4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800ef34:	01020034 	movhi	r4,2048
 800ef38:	21000804 	addi	r4,r4,32
 800ef3c:	01420034 	movhi	r5,2048
 800ef40:	29400804 	addi	r5,r5,32
 800ef44:	01820034 	movhi	r6,2048
 800ef48:	31806f04 	addi	r6,r6,444
 800ef4c:	800eea40 	call	800eea4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800ef50:	01020074 	movhi	r4,2049
 800ef54:	2104e404 	addi	r4,r4,5008
 800ef58:	01420074 	movhi	r5,2049
 800ef5c:	2944e404 	addi	r5,r5,5008
 800ef60:	01820074 	movhi	r6,2049
 800ef64:	31877904 	addi	r6,r6,7652
 800ef68:	800eea40 	call	800eea4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800ef6c:	80103080 	call	8010308 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800ef70:	80104d00 	call	80104d0 <alt_icache_flush_all>
}
 800ef74:	e037883a 	mov	sp,fp
 800ef78:	dfc00117 	ldw	ra,4(sp)
 800ef7c:	df000017 	ldw	fp,0(sp)
 800ef80:	dec00204 	addi	sp,sp,8
 800ef84:	f800283a 	ret

0800ef88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800ef88:	defffe04 	addi	sp,sp,-8
 800ef8c:	dfc00115 	stw	ra,4(sp)
 800ef90:	df000015 	stw	fp,0(sp)
 800ef94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800ef98:	00820074 	movhi	r2,2049
 800ef9c:	108e2f04 	addi	r2,r2,14524
 800efa0:	10800017 	ldw	r2,0(r2)
 800efa4:	10000526 	beq	r2,zero,800efbc <alt_get_errno+0x34>
 800efa8:	00820074 	movhi	r2,2049
 800efac:	108e2f04 	addi	r2,r2,14524
 800efb0:	10800017 	ldw	r2,0(r2)
 800efb4:	103ee83a 	callr	r2
 800efb8:	00000206 	br	800efc4 <alt_get_errno+0x3c>
 800efbc:	00820074 	movhi	r2,2049
 800efc0:	1094f604 	addi	r2,r2,21464
}
 800efc4:	e037883a 	mov	sp,fp
 800efc8:	dfc00117 	ldw	ra,4(sp)
 800efcc:	df000017 	ldw	fp,0(sp)
 800efd0:	dec00204 	addi	sp,sp,8
 800efd4:	f800283a 	ret

0800efd8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800efd8:	defff904 	addi	sp,sp,-28
 800efdc:	dfc00615 	stw	ra,24(sp)
 800efe0:	df000515 	stw	fp,20(sp)
 800efe4:	df000504 	addi	fp,sp,20
 800efe8:	e13ffd15 	stw	r4,-12(fp)
 800efec:	e17ffe15 	stw	r5,-8(fp)
 800eff0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800eff4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800eff8:	e0bffd17 	ldw	r2,-12(fp)
 800effc:	10000816 	blt	r2,zero,800f020 <lseek+0x48>
 800f000:	e13ffd17 	ldw	r4,-12(fp)
 800f004:	01400304 	movi	r5,12
 800f008:	800c3280 	call	800c328 <__mulsi3>
 800f00c:	1007883a 	mov	r3,r2
 800f010:	00820074 	movhi	r2,2049
 800f014:	1089ac04 	addi	r2,r2,9904
 800f018:	1885883a 	add	r2,r3,r2
 800f01c:	00000106 	br	800f024 <lseek+0x4c>
 800f020:	0005883a 	mov	r2,zero
 800f024:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800f028:	e0bffc17 	ldw	r2,-16(fp)
 800f02c:	10001026 	beq	r2,zero,800f070 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800f030:	e0bffc17 	ldw	r2,-16(fp)
 800f034:	10800017 	ldw	r2,0(r2)
 800f038:	10800717 	ldw	r2,28(r2)
 800f03c:	10000926 	beq	r2,zero,800f064 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800f040:	e0bffc17 	ldw	r2,-16(fp)
 800f044:	10800017 	ldw	r2,0(r2)
 800f048:	10800717 	ldw	r2,28(r2)
 800f04c:	e13ffc17 	ldw	r4,-16(fp)
 800f050:	e17ffe17 	ldw	r5,-8(fp)
 800f054:	e1bfff17 	ldw	r6,-4(fp)
 800f058:	103ee83a 	callr	r2
 800f05c:	e0bffb15 	stw	r2,-20(fp)
 800f060:	00000506 	br	800f078 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800f064:	00bfde84 	movi	r2,-134
 800f068:	e0bffb15 	stw	r2,-20(fp)
 800f06c:	00000206 	br	800f078 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 800f070:	00bfebc4 	movi	r2,-81
 800f074:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800f078:	e0bffb17 	ldw	r2,-20(fp)
 800f07c:	1000070e 	bge	r2,zero,800f09c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 800f080:	800ef880 	call	800ef88 <alt_get_errno>
 800f084:	1007883a 	mov	r3,r2
 800f088:	e0bffb17 	ldw	r2,-20(fp)
 800f08c:	0085c83a 	sub	r2,zero,r2
 800f090:	18800015 	stw	r2,0(r3)
    rc = -1;
 800f094:	00bfffc4 	movi	r2,-1
 800f098:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800f09c:	e0bffb17 	ldw	r2,-20(fp)
}
 800f0a0:	e037883a 	mov	sp,fp
 800f0a4:	dfc00117 	ldw	ra,4(sp)
 800f0a8:	df000017 	ldw	fp,0(sp)
 800f0ac:	dec00204 	addi	sp,sp,8
 800f0b0:	f800283a 	ret

0800f0b4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800f0b4:	defffd04 	addi	sp,sp,-12
 800f0b8:	dfc00215 	stw	ra,8(sp)
 800f0bc:	df000115 	stw	fp,4(sp)
 800f0c0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800f0c4:	0009883a 	mov	r4,zero
 800f0c8:	800f5a80 	call	800f5a8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800f0cc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800f0d0:	800f5dc0 	call	800f5dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800f0d4:	01020074 	movhi	r4,2049
 800f0d8:	21076f04 	addi	r4,r4,7612
 800f0dc:	01420074 	movhi	r5,2049
 800f0e0:	29476f04 	addi	r5,r5,7612
 800f0e4:	01820074 	movhi	r6,2049
 800f0e8:	31876f04 	addi	r6,r6,7612
 800f0ec:	801089c0 	call	801089c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800f0f0:	80104180 	call	8010418 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800f0f4:	01020074 	movhi	r4,2049
 800f0f8:	21011d04 	addi	r4,r4,1140
 800f0fc:	8010fec0 	call	8010fec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800f100:	d126d317 	ldw	r4,-25780(gp)
 800f104:	d0e6d417 	ldw	r3,-25776(gp)
 800f108:	d0a6d517 	ldw	r2,-25772(gp)
 800f10c:	180b883a 	mov	r5,r3
 800f110:	100d883a 	mov	r6,r2
 800f114:	80003680 	call	8000368 <main>
 800f118:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800f11c:	01000044 	movi	r4,1
 800f120:	800eb9c0 	call	800eb9c <close>
  exit (result);
 800f124:	e13fff17 	ldw	r4,-4(fp)
 800f128:	80110000 	call	8011000 <exit>

0800f12c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800f12c:	defffe04 	addi	sp,sp,-8
 800f130:	df000115 	stw	fp,4(sp)
 800f134:	df000104 	addi	fp,sp,4
 800f138:	e13fff15 	stw	r4,-4(fp)
}
 800f13c:	e037883a 	mov	sp,fp
 800f140:	df000017 	ldw	fp,0(sp)
 800f144:	dec00104 	addi	sp,sp,4
 800f148:	f800283a 	ret

0800f14c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800f14c:	defffe04 	addi	sp,sp,-8
 800f150:	df000115 	stw	fp,4(sp)
 800f154:	df000104 	addi	fp,sp,4
 800f158:	e13fff15 	stw	r4,-4(fp)
}
 800f15c:	e037883a 	mov	sp,fp
 800f160:	df000017 	ldw	fp,0(sp)
 800f164:	dec00104 	addi	sp,sp,4
 800f168:	f800283a 	ret

0800f16c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f16c:	defffe04 	addi	sp,sp,-8
 800f170:	dfc00115 	stw	ra,4(sp)
 800f174:	df000015 	stw	fp,0(sp)
 800f178:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f17c:	00820074 	movhi	r2,2049
 800f180:	108e2f04 	addi	r2,r2,14524
 800f184:	10800017 	ldw	r2,0(r2)
 800f188:	10000526 	beq	r2,zero,800f1a0 <alt_get_errno+0x34>
 800f18c:	00820074 	movhi	r2,2049
 800f190:	108e2f04 	addi	r2,r2,14524
 800f194:	10800017 	ldw	r2,0(r2)
 800f198:	103ee83a 	callr	r2
 800f19c:	00000206 	br	800f1a8 <alt_get_errno+0x3c>
 800f1a0:	00820074 	movhi	r2,2049
 800f1a4:	1094f604 	addi	r2,r2,21464
}
 800f1a8:	e037883a 	mov	sp,fp
 800f1ac:	dfc00117 	ldw	ra,4(sp)
 800f1b0:	df000017 	ldw	fp,0(sp)
 800f1b4:	dec00204 	addi	sp,sp,8
 800f1b8:	f800283a 	ret

0800f1bc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800f1bc:	defff904 	addi	sp,sp,-28
 800f1c0:	dfc00615 	stw	ra,24(sp)
 800f1c4:	df000515 	stw	fp,20(sp)
 800f1c8:	df000504 	addi	fp,sp,20
 800f1cc:	e13ffd15 	stw	r4,-12(fp)
 800f1d0:	e17ffe15 	stw	r5,-8(fp)
 800f1d4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f1d8:	e0bffd17 	ldw	r2,-12(fp)
 800f1dc:	10000816 	blt	r2,zero,800f200 <read+0x44>
 800f1e0:	e13ffd17 	ldw	r4,-12(fp)
 800f1e4:	01400304 	movi	r5,12
 800f1e8:	800c3280 	call	800c328 <__mulsi3>
 800f1ec:	1007883a 	mov	r3,r2
 800f1f0:	00820074 	movhi	r2,2049
 800f1f4:	1089ac04 	addi	r2,r2,9904
 800f1f8:	1885883a 	add	r2,r3,r2
 800f1fc:	00000106 	br	800f204 <read+0x48>
 800f200:	0005883a 	mov	r2,zero
 800f204:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800f208:	e0bffb17 	ldw	r2,-20(fp)
 800f20c:	10002226 	beq	r2,zero,800f298 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800f210:	e0bffb17 	ldw	r2,-20(fp)
 800f214:	10800217 	ldw	r2,8(r2)
 800f218:	108000cc 	andi	r2,r2,3
 800f21c:	10800060 	cmpeqi	r2,r2,1
 800f220:	1000181e 	bne	r2,zero,800f284 <read+0xc8>
        (fd->dev->read))
 800f224:	e0bffb17 	ldw	r2,-20(fp)
 800f228:	10800017 	ldw	r2,0(r2)
 800f22c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800f230:	10001426 	beq	r2,zero,800f284 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800f234:	e0bffb17 	ldw	r2,-20(fp)
 800f238:	10800017 	ldw	r2,0(r2)
 800f23c:	10800517 	ldw	r2,20(r2)
 800f240:	e0ffff17 	ldw	r3,-4(fp)
 800f244:	e13ffb17 	ldw	r4,-20(fp)
 800f248:	e17ffe17 	ldw	r5,-8(fp)
 800f24c:	180d883a 	mov	r6,r3
 800f250:	103ee83a 	callr	r2
 800f254:	e0bffc15 	stw	r2,-16(fp)
 800f258:	e0bffc17 	ldw	r2,-16(fp)
 800f25c:	1000070e 	bge	r2,zero,800f27c <read+0xc0>
        {
          ALT_ERRNO = -rval;
 800f260:	800f16c0 	call	800f16c <alt_get_errno>
 800f264:	1007883a 	mov	r3,r2
 800f268:	e0bffc17 	ldw	r2,-16(fp)
 800f26c:	0085c83a 	sub	r2,zero,r2
 800f270:	18800015 	stw	r2,0(r3)
          return -1;
 800f274:	00bfffc4 	movi	r2,-1
 800f278:	00000c06 	br	800f2ac <read+0xf0>
        }
        return rval;
 800f27c:	e0bffc17 	ldw	r2,-16(fp)
 800f280:	00000a06 	br	800f2ac <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800f284:	800f16c0 	call	800f16c <alt_get_errno>
 800f288:	1007883a 	mov	r3,r2
 800f28c:	00800344 	movi	r2,13
 800f290:	18800015 	stw	r2,0(r3)
 800f294:	00000406 	br	800f2a8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800f298:	800f16c0 	call	800f16c <alt_get_errno>
 800f29c:	1007883a 	mov	r3,r2
 800f2a0:	00801444 	movi	r2,81
 800f2a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800f2a8:	00bfffc4 	movi	r2,-1
}
 800f2ac:	e037883a 	mov	sp,fp
 800f2b0:	dfc00117 	ldw	ra,4(sp)
 800f2b4:	df000017 	ldw	fp,0(sp)
 800f2b8:	dec00204 	addi	sp,sp,8
 800f2bc:	f800283a 	ret

0800f2c0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800f2c0:	defffc04 	addi	sp,sp,-16
 800f2c4:	dfc00315 	stw	ra,12(sp)
 800f2c8:	df000215 	stw	fp,8(sp)
 800f2cc:	dc000115 	stw	r16,4(sp)
 800f2d0:	df000204 	addi	fp,sp,8
 800f2d4:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 800f2d8:	e0bffe17 	ldw	r2,-8(fp)
 800f2dc:	108000d0 	cmplti	r2,r2,3
 800f2e0:	1000111e 	bne	r2,zero,800f328 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 800f2e4:	04020074 	movhi	r16,2049
 800f2e8:	8409ac04 	addi	r16,r16,9904
 800f2ec:	e0bffe17 	ldw	r2,-8(fp)
 800f2f0:	1009883a 	mov	r4,r2
 800f2f4:	01400304 	movi	r5,12
 800f2f8:	800c3280 	call	800c328 <__mulsi3>
 800f2fc:	8085883a 	add	r2,r16,r2
 800f300:	10800204 	addi	r2,r2,8
 800f304:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800f308:	04020074 	movhi	r16,2049
 800f30c:	8409ac04 	addi	r16,r16,9904
 800f310:	e0bffe17 	ldw	r2,-8(fp)
 800f314:	1009883a 	mov	r4,r2
 800f318:	01400304 	movi	r5,12
 800f31c:	800c3280 	call	800c328 <__mulsi3>
 800f320:	8085883a 	add	r2,r16,r2
 800f324:	10000015 	stw	zero,0(r2)
  }
}
 800f328:	e6ffff04 	addi	sp,fp,-4
 800f32c:	dfc00217 	ldw	ra,8(sp)
 800f330:	df000117 	ldw	fp,4(sp)
 800f334:	dc000017 	ldw	r16,0(sp)
 800f338:	dec00304 	addi	sp,sp,12
 800f33c:	f800283a 	ret

0800f340 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800f340:	defff904 	addi	sp,sp,-28
 800f344:	df000615 	stw	fp,24(sp)
 800f348:	df000604 	addi	fp,sp,24
 800f34c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f350:	0005303a 	rdctl	r2,status
 800f354:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f358:	e0fffc17 	ldw	r3,-16(fp)
 800f35c:	00bfff84 	movi	r2,-2
 800f360:	1884703a 	and	r2,r3,r2
 800f364:	1001703a 	wrctl	status,r2
  
  return context;
 800f368:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800f36c:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800f370:	d0a00c17 	ldw	r2,-32720(gp)
 800f374:	10c000c4 	addi	r3,r2,3
 800f378:	00bfff04 	movi	r2,-4
 800f37c:	1884703a 	and	r2,r3,r2
 800f380:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800f384:	d0e00c17 	ldw	r3,-32720(gp)
 800f388:	e0bfff17 	ldw	r2,-4(fp)
 800f38c:	1887883a 	add	r3,r3,r2
 800f390:	00830034 	movhi	r2,3072
 800f394:	10800004 	addi	r2,r2,0
 800f398:	10c0062e 	bgeu	r2,r3,800f3b4 <sbrk+0x74>
 800f39c:	e0bffa17 	ldw	r2,-24(fp)
 800f3a0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f3a4:	e0bffd17 	ldw	r2,-12(fp)
 800f3a8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800f3ac:	00bfffc4 	movi	r2,-1
 800f3b0:	00000b06 	br	800f3e0 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800f3b4:	d0a00c17 	ldw	r2,-32720(gp)
 800f3b8:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800f3bc:	d0e00c17 	ldw	r3,-32720(gp)
 800f3c0:	e0bfff17 	ldw	r2,-4(fp)
 800f3c4:	1885883a 	add	r2,r3,r2
 800f3c8:	d0a00c15 	stw	r2,-32720(gp)
 800f3cc:	e0bffa17 	ldw	r2,-24(fp)
 800f3d0:	e0bffe15 	stw	r2,-8(fp)
 800f3d4:	e0bffe17 	ldw	r2,-8(fp)
 800f3d8:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800f3dc:	e0bffb17 	ldw	r2,-20(fp)
} 
 800f3e0:	e037883a 	mov	sp,fp
 800f3e4:	df000017 	ldw	fp,0(sp)
 800f3e8:	dec00104 	addi	sp,sp,4
 800f3ec:	f800283a 	ret

0800f3f0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800f3f0:	defffd04 	addi	sp,sp,-12
 800f3f4:	dfc00215 	stw	ra,8(sp)
 800f3f8:	df000115 	stw	fp,4(sp)
 800f3fc:	df000104 	addi	fp,sp,4
 800f400:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 800f404:	e13fff17 	ldw	r4,-4(fp)
 800f408:	80101b00 	call	80101b0 <alt_busy_sleep>
}
 800f40c:	e037883a 	mov	sp,fp
 800f410:	dfc00117 	ldw	ra,4(sp)
 800f414:	df000017 	ldw	fp,0(sp)
 800f418:	dec00204 	addi	sp,sp,8
 800f41c:	f800283a 	ret

0800f420 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f420:	defffe04 	addi	sp,sp,-8
 800f424:	dfc00115 	stw	ra,4(sp)
 800f428:	df000015 	stw	fp,0(sp)
 800f42c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f430:	00820074 	movhi	r2,2049
 800f434:	108e2f04 	addi	r2,r2,14524
 800f438:	10800017 	ldw	r2,0(r2)
 800f43c:	10000526 	beq	r2,zero,800f454 <alt_get_errno+0x34>
 800f440:	00820074 	movhi	r2,2049
 800f444:	108e2f04 	addi	r2,r2,14524
 800f448:	10800017 	ldw	r2,0(r2)
 800f44c:	103ee83a 	callr	r2
 800f450:	00000206 	br	800f45c <alt_get_errno+0x3c>
 800f454:	00820074 	movhi	r2,2049
 800f458:	1094f604 	addi	r2,r2,21464
}
 800f45c:	e037883a 	mov	sp,fp
 800f460:	dfc00117 	ldw	ra,4(sp)
 800f464:	df000017 	ldw	fp,0(sp)
 800f468:	dec00204 	addi	sp,sp,8
 800f46c:	f800283a 	ret

0800f470 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800f470:	defff904 	addi	sp,sp,-28
 800f474:	dfc00615 	stw	ra,24(sp)
 800f478:	df000515 	stw	fp,20(sp)
 800f47c:	df000504 	addi	fp,sp,20
 800f480:	e13ffd15 	stw	r4,-12(fp)
 800f484:	e17ffe15 	stw	r5,-8(fp)
 800f488:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f48c:	e0bffd17 	ldw	r2,-12(fp)
 800f490:	10000816 	blt	r2,zero,800f4b4 <write+0x44>
 800f494:	e13ffd17 	ldw	r4,-12(fp)
 800f498:	01400304 	movi	r5,12
 800f49c:	800c3280 	call	800c328 <__mulsi3>
 800f4a0:	1007883a 	mov	r3,r2
 800f4a4:	00820074 	movhi	r2,2049
 800f4a8:	1089ac04 	addi	r2,r2,9904
 800f4ac:	1885883a 	add	r2,r3,r2
 800f4b0:	00000106 	br	800f4b8 <write+0x48>
 800f4b4:	0005883a 	mov	r2,zero
 800f4b8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800f4bc:	e0bffb17 	ldw	r2,-20(fp)
 800f4c0:	10002126 	beq	r2,zero,800f548 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800f4c4:	e0bffb17 	ldw	r2,-20(fp)
 800f4c8:	10800217 	ldw	r2,8(r2)
 800f4cc:	108000cc 	andi	r2,r2,3
 800f4d0:	10001826 	beq	r2,zero,800f534 <write+0xc4>
 800f4d4:	e0bffb17 	ldw	r2,-20(fp)
 800f4d8:	10800017 	ldw	r2,0(r2)
 800f4dc:	10800617 	ldw	r2,24(r2)
 800f4e0:	10001426 	beq	r2,zero,800f534 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800f4e4:	e0bffb17 	ldw	r2,-20(fp)
 800f4e8:	10800017 	ldw	r2,0(r2)
 800f4ec:	10800617 	ldw	r2,24(r2)
 800f4f0:	e0ffff17 	ldw	r3,-4(fp)
 800f4f4:	e13ffb17 	ldw	r4,-20(fp)
 800f4f8:	e17ffe17 	ldw	r5,-8(fp)
 800f4fc:	180d883a 	mov	r6,r3
 800f500:	103ee83a 	callr	r2
 800f504:	e0bffc15 	stw	r2,-16(fp)
 800f508:	e0bffc17 	ldw	r2,-16(fp)
 800f50c:	1000070e 	bge	r2,zero,800f52c <write+0xbc>
      {
        ALT_ERRNO = -rval;
 800f510:	800f4200 	call	800f420 <alt_get_errno>
 800f514:	1007883a 	mov	r3,r2
 800f518:	e0bffc17 	ldw	r2,-16(fp)
 800f51c:	0085c83a 	sub	r2,zero,r2
 800f520:	18800015 	stw	r2,0(r3)
        return -1;
 800f524:	00bfffc4 	movi	r2,-1
 800f528:	00000c06 	br	800f55c <write+0xec>
      }
      return rval;
 800f52c:	e0bffc17 	ldw	r2,-16(fp)
 800f530:	00000a06 	br	800f55c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800f534:	800f4200 	call	800f420 <alt_get_errno>
 800f538:	1007883a 	mov	r3,r2
 800f53c:	00800344 	movi	r2,13
 800f540:	18800015 	stw	r2,0(r3)
 800f544:	00000406 	br	800f558 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800f548:	800f4200 	call	800f420 <alt_get_errno>
 800f54c:	1007883a 	mov	r3,r2
 800f550:	00801444 	movi	r2,81
 800f554:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800f558:	00bfffc4 	movi	r2,-1
}
 800f55c:	e037883a 	mov	sp,fp
 800f560:	dfc00117 	ldw	ra,4(sp)
 800f564:	df000017 	ldw	fp,0(sp)
 800f568:	dec00204 	addi	sp,sp,8
 800f56c:	f800283a 	ret

0800f570 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800f570:	defffd04 	addi	sp,sp,-12
 800f574:	dfc00215 	stw	ra,8(sp)
 800f578:	df000115 	stw	fp,4(sp)
 800f57c:	df000104 	addi	fp,sp,4
 800f580:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800f584:	e13fff17 	ldw	r4,-4(fp)
 800f588:	01420074 	movhi	r5,2049
 800f58c:	294e2c04 	addi	r5,r5,14512
 800f590:	80103740 	call	8010374 <alt_dev_llist_insert>
}
 800f594:	e037883a 	mov	sp,fp
 800f598:	dfc00117 	ldw	ra,4(sp)
 800f59c:	df000017 	ldw	fp,0(sp)
 800f5a0:	dec00204 	addi	sp,sp,8
 800f5a4:	f800283a 	ret

0800f5a8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800f5a8:	defffd04 	addi	sp,sp,-12
 800f5ac:	dfc00215 	stw	ra,8(sp)
 800f5b0:	df000115 	stw	fp,4(sp)
 800f5b4:	df000104 	addi	fp,sp,4
 800f5b8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 800f5bc:	8010d540 	call	8010d54 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800f5c0:	00800044 	movi	r2,1
 800f5c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800f5c8:	e037883a 	mov	sp,fp
 800f5cc:	dfc00117 	ldw	ra,4(sp)
 800f5d0:	df000017 	ldw	fp,0(sp)
 800f5d4:	dec00204 	addi	sp,sp,8
 800f5d8:	f800283a 	ret

0800f5dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800f5dc:	defffe04 	addi	sp,sp,-8
 800f5e0:	dfc00115 	stw	ra,4(sp)
 800f5e4:	df000015 	stw	fp,0(sp)
 800f5e8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800f5ec:	01020074 	movhi	r4,2049
 800f5f0:	210a1604 	addi	r4,r4,10328
 800f5f4:	000b883a 	mov	r5,zero
 800f5f8:	01800144 	movi	r6,5
 800f5fc:	800f7880 	call	800f788 <altera_avalon_jtag_uart_init>
 800f600:	01020074 	movhi	r4,2049
 800f604:	210a0c04 	addi	r4,r4,10288
 800f608:	800f5700 	call	800f570 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800f60c:	0001883a 	nop
}
 800f610:	e037883a 	mov	sp,fp
 800f614:	dfc00117 	ldw	ra,4(sp)
 800f618:	df000017 	ldw	fp,0(sp)
 800f61c:	dec00204 	addi	sp,sp,8
 800f620:	f800283a 	ret

0800f624 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800f624:	defffa04 	addi	sp,sp,-24
 800f628:	dfc00515 	stw	ra,20(sp)
 800f62c:	df000415 	stw	fp,16(sp)
 800f630:	df000404 	addi	fp,sp,16
 800f634:	e13ffd15 	stw	r4,-12(fp)
 800f638:	e17ffe15 	stw	r5,-8(fp)
 800f63c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f640:	e0bffd17 	ldw	r2,-12(fp)
 800f644:	10800017 	ldw	r2,0(r2)
 800f648:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800f64c:	e0bffc17 	ldw	r2,-16(fp)
 800f650:	10c00a04 	addi	r3,r2,40
 800f654:	e0bffd17 	ldw	r2,-12(fp)
 800f658:	10800217 	ldw	r2,8(r2)
 800f65c:	1809883a 	mov	r4,r3
 800f660:	e17ffe17 	ldw	r5,-8(fp)
 800f664:	e1bfff17 	ldw	r6,-4(fp)
 800f668:	100f883a 	mov	r7,r2
 800f66c:	800fc4c0 	call	800fc4c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800f670:	e037883a 	mov	sp,fp
 800f674:	dfc00117 	ldw	ra,4(sp)
 800f678:	df000017 	ldw	fp,0(sp)
 800f67c:	dec00204 	addi	sp,sp,8
 800f680:	f800283a 	ret

0800f684 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800f684:	defffa04 	addi	sp,sp,-24
 800f688:	dfc00515 	stw	ra,20(sp)
 800f68c:	df000415 	stw	fp,16(sp)
 800f690:	df000404 	addi	fp,sp,16
 800f694:	e13ffd15 	stw	r4,-12(fp)
 800f698:	e17ffe15 	stw	r5,-8(fp)
 800f69c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f6a0:	e0bffd17 	ldw	r2,-12(fp)
 800f6a4:	10800017 	ldw	r2,0(r2)
 800f6a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800f6ac:	e0bffc17 	ldw	r2,-16(fp)
 800f6b0:	10c00a04 	addi	r3,r2,40
 800f6b4:	e0bffd17 	ldw	r2,-12(fp)
 800f6b8:	10800217 	ldw	r2,8(r2)
 800f6bc:	1809883a 	mov	r4,r3
 800f6c0:	e17ffe17 	ldw	r5,-8(fp)
 800f6c4:	e1bfff17 	ldw	r6,-4(fp)
 800f6c8:	100f883a 	mov	r7,r2
 800f6cc:	800fe580 	call	800fe58 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800f6d0:	e037883a 	mov	sp,fp
 800f6d4:	dfc00117 	ldw	ra,4(sp)
 800f6d8:	df000017 	ldw	fp,0(sp)
 800f6dc:	dec00204 	addi	sp,sp,8
 800f6e0:	f800283a 	ret

0800f6e4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800f6e4:	defffc04 	addi	sp,sp,-16
 800f6e8:	dfc00315 	stw	ra,12(sp)
 800f6ec:	df000215 	stw	fp,8(sp)
 800f6f0:	df000204 	addi	fp,sp,8
 800f6f4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800f6f8:	e0bfff17 	ldw	r2,-4(fp)
 800f6fc:	10800017 	ldw	r2,0(r2)
 800f700:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800f704:	e0bffe17 	ldw	r2,-8(fp)
 800f708:	10c00a04 	addi	r3,r2,40
 800f70c:	e0bfff17 	ldw	r2,-4(fp)
 800f710:	10800217 	ldw	r2,8(r2)
 800f714:	1809883a 	mov	r4,r3
 800f718:	100b883a 	mov	r5,r2
 800f71c:	800faf80 	call	800faf8 <altera_avalon_jtag_uart_close>
}
 800f720:	e037883a 	mov	sp,fp
 800f724:	dfc00117 	ldw	ra,4(sp)
 800f728:	df000017 	ldw	fp,0(sp)
 800f72c:	dec00204 	addi	sp,sp,8
 800f730:	f800283a 	ret

0800f734 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800f734:	defffa04 	addi	sp,sp,-24
 800f738:	dfc00515 	stw	ra,20(sp)
 800f73c:	df000415 	stw	fp,16(sp)
 800f740:	df000404 	addi	fp,sp,16
 800f744:	e13ffd15 	stw	r4,-12(fp)
 800f748:	e17ffe15 	stw	r5,-8(fp)
 800f74c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800f750:	e0bffd17 	ldw	r2,-12(fp)
 800f754:	10800017 	ldw	r2,0(r2)
 800f758:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800f75c:	e0bffc17 	ldw	r2,-16(fp)
 800f760:	10800a04 	addi	r2,r2,40
 800f764:	1009883a 	mov	r4,r2
 800f768:	e17ffe17 	ldw	r5,-8(fp)
 800f76c:	e1bfff17 	ldw	r6,-4(fp)
 800f770:	800fb600 	call	800fb60 <altera_avalon_jtag_uart_ioctl>
}
 800f774:	e037883a 	mov	sp,fp
 800f778:	dfc00117 	ldw	ra,4(sp)
 800f77c:	df000017 	ldw	fp,0(sp)
 800f780:	dec00204 	addi	sp,sp,8
 800f784:	f800283a 	ret

0800f788 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800f788:	defffa04 	addi	sp,sp,-24
 800f78c:	dfc00515 	stw	ra,20(sp)
 800f790:	df000415 	stw	fp,16(sp)
 800f794:	df000404 	addi	fp,sp,16
 800f798:	e13ffd15 	stw	r4,-12(fp)
 800f79c:	e17ffe15 	stw	r5,-8(fp)
 800f7a0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f7a4:	e0bffd17 	ldw	r2,-12(fp)
 800f7a8:	00c00044 	movi	r3,1
 800f7ac:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800f7b0:	e0bffd17 	ldw	r2,-12(fp)
 800f7b4:	10800017 	ldw	r2,0(r2)
 800f7b8:	10800104 	addi	r2,r2,4
 800f7bc:	1007883a 	mov	r3,r2
 800f7c0:	e0bffd17 	ldw	r2,-12(fp)
 800f7c4:	10800817 	ldw	r2,32(r2)
 800f7c8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800f7cc:	e0fffe17 	ldw	r3,-8(fp)
 800f7d0:	e0bfff17 	ldw	r2,-4(fp)
 800f7d4:	d8000015 	stw	zero,0(sp)
 800f7d8:	1809883a 	mov	r4,r3
 800f7dc:	100b883a 	mov	r5,r2
 800f7e0:	01820074 	movhi	r6,2049
 800f7e4:	31be1304 	addi	r6,r6,-1972
 800f7e8:	e1fffd17 	ldw	r7,-12(fp)
 800f7ec:	80104ec0 	call	80104ec <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800f7f0:	e0bffd17 	ldw	r2,-12(fp)
 800f7f4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800f7f8:	e0bffd17 	ldw	r2,-12(fp)
 800f7fc:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800f800:	00820074 	movhi	r2,2049
 800f804:	1094fb04 	addi	r2,r2,21484
 800f808:	10800017 	ldw	r2,0(r2)
 800f80c:	1809883a 	mov	r4,r3
 800f810:	100b883a 	mov	r5,r2
 800f814:	01820074 	movhi	r6,2049
 800f818:	31be9404 	addi	r6,r6,-1456
 800f81c:	e1fffd17 	ldw	r7,-12(fp)
 800f820:	80100700 	call	8010070 <alt_alarm_start>
 800f824:	1000040e 	bge	r2,zero,800f838 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800f828:	e0fffd17 	ldw	r3,-12(fp)
 800f82c:	00a00034 	movhi	r2,32768
 800f830:	10bfffc4 	addi	r2,r2,-1
 800f834:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800f838:	e037883a 	mov	sp,fp
 800f83c:	dfc00117 	ldw	ra,4(sp)
 800f840:	df000017 	ldw	fp,0(sp)
 800f844:	dec00204 	addi	sp,sp,8
 800f848:	f800283a 	ret

0800f84c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800f84c:	defff804 	addi	sp,sp,-32
 800f850:	df000715 	stw	fp,28(sp)
 800f854:	df000704 	addi	fp,sp,28
 800f858:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800f85c:	e0bfff17 	ldw	r2,-4(fp)
 800f860:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800f864:	e0bffb17 	ldw	r2,-20(fp)
 800f868:	10800017 	ldw	r2,0(r2)
 800f86c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f870:	e0bffc17 	ldw	r2,-16(fp)
 800f874:	10800104 	addi	r2,r2,4
 800f878:	10800037 	ldwio	r2,0(r2)
 800f87c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800f880:	e0bffd17 	ldw	r2,-12(fp)
 800f884:	1080c00c 	andi	r2,r2,768
 800f888:	1000011e 	bne	r2,zero,800f890 <altera_avalon_jtag_uart_irq+0x44>
      break;
 800f88c:	00006c06 	br	800fa40 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800f890:	e0bffd17 	ldw	r2,-12(fp)
 800f894:	1080400c 	andi	r2,r2,256
 800f898:	10003426 	beq	r2,zero,800f96c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800f89c:	00800074 	movhi	r2,1
 800f8a0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f8a4:	e0bffb17 	ldw	r2,-20(fp)
 800f8a8:	10800a17 	ldw	r2,40(r2)
 800f8ac:	10800044 	addi	r2,r2,1
 800f8b0:	1081ffcc 	andi	r2,r2,2047
 800f8b4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800f8b8:	e0bffb17 	ldw	r2,-20(fp)
 800f8bc:	10c00b17 	ldw	r3,44(r2)
 800f8c0:	e0bffe17 	ldw	r2,-8(fp)
 800f8c4:	1880011e 	bne	r3,r2,800f8cc <altera_avalon_jtag_uart_irq+0x80>
          break;
 800f8c8:	00001606 	br	800f924 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800f8cc:	e0bffc17 	ldw	r2,-16(fp)
 800f8d0:	10800037 	ldwio	r2,0(r2)
 800f8d4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800f8d8:	e0bff917 	ldw	r2,-28(fp)
 800f8dc:	10a0000c 	andi	r2,r2,32768
 800f8e0:	1000011e 	bne	r2,zero,800f8e8 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 800f8e4:	00000f06 	br	800f924 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800f8e8:	e0bffb17 	ldw	r2,-20(fp)
 800f8ec:	10800a17 	ldw	r2,40(r2)
 800f8f0:	e0fff917 	ldw	r3,-28(fp)
 800f8f4:	1809883a 	mov	r4,r3
 800f8f8:	e0fffb17 	ldw	r3,-20(fp)
 800f8fc:	1885883a 	add	r2,r3,r2
 800f900:	10800e04 	addi	r2,r2,56
 800f904:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f908:	e0bffb17 	ldw	r2,-20(fp)
 800f90c:	10800a17 	ldw	r2,40(r2)
 800f910:	10800044 	addi	r2,r2,1
 800f914:	10c1ffcc 	andi	r3,r2,2047
 800f918:	e0bffb17 	ldw	r2,-20(fp)
 800f91c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800f920:	003fe006 	br	800f8a4 <__alt_data_end+0xfc00f8a4>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800f924:	e0bff917 	ldw	r2,-28(fp)
 800f928:	10bfffec 	andhi	r2,r2,65535
 800f92c:	10000f26 	beq	r2,zero,800f96c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800f930:	e0bffb17 	ldw	r2,-20(fp)
 800f934:	10c00817 	ldw	r3,32(r2)
 800f938:	00bfff84 	movi	r2,-2
 800f93c:	1886703a 	and	r3,r3,r2
 800f940:	e0bffb17 	ldw	r2,-20(fp)
 800f944:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800f948:	e0bffc17 	ldw	r2,-16(fp)
 800f94c:	10800104 	addi	r2,r2,4
 800f950:	1007883a 	mov	r3,r2
 800f954:	e0bffb17 	ldw	r2,-20(fp)
 800f958:	10800817 	ldw	r2,32(r2)
 800f95c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800f960:	e0bffc17 	ldw	r2,-16(fp)
 800f964:	10800104 	addi	r2,r2,4
 800f968:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800f96c:	e0bffd17 	ldw	r2,-12(fp)
 800f970:	1080800c 	andi	r2,r2,512
 800f974:	10003126 	beq	r2,zero,800fa3c <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800f978:	e0bffd17 	ldw	r2,-12(fp)
 800f97c:	1004d43a 	srli	r2,r2,16
 800f980:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800f984:	00001406 	br	800f9d8 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800f988:	e0bffc17 	ldw	r2,-16(fp)
 800f98c:	e0fffb17 	ldw	r3,-20(fp)
 800f990:	18c00d17 	ldw	r3,52(r3)
 800f994:	e13ffb17 	ldw	r4,-20(fp)
 800f998:	20c7883a 	add	r3,r4,r3
 800f99c:	18c20e04 	addi	r3,r3,2104
 800f9a0:	18c00003 	ldbu	r3,0(r3)
 800f9a4:	18c03fcc 	andi	r3,r3,255
 800f9a8:	18c0201c 	xori	r3,r3,128
 800f9ac:	18ffe004 	addi	r3,r3,-128
 800f9b0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800f9b4:	e0bffb17 	ldw	r2,-20(fp)
 800f9b8:	10800d17 	ldw	r2,52(r2)
 800f9bc:	10800044 	addi	r2,r2,1
 800f9c0:	10c1ffcc 	andi	r3,r2,2047
 800f9c4:	e0bffb17 	ldw	r2,-20(fp)
 800f9c8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800f9cc:	e0bffa17 	ldw	r2,-24(fp)
 800f9d0:	10bfffc4 	addi	r2,r2,-1
 800f9d4:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800f9d8:	e0bffa17 	ldw	r2,-24(fp)
 800f9dc:	10000526 	beq	r2,zero,800f9f4 <altera_avalon_jtag_uart_irq+0x1a8>
 800f9e0:	e0bffb17 	ldw	r2,-20(fp)
 800f9e4:	10c00d17 	ldw	r3,52(r2)
 800f9e8:	e0bffb17 	ldw	r2,-20(fp)
 800f9ec:	10800c17 	ldw	r2,48(r2)
 800f9f0:	18bfe51e 	bne	r3,r2,800f988 <__alt_data_end+0xfc00f988>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800f9f4:	e0bffa17 	ldw	r2,-24(fp)
 800f9f8:	10001026 	beq	r2,zero,800fa3c <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800f9fc:	e0bffb17 	ldw	r2,-20(fp)
 800fa00:	10c00817 	ldw	r3,32(r2)
 800fa04:	00bfff44 	movi	r2,-3
 800fa08:	1886703a 	and	r3,r3,r2
 800fa0c:	e0bffb17 	ldw	r2,-20(fp)
 800fa10:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800fa14:	e0bffb17 	ldw	r2,-20(fp)
 800fa18:	10800017 	ldw	r2,0(r2)
 800fa1c:	10800104 	addi	r2,r2,4
 800fa20:	1007883a 	mov	r3,r2
 800fa24:	e0bffb17 	ldw	r2,-20(fp)
 800fa28:	10800817 	ldw	r2,32(r2)
 800fa2c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800fa30:	e0bffc17 	ldw	r2,-16(fp)
 800fa34:	10800104 	addi	r2,r2,4
 800fa38:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800fa3c:	003f8c06 	br	800f870 <__alt_data_end+0xfc00f870>
}
 800fa40:	e037883a 	mov	sp,fp
 800fa44:	df000017 	ldw	fp,0(sp)
 800fa48:	dec00104 	addi	sp,sp,4
 800fa4c:	f800283a 	ret

0800fa50 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800fa50:	defff804 	addi	sp,sp,-32
 800fa54:	df000715 	stw	fp,28(sp)
 800fa58:	df000704 	addi	fp,sp,28
 800fa5c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800fa60:	e0bffb17 	ldw	r2,-20(fp)
 800fa64:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800fa68:	e0bff917 	ldw	r2,-28(fp)
 800fa6c:	10800017 	ldw	r2,0(r2)
 800fa70:	10800104 	addi	r2,r2,4
 800fa74:	10800037 	ldwio	r2,0(r2)
 800fa78:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800fa7c:	e0bffa17 	ldw	r2,-24(fp)
 800fa80:	1081000c 	andi	r2,r2,1024
 800fa84:	10000b26 	beq	r2,zero,800fab4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800fa88:	e0bff917 	ldw	r2,-28(fp)
 800fa8c:	10800017 	ldw	r2,0(r2)
 800fa90:	10800104 	addi	r2,r2,4
 800fa94:	1007883a 	mov	r3,r2
 800fa98:	e0bff917 	ldw	r2,-28(fp)
 800fa9c:	10800817 	ldw	r2,32(r2)
 800faa0:	10810014 	ori	r2,r2,1024
 800faa4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800faa8:	e0bff917 	ldw	r2,-28(fp)
 800faac:	10000915 	stw	zero,36(r2)
 800fab0:	00000a06 	br	800fadc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800fab4:	e0bff917 	ldw	r2,-28(fp)
 800fab8:	10c00917 	ldw	r3,36(r2)
 800fabc:	00a00034 	movhi	r2,32768
 800fac0:	10bfff04 	addi	r2,r2,-4
 800fac4:	10c00536 	bltu	r2,r3,800fadc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800fac8:	e0bff917 	ldw	r2,-28(fp)
 800facc:	10800917 	ldw	r2,36(r2)
 800fad0:	10c00044 	addi	r3,r2,1
 800fad4:	e0bff917 	ldw	r2,-28(fp)
 800fad8:	10c00915 	stw	r3,36(r2)
 800fadc:	00820074 	movhi	r2,2049
 800fae0:	1094fb04 	addi	r2,r2,21484
 800fae4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800fae8:	e037883a 	mov	sp,fp
 800faec:	df000017 	ldw	fp,0(sp)
 800faf0:	dec00104 	addi	sp,sp,4
 800faf4:	f800283a 	ret

0800faf8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800faf8:	defffd04 	addi	sp,sp,-12
 800fafc:	df000215 	stw	fp,8(sp)
 800fb00:	df000204 	addi	fp,sp,8
 800fb04:	e13ffe15 	stw	r4,-8(fp)
 800fb08:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800fb0c:	00000506 	br	800fb24 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800fb10:	e0bfff17 	ldw	r2,-4(fp)
 800fb14:	1090000c 	andi	r2,r2,16384
 800fb18:	10000226 	beq	r2,zero,800fb24 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800fb1c:	00bffd44 	movi	r2,-11
 800fb20:	00000b06 	br	800fb50 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800fb24:	e0bffe17 	ldw	r2,-8(fp)
 800fb28:	10c00d17 	ldw	r3,52(r2)
 800fb2c:	e0bffe17 	ldw	r2,-8(fp)
 800fb30:	10800c17 	ldw	r2,48(r2)
 800fb34:	18800526 	beq	r3,r2,800fb4c <altera_avalon_jtag_uart_close+0x54>
 800fb38:	e0bffe17 	ldw	r2,-8(fp)
 800fb3c:	10c00917 	ldw	r3,36(r2)
 800fb40:	e0bffe17 	ldw	r2,-8(fp)
 800fb44:	10800117 	ldw	r2,4(r2)
 800fb48:	18bff136 	bltu	r3,r2,800fb10 <__alt_data_end+0xfc00fb10>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800fb4c:	0005883a 	mov	r2,zero
}
 800fb50:	e037883a 	mov	sp,fp
 800fb54:	df000017 	ldw	fp,0(sp)
 800fb58:	dec00104 	addi	sp,sp,4
 800fb5c:	f800283a 	ret

0800fb60 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800fb60:	defffa04 	addi	sp,sp,-24
 800fb64:	df000515 	stw	fp,20(sp)
 800fb68:	df000504 	addi	fp,sp,20
 800fb6c:	e13ffd15 	stw	r4,-12(fp)
 800fb70:	e17ffe15 	stw	r5,-8(fp)
 800fb74:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800fb78:	00bff9c4 	movi	r2,-25
 800fb7c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800fb80:	e0bffe17 	ldw	r2,-8(fp)
 800fb84:	10da8060 	cmpeqi	r3,r2,27137
 800fb88:	1800031e 	bne	r3,zero,800fb98 <altera_avalon_jtag_uart_ioctl+0x38>
 800fb8c:	109a80a0 	cmpeqi	r2,r2,27138
 800fb90:	1000191e 	bne	r2,zero,800fbf8 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 800fb94:	00002806 	br	800fc38 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800fb98:	e0bffd17 	ldw	r2,-12(fp)
 800fb9c:	10c00117 	ldw	r3,4(r2)
 800fba0:	00a00034 	movhi	r2,32768
 800fba4:	10bfffc4 	addi	r2,r2,-1
 800fba8:	18801226 	beq	r3,r2,800fbf4 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 800fbac:	e0bfff17 	ldw	r2,-4(fp)
 800fbb0:	10800017 	ldw	r2,0(r2)
 800fbb4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800fbb8:	e0bffc17 	ldw	r2,-16(fp)
 800fbbc:	10800090 	cmplti	r2,r2,2
 800fbc0:	1000061e 	bne	r2,zero,800fbdc <altera_avalon_jtag_uart_ioctl+0x7c>
 800fbc4:	e0fffc17 	ldw	r3,-16(fp)
 800fbc8:	00a00034 	movhi	r2,32768
 800fbcc:	10bfffc4 	addi	r2,r2,-1
 800fbd0:	18800226 	beq	r3,r2,800fbdc <altera_avalon_jtag_uart_ioctl+0x7c>
 800fbd4:	e0bffc17 	ldw	r2,-16(fp)
 800fbd8:	00000206 	br	800fbe4 <altera_avalon_jtag_uart_ioctl+0x84>
 800fbdc:	00a00034 	movhi	r2,32768
 800fbe0:	10bfff84 	addi	r2,r2,-2
 800fbe4:	e0fffd17 	ldw	r3,-12(fp)
 800fbe8:	18800115 	stw	r2,4(r3)
      rc = 0;
 800fbec:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800fbf0:	00001106 	br	800fc38 <altera_avalon_jtag_uart_ioctl+0xd8>
 800fbf4:	00001006 	br	800fc38 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800fbf8:	e0bffd17 	ldw	r2,-12(fp)
 800fbfc:	10c00117 	ldw	r3,4(r2)
 800fc00:	00a00034 	movhi	r2,32768
 800fc04:	10bfffc4 	addi	r2,r2,-1
 800fc08:	18800a26 	beq	r3,r2,800fc34 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800fc0c:	e0bffd17 	ldw	r2,-12(fp)
 800fc10:	10c00917 	ldw	r3,36(r2)
 800fc14:	e0bffd17 	ldw	r2,-12(fp)
 800fc18:	10800117 	ldw	r2,4(r2)
 800fc1c:	1885803a 	cmpltu	r2,r3,r2
 800fc20:	10c03fcc 	andi	r3,r2,255
 800fc24:	e0bfff17 	ldw	r2,-4(fp)
 800fc28:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800fc2c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800fc30:	00000006 	br	800fc34 <altera_avalon_jtag_uart_ioctl+0xd4>
 800fc34:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800fc38:	e0bffb17 	ldw	r2,-20(fp)
}
 800fc3c:	e037883a 	mov	sp,fp
 800fc40:	df000017 	ldw	fp,0(sp)
 800fc44:	dec00104 	addi	sp,sp,4
 800fc48:	f800283a 	ret

0800fc4c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800fc4c:	defff304 	addi	sp,sp,-52
 800fc50:	dfc00c15 	stw	ra,48(sp)
 800fc54:	df000b15 	stw	fp,44(sp)
 800fc58:	df000b04 	addi	fp,sp,44
 800fc5c:	e13ffc15 	stw	r4,-16(fp)
 800fc60:	e17ffd15 	stw	r5,-12(fp)
 800fc64:	e1bffe15 	stw	r6,-8(fp)
 800fc68:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800fc6c:	e0bffd17 	ldw	r2,-12(fp)
 800fc70:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800fc74:	00004906 	br	800fd9c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800fc78:	e0bffc17 	ldw	r2,-16(fp)
 800fc7c:	10800a17 	ldw	r2,40(r2)
 800fc80:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800fc84:	e0bffc17 	ldw	r2,-16(fp)
 800fc88:	10800b17 	ldw	r2,44(r2)
 800fc8c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800fc90:	e0fff717 	ldw	r3,-36(fp)
 800fc94:	e0bff817 	ldw	r2,-32(fp)
 800fc98:	18800536 	bltu	r3,r2,800fcb0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800fc9c:	e0fff717 	ldw	r3,-36(fp)
 800fca0:	e0bff817 	ldw	r2,-32(fp)
 800fca4:	1885c83a 	sub	r2,r3,r2
 800fca8:	e0bff615 	stw	r2,-40(fp)
 800fcac:	00000406 	br	800fcc0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800fcb0:	00c20004 	movi	r3,2048
 800fcb4:	e0bff817 	ldw	r2,-32(fp)
 800fcb8:	1885c83a 	sub	r2,r3,r2
 800fcbc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800fcc0:	e0bff617 	ldw	r2,-40(fp)
 800fcc4:	1000011e 	bne	r2,zero,800fccc <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 800fcc8:	00001d06 	br	800fd40 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 800fccc:	e0fffe17 	ldw	r3,-8(fp)
 800fcd0:	e0bff617 	ldw	r2,-40(fp)
 800fcd4:	1880022e 	bgeu	r3,r2,800fce0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800fcd8:	e0bffe17 	ldw	r2,-8(fp)
 800fcdc:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800fce0:	e0bff817 	ldw	r2,-32(fp)
 800fce4:	10800e04 	addi	r2,r2,56
 800fce8:	e0fffc17 	ldw	r3,-16(fp)
 800fcec:	1885883a 	add	r2,r3,r2
 800fcf0:	e13ff517 	ldw	r4,-44(fp)
 800fcf4:	100b883a 	mov	r5,r2
 800fcf8:	e1bff617 	ldw	r6,-40(fp)
 800fcfc:	8007ab00 	call	8007ab0 <memcpy>
      ptr   += n;
 800fd00:	e0fff517 	ldw	r3,-44(fp)
 800fd04:	e0bff617 	ldw	r2,-40(fp)
 800fd08:	1885883a 	add	r2,r3,r2
 800fd0c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800fd10:	e0fffe17 	ldw	r3,-8(fp)
 800fd14:	e0bff617 	ldw	r2,-40(fp)
 800fd18:	1885c83a 	sub	r2,r3,r2
 800fd1c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800fd20:	e0fff817 	ldw	r3,-32(fp)
 800fd24:	e0bff617 	ldw	r2,-40(fp)
 800fd28:	1885883a 	add	r2,r3,r2
 800fd2c:	10c1ffcc 	andi	r3,r2,2047
 800fd30:	e0bffc17 	ldw	r2,-16(fp)
 800fd34:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800fd38:	e0bffe17 	ldw	r2,-8(fp)
 800fd3c:	00bfce16 	blt	zero,r2,800fc78 <__alt_data_end+0xfc00fc78>

    /* If we read any data then return it */
    if (ptr != buffer)
 800fd40:	e0fff517 	ldw	r3,-44(fp)
 800fd44:	e0bffd17 	ldw	r2,-12(fp)
 800fd48:	18800126 	beq	r3,r2,800fd50 <altera_avalon_jtag_uart_read+0x104>
      break;
 800fd4c:	00001506 	br	800fda4 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800fd50:	e0bfff17 	ldw	r2,-4(fp)
 800fd54:	1090000c 	andi	r2,r2,16384
 800fd58:	10000126 	beq	r2,zero,800fd60 <altera_avalon_jtag_uart_read+0x114>
      break;
 800fd5c:	00001106 	br	800fda4 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800fd60:	0001883a 	nop
 800fd64:	e0bffc17 	ldw	r2,-16(fp)
 800fd68:	10c00a17 	ldw	r3,40(r2)
 800fd6c:	e0bff717 	ldw	r2,-36(fp)
 800fd70:	1880051e 	bne	r3,r2,800fd88 <altera_avalon_jtag_uart_read+0x13c>
 800fd74:	e0bffc17 	ldw	r2,-16(fp)
 800fd78:	10c00917 	ldw	r3,36(r2)
 800fd7c:	e0bffc17 	ldw	r2,-16(fp)
 800fd80:	10800117 	ldw	r2,4(r2)
 800fd84:	18bff736 	bltu	r3,r2,800fd64 <__alt_data_end+0xfc00fd64>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800fd88:	e0bffc17 	ldw	r2,-16(fp)
 800fd8c:	10c00a17 	ldw	r3,40(r2)
 800fd90:	e0bff717 	ldw	r2,-36(fp)
 800fd94:	1880011e 	bne	r3,r2,800fd9c <altera_avalon_jtag_uart_read+0x150>
      break;
 800fd98:	00000206 	br	800fda4 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800fd9c:	e0bffe17 	ldw	r2,-8(fp)
 800fda0:	00bfb516 	blt	zero,r2,800fc78 <__alt_data_end+0xfc00fc78>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800fda4:	e0fff517 	ldw	r3,-44(fp)
 800fda8:	e0bffd17 	ldw	r2,-12(fp)
 800fdac:	18801826 	beq	r3,r2,800fe10 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fdb0:	0005303a 	rdctl	r2,status
 800fdb4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fdb8:	e0fffa17 	ldw	r3,-24(fp)
 800fdbc:	00bfff84 	movi	r2,-2
 800fdc0:	1884703a 	and	r2,r3,r2
 800fdc4:	1001703a 	wrctl	status,r2
  
  return context;
 800fdc8:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800fdcc:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800fdd0:	e0bffc17 	ldw	r2,-16(fp)
 800fdd4:	10800817 	ldw	r2,32(r2)
 800fdd8:	10c00054 	ori	r3,r2,1
 800fddc:	e0bffc17 	ldw	r2,-16(fp)
 800fde0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800fde4:	e0bffc17 	ldw	r2,-16(fp)
 800fde8:	10800017 	ldw	r2,0(r2)
 800fdec:	10800104 	addi	r2,r2,4
 800fdf0:	1007883a 	mov	r3,r2
 800fdf4:	e0bffc17 	ldw	r2,-16(fp)
 800fdf8:	10800817 	ldw	r2,32(r2)
 800fdfc:	18800035 	stwio	r2,0(r3)
 800fe00:	e0bff917 	ldw	r2,-28(fp)
 800fe04:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fe08:	e0bffb17 	ldw	r2,-20(fp)
 800fe0c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800fe10:	e0fff517 	ldw	r3,-44(fp)
 800fe14:	e0bffd17 	ldw	r2,-12(fp)
 800fe18:	18800426 	beq	r3,r2,800fe2c <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 800fe1c:	e0fff517 	ldw	r3,-44(fp)
 800fe20:	e0bffd17 	ldw	r2,-12(fp)
 800fe24:	1885c83a 	sub	r2,r3,r2
 800fe28:	00000606 	br	800fe44 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 800fe2c:	e0bfff17 	ldw	r2,-4(fp)
 800fe30:	1090000c 	andi	r2,r2,16384
 800fe34:	10000226 	beq	r2,zero,800fe40 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 800fe38:	00bffd44 	movi	r2,-11
 800fe3c:	00000106 	br	800fe44 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 800fe40:	00bffec4 	movi	r2,-5
}
 800fe44:	e037883a 	mov	sp,fp
 800fe48:	dfc00117 	ldw	ra,4(sp)
 800fe4c:	df000017 	ldw	fp,0(sp)
 800fe50:	dec00204 	addi	sp,sp,8
 800fe54:	f800283a 	ret

0800fe58 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800fe58:	defff304 	addi	sp,sp,-52
 800fe5c:	dfc00c15 	stw	ra,48(sp)
 800fe60:	df000b15 	stw	fp,44(sp)
 800fe64:	df000b04 	addi	fp,sp,44
 800fe68:	e13ffc15 	stw	r4,-16(fp)
 800fe6c:	e17ffd15 	stw	r5,-12(fp)
 800fe70:	e1bffe15 	stw	r6,-8(fp)
 800fe74:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800fe78:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800fe7c:	e0bffd17 	ldw	r2,-12(fp)
 800fe80:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800fe84:	00003806 	br	800ff68 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800fe88:	e0bffc17 	ldw	r2,-16(fp)
 800fe8c:	10800c17 	ldw	r2,48(r2)
 800fe90:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 800fe94:	e0bffc17 	ldw	r2,-16(fp)
 800fe98:	10800d17 	ldw	r2,52(r2)
 800fe9c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800fea0:	e0fff817 	ldw	r3,-32(fp)
 800fea4:	e0bff517 	ldw	r2,-44(fp)
 800fea8:	1880062e 	bgeu	r3,r2,800fec4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800feac:	e0fff517 	ldw	r3,-44(fp)
 800feb0:	e0bff817 	ldw	r2,-32(fp)
 800feb4:	1885c83a 	sub	r2,r3,r2
 800feb8:	10bfffc4 	addi	r2,r2,-1
 800febc:	e0bff615 	stw	r2,-40(fp)
 800fec0:	00000b06 	br	800fef0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800fec4:	e0bff517 	ldw	r2,-44(fp)
 800fec8:	10000526 	beq	r2,zero,800fee0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800fecc:	00c20004 	movi	r3,2048
 800fed0:	e0bff817 	ldw	r2,-32(fp)
 800fed4:	1885c83a 	sub	r2,r3,r2
 800fed8:	e0bff615 	stw	r2,-40(fp)
 800fedc:	00000406 	br	800fef0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800fee0:	00c1ffc4 	movi	r3,2047
 800fee4:	e0bff817 	ldw	r2,-32(fp)
 800fee8:	1885c83a 	sub	r2,r3,r2
 800feec:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800fef0:	e0bff617 	ldw	r2,-40(fp)
 800fef4:	1000011e 	bne	r2,zero,800fefc <altera_avalon_jtag_uart_write+0xa4>
        break;
 800fef8:	00001d06 	br	800ff70 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 800fefc:	e0fffe17 	ldw	r3,-8(fp)
 800ff00:	e0bff617 	ldw	r2,-40(fp)
 800ff04:	1880022e 	bgeu	r3,r2,800ff10 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 800ff08:	e0bffe17 	ldw	r2,-8(fp)
 800ff0c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800ff10:	e0bff817 	ldw	r2,-32(fp)
 800ff14:	10820e04 	addi	r2,r2,2104
 800ff18:	e0fffc17 	ldw	r3,-16(fp)
 800ff1c:	1885883a 	add	r2,r3,r2
 800ff20:	1009883a 	mov	r4,r2
 800ff24:	e17ffd17 	ldw	r5,-12(fp)
 800ff28:	e1bff617 	ldw	r6,-40(fp)
 800ff2c:	8007ab00 	call	8007ab0 <memcpy>
      ptr   += n;
 800ff30:	e0fffd17 	ldw	r3,-12(fp)
 800ff34:	e0bff617 	ldw	r2,-40(fp)
 800ff38:	1885883a 	add	r2,r3,r2
 800ff3c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800ff40:	e0fffe17 	ldw	r3,-8(fp)
 800ff44:	e0bff617 	ldw	r2,-40(fp)
 800ff48:	1885c83a 	sub	r2,r3,r2
 800ff4c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800ff50:	e0fff817 	ldw	r3,-32(fp)
 800ff54:	e0bff617 	ldw	r2,-40(fp)
 800ff58:	1885883a 	add	r2,r3,r2
 800ff5c:	10c1ffcc 	andi	r3,r2,2047
 800ff60:	e0bffc17 	ldw	r2,-16(fp)
 800ff64:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800ff68:	e0bffe17 	ldw	r2,-8(fp)
 800ff6c:	00bfc616 	blt	zero,r2,800fe88 <__alt_data_end+0xfc00fe88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ff70:	0005303a 	rdctl	r2,status
 800ff74:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ff78:	e0fffa17 	ldw	r3,-24(fp)
 800ff7c:	00bfff84 	movi	r2,-2
 800ff80:	1884703a 	and	r2,r3,r2
 800ff84:	1001703a 	wrctl	status,r2
  
  return context;
 800ff88:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800ff8c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800ff90:	e0bffc17 	ldw	r2,-16(fp)
 800ff94:	10800817 	ldw	r2,32(r2)
 800ff98:	10c00094 	ori	r3,r2,2
 800ff9c:	e0bffc17 	ldw	r2,-16(fp)
 800ffa0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800ffa4:	e0bffc17 	ldw	r2,-16(fp)
 800ffa8:	10800017 	ldw	r2,0(r2)
 800ffac:	10800104 	addi	r2,r2,4
 800ffb0:	1007883a 	mov	r3,r2
 800ffb4:	e0bffc17 	ldw	r2,-16(fp)
 800ffb8:	10800817 	ldw	r2,32(r2)
 800ffbc:	18800035 	stwio	r2,0(r3)
 800ffc0:	e0bff917 	ldw	r2,-28(fp)
 800ffc4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ffc8:	e0bffb17 	ldw	r2,-20(fp)
 800ffcc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800ffd0:	e0bffe17 	ldw	r2,-8(fp)
 800ffd4:	0080120e 	bge	zero,r2,8010020 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 800ffd8:	e0bfff17 	ldw	r2,-4(fp)
 800ffdc:	1090000c 	andi	r2,r2,16384
 800ffe0:	10000126 	beq	r2,zero,800ffe8 <altera_avalon_jtag_uart_write+0x190>
        break;
 800ffe4:	00001006 	br	8010028 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800ffe8:	0001883a 	nop
 800ffec:	e0bffc17 	ldw	r2,-16(fp)
 800fff0:	10c00d17 	ldw	r3,52(r2)
 800fff4:	e0bff517 	ldw	r2,-44(fp)
 800fff8:	1880051e 	bne	r3,r2,8010010 <altera_avalon_jtag_uart_write+0x1b8>
 800fffc:	e0bffc17 	ldw	r2,-16(fp)
 8010000:	10c00917 	ldw	r3,36(r2)
 8010004:	e0bffc17 	ldw	r2,-16(fp)
 8010008:	10800117 	ldw	r2,4(r2)
 801000c:	18bff736 	bltu	r3,r2,800ffec <__alt_data_end+0xfc00ffec>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8010010:	e0bffc17 	ldw	r2,-16(fp)
 8010014:	10800917 	ldw	r2,36(r2)
 8010018:	10000126 	beq	r2,zero,8010020 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 801001c:	00000206 	br	8010028 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 8010020:	e0bffe17 	ldw	r2,-8(fp)
 8010024:	00bf9716 	blt	zero,r2,800fe84 <__alt_data_end+0xfc00fe84>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8010028:	e0fffd17 	ldw	r3,-12(fp)
 801002c:	e0bff717 	ldw	r2,-36(fp)
 8010030:	18800426 	beq	r3,r2,8010044 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 8010034:	e0fffd17 	ldw	r3,-12(fp)
 8010038:	e0bff717 	ldw	r2,-36(fp)
 801003c:	1885c83a 	sub	r2,r3,r2
 8010040:	00000606 	br	801005c <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 8010044:	e0bfff17 	ldw	r2,-4(fp)
 8010048:	1090000c 	andi	r2,r2,16384
 801004c:	10000226 	beq	r2,zero,8010058 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 8010050:	00bffd44 	movi	r2,-11
 8010054:	00000106 	br	801005c <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8010058:	00bffec4 	movi	r2,-5
}
 801005c:	e037883a 	mov	sp,fp
 8010060:	dfc00117 	ldw	ra,4(sp)
 8010064:	df000017 	ldw	fp,0(sp)
 8010068:	dec00204 	addi	sp,sp,8
 801006c:	f800283a 	ret

08010070 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8010070:	defff504 	addi	sp,sp,-44
 8010074:	df000a15 	stw	fp,40(sp)
 8010078:	df000a04 	addi	fp,sp,40
 801007c:	e13ffc15 	stw	r4,-16(fp)
 8010080:	e17ffd15 	stw	r5,-12(fp)
 8010084:	e1bffe15 	stw	r6,-8(fp)
 8010088:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 801008c:	e03ff615 	stw	zero,-40(fp)
 8010090:	00820074 	movhi	r2,2049
 8010094:	1094fb04 	addi	r2,r2,21484
 8010098:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 801009c:	10003f26 	beq	r2,zero,801019c <alt_alarm_start+0x12c>
  {
    if (alarm)
 80100a0:	e0bffc17 	ldw	r2,-16(fp)
 80100a4:	10003b26 	beq	r2,zero,8010194 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 80100a8:	e0bffc17 	ldw	r2,-16(fp)
 80100ac:	e0fffe17 	ldw	r3,-8(fp)
 80100b0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80100b4:	e0bffc17 	ldw	r2,-16(fp)
 80100b8:	e0ffff17 	ldw	r3,-4(fp)
 80100bc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80100c0:	0005303a 	rdctl	r2,status
 80100c4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80100c8:	e0fff817 	ldw	r3,-32(fp)
 80100cc:	00bfff84 	movi	r2,-2
 80100d0:	1884703a 	and	r2,r3,r2
 80100d4:	1001703a 	wrctl	status,r2
  
  return context;
 80100d8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 80100dc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80100e0:	00820074 	movhi	r2,2049
 80100e4:	1094fc04 	addi	r2,r2,21488
 80100e8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 80100ec:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 80100f0:	e0fffd17 	ldw	r3,-12(fp)
 80100f4:	e0bff617 	ldw	r2,-40(fp)
 80100f8:	1885883a 	add	r2,r3,r2
 80100fc:	10c00044 	addi	r3,r2,1
 8010100:	e0bffc17 	ldw	r2,-16(fp)
 8010104:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8010108:	e0bffc17 	ldw	r2,-16(fp)
 801010c:	10c00217 	ldw	r3,8(r2)
 8010110:	e0bff617 	ldw	r2,-40(fp)
 8010114:	1880042e 	bgeu	r3,r2,8010128 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 8010118:	e0bffc17 	ldw	r2,-16(fp)
 801011c:	00c00044 	movi	r3,1
 8010120:	10c00405 	stb	r3,16(r2)
 8010124:	00000206 	br	8010130 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 8010128:	e0bffc17 	ldw	r2,-16(fp)
 801012c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8010130:	e0fffc17 	ldw	r3,-16(fp)
 8010134:	00820074 	movhi	r2,2049
 8010138:	108e3204 	addi	r2,r2,14536
 801013c:	e0bff915 	stw	r2,-28(fp)
 8010140:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8010144:	e0bffa17 	ldw	r2,-24(fp)
 8010148:	e0fff917 	ldw	r3,-28(fp)
 801014c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8010150:	e0bff917 	ldw	r2,-28(fp)
 8010154:	10c00017 	ldw	r3,0(r2)
 8010158:	e0bffa17 	ldw	r2,-24(fp)
 801015c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8010160:	e0bff917 	ldw	r2,-28(fp)
 8010164:	10800017 	ldw	r2,0(r2)
 8010168:	e0fffa17 	ldw	r3,-24(fp)
 801016c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8010170:	e0bff917 	ldw	r2,-28(fp)
 8010174:	e0fffa17 	ldw	r3,-24(fp)
 8010178:	10c00015 	stw	r3,0(r2)
 801017c:	e0bff717 	ldw	r2,-36(fp)
 8010180:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010184:	e0bffb17 	ldw	r2,-20(fp)
 8010188:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 801018c:	0005883a 	mov	r2,zero
 8010190:	00000306 	br	80101a0 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 8010194:	00bffa84 	movi	r2,-22
 8010198:	00000106 	br	80101a0 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 801019c:	00bfde84 	movi	r2,-134
  }
}
 80101a0:	e037883a 	mov	sp,fp
 80101a4:	df000017 	ldw	fp,0(sp)
 80101a8:	dec00104 	addi	sp,sp,4
 80101ac:	f800283a 	ret

080101b0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 80101b0:	defffa04 	addi	sp,sp,-24
 80101b4:	dfc00515 	stw	ra,20(sp)
 80101b8:	df000415 	stw	fp,16(sp)
 80101bc:	df000404 	addi	fp,sp,16
 80101c0:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 80101c4:	00800244 	movi	r2,9
 80101c8:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 80101cc:	e13ffd17 	ldw	r4,-12(fp)
 80101d0:	014003f4 	movhi	r5,15
 80101d4:	29509004 	addi	r5,r5,16960
 80101d8:	800c3280 	call	800c328 <__mulsi3>
 80101dc:	0100bef4 	movhi	r4,763
 80101e0:	213c2004 	addi	r4,r4,-3968
 80101e4:	100b883a 	mov	r5,r2
 80101e8:	800c3180 	call	800c318 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 80101ec:	01200034 	movhi	r4,32768
 80101f0:	213fffc4 	addi	r4,r4,-1
 80101f4:	100b883a 	mov	r5,r2
 80101f8:	800c3180 	call	800c318 <__udivsi3>
 80101fc:	e13fff17 	ldw	r4,-4(fp)
 8010200:	100b883a 	mov	r5,r2
 8010204:	800c3180 	call	800c318 <__udivsi3>
 8010208:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 801020c:	e0bffe17 	ldw	r2,-8(fp)
 8010210:	10002a26 	beq	r2,zero,80102bc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8010214:	e03ffc15 	stw	zero,-16(fp)
 8010218:	00001706 	br	8010278 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 801021c:	00a00034 	movhi	r2,32768
 8010220:	10bfffc4 	addi	r2,r2,-1
 8010224:	10bfffc4 	addi	r2,r2,-1
 8010228:	103ffe1e 	bne	r2,zero,8010224 <__alt_data_end+0xfc010224>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 801022c:	e13ffd17 	ldw	r4,-12(fp)
 8010230:	014003f4 	movhi	r5,15
 8010234:	29509004 	addi	r5,r5,16960
 8010238:	800c3280 	call	800c328 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 801023c:	0100bef4 	movhi	r4,763
 8010240:	213c2004 	addi	r4,r4,-3968
 8010244:	100b883a 	mov	r5,r2
 8010248:	800c3180 	call	800c318 <__udivsi3>
 801024c:	01200034 	movhi	r4,32768
 8010250:	213fffc4 	addi	r4,r4,-1
 8010254:	100b883a 	mov	r5,r2
 8010258:	800c3180 	call	800c318 <__udivsi3>
 801025c:	1007883a 	mov	r3,r2
 8010260:	e0bfff17 	ldw	r2,-4(fp)
 8010264:	10c5c83a 	sub	r2,r2,r3
 8010268:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 801026c:	e0bffc17 	ldw	r2,-16(fp)
 8010270:	10800044 	addi	r2,r2,1
 8010274:	e0bffc15 	stw	r2,-16(fp)
 8010278:	e0fffc17 	ldw	r3,-16(fp)
 801027c:	e0bffe17 	ldw	r2,-8(fp)
 8010280:	18bfe616 	blt	r3,r2,801021c <__alt_data_end+0xfc01021c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8010284:	e13ffd17 	ldw	r4,-12(fp)
 8010288:	014003f4 	movhi	r5,15
 801028c:	29509004 	addi	r5,r5,16960
 8010290:	800c3280 	call	800c328 <__mulsi3>
 8010294:	0100bef4 	movhi	r4,763
 8010298:	213c2004 	addi	r4,r4,-3968
 801029c:	100b883a 	mov	r5,r2
 80102a0:	800c3180 	call	800c318 <__udivsi3>
 80102a4:	1009883a 	mov	r4,r2
 80102a8:	e17fff17 	ldw	r5,-4(fp)
 80102ac:	800c3280 	call	800c328 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80102b0:	10bfffc4 	addi	r2,r2,-1
 80102b4:	103ffe1e 	bne	r2,zero,80102b0 <__alt_data_end+0xfc0102b0>
 80102b8:	00000d06 	br	80102f0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80102bc:	e13ffd17 	ldw	r4,-12(fp)
 80102c0:	014003f4 	movhi	r5,15
 80102c4:	29509004 	addi	r5,r5,16960
 80102c8:	800c3280 	call	800c328 <__mulsi3>
 80102cc:	0100bef4 	movhi	r4,763
 80102d0:	213c2004 	addi	r4,r4,-3968
 80102d4:	100b883a 	mov	r5,r2
 80102d8:	800c3180 	call	800c318 <__udivsi3>
 80102dc:	1009883a 	mov	r4,r2
 80102e0:	e17fff17 	ldw	r5,-4(fp)
 80102e4:	800c3280 	call	800c328 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 80102e8:	10bfffc4 	addi	r2,r2,-1
 80102ec:	00bffe16 	blt	zero,r2,80102e8 <__alt_data_end+0xfc0102e8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 80102f0:	0005883a 	mov	r2,zero
}
 80102f4:	e037883a 	mov	sp,fp
 80102f8:	dfc00117 	ldw	ra,4(sp)
 80102fc:	df000017 	ldw	fp,0(sp)
 8010300:	dec00204 	addi	sp,sp,8
 8010304:	f800283a 	ret

08010308 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8010308:	deffff04 	addi	sp,sp,-4
 801030c:	df000015 	stw	fp,0(sp)
 8010310:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8010314:	e037883a 	mov	sp,fp
 8010318:	df000017 	ldw	fp,0(sp)
 801031c:	dec00104 	addi	sp,sp,4
 8010320:	f800283a 	ret

08010324 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010324:	defffe04 	addi	sp,sp,-8
 8010328:	dfc00115 	stw	ra,4(sp)
 801032c:	df000015 	stw	fp,0(sp)
 8010330:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010334:	00820074 	movhi	r2,2049
 8010338:	108e2f04 	addi	r2,r2,14524
 801033c:	10800017 	ldw	r2,0(r2)
 8010340:	10000526 	beq	r2,zero,8010358 <alt_get_errno+0x34>
 8010344:	00820074 	movhi	r2,2049
 8010348:	108e2f04 	addi	r2,r2,14524
 801034c:	10800017 	ldw	r2,0(r2)
 8010350:	103ee83a 	callr	r2
 8010354:	00000206 	br	8010360 <alt_get_errno+0x3c>
 8010358:	00820074 	movhi	r2,2049
 801035c:	1094f604 	addi	r2,r2,21464
}
 8010360:	e037883a 	mov	sp,fp
 8010364:	dfc00117 	ldw	ra,4(sp)
 8010368:	df000017 	ldw	fp,0(sp)
 801036c:	dec00204 	addi	sp,sp,8
 8010370:	f800283a 	ret

08010374 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8010374:	defffa04 	addi	sp,sp,-24
 8010378:	dfc00515 	stw	ra,20(sp)
 801037c:	df000415 	stw	fp,16(sp)
 8010380:	df000404 	addi	fp,sp,16
 8010384:	e13ffe15 	stw	r4,-8(fp)
 8010388:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 801038c:	e0bffe17 	ldw	r2,-8(fp)
 8010390:	10000326 	beq	r2,zero,80103a0 <alt_dev_llist_insert+0x2c>
 8010394:	e0bffe17 	ldw	r2,-8(fp)
 8010398:	10800217 	ldw	r2,8(r2)
 801039c:	1000061e 	bne	r2,zero,80103b8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 80103a0:	80103240 	call	8010324 <alt_get_errno>
 80103a4:	1007883a 	mov	r3,r2
 80103a8:	00800584 	movi	r2,22
 80103ac:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 80103b0:	00bffa84 	movi	r2,-22
 80103b4:	00001306 	br	8010404 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80103b8:	e0bffe17 	ldw	r2,-8(fp)
 80103bc:	e0ffff17 	ldw	r3,-4(fp)
 80103c0:	e0fffc15 	stw	r3,-16(fp)
 80103c4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80103c8:	e0bffd17 	ldw	r2,-12(fp)
 80103cc:	e0fffc17 	ldw	r3,-16(fp)
 80103d0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80103d4:	e0bffc17 	ldw	r2,-16(fp)
 80103d8:	10c00017 	ldw	r3,0(r2)
 80103dc:	e0bffd17 	ldw	r2,-12(fp)
 80103e0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80103e4:	e0bffc17 	ldw	r2,-16(fp)
 80103e8:	10800017 	ldw	r2,0(r2)
 80103ec:	e0fffd17 	ldw	r3,-12(fp)
 80103f0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80103f4:	e0bffc17 	ldw	r2,-16(fp)
 80103f8:	e0fffd17 	ldw	r3,-12(fp)
 80103fc:	10c00015 	stw	r3,0(r2)

  return 0;  
 8010400:	0005883a 	mov	r2,zero
}
 8010404:	e037883a 	mov	sp,fp
 8010408:	dfc00117 	ldw	ra,4(sp)
 801040c:	df000017 	ldw	fp,0(sp)
 8010410:	dec00204 	addi	sp,sp,8
 8010414:	f800283a 	ret

08010418 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8010418:	defffd04 	addi	sp,sp,-12
 801041c:	dfc00215 	stw	ra,8(sp)
 8010420:	df000115 	stw	fp,4(sp)
 8010424:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010428:	00820074 	movhi	r2,2049
 801042c:	1084e304 	addi	r2,r2,5004
 8010430:	e0bfff15 	stw	r2,-4(fp)
 8010434:	00000606 	br	8010450 <_do_ctors+0x38>
        (*ctor) (); 
 8010438:	e0bfff17 	ldw	r2,-4(fp)
 801043c:	10800017 	ldw	r2,0(r2)
 8010440:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010444:	e0bfff17 	ldw	r2,-4(fp)
 8010448:	10bfff04 	addi	r2,r2,-4
 801044c:	e0bfff15 	stw	r2,-4(fp)
 8010450:	e0ffff17 	ldw	r3,-4(fp)
 8010454:	00820074 	movhi	r2,2049
 8010458:	1084e404 	addi	r2,r2,5008
 801045c:	18bff62e 	bgeu	r3,r2,8010438 <__alt_data_end+0xfc010438>
        (*ctor) (); 
}
 8010460:	e037883a 	mov	sp,fp
 8010464:	dfc00117 	ldw	ra,4(sp)
 8010468:	df000017 	ldw	fp,0(sp)
 801046c:	dec00204 	addi	sp,sp,8
 8010470:	f800283a 	ret

08010474 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8010474:	defffd04 	addi	sp,sp,-12
 8010478:	dfc00215 	stw	ra,8(sp)
 801047c:	df000115 	stw	fp,4(sp)
 8010480:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8010484:	00820074 	movhi	r2,2049
 8010488:	1084e304 	addi	r2,r2,5004
 801048c:	e0bfff15 	stw	r2,-4(fp)
 8010490:	00000606 	br	80104ac <_do_dtors+0x38>
        (*dtor) (); 
 8010494:	e0bfff17 	ldw	r2,-4(fp)
 8010498:	10800017 	ldw	r2,0(r2)
 801049c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80104a0:	e0bfff17 	ldw	r2,-4(fp)
 80104a4:	10bfff04 	addi	r2,r2,-4
 80104a8:	e0bfff15 	stw	r2,-4(fp)
 80104ac:	e0ffff17 	ldw	r3,-4(fp)
 80104b0:	00820074 	movhi	r2,2049
 80104b4:	1084e404 	addi	r2,r2,5008
 80104b8:	18bff62e 	bgeu	r3,r2,8010494 <__alt_data_end+0xfc010494>
        (*dtor) (); 
}
 80104bc:	e037883a 	mov	sp,fp
 80104c0:	dfc00117 	ldw	ra,4(sp)
 80104c4:	df000017 	ldw	fp,0(sp)
 80104c8:	dec00204 	addi	sp,sp,8
 80104cc:	f800283a 	ret

080104d0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80104d0:	deffff04 	addi	sp,sp,-4
 80104d4:	df000015 	stw	fp,0(sp)
 80104d8:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 80104dc:	e037883a 	mov	sp,fp
 80104e0:	df000017 	ldw	fp,0(sp)
 80104e4:	dec00104 	addi	sp,sp,4
 80104e8:	f800283a 	ret

080104ec <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80104ec:	defff904 	addi	sp,sp,-28
 80104f0:	dfc00615 	stw	ra,24(sp)
 80104f4:	df000515 	stw	fp,20(sp)
 80104f8:	df000504 	addi	fp,sp,20
 80104fc:	e13ffc15 	stw	r4,-16(fp)
 8010500:	e17ffd15 	stw	r5,-12(fp)
 8010504:	e1bffe15 	stw	r6,-8(fp)
 8010508:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 801050c:	e0800217 	ldw	r2,8(fp)
 8010510:	d8800015 	stw	r2,0(sp)
 8010514:	e13ffc17 	ldw	r4,-16(fp)
 8010518:	e17ffd17 	ldw	r5,-12(fp)
 801051c:	e1bffe17 	ldw	r6,-8(fp)
 8010520:	e1ffff17 	ldw	r7,-4(fp)
 8010524:	80106cc0 	call	80106cc <alt_iic_isr_register>
}  
 8010528:	e037883a 	mov	sp,fp
 801052c:	dfc00117 	ldw	ra,4(sp)
 8010530:	df000017 	ldw	fp,0(sp)
 8010534:	dec00204 	addi	sp,sp,8
 8010538:	f800283a 	ret

0801053c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 801053c:	defff904 	addi	sp,sp,-28
 8010540:	df000615 	stw	fp,24(sp)
 8010544:	df000604 	addi	fp,sp,24
 8010548:	e13ffe15 	stw	r4,-8(fp)
 801054c:	e17fff15 	stw	r5,-4(fp)
 8010550:	e0bfff17 	ldw	r2,-4(fp)
 8010554:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010558:	0005303a 	rdctl	r2,status
 801055c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010560:	e0fffb17 	ldw	r3,-20(fp)
 8010564:	00bfff84 	movi	r2,-2
 8010568:	1884703a 	and	r2,r3,r2
 801056c:	1001703a 	wrctl	status,r2
  
  return context;
 8010570:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8010574:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8010578:	e0bffa17 	ldw	r2,-24(fp)
 801057c:	00c00044 	movi	r3,1
 8010580:	1884983a 	sll	r2,r3,r2
 8010584:	1007883a 	mov	r3,r2
 8010588:	00820074 	movhi	r2,2049
 801058c:	1094fa04 	addi	r2,r2,21480
 8010590:	10800017 	ldw	r2,0(r2)
 8010594:	1886b03a 	or	r3,r3,r2
 8010598:	00820074 	movhi	r2,2049
 801059c:	1094fa04 	addi	r2,r2,21480
 80105a0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80105a4:	00820074 	movhi	r2,2049
 80105a8:	1094fa04 	addi	r2,r2,21480
 80105ac:	10800017 	ldw	r2,0(r2)
 80105b0:	100170fa 	wrctl	ienable,r2
 80105b4:	e0bffc17 	ldw	r2,-16(fp)
 80105b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80105bc:	e0bffd17 	ldw	r2,-12(fp)
 80105c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80105c4:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 80105c8:	0001883a 	nop
}
 80105cc:	e037883a 	mov	sp,fp
 80105d0:	df000017 	ldw	fp,0(sp)
 80105d4:	dec00104 	addi	sp,sp,4
 80105d8:	f800283a 	ret

080105dc <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80105dc:	defff904 	addi	sp,sp,-28
 80105e0:	df000615 	stw	fp,24(sp)
 80105e4:	df000604 	addi	fp,sp,24
 80105e8:	e13ffe15 	stw	r4,-8(fp)
 80105ec:	e17fff15 	stw	r5,-4(fp)
 80105f0:	e0bfff17 	ldw	r2,-4(fp)
 80105f4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80105f8:	0005303a 	rdctl	r2,status
 80105fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010600:	e0fffb17 	ldw	r3,-20(fp)
 8010604:	00bfff84 	movi	r2,-2
 8010608:	1884703a 	and	r2,r3,r2
 801060c:	1001703a 	wrctl	status,r2
  
  return context;
 8010610:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8010614:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8010618:	e0bffa17 	ldw	r2,-24(fp)
 801061c:	00c00044 	movi	r3,1
 8010620:	1884983a 	sll	r2,r3,r2
 8010624:	0084303a 	nor	r2,zero,r2
 8010628:	1007883a 	mov	r3,r2
 801062c:	00820074 	movhi	r2,2049
 8010630:	1094fa04 	addi	r2,r2,21480
 8010634:	10800017 	ldw	r2,0(r2)
 8010638:	1886703a 	and	r3,r3,r2
 801063c:	00820074 	movhi	r2,2049
 8010640:	1094fa04 	addi	r2,r2,21480
 8010644:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8010648:	00820074 	movhi	r2,2049
 801064c:	1094fa04 	addi	r2,r2,21480
 8010650:	10800017 	ldw	r2,0(r2)
 8010654:	100170fa 	wrctl	ienable,r2
 8010658:	e0bffc17 	ldw	r2,-16(fp)
 801065c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010660:	e0bffd17 	ldw	r2,-12(fp)
 8010664:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8010668:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 801066c:	0001883a 	nop
}
 8010670:	e037883a 	mov	sp,fp
 8010674:	df000017 	ldw	fp,0(sp)
 8010678:	dec00104 	addi	sp,sp,4
 801067c:	f800283a 	ret

08010680 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8010680:	defffc04 	addi	sp,sp,-16
 8010684:	df000315 	stw	fp,12(sp)
 8010688:	df000304 	addi	fp,sp,12
 801068c:	e13ffe15 	stw	r4,-8(fp)
 8010690:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8010694:	000530fa 	rdctl	r2,ienable
 8010698:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 801069c:	e0bfff17 	ldw	r2,-4(fp)
 80106a0:	00c00044 	movi	r3,1
 80106a4:	1884983a 	sll	r2,r3,r2
 80106a8:	1007883a 	mov	r3,r2
 80106ac:	e0bffd17 	ldw	r2,-12(fp)
 80106b0:	1884703a 	and	r2,r3,r2
 80106b4:	1004c03a 	cmpne	r2,r2,zero
 80106b8:	10803fcc 	andi	r2,r2,255
}
 80106bc:	e037883a 	mov	sp,fp
 80106c0:	df000017 	ldw	fp,0(sp)
 80106c4:	dec00104 	addi	sp,sp,4
 80106c8:	f800283a 	ret

080106cc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80106cc:	defff504 	addi	sp,sp,-44
 80106d0:	dfc00a15 	stw	ra,40(sp)
 80106d4:	df000915 	stw	fp,36(sp)
 80106d8:	df000904 	addi	fp,sp,36
 80106dc:	e13ffc15 	stw	r4,-16(fp)
 80106e0:	e17ffd15 	stw	r5,-12(fp)
 80106e4:	e1bffe15 	stw	r6,-8(fp)
 80106e8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 80106ec:	00bffa84 	movi	r2,-22
 80106f0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 80106f4:	e0bffd17 	ldw	r2,-12(fp)
 80106f8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 80106fc:	e0bff817 	ldw	r2,-32(fp)
 8010700:	10800808 	cmpgei	r2,r2,32
 8010704:	1000271e 	bne	r2,zero,80107a4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010708:	0005303a 	rdctl	r2,status
 801070c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010710:	e0fffa17 	ldw	r3,-24(fp)
 8010714:	00bfff84 	movi	r2,-2
 8010718:	1884703a 	and	r2,r3,r2
 801071c:	1001703a 	wrctl	status,r2
  
  return context;
 8010720:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8010724:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 8010728:	00820074 	movhi	r2,2049
 801072c:	10950704 	addi	r2,r2,21532
 8010730:	e0fff817 	ldw	r3,-32(fp)
 8010734:	180690fa 	slli	r3,r3,3
 8010738:	10c5883a 	add	r2,r2,r3
 801073c:	e0fffe17 	ldw	r3,-8(fp)
 8010740:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8010744:	00820074 	movhi	r2,2049
 8010748:	10950704 	addi	r2,r2,21532
 801074c:	e0fff817 	ldw	r3,-32(fp)
 8010750:	180690fa 	slli	r3,r3,3
 8010754:	10c5883a 	add	r2,r2,r3
 8010758:	10800104 	addi	r2,r2,4
 801075c:	e0ffff17 	ldw	r3,-4(fp)
 8010760:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8010764:	e0bffe17 	ldw	r2,-8(fp)
 8010768:	10000526 	beq	r2,zero,8010780 <alt_iic_isr_register+0xb4>
 801076c:	e0bff817 	ldw	r2,-32(fp)
 8010770:	e13ffc17 	ldw	r4,-16(fp)
 8010774:	100b883a 	mov	r5,r2
 8010778:	801053c0 	call	801053c <alt_ic_irq_enable>
 801077c:	00000406 	br	8010790 <alt_iic_isr_register+0xc4>
 8010780:	e0bff817 	ldw	r2,-32(fp)
 8010784:	e13ffc17 	ldw	r4,-16(fp)
 8010788:	100b883a 	mov	r5,r2
 801078c:	80105dc0 	call	80105dc <alt_ic_irq_disable>
 8010790:	e0bff715 	stw	r2,-36(fp)
 8010794:	e0bff917 	ldw	r2,-28(fp)
 8010798:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801079c:	e0bffb17 	ldw	r2,-20(fp)
 80107a0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 80107a4:	e0bff717 	ldw	r2,-36(fp)
}
 80107a8:	e037883a 	mov	sp,fp
 80107ac:	dfc00117 	ldw	ra,4(sp)
 80107b0:	df000017 	ldw	fp,0(sp)
 80107b4:	dec00204 	addi	sp,sp,8
 80107b8:	f800283a 	ret

080107bc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80107bc:	defff804 	addi	sp,sp,-32
 80107c0:	dfc00715 	stw	ra,28(sp)
 80107c4:	df000615 	stw	fp,24(sp)
 80107c8:	dc000515 	stw	r16,20(sp)
 80107cc:	df000604 	addi	fp,sp,24
 80107d0:	e13ffb15 	stw	r4,-20(fp)
 80107d4:	e17ffc15 	stw	r5,-16(fp)
 80107d8:	e1bffd15 	stw	r6,-12(fp)
 80107dc:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 80107e0:	e13ffc17 	ldw	r4,-16(fp)
 80107e4:	e17ffd17 	ldw	r5,-12(fp)
 80107e8:	e1bffe17 	ldw	r6,-8(fp)
 80107ec:	8010a580 	call	8010a58 <open>
 80107f0:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 80107f4:	e0bffa17 	ldw	r2,-24(fp)
 80107f8:	10002216 	blt	r2,zero,8010884 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 80107fc:	04020074 	movhi	r16,2049
 8010800:	8409ac04 	addi	r16,r16,9904
 8010804:	e0bffa17 	ldw	r2,-24(fp)
 8010808:	1009883a 	mov	r4,r2
 801080c:	01400304 	movi	r5,12
 8010810:	800c3280 	call	800c328 <__mulsi3>
 8010814:	8085883a 	add	r2,r16,r2
 8010818:	10c00017 	ldw	r3,0(r2)
 801081c:	e0bffb17 	ldw	r2,-20(fp)
 8010820:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8010824:	04020074 	movhi	r16,2049
 8010828:	8409ac04 	addi	r16,r16,9904
 801082c:	e0bffa17 	ldw	r2,-24(fp)
 8010830:	1009883a 	mov	r4,r2
 8010834:	01400304 	movi	r5,12
 8010838:	800c3280 	call	800c328 <__mulsi3>
 801083c:	8085883a 	add	r2,r16,r2
 8010840:	10800104 	addi	r2,r2,4
 8010844:	10c00017 	ldw	r3,0(r2)
 8010848:	e0bffb17 	ldw	r2,-20(fp)
 801084c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8010850:	04020074 	movhi	r16,2049
 8010854:	8409ac04 	addi	r16,r16,9904
 8010858:	e0bffa17 	ldw	r2,-24(fp)
 801085c:	1009883a 	mov	r4,r2
 8010860:	01400304 	movi	r5,12
 8010864:	800c3280 	call	800c328 <__mulsi3>
 8010868:	8085883a 	add	r2,r16,r2
 801086c:	10800204 	addi	r2,r2,8
 8010870:	10c00017 	ldw	r3,0(r2)
 8010874:	e0bffb17 	ldw	r2,-20(fp)
 8010878:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 801087c:	e13ffa17 	ldw	r4,-24(fp)
 8010880:	800f2c00 	call	800f2c0 <alt_release_fd>
  }
} 
 8010884:	e6ffff04 	addi	sp,fp,-4
 8010888:	dfc00217 	ldw	ra,8(sp)
 801088c:	df000117 	ldw	fp,4(sp)
 8010890:	dc000017 	ldw	r16,0(sp)
 8010894:	dec00304 	addi	sp,sp,12
 8010898:	f800283a 	ret

0801089c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 801089c:	defffb04 	addi	sp,sp,-20
 80108a0:	dfc00415 	stw	ra,16(sp)
 80108a4:	df000315 	stw	fp,12(sp)
 80108a8:	df000304 	addi	fp,sp,12
 80108ac:	e13ffd15 	stw	r4,-12(fp)
 80108b0:	e17ffe15 	stw	r5,-8(fp)
 80108b4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80108b8:	01020074 	movhi	r4,2049
 80108bc:	2109af04 	addi	r4,r4,9916
 80108c0:	e17ffd17 	ldw	r5,-12(fp)
 80108c4:	01800044 	movi	r6,1
 80108c8:	01c07fc4 	movi	r7,511
 80108cc:	80107bc0 	call	80107bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80108d0:	01020074 	movhi	r4,2049
 80108d4:	2109ac04 	addi	r4,r4,9904
 80108d8:	e17ffe17 	ldw	r5,-8(fp)
 80108dc:	000d883a 	mov	r6,zero
 80108e0:	01c07fc4 	movi	r7,511
 80108e4:	80107bc0 	call	80107bc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80108e8:	01020074 	movhi	r4,2049
 80108ec:	2109b204 	addi	r4,r4,9928
 80108f0:	e17fff17 	ldw	r5,-4(fp)
 80108f4:	01800044 	movi	r6,1
 80108f8:	01c07fc4 	movi	r7,511
 80108fc:	80107bc0 	call	80107bc <alt_open_fd>
}  
 8010900:	e037883a 	mov	sp,fp
 8010904:	dfc00117 	ldw	ra,4(sp)
 8010908:	df000017 	ldw	fp,0(sp)
 801090c:	dec00204 	addi	sp,sp,8
 8010910:	f800283a 	ret

08010914 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8010914:	defffe04 	addi	sp,sp,-8
 8010918:	dfc00115 	stw	ra,4(sp)
 801091c:	df000015 	stw	fp,0(sp)
 8010920:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010924:	00820074 	movhi	r2,2049
 8010928:	108e2f04 	addi	r2,r2,14524
 801092c:	10800017 	ldw	r2,0(r2)
 8010930:	10000526 	beq	r2,zero,8010948 <alt_get_errno+0x34>
 8010934:	00820074 	movhi	r2,2049
 8010938:	108e2f04 	addi	r2,r2,14524
 801093c:	10800017 	ldw	r2,0(r2)
 8010940:	103ee83a 	callr	r2
 8010944:	00000206 	br	8010950 <alt_get_errno+0x3c>
 8010948:	00820074 	movhi	r2,2049
 801094c:	1094f604 	addi	r2,r2,21464
}
 8010950:	e037883a 	mov	sp,fp
 8010954:	dfc00117 	ldw	ra,4(sp)
 8010958:	df000017 	ldw	fp,0(sp)
 801095c:	dec00204 	addi	sp,sp,8
 8010960:	f800283a 	ret

08010964 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8010964:	defffb04 	addi	sp,sp,-20
 8010968:	dfc00415 	stw	ra,16(sp)
 801096c:	df000315 	stw	fp,12(sp)
 8010970:	dc000215 	stw	r16,8(sp)
 8010974:	df000304 	addi	fp,sp,12
 8010978:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 801097c:	e0bffe17 	ldw	r2,-8(fp)
 8010980:	10800217 	ldw	r2,8(r2)
 8010984:	10d00034 	orhi	r3,r2,16384
 8010988:	e0bffe17 	ldw	r2,-8(fp)
 801098c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8010990:	e03ffd15 	stw	zero,-12(fp)
 8010994:	00002306 	br	8010a24 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8010998:	04020074 	movhi	r16,2049
 801099c:	8409ac04 	addi	r16,r16,9904
 80109a0:	e0bffd17 	ldw	r2,-12(fp)
 80109a4:	1009883a 	mov	r4,r2
 80109a8:	01400304 	movi	r5,12
 80109ac:	800c3280 	call	800c328 <__mulsi3>
 80109b0:	8085883a 	add	r2,r16,r2
 80109b4:	10c00017 	ldw	r3,0(r2)
 80109b8:	e0bffe17 	ldw	r2,-8(fp)
 80109bc:	10800017 	ldw	r2,0(r2)
 80109c0:	1880151e 	bne	r3,r2,8010a18 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80109c4:	04020074 	movhi	r16,2049
 80109c8:	8409ac04 	addi	r16,r16,9904
 80109cc:	e0bffd17 	ldw	r2,-12(fp)
 80109d0:	1009883a 	mov	r4,r2
 80109d4:	01400304 	movi	r5,12
 80109d8:	800c3280 	call	800c328 <__mulsi3>
 80109dc:	8085883a 	add	r2,r16,r2
 80109e0:	10800204 	addi	r2,r2,8
 80109e4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80109e8:	10000b0e 	bge	r2,zero,8010a18 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 80109ec:	e13ffd17 	ldw	r4,-12(fp)
 80109f0:	01400304 	movi	r5,12
 80109f4:	800c3280 	call	800c328 <__mulsi3>
 80109f8:	1007883a 	mov	r3,r2
 80109fc:	00820074 	movhi	r2,2049
 8010a00:	1089ac04 	addi	r2,r2,9904
 8010a04:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8010a08:	e0bffe17 	ldw	r2,-8(fp)
 8010a0c:	18800226 	beq	r3,r2,8010a18 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8010a10:	00bffcc4 	movi	r2,-13
 8010a14:	00000a06 	br	8010a40 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8010a18:	e0bffd17 	ldw	r2,-12(fp)
 8010a1c:	10800044 	addi	r2,r2,1
 8010a20:	e0bffd15 	stw	r2,-12(fp)
 8010a24:	00820074 	movhi	r2,2049
 8010a28:	108e2e04 	addi	r2,r2,14520
 8010a2c:	10800017 	ldw	r2,0(r2)
 8010a30:	1007883a 	mov	r3,r2
 8010a34:	e0bffd17 	ldw	r2,-12(fp)
 8010a38:	18bfd72e 	bgeu	r3,r2,8010998 <__alt_data_end+0xfc010998>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8010a3c:	0005883a 	mov	r2,zero
}
 8010a40:	e6ffff04 	addi	sp,fp,-4
 8010a44:	dfc00217 	ldw	ra,8(sp)
 8010a48:	df000117 	ldw	fp,4(sp)
 8010a4c:	dc000017 	ldw	r16,0(sp)
 8010a50:	dec00304 	addi	sp,sp,12
 8010a54:	f800283a 	ret

08010a58 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8010a58:	defff604 	addi	sp,sp,-40
 8010a5c:	dfc00915 	stw	ra,36(sp)
 8010a60:	df000815 	stw	fp,32(sp)
 8010a64:	df000804 	addi	fp,sp,32
 8010a68:	e13ffd15 	stw	r4,-12(fp)
 8010a6c:	e17ffe15 	stw	r5,-8(fp)
 8010a70:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8010a74:	00bfffc4 	movi	r2,-1
 8010a78:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8010a7c:	00bffb44 	movi	r2,-19
 8010a80:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8010a84:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8010a88:	e13ffd17 	ldw	r4,-12(fp)
 8010a8c:	01420074 	movhi	r5,2049
 8010a90:	294e2c04 	addi	r5,r5,14512
 8010a94:	8010d740 	call	8010d74 <alt_find_dev>
 8010a98:	e0bff815 	stw	r2,-32(fp)
 8010a9c:	e0bff817 	ldw	r2,-32(fp)
 8010aa0:	1000051e 	bne	r2,zero,8010ab8 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8010aa4:	e13ffd17 	ldw	r4,-12(fp)
 8010aa8:	8010e040 	call	8010e04 <alt_find_file>
 8010aac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8010ab0:	00800044 	movi	r2,1
 8010ab4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8010ab8:	e0bff817 	ldw	r2,-32(fp)
 8010abc:	10002b26 	beq	r2,zero,8010b6c <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8010ac0:	e13ff817 	ldw	r4,-32(fp)
 8010ac4:	8010f180 	call	8010f18 <alt_get_fd>
 8010ac8:	e0bff915 	stw	r2,-28(fp)
 8010acc:	e0bff917 	ldw	r2,-28(fp)
 8010ad0:	1000030e 	bge	r2,zero,8010ae0 <open+0x88>
    {
      status = index;
 8010ad4:	e0bff917 	ldw	r2,-28(fp)
 8010ad8:	e0bffa15 	stw	r2,-24(fp)
 8010adc:	00002506 	br	8010b74 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 8010ae0:	e13ff917 	ldw	r4,-28(fp)
 8010ae4:	01400304 	movi	r5,12
 8010ae8:	800c3280 	call	800c328 <__mulsi3>
 8010aec:	1007883a 	mov	r3,r2
 8010af0:	00820074 	movhi	r2,2049
 8010af4:	1089ac04 	addi	r2,r2,9904
 8010af8:	1885883a 	add	r2,r3,r2
 8010afc:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8010b00:	e0fffe17 	ldw	r3,-8(fp)
 8010b04:	00900034 	movhi	r2,16384
 8010b08:	10bfffc4 	addi	r2,r2,-1
 8010b0c:	1886703a 	and	r3,r3,r2
 8010b10:	e0bffc17 	ldw	r2,-16(fp)
 8010b14:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8010b18:	e0bffb17 	ldw	r2,-20(fp)
 8010b1c:	1000051e 	bne	r2,zero,8010b34 <open+0xdc>
 8010b20:	e13ffc17 	ldw	r4,-16(fp)
 8010b24:	80109640 	call	8010964 <alt_file_locked>
 8010b28:	e0bffa15 	stw	r2,-24(fp)
 8010b2c:	e0bffa17 	ldw	r2,-24(fp)
 8010b30:	10001016 	blt	r2,zero,8010b74 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8010b34:	e0bff817 	ldw	r2,-32(fp)
 8010b38:	10800317 	ldw	r2,12(r2)
 8010b3c:	10000826 	beq	r2,zero,8010b60 <open+0x108>
 8010b40:	e0bff817 	ldw	r2,-32(fp)
 8010b44:	10800317 	ldw	r2,12(r2)
 8010b48:	e13ffc17 	ldw	r4,-16(fp)
 8010b4c:	e17ffd17 	ldw	r5,-12(fp)
 8010b50:	e1bffe17 	ldw	r6,-8(fp)
 8010b54:	e1ffff17 	ldw	r7,-4(fp)
 8010b58:	103ee83a 	callr	r2
 8010b5c:	00000106 	br	8010b64 <open+0x10c>
 8010b60:	0005883a 	mov	r2,zero
 8010b64:	e0bffa15 	stw	r2,-24(fp)
 8010b68:	00000206 	br	8010b74 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8010b6c:	00bffb44 	movi	r2,-19
 8010b70:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8010b74:	e0bffa17 	ldw	r2,-24(fp)
 8010b78:	1000090e 	bge	r2,zero,8010ba0 <open+0x148>
  {
    alt_release_fd (index);  
 8010b7c:	e13ff917 	ldw	r4,-28(fp)
 8010b80:	800f2c00 	call	800f2c0 <alt_release_fd>
    ALT_ERRNO = -status;
 8010b84:	80109140 	call	8010914 <alt_get_errno>
 8010b88:	1007883a 	mov	r3,r2
 8010b8c:	e0bffa17 	ldw	r2,-24(fp)
 8010b90:	0085c83a 	sub	r2,zero,r2
 8010b94:	18800015 	stw	r2,0(r3)
    return -1;
 8010b98:	00bfffc4 	movi	r2,-1
 8010b9c:	00000106 	br	8010ba4 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 8010ba0:	e0bff917 	ldw	r2,-28(fp)
}
 8010ba4:	e037883a 	mov	sp,fp
 8010ba8:	dfc00117 	ldw	ra,4(sp)
 8010bac:	df000017 	ldw	fp,0(sp)
 8010bb0:	dec00204 	addi	sp,sp,8
 8010bb4:	f800283a 	ret

08010bb8 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8010bb8:	defffa04 	addi	sp,sp,-24
 8010bbc:	df000515 	stw	fp,20(sp)
 8010bc0:	df000504 	addi	fp,sp,20
 8010bc4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010bc8:	0005303a 	rdctl	r2,status
 8010bcc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010bd0:	e0fffc17 	ldw	r3,-16(fp)
 8010bd4:	00bfff84 	movi	r2,-2
 8010bd8:	1884703a 	and	r2,r3,r2
 8010bdc:	1001703a 	wrctl	status,r2
  
  return context;
 8010be0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8010be4:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8010be8:	e0bfff17 	ldw	r2,-4(fp)
 8010bec:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8010bf0:	e0bffd17 	ldw	r2,-12(fp)
 8010bf4:	10800017 	ldw	r2,0(r2)
 8010bf8:	e0fffd17 	ldw	r3,-12(fp)
 8010bfc:	18c00117 	ldw	r3,4(r3)
 8010c00:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8010c04:	e0bffd17 	ldw	r2,-12(fp)
 8010c08:	10800117 	ldw	r2,4(r2)
 8010c0c:	e0fffd17 	ldw	r3,-12(fp)
 8010c10:	18c00017 	ldw	r3,0(r3)
 8010c14:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8010c18:	e0bffd17 	ldw	r2,-12(fp)
 8010c1c:	e0fffd17 	ldw	r3,-12(fp)
 8010c20:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8010c24:	e0bffd17 	ldw	r2,-12(fp)
 8010c28:	e0fffd17 	ldw	r3,-12(fp)
 8010c2c:	10c00015 	stw	r3,0(r2)
 8010c30:	e0bffb17 	ldw	r2,-20(fp)
 8010c34:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010c38:	e0bffe17 	ldw	r2,-8(fp)
 8010c3c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8010c40:	e037883a 	mov	sp,fp
 8010c44:	df000017 	ldw	fp,0(sp)
 8010c48:	dec00104 	addi	sp,sp,4
 8010c4c:	f800283a 	ret

08010c50 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8010c50:	defffb04 	addi	sp,sp,-20
 8010c54:	dfc00415 	stw	ra,16(sp)
 8010c58:	df000315 	stw	fp,12(sp)
 8010c5c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8010c60:	d0a00e17 	ldw	r2,-32712(gp)
 8010c64:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8010c68:	d0a6d817 	ldw	r2,-25760(gp)
 8010c6c:	10800044 	addi	r2,r2,1
 8010c70:	d0a6d815 	stw	r2,-25760(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010c74:	00002e06 	br	8010d30 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8010c78:	e0bffd17 	ldw	r2,-12(fp)
 8010c7c:	10800017 	ldw	r2,0(r2)
 8010c80:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8010c84:	e0bffd17 	ldw	r2,-12(fp)
 8010c88:	10800403 	ldbu	r2,16(r2)
 8010c8c:	10803fcc 	andi	r2,r2,255
 8010c90:	10000426 	beq	r2,zero,8010ca4 <alt_tick+0x54>
 8010c94:	d0a6d817 	ldw	r2,-25760(gp)
 8010c98:	1000021e 	bne	r2,zero,8010ca4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8010c9c:	e0bffd17 	ldw	r2,-12(fp)
 8010ca0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8010ca4:	e0bffd17 	ldw	r2,-12(fp)
 8010ca8:	10800217 	ldw	r2,8(r2)
 8010cac:	d0e6d817 	ldw	r3,-25760(gp)
 8010cb0:	18801d36 	bltu	r3,r2,8010d28 <alt_tick+0xd8>
 8010cb4:	e0bffd17 	ldw	r2,-12(fp)
 8010cb8:	10800403 	ldbu	r2,16(r2)
 8010cbc:	10803fcc 	andi	r2,r2,255
 8010cc0:	1000191e 	bne	r2,zero,8010d28 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8010cc4:	e0bffd17 	ldw	r2,-12(fp)
 8010cc8:	10800317 	ldw	r2,12(r2)
 8010ccc:	e0fffd17 	ldw	r3,-12(fp)
 8010cd0:	18c00517 	ldw	r3,20(r3)
 8010cd4:	1809883a 	mov	r4,r3
 8010cd8:	103ee83a 	callr	r2
 8010cdc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8010ce0:	e0bfff17 	ldw	r2,-4(fp)
 8010ce4:	1000031e 	bne	r2,zero,8010cf4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8010ce8:	e13ffd17 	ldw	r4,-12(fp)
 8010cec:	8010bb80 	call	8010bb8 <alt_alarm_stop>
 8010cf0:	00000d06 	br	8010d28 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8010cf4:	e0bffd17 	ldw	r2,-12(fp)
 8010cf8:	10c00217 	ldw	r3,8(r2)
 8010cfc:	e0bfff17 	ldw	r2,-4(fp)
 8010d00:	1887883a 	add	r3,r3,r2
 8010d04:	e0bffd17 	ldw	r2,-12(fp)
 8010d08:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8010d0c:	e0bffd17 	ldw	r2,-12(fp)
 8010d10:	10c00217 	ldw	r3,8(r2)
 8010d14:	d0a6d817 	ldw	r2,-25760(gp)
 8010d18:	1880032e 	bgeu	r3,r2,8010d28 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8010d1c:	e0bffd17 	ldw	r2,-12(fp)
 8010d20:	00c00044 	movi	r3,1
 8010d24:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8010d28:	e0bffe17 	ldw	r2,-8(fp)
 8010d2c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8010d30:	e0fffd17 	ldw	r3,-12(fp)
 8010d34:	d0a00e04 	addi	r2,gp,-32712
 8010d38:	18bfcf1e 	bne	r3,r2,8010c78 <__alt_data_end+0xfc010c78>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8010d3c:	0001883a 	nop
}
 8010d40:	e037883a 	mov	sp,fp
 8010d44:	dfc00117 	ldw	ra,4(sp)
 8010d48:	df000017 	ldw	fp,0(sp)
 8010d4c:	dec00204 	addi	sp,sp,8
 8010d50:	f800283a 	ret

08010d54 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 8010d54:	deffff04 	addi	sp,sp,-4
 8010d58:	df000015 	stw	fp,0(sp)
 8010d5c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8010d60:	000170fa 	wrctl	ienable,zero
}
 8010d64:	e037883a 	mov	sp,fp
 8010d68:	df000017 	ldw	fp,0(sp)
 8010d6c:	dec00104 	addi	sp,sp,4
 8010d70:	f800283a 	ret

08010d74 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8010d74:	defffa04 	addi	sp,sp,-24
 8010d78:	dfc00515 	stw	ra,20(sp)
 8010d7c:	df000415 	stw	fp,16(sp)
 8010d80:	df000404 	addi	fp,sp,16
 8010d84:	e13ffe15 	stw	r4,-8(fp)
 8010d88:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8010d8c:	e0bfff17 	ldw	r2,-4(fp)
 8010d90:	10800017 	ldw	r2,0(r2)
 8010d94:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8010d98:	e13ffe17 	ldw	r4,-8(fp)
 8010d9c:	800231c0 	call	800231c <strlen>
 8010da0:	10800044 	addi	r2,r2,1
 8010da4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010da8:	00000d06 	br	8010de0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8010dac:	e0bffc17 	ldw	r2,-16(fp)
 8010db0:	10c00217 	ldw	r3,8(r2)
 8010db4:	e0bffd17 	ldw	r2,-12(fp)
 8010db8:	1809883a 	mov	r4,r3
 8010dbc:	e17ffe17 	ldw	r5,-8(fp)
 8010dc0:	100d883a 	mov	r6,r2
 8010dc4:	80110380 	call	8011038 <memcmp>
 8010dc8:	1000021e 	bne	r2,zero,8010dd4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8010dcc:	e0bffc17 	ldw	r2,-16(fp)
 8010dd0:	00000706 	br	8010df0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8010dd4:	e0bffc17 	ldw	r2,-16(fp)
 8010dd8:	10800017 	ldw	r2,0(r2)
 8010ddc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8010de0:	e0fffc17 	ldw	r3,-16(fp)
 8010de4:	e0bfff17 	ldw	r2,-4(fp)
 8010de8:	18bff01e 	bne	r3,r2,8010dac <__alt_data_end+0xfc010dac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8010dec:	0005883a 	mov	r2,zero
}
 8010df0:	e037883a 	mov	sp,fp
 8010df4:	dfc00117 	ldw	ra,4(sp)
 8010df8:	df000017 	ldw	fp,0(sp)
 8010dfc:	dec00204 	addi	sp,sp,8
 8010e00:	f800283a 	ret

08010e04 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8010e04:	defffb04 	addi	sp,sp,-20
 8010e08:	dfc00415 	stw	ra,16(sp)
 8010e0c:	df000315 	stw	fp,12(sp)
 8010e10:	df000304 	addi	fp,sp,12
 8010e14:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8010e18:	00820074 	movhi	r2,2049
 8010e1c:	108e2a04 	addi	r2,r2,14504
 8010e20:	10800017 	ldw	r2,0(r2)
 8010e24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8010e28:	00003106 	br	8010ef0 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 8010e2c:	e0bffd17 	ldw	r2,-12(fp)
 8010e30:	10800217 	ldw	r2,8(r2)
 8010e34:	1009883a 	mov	r4,r2
 8010e38:	800231c0 	call	800231c <strlen>
 8010e3c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8010e40:	e0bffd17 	ldw	r2,-12(fp)
 8010e44:	10c00217 	ldw	r3,8(r2)
 8010e48:	e0bffe17 	ldw	r2,-8(fp)
 8010e4c:	10bfffc4 	addi	r2,r2,-1
 8010e50:	1885883a 	add	r2,r3,r2
 8010e54:	10800003 	ldbu	r2,0(r2)
 8010e58:	10803fcc 	andi	r2,r2,255
 8010e5c:	1080201c 	xori	r2,r2,128
 8010e60:	10bfe004 	addi	r2,r2,-128
 8010e64:	10800bd8 	cmpnei	r2,r2,47
 8010e68:	1000031e 	bne	r2,zero,8010e78 <alt_find_file+0x74>
    {
      len -= 1;
 8010e6c:	e0bffe17 	ldw	r2,-8(fp)
 8010e70:	10bfffc4 	addi	r2,r2,-1
 8010e74:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8010e78:	e0bffe17 	ldw	r2,-8(fp)
 8010e7c:	e0ffff17 	ldw	r3,-4(fp)
 8010e80:	1885883a 	add	r2,r3,r2
 8010e84:	10800003 	ldbu	r2,0(r2)
 8010e88:	10803fcc 	andi	r2,r2,255
 8010e8c:	1080201c 	xori	r2,r2,128
 8010e90:	10bfe004 	addi	r2,r2,-128
 8010e94:	10800be0 	cmpeqi	r2,r2,47
 8010e98:	1000081e 	bne	r2,zero,8010ebc <alt_find_file+0xb8>
 8010e9c:	e0bffe17 	ldw	r2,-8(fp)
 8010ea0:	e0ffff17 	ldw	r3,-4(fp)
 8010ea4:	1885883a 	add	r2,r3,r2
 8010ea8:	10800003 	ldbu	r2,0(r2)
 8010eac:	10803fcc 	andi	r2,r2,255
 8010eb0:	1080201c 	xori	r2,r2,128
 8010eb4:	10bfe004 	addi	r2,r2,-128
 8010eb8:	10000a1e 	bne	r2,zero,8010ee4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 8010ebc:	e0bffd17 	ldw	r2,-12(fp)
 8010ec0:	10c00217 	ldw	r3,8(r2)
 8010ec4:	e0bffe17 	ldw	r2,-8(fp)
 8010ec8:	1809883a 	mov	r4,r3
 8010ecc:	e17fff17 	ldw	r5,-4(fp)
 8010ed0:	100d883a 	mov	r6,r2
 8010ed4:	80110380 	call	8011038 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8010ed8:	1000021e 	bne	r2,zero,8010ee4 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8010edc:	e0bffd17 	ldw	r2,-12(fp)
 8010ee0:	00000806 	br	8010f04 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 8010ee4:	e0bffd17 	ldw	r2,-12(fp)
 8010ee8:	10800017 	ldw	r2,0(r2)
 8010eec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8010ef0:	e0fffd17 	ldw	r3,-12(fp)
 8010ef4:	00820074 	movhi	r2,2049
 8010ef8:	108e2a04 	addi	r2,r2,14504
 8010efc:	18bfcb1e 	bne	r3,r2,8010e2c <__alt_data_end+0xfc010e2c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8010f00:	0005883a 	mov	r2,zero
}
 8010f04:	e037883a 	mov	sp,fp
 8010f08:	dfc00117 	ldw	ra,4(sp)
 8010f0c:	df000017 	ldw	fp,0(sp)
 8010f10:	dec00204 	addi	sp,sp,8
 8010f14:	f800283a 	ret

08010f18 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8010f18:	defffa04 	addi	sp,sp,-24
 8010f1c:	dfc00515 	stw	ra,20(sp)
 8010f20:	df000415 	stw	fp,16(sp)
 8010f24:	dc000315 	stw	r16,12(sp)
 8010f28:	df000404 	addi	fp,sp,16
 8010f2c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 8010f30:	00bffa04 	movi	r2,-24
 8010f34:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8010f38:	e03ffc15 	stw	zero,-16(fp)
 8010f3c:	00002106 	br	8010fc4 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 8010f40:	04020074 	movhi	r16,2049
 8010f44:	8409ac04 	addi	r16,r16,9904
 8010f48:	e0bffc17 	ldw	r2,-16(fp)
 8010f4c:	1009883a 	mov	r4,r2
 8010f50:	01400304 	movi	r5,12
 8010f54:	800c3280 	call	800c328 <__mulsi3>
 8010f58:	8085883a 	add	r2,r16,r2
 8010f5c:	10800017 	ldw	r2,0(r2)
 8010f60:	1000151e 	bne	r2,zero,8010fb8 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 8010f64:	04020074 	movhi	r16,2049
 8010f68:	8409ac04 	addi	r16,r16,9904
 8010f6c:	e0bffc17 	ldw	r2,-16(fp)
 8010f70:	1009883a 	mov	r4,r2
 8010f74:	01400304 	movi	r5,12
 8010f78:	800c3280 	call	800c328 <__mulsi3>
 8010f7c:	8085883a 	add	r2,r16,r2
 8010f80:	e0fffe17 	ldw	r3,-8(fp)
 8010f84:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8010f88:	00820074 	movhi	r2,2049
 8010f8c:	108e2e04 	addi	r2,r2,14520
 8010f90:	10c00017 	ldw	r3,0(r2)
 8010f94:	e0bffc17 	ldw	r2,-16(fp)
 8010f98:	1880040e 	bge	r3,r2,8010fac <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 8010f9c:	00820074 	movhi	r2,2049
 8010fa0:	108e2e04 	addi	r2,r2,14520
 8010fa4:	e0fffc17 	ldw	r3,-16(fp)
 8010fa8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 8010fac:	e0bffc17 	ldw	r2,-16(fp)
 8010fb0:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 8010fb4:	00000606 	br	8010fd0 <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8010fb8:	e0bffc17 	ldw	r2,-16(fp)
 8010fbc:	10800044 	addi	r2,r2,1
 8010fc0:	e0bffc15 	stw	r2,-16(fp)
 8010fc4:	e0bffc17 	ldw	r2,-16(fp)
 8010fc8:	10800810 	cmplti	r2,r2,32
 8010fcc:	103fdc1e 	bne	r2,zero,8010f40 <__alt_data_end+0xfc010f40>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8010fd0:	e0bffd17 	ldw	r2,-12(fp)
}
 8010fd4:	e6ffff04 	addi	sp,fp,-4
 8010fd8:	dfc00217 	ldw	ra,8(sp)
 8010fdc:	df000117 	ldw	fp,4(sp)
 8010fe0:	dc000017 	ldw	r16,0(sp)
 8010fe4:	dec00304 	addi	sp,sp,12
 8010fe8:	f800283a 	ret

08010fec <atexit>:
 8010fec:	200b883a 	mov	r5,r4
 8010ff0:	000d883a 	mov	r6,zero
 8010ff4:	0009883a 	mov	r4,zero
 8010ff8:	000f883a 	mov	r7,zero
 8010ffc:	80110b41 	jmpi	80110b4 <__register_exitproc>

08011000 <exit>:
 8011000:	defffe04 	addi	sp,sp,-8
 8011004:	000b883a 	mov	r5,zero
 8011008:	dc000015 	stw	r16,0(sp)
 801100c:	dfc00115 	stw	ra,4(sp)
 8011010:	2021883a 	mov	r16,r4
 8011014:	80111c80 	call	80111c8 <__call_exitprocs>
 8011018:	00820074 	movhi	r2,2049
 801101c:	108e2404 	addi	r2,r2,14480
 8011020:	11000017 	ldw	r4,0(r2)
 8011024:	20800f17 	ldw	r2,60(r4)
 8011028:	10000126 	beq	r2,zero,8011030 <exit+0x30>
 801102c:	103ee83a 	callr	r2
 8011030:	8009883a 	mov	r4,r16
 8011034:	801135c0 	call	801135c <_exit>

08011038 <memcmp>:
 8011038:	01c000c4 	movi	r7,3
 801103c:	3980192e 	bgeu	r7,r6,80110a4 <memcmp+0x6c>
 8011040:	2144b03a 	or	r2,r4,r5
 8011044:	11c4703a 	and	r2,r2,r7
 8011048:	10000f26 	beq	r2,zero,8011088 <memcmp+0x50>
 801104c:	20800003 	ldbu	r2,0(r4)
 8011050:	28c00003 	ldbu	r3,0(r5)
 8011054:	10c0151e 	bne	r2,r3,80110ac <memcmp+0x74>
 8011058:	31bfff84 	addi	r6,r6,-2
 801105c:	01ffffc4 	movi	r7,-1
 8011060:	00000406 	br	8011074 <memcmp+0x3c>
 8011064:	20800003 	ldbu	r2,0(r4)
 8011068:	28c00003 	ldbu	r3,0(r5)
 801106c:	31bfffc4 	addi	r6,r6,-1
 8011070:	10c00e1e 	bne	r2,r3,80110ac <memcmp+0x74>
 8011074:	21000044 	addi	r4,r4,1
 8011078:	29400044 	addi	r5,r5,1
 801107c:	31fff91e 	bne	r6,r7,8011064 <__alt_data_end+0xfc011064>
 8011080:	0005883a 	mov	r2,zero
 8011084:	f800283a 	ret
 8011088:	20c00017 	ldw	r3,0(r4)
 801108c:	28800017 	ldw	r2,0(r5)
 8011090:	1880041e 	bne	r3,r2,80110a4 <memcmp+0x6c>
 8011094:	31bfff04 	addi	r6,r6,-4
 8011098:	21000104 	addi	r4,r4,4
 801109c:	29400104 	addi	r5,r5,4
 80110a0:	39bff936 	bltu	r7,r6,8011088 <__alt_data_end+0xfc011088>
 80110a4:	303fe91e 	bne	r6,zero,801104c <__alt_data_end+0xfc01104c>
 80110a8:	003ff506 	br	8011080 <__alt_data_end+0xfc011080>
 80110ac:	10c5c83a 	sub	r2,r2,r3
 80110b0:	f800283a 	ret

080110b4 <__register_exitproc>:
 80110b4:	00820074 	movhi	r2,2049
 80110b8:	defffa04 	addi	sp,sp,-24
 80110bc:	108e2404 	addi	r2,r2,14480
 80110c0:	dc000315 	stw	r16,12(sp)
 80110c4:	14000017 	ldw	r16,0(r2)
 80110c8:	dc400415 	stw	r17,16(sp)
 80110cc:	dfc00515 	stw	ra,20(sp)
 80110d0:	80805217 	ldw	r2,328(r16)
 80110d4:	2023883a 	mov	r17,r4
 80110d8:	10003626 	beq	r2,zero,80111b4 <__register_exitproc+0x100>
 80110dc:	10c00117 	ldw	r3,4(r2)
 80110e0:	010007c4 	movi	r4,31
 80110e4:	20c00e16 	blt	r4,r3,8011120 <__register_exitproc+0x6c>
 80110e8:	1a400044 	addi	r9,r3,1
 80110ec:	8800211e 	bne	r17,zero,8011174 <__register_exitproc+0xc0>
 80110f0:	18c00084 	addi	r3,r3,2
 80110f4:	18c7883a 	add	r3,r3,r3
 80110f8:	18c7883a 	add	r3,r3,r3
 80110fc:	12400115 	stw	r9,4(r2)
 8011100:	10c7883a 	add	r3,r2,r3
 8011104:	19400015 	stw	r5,0(r3)
 8011108:	0005883a 	mov	r2,zero
 801110c:	dfc00517 	ldw	ra,20(sp)
 8011110:	dc400417 	ldw	r17,16(sp)
 8011114:	dc000317 	ldw	r16,12(sp)
 8011118:	dec00604 	addi	sp,sp,24
 801111c:	f800283a 	ret
 8011120:	00800034 	movhi	r2,0
 8011124:	10800004 	addi	r2,r2,0
 8011128:	10002526 	beq	r2,zero,80111c0 <__register_exitproc+0x10c>
 801112c:	01006404 	movi	r4,400
 8011130:	d9400015 	stw	r5,0(sp)
 8011134:	d9800115 	stw	r6,4(sp)
 8011138:	d9c00215 	stw	r7,8(sp)
 801113c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8011140:	d9400017 	ldw	r5,0(sp)
 8011144:	d9800117 	ldw	r6,4(sp)
 8011148:	d9c00217 	ldw	r7,8(sp)
 801114c:	10001c26 	beq	r2,zero,80111c0 <__register_exitproc+0x10c>
 8011150:	80c05217 	ldw	r3,328(r16)
 8011154:	10000115 	stw	zero,4(r2)
 8011158:	02400044 	movi	r9,1
 801115c:	10c00015 	stw	r3,0(r2)
 8011160:	80805215 	stw	r2,328(r16)
 8011164:	10006215 	stw	zero,392(r2)
 8011168:	10006315 	stw	zero,396(r2)
 801116c:	0007883a 	mov	r3,zero
 8011170:	883fdf26 	beq	r17,zero,80110f0 <__alt_data_end+0xfc0110f0>
 8011174:	18d1883a 	add	r8,r3,r3
 8011178:	4211883a 	add	r8,r8,r8
 801117c:	1211883a 	add	r8,r2,r8
 8011180:	41802215 	stw	r6,136(r8)
 8011184:	01000044 	movi	r4,1
 8011188:	11806217 	ldw	r6,392(r2)
 801118c:	20c8983a 	sll	r4,r4,r3
 8011190:	310cb03a 	or	r6,r6,r4
 8011194:	11806215 	stw	r6,392(r2)
 8011198:	41c04215 	stw	r7,264(r8)
 801119c:	01800084 	movi	r6,2
 80111a0:	89bfd31e 	bne	r17,r6,80110f0 <__alt_data_end+0xfc0110f0>
 80111a4:	11806317 	ldw	r6,396(r2)
 80111a8:	3108b03a 	or	r4,r6,r4
 80111ac:	11006315 	stw	r4,396(r2)
 80111b0:	003fcf06 	br	80110f0 <__alt_data_end+0xfc0110f0>
 80111b4:	80805304 	addi	r2,r16,332
 80111b8:	80805215 	stw	r2,328(r16)
 80111bc:	003fc706 	br	80110dc <__alt_data_end+0xfc0110dc>
 80111c0:	00bfffc4 	movi	r2,-1
 80111c4:	003fd106 	br	801110c <__alt_data_end+0xfc01110c>

080111c8 <__call_exitprocs>:
 80111c8:	00820074 	movhi	r2,2049
 80111cc:	108e2404 	addi	r2,r2,14480
 80111d0:	10800017 	ldw	r2,0(r2)
 80111d4:	defff404 	addi	sp,sp,-48
 80111d8:	dd800815 	stw	r22,32(sp)
 80111dc:	d8800015 	stw	r2,0(sp)
 80111e0:	10805204 	addi	r2,r2,328
 80111e4:	dd000615 	stw	r20,24(sp)
 80111e8:	dc800415 	stw	r18,16(sp)
 80111ec:	dfc00b15 	stw	ra,44(sp)
 80111f0:	df000a15 	stw	fp,40(sp)
 80111f4:	ddc00915 	stw	r23,36(sp)
 80111f8:	dd400715 	stw	r21,28(sp)
 80111fc:	dcc00515 	stw	r19,20(sp)
 8011200:	dc400315 	stw	r17,12(sp)
 8011204:	dc000215 	stw	r16,8(sp)
 8011208:	2025883a 	mov	r18,r4
 801120c:	2829883a 	mov	r20,r5
 8011210:	d8800115 	stw	r2,4(sp)
 8011214:	05bfffc4 	movi	r22,-1
 8011218:	d8800017 	ldw	r2,0(sp)
 801121c:	14c05217 	ldw	r19,328(r2)
 8011220:	98001d26 	beq	r19,zero,8011298 <__call_exitprocs+0xd0>
 8011224:	dd400117 	ldw	r21,4(sp)
 8011228:	98800117 	ldw	r2,4(r19)
 801122c:	173fffc4 	addi	fp,r2,-1
 8011230:	e0000d16 	blt	fp,zero,8011268 <__call_exitprocs+0xa0>
 8011234:	14000044 	addi	r16,r2,1
 8011238:	8421883a 	add	r16,r16,r16
 801123c:	8421883a 	add	r16,r16,r16
 8011240:	84402004 	addi	r17,r16,128
 8011244:	9c63883a 	add	r17,r19,r17
 8011248:	9c21883a 	add	r16,r19,r16
 801124c:	a0001e26 	beq	r20,zero,80112c8 <__call_exitprocs+0x100>
 8011250:	80804017 	ldw	r2,256(r16)
 8011254:	15001c26 	beq	r2,r20,80112c8 <__call_exitprocs+0x100>
 8011258:	e73fffc4 	addi	fp,fp,-1
 801125c:	843fff04 	addi	r16,r16,-4
 8011260:	8c7fff04 	addi	r17,r17,-4
 8011264:	e5bff91e 	bne	fp,r22,801124c <__alt_data_end+0xfc01124c>
 8011268:	00800034 	movhi	r2,0
 801126c:	10800004 	addi	r2,r2,0
 8011270:	10000926 	beq	r2,zero,8011298 <__call_exitprocs+0xd0>
 8011274:	98800117 	ldw	r2,4(r19)
 8011278:	1000311e 	bne	r2,zero,8011340 <__call_exitprocs+0x178>
 801127c:	98800017 	ldw	r2,0(r19)
 8011280:	10003426 	beq	r2,zero,8011354 <__call_exitprocs+0x18c>
 8011284:	9809883a 	mov	r4,r19
 8011288:	a8800015 	stw	r2,0(r21)
 801128c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 8011290:	acc00017 	ldw	r19,0(r21)
 8011294:	983fe41e 	bne	r19,zero,8011228 <__alt_data_end+0xfc011228>
 8011298:	dfc00b17 	ldw	ra,44(sp)
 801129c:	df000a17 	ldw	fp,40(sp)
 80112a0:	ddc00917 	ldw	r23,36(sp)
 80112a4:	dd800817 	ldw	r22,32(sp)
 80112a8:	dd400717 	ldw	r21,28(sp)
 80112ac:	dd000617 	ldw	r20,24(sp)
 80112b0:	dcc00517 	ldw	r19,20(sp)
 80112b4:	dc800417 	ldw	r18,16(sp)
 80112b8:	dc400317 	ldw	r17,12(sp)
 80112bc:	dc000217 	ldw	r16,8(sp)
 80112c0:	dec00c04 	addi	sp,sp,48
 80112c4:	f800283a 	ret
 80112c8:	98800117 	ldw	r2,4(r19)
 80112cc:	80c00017 	ldw	r3,0(r16)
 80112d0:	10bfffc4 	addi	r2,r2,-1
 80112d4:	17001526 	beq	r2,fp,801132c <__call_exitprocs+0x164>
 80112d8:	80000015 	stw	zero,0(r16)
 80112dc:	183fde26 	beq	r3,zero,8011258 <__alt_data_end+0xfc011258>
 80112e0:	00800044 	movi	r2,1
 80112e4:	1708983a 	sll	r4,r2,fp
 80112e8:	98806217 	ldw	r2,392(r19)
 80112ec:	9dc00117 	ldw	r23,4(r19)
 80112f0:	2084703a 	and	r2,r4,r2
 80112f4:	1000061e 	bne	r2,zero,8011310 <__call_exitprocs+0x148>
 80112f8:	183ee83a 	callr	r3
 80112fc:	98800117 	ldw	r2,4(r19)
 8011300:	15ffc51e 	bne	r2,r23,8011218 <__alt_data_end+0xfc011218>
 8011304:	a8800017 	ldw	r2,0(r21)
 8011308:	14ffd326 	beq	r2,r19,8011258 <__alt_data_end+0xfc011258>
 801130c:	003fc206 	br	8011218 <__alt_data_end+0xfc011218>
 8011310:	98806317 	ldw	r2,396(r19)
 8011314:	2084703a 	and	r2,r4,r2
 8011318:	1000061e 	bne	r2,zero,8011334 <__call_exitprocs+0x16c>
 801131c:	89400017 	ldw	r5,0(r17)
 8011320:	9009883a 	mov	r4,r18
 8011324:	183ee83a 	callr	r3
 8011328:	003ff406 	br	80112fc <__alt_data_end+0xfc0112fc>
 801132c:	9f000115 	stw	fp,4(r19)
 8011330:	003fea06 	br	80112dc <__alt_data_end+0xfc0112dc>
 8011334:	89000017 	ldw	r4,0(r17)
 8011338:	183ee83a 	callr	r3
 801133c:	003fef06 	br	80112fc <__alt_data_end+0xfc0112fc>
 8011340:	98800017 	ldw	r2,0(r19)
 8011344:	982b883a 	mov	r21,r19
 8011348:	1027883a 	mov	r19,r2
 801134c:	983fb61e 	bne	r19,zero,8011228 <__alt_data_end+0xfc011228>
 8011350:	003fd106 	br	8011298 <__alt_data_end+0xfc011298>
 8011354:	0005883a 	mov	r2,zero
 8011358:	003ffa06 	br	8011344 <__alt_data_end+0xfc011344>

0801135c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 801135c:	defffd04 	addi	sp,sp,-12
 8011360:	df000215 	stw	fp,8(sp)
 8011364:	df000204 	addi	fp,sp,8
 8011368:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 801136c:	0001883a 	nop
 8011370:	e0bfff17 	ldw	r2,-4(fp)
 8011374:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8011378:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 801137c:	10000226 	beq	r2,zero,8011388 <_exit+0x2c>
    ALT_SIM_FAIL();
 8011380:	002af070 	cmpltui	zero,zero,43969
 8011384:	00000106 	br	801138c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8011388:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 801138c:	003fff06 	br	801138c <__alt_data_end+0xfc01138c>
